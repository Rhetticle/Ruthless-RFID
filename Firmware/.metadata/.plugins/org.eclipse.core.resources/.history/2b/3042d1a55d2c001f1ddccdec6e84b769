/*
 * ruthlessfs.c
 *
 *  Created on: 17 Jun. 2024
 *      Author: rhett
 */

/**
 * ******************************Ruthless File System***********************************
 *
 * File system used by Ruthless RFID to store data of read cards. Each entry occupies a 128kB block (smallest erasable block size).
 *
 * Page 1 - Metadata (Card type, size, read protection)
 * Page 2 - Card name
 * Page 3 - Contents
 * */
#include "stm32f4xx.h"
#include "W25N01GVZEIG.h"
#include "ruthlessfs.h"
#include <string.h>

/**
 * Enter a card into the file system
 *
 * @param card - Card to store
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card) {
	uint16_t free_block = (uint16_t)mem_find_free_block();
	enter_metadata(card, free_block);

	if (MEM_WRITE(free_block + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
		return RFS_WRITE_ERROR;
	}

	if (MEM_WRITE(free_block + DATAPAGE_OFFSET, 0x0000, card->contents, sizeof(card->contents)) != HAL_OK) {
		return RFS_WRITE_ERROR;
	}

	return RSF_OK;

}

/**
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_addr - Block start address
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_addr) {
	uint8_t card_size = sizeof(card->contents);
	uint8_t read_protected = card->read_protected;
	uint8_t* metadata = malloc(sizeof(card_size)+sizeof(read_protected)+strlen(card->type));

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
	metadata[strlen(card->type) + 1] = card_size;
	metadata[strlen(card->type) + 2] = read_protected;

	if (MEM_WRITE(block_addr, 0x0000, metadata, sizeof(metadata)) != HAL_OK) {
		return RFS_WRITE_ERROR;
	}

	return RFS_OK;
}
