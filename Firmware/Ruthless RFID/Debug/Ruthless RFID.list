
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f580  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800f720  0800f720  0001f720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd80  0800fd80  0002067c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd80  0800fd80  0001fd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd88  0800fd88  0002067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd88  0800fd88  0001fd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd8c  0800fd8c  0001fd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000067c  20000000  0800fd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  2000067c  0801040c  0002067c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c24  0801040c  00026c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274a4  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000584f  00000000  00000000  00047b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  0004d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea0  00000000  00000000  0004f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbb1  00000000  00000000  00051310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a93  00000000  00000000  0006dec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec7e  00000000  00000000  00094954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001335d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e64  00000000  00000000  00133624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000067c 	.word	0x2000067c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f708 	.word	0x0800f708

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000680 	.word	0x20000680
 80001dc:	0800f708 	.word	0x0800f708

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f003 f954 	bl	800386c <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000698 	.word	0x20000698

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f003 fa2f 	bl	8003a60 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000698 	.word	0x20000698

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f003 f911 	bl	800386c <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 fd09 	bl	800306c <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000698 	.word	0x20000698

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f003 f9dd 	bl	8003a60 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 fcdb 	bl	800306c <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000698 	.word	0x20000698

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 fc6b 	bl	800306c <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fee5 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fee0 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 fc3b 	bl	800306c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fed8 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 fc33 	bl	800306c <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 fbdd 	bl	800306c <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000908:	f242 0393 	movw	r3, #8339	; 0x2093
 800090c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	200e      	movs	r0, #14
 8000912:	f7ff fef8 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000916:	f107 000c 	add.w	r0, r7, #12
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2305      	movs	r3, #5
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	2102      	movs	r1, #2
 8000924:	f7ff ff8a 	bl	800083c <MFRC_TRANSCEIVE>
 8000928:	4603      	mov	r3, r0
 800092a:	2bcc      	cmp	r3, #204	; 0xcc
 800092c:	d001      	beq.n	8000932 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 800092e:	23aa      	movs	r3, #170	; 0xaa
 8000930:	e000      	b.n	8000934 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000932:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000946:	f247 0393 	movw	r3, #28819	; 0x7093
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	3302      	adds	r3, #2
 800095c:	2205      	movs	r2, #5
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f00e fa47 	bl	800edf4 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000966:	f107 0208 	add.w	r2, r7, #8
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2107      	movs	r1, #7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fef1 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	3307      	adds	r3, #7
 800097c:	893a      	ldrh	r2, [r7, #8]
 800097e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000980:	f107 000c 	add.w	r0, r7, #12
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2303      	movs	r3, #3
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	2109      	movs	r1, #9
 800098e:	f7ff ff55 	bl	800083c <MFRC_TRANSCEIVE>
 8000992:	4603      	mov	r3, r0
 8000994:	2bcc      	cmp	r3, #204	; 0xcc
 8000996:	d001      	beq.n	800099c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000998:	23aa      	movs	r3, #170	; 0xaa
 800099a:	e000      	b.n	800099e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800099c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 80009ae:	f242 0395 	movw	r3, #8341	; 0x2095
 80009b2:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	200e      	movs	r0, #14
 80009b8:	f7ff fea5 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009bc:	f107 000c 	add.w	r0, r7, #12
 80009c0:	2300      	movs	r3, #0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2305      	movs	r3, #5
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	2102      	movs	r1, #2
 80009ca:	f7ff ff37 	bl	800083c <MFRC_TRANSCEIVE>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2bcc      	cmp	r3, #204	; 0xcc
 80009d2:	d001      	beq.n	80009d8 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 80009d4:	23aa      	movs	r3, #170	; 0xaa
 80009d6:	e000      	b.n	80009da <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 80009d8:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b088      	sub	sp, #32
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 80009ec:	f247 0395 	movw	r3, #28821	; 0x7095
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	3302      	adds	r3, #2
 8000a02:	2205      	movs	r2, #5
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00e f9f4 	bl	800edf4 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2107      	movs	r1, #7
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe9e 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	3307      	adds	r3, #7
 8000a22:	893a      	ldrh	r2, [r7, #8]
 8000a24:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a26:	f107 000c 	add.w	r0, r7, #12
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2303      	movs	r3, #3
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	2109      	movs	r1, #9
 8000a34:	f7ff ff02 	bl	800083c <MFRC_TRANSCEIVE>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2bcc      	cmp	r3, #204	; 0xcc
 8000a3c:	d001      	beq.n	8000a42 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a3e:	23aa      	movs	r3, #170	; 0xaa
 8000a40:	e000      	b.n	8000a44 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a42:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  if (PICC_CHECK() != PCD_OK) {
 8000a52:	f000 f832 	bl	8000aba <PICC_CHECK>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2bcc      	cmp	r3, #204	; 0xcc
 8000a5a:	d001      	beq.n	8000a60 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000a5c:	23aa      	movs	r3, #170	; 0xaa
 8000a5e:	e028      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  MFRC_ANTICOL1(ANTICOL1);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff4b 	bl	8000900 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000a6a:	7c3b      	ldrb	r3, [r7, #16]
 8000a6c:	2b88      	cmp	r3, #136	; 0x88
 8000a6e:	d001      	beq.n	8000a74 <PICC_Select+0x28>
		  return(PCD_COMM_ERR);
 8000a70:	23aa      	movs	r3, #170	; 0xaa
 8000a72:	e01e      	b.n	8000ab2 <PICC_Select+0x66>
	  }
	  HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f002 faf9 	bl	800306c <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff59 	bl	800093c <MFRC_SEL1>
	  HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f002 faee 	bl	800306c <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff87 	bl	80009a6 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f002 fae7 	bl	800306c <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff9c 	bl	80009e2 <MFRC_SEL2>
	  HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f002 fade 	bl	800306c <HAL_Delay>
	  return(PCD_OK);
 8000ab0:	23cc      	movs	r3, #204	; 0xcc
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff feff 	bl	80008c6 <MFRC_REQA>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2bcc      	cmp	r3, #204	; 0xcc
 8000acc:	d001      	beq.n	8000ad2 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000ace:	23aa      	movs	r3, #170	; 0xaa
 8000ad0:	e008      	b.n	8000ae4 <PICC_CHECK+0x2a>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	2b44      	cmp	r3, #68	; 0x44
 8000ad6:	d102      	bne.n	8000ade <PICC_CHECK+0x24>
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000ade:	23aa      	movs	r3, #170	; 0xaa
 8000ae0:	e000      	b.n	8000ae4 <PICC_CHECK+0x2a>
		}
		else{
			return(PCD_OK);
 8000ae2:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	2330      	movs	r3, #48	; 0x30
 8000afe:	733b      	strb	r3, [r7, #12]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b04:	f107 0208 	add.w	r2, r7, #8
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe22 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	3302      	adds	r3, #2
 8000b1a:	893a      	ldrh	r2, [r7, #8]
 8000b1c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b1e:	f107 000c 	add.w	r0, r7, #12
 8000b22:	2300      	movs	r3, #0
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2310      	movs	r3, #16
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	f7ff fe86 	bl	800083c <MFRC_TRANSCEIVE>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2bcc      	cmp	r3, #204	; 0xcc
 8000b34:	d001      	beq.n	8000b3a <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 8000b36:	23aa      	movs	r3, #170	; 0xaa
 8000b38:	e000      	b.n	8000b3c <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 8000b3a:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	4619      	mov	r1, r3
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ffca 	bl	8000aec <UL_READ>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b5c:	d001      	beq.n	8000b62 <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000b5e:	23aa      	movs	r3, #170	; 0xaa
 8000b60:	e007      	b.n	8000b72 <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2207      	movs	r2, #7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f00e f942 	bl	800edf4 <memcpy>
	return PCD_OK;
 8000b70:	23cc      	movs	r3, #204	; 0xcc
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e010      	b.n	8000baa <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffac 	bl	8000aec <UL_READ>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2bcc      	cmp	r3, #204	; 0xcc
 8000b98:	d001      	beq.n	8000b9e <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8000b9a:	23aa      	movs	r3, #170	; 0xaa
 8000b9c:	e009      	b.n	8000bb2 <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b0e      	cmp	r3, #14
 8000bae:	ddeb      	ble.n	8000b88 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8000bb0:	23cc      	movs	r3, #204	; 0xcc
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	uint8_t* uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f00e f905 	bl	800edd4 <malloc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60fb      	str	r3, [r7, #12]
	uint8_t* contents = malloc(UL_MEMSIZE);
 8000bce:	2040      	movs	r0, #64	; 0x40
 8000bd0:	f00e f900 	bl	800edd4 <malloc>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60bb      	str	r3, [r7, #8]

	result->type = "MIFARE Ultralight";
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <UL_readcard+0x7c>)
 8000bdc:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <UL_readcard+0x80>)
 8000be2:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2207      	movs	r2, #7
 8000be8:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2240      	movs	r2, #64	; 0x40
 8000bee:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 8000bf6:	f7ff ff29 	bl	8000a4c <PICC_Select>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2bcc      	cmp	r3, #204	; 0xcc
 8000bfe:	d001      	beq.n	8000c04 <UL_readcard+0x48>
		return PCD_NO_PICC;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e014      	b.n	8000c2e <UL_readcard+0x72>
	}
	if ((UL_getuid(uid) != PCD_OK) || (UL_getalldata(contents) !=  PCD_OK)) {
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff ff9d 	bl	8000b44 <UL_getuid>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2bcc      	cmp	r3, #204	; 0xcc
 8000c0e:	d105      	bne.n	8000c1c <UL_readcard+0x60>
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f7ff ffb2 	bl	8000b7a <UL_getalldata>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2bcc      	cmp	r3, #204	; 0xcc
 8000c1a:	d001      	beq.n	8000c20 <UL_readcard+0x64>
		return PCD_COMM_ERR;
 8000c1c:	23aa      	movs	r3, #170	; 0xaa
 8000c1e:	e006      	b.n	8000c2e <UL_readcard+0x72>
	}
	result->uid = uid;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	601a      	str	r2, [r3, #0]
	result->contents = contents;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	615a      	str	r2, [r3, #20]
	return PCD_OK;
 8000c2c:	23cc      	movs	r3, #204	; 0xcc
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	0800f780 	.word	0x0800f780
 8000c3c:	0800f794 	.word	0x0800f794

08000c40 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	3301      	adds	r3, #1
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00e f8be 	bl	800edd4 <malloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e023      	b.n	8000caa <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d80d      	bhi.n	8000c8a <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	461a      	mov	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1898      	adds	r0, r3, r2
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4912      	ldr	r1, [pc, #72]	; (8000ccc <uid_tostring+0x8c>)
 8000c84:	f00e f9bc 	bl	800f000 <siprintf>
 8000c88:	e00c      	b.n	8000ca4 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1898      	adds	r0, r3, r2
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <uid_tostring+0x90>)
 8000ca0:	f00e f9ae 	bl	800f000 <siprintf>
	for (int i = 0; i < size; i++) {
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbd7      	blt.n	8000c62 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	return result;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	0800f79c 	.word	0x0800f79c
 8000cd0:	0800f7a0 	.word	0x0800f7a0

08000cd4 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000cda:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000cdc:	463b      	mov	r3, r7
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00e f893 	bl	800ee10 <memset>
	OLED_FLUSH(zeros);
 8000cea:	463b      	mov	r3, r7
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f87b 	bl	8000de8 <OLED_FLUSH>

}
 8000cf2:	bf00      	nop
 8000cf4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <OLED_cmd+0x68>)
 8000d10:	f002 fc4e 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <OLED_cmd+0x6c>)
 8000d1a:	f002 fc49 	bl	80035b0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000d1e:	f107 010f 	add.w	r1, r7, #15
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2201      	movs	r2, #1
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <OLED_cmd+0x70>)
 8000d2a:	f005 fbd4 	bl	80064d6 <HAL_SPI_Transmit>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d009      	beq.n	8000d48 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2110      	movs	r1, #16
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <OLED_cmd+0x68>)
 8000d3a:	f002 fc39 	bl	80035b0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f002 f994 	bl	800306c <HAL_Delay>
		return(HAL_ERROR);
 8000d44:	2301      	movs	r3, #1
 8000d46:	e008      	b.n	8000d5a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <OLED_cmd+0x68>)
 8000d4e:	f002 fc2f 	bl	80035b0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f002 f98a 	bl	800306c <HAL_Delay>
		return(HAL_OK);
 8000d58:	2300      	movs	r3, #0
	}

}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	200006ec 	.word	0x200006ec

08000d70 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4816      	ldr	r0, [pc, #88]	; (8000ddc <OLED_data+0x6c>)
 8000d82:	f002 fc15 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <OLED_data+0x70>)
 8000d8c:	f002 fc10 	bl	80035b0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <OLED_data+0x74>)
 8000d9c:	f005 fb9b 	bl	80064d6 <HAL_SPI_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <OLED_data+0x70>)
 8000dac:	f002 fc00 	bl	80035b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <OLED_data+0x6c>)
 8000db6:	f002 fbfb 	bl	80035b0 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00a      	b.n	8000dd4 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <OLED_data+0x70>)
 8000dc4:	f002 fbf4 	bl	80035b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <OLED_data+0x6c>)
 8000dce:	f002 fbef 	bl	80035b0 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000dd2:	2300      	movs	r3, #0
	}



}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	200006ec 	.word	0x200006ec

08000de8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e023      	b.n	8000e3e <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b50      	subs	r3, #80	; 0x50
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff ff79 	bl	8000cfc <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000e0a:	2010      	movs	r0, #16
 8000e0c:	f7ff ff76 	bl	8000cfc <OLED_cmd>
		for(int i=0;i<128;i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	e00d      	b.n	8000e32 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	01da      	lsls	r2, r3, #7
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffa2 	bl	8000d70 <OLED_data>
		for(int i=0;i<128;i++){
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b7f      	cmp	r3, #127	; 0x7f
 8000e36:	ddee      	ble.n	8000e16 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	ddd8      	ble.n	8000df6 <OLED_FLUSH+0xe>
		}


	}
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	482f      	ldr	r0, [pc, #188]	; (8000f18 <OLED_INIT+0xc8>)
 8000e5c:	f002 fba8 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2108      	movs	r1, #8
 8000e64:	482c      	ldr	r0, [pc, #176]	; (8000f18 <OLED_INIT+0xc8>)
 8000e66:	f002 fba3 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	482b      	ldr	r0, [pc, #172]	; (8000f1c <OLED_INIT+0xcc>)
 8000e70:	f002 fb9e 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e74:	2064      	movs	r0, #100	; 0x64
 8000e76:	f002 f8f9 	bl	800306c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <OLED_INIT+0xc8>)
 8000e80:	f002 fb96 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f002 f8f1 	bl	800306c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <OLED_INIT+0xc8>)
 8000e90:	f002 fb8e 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e94:	2064      	movs	r0, #100	; 0x64
 8000e96:	f002 f8e9 	bl	800306c <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <OLED_INIT+0xd0>)
 8000e9c:	463c      	mov	r4, r7
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ea8:	c403      	stmia	r4!, {r0, r1}
 8000eaa:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	e00c      	b.n	8000ecc <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000eb2:	463a      	mov	r2, r7
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff1e 	bl	8000cfc <OLED_cmd>
		HAL_Delay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f002 f8d3 	bl	800306c <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2b18      	cmp	r3, #24
 8000ed0:	ddef      	ble.n	8000eb2 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ed2:	20a7      	movs	r0, #167	; 0xa7
 8000ed4:	f7ff ff12 	bl	8000cfc <OLED_cmd>
	OLED_FLUSH(HVE);
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <OLED_INIT+0xd4>)
 8000eda:	f7ff ff85 	bl	8000de8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8000ede:	20af      	movs	r0, #175	; 0xaf
 8000ee0:	f7ff ff0c 	bl	8000cfc <OLED_cmd>
	HAL_Delay(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f002 f8c0 	bl	800306c <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8000eec:	20ae      	movs	r0, #174	; 0xae
 8000eee:	f7ff ff05 	bl	8000cfc <OLED_cmd>
	HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f002 f8ba 	bl	800306c <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8000ef8:	20a6      	movs	r0, #166	; 0xa6
 8000efa:	f7ff feff 	bl	8000cfc <OLED_cmd>
	HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f002 f8b4 	bl	800306c <HAL_Delay>
	OLED_cmd(DISP_ON);
 8000f04:	20af      	movs	r0, #175	; 0xaf
 8000f06:	f7ff fef9 	bl	8000cfc <OLED_cmd>
	OLED_Clear();
 8000f0a:	f7ff fee3 	bl	8000cd4 <OLED_Clear>
	return HAL_OK;
 8000f0e:	2300      	movs	r3, #0

}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdb0      	pop	{r4, r5, r7, pc}
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	0800f7a4 	.word	0x0800f7a4
 8000f24:	20000000 	.word	0x20000000

08000f28 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8000f34:	2005      	movs	r0, #5
 8000f36:	f00d ff4d 	bl	800edd4 <malloc>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e013      	b.n	8000f6c <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f1a3 0220 	sub.w	r2, r3, #32
 8000f4a:	4910      	ldr	r1, [pc, #64]	; (8000f8c <OLED_InvChar+0x64>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	18ca      	adds	r2, r1, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	440b      	add	r3, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	dde8      	ble.n	8000f44 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8000f72:	2205      	movs	r2, #5
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f00d ff3c 	bl	800edf4 <memcpy>
	free(temp);
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f00d ff31 	bl	800ede4 <free>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	0800f980 	.word	0x0800f980

08000f90 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	717b      	strb	r3, [r7, #5]
 8000faa:	4613      	mov	r3, r2
 8000fac:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3b50      	subs	r3, #80	; 0x50
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fea1 	bl	8000cfc <OLED_cmd>
	OLED_cmd(col&0x0F);
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe9a 	bl	8000cfc <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe91 	bl	8000cfc <OLED_cmd>
	uint8_t* data=malloc(6);
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f00d fefa 	bl	800edd4 <malloc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10d      	bne.n	8001006 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8000fea:	797b      	ldrb	r3, [r7, #5]
 8000fec:	f1a3 0220 	sub.w	r2, r3, #32
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <OLED_drawChar+0xa0>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f00d fef8 	bl	800edf4 <memcpy>
 8001004:	e004      	b.n	8001010 <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff8c 	bl	8000f28 <OLED_InvChar>
	}

	*(data+5)=0x00;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3305      	adds	r3, #5
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001018:	2106      	movs	r1, #6
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f7ff fea8 	bl	8000d70 <OLED_data>
	free(data);
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f00d fedf 	bl	800ede4 <free>
	}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	0800f980 	.word	0x0800f980

08001034 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	603a      	str	r2, [r7, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	460b      	mov	r3, r1
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	4613      	mov	r3, r2
 8001048:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e014      	b.n	800107a <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	4413      	add	r3, r2
 8001062:	b2d9      	uxtb	r1, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	79f8      	ldrb	r0, [r7, #7]
 8001070:	f7ff ff8e 	bl	8000f90 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4602      	mov	r2, r0
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8e3      	bhi.n	8001050 <OLED_Printlin+0x1c>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	6039      	str	r1, [r7, #0]
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4613      	mov	r3, r2
 80010a0:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f7ff f89c 	bl	80001e0 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	0fda      	lsrs	r2, r3, #31
 80010b0:	4413      	add	r3, r2
 80010b2:	105b      	asrs	r3, r3, #1
 80010b4:	425b      	negs	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3340      	adds	r3, #64	; 0x40
 80010c2:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	b2d9      	uxtb	r1, r3
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	79f8      	ldrb	r0, [r7, #7]
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	f7ff ffb1 	bl	8001034 <OLED_Printlin>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80010da:	b580      	push	{r7, lr}
 80010dc:	b094      	sub	sp, #80	; 0x50
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80010e2:	2320      	movs	r3, #32
 80010e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
 80010fc:	e018      	b.n	8001130 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80010fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b20      	cmp	r3, #32
 800110e:	d10b      	bne.n	8001128 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111a:	4413      	add	r3, r2
 800111c:	460a      	mov	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
	                i++;
 8001120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001122:	3301      	adds	r3, #1
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001126:	e000      	b.n	800112a <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001128:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 800112a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112c:	3301      	adds	r3, #1
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	2b15      	cmp	r3, #21
 8001134:	dde3      	ble.n	80010fe <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d102      	bne.n	8001148 <OLED_Print+0x6e>
	            last_ind++;
 8001142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001144:	3301      	adds	r3, #1
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f846 	bl	80001e0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	2b15      	cmp	r3, #21
 8001158:	d828      	bhi.n	80011ac <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 800115a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f83d 	bl	80001e0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800116a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	18d1      	adds	r1, r2, r3
 8001170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f00d ff62 	bl	800f040 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 800117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117e:	f107 0220 	add.w	r2, r7, #32
 8001182:	18d0      	adds	r0, r2, r3
 8001184:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118a:	f1c3 0315 	rsb	r3, r3, #21
 800118e:	461a      	mov	r2, r3
 8001190:	f00d fe3e 	bl	800ee10 <memset>
	            thisline[21]=' ';
 8001194:	2320      	movs	r3, #32
 8001196:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 800119a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119c:	b2d8      	uxtb	r0, r3
 800119e:	f107 0220 	add.w	r2, r7, #32
 80011a2:	2300      	movs	r3, #0
 80011a4:	2102      	movs	r1, #2
 80011a6:	f7ff ff45 	bl	8001034 <OLED_Printlin>




	    }
}
 80011aa:	e05e      	b.n	800126a <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80011ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ae:	3314      	adds	r3, #20
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d03a      	beq.n	8001230 <OLED_Print+0x156>
 80011ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011bc:	3315      	adds	r3, #21
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d033      	beq.n	8001230 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80011c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	18d1      	adds	r1, r2, r3
 80011ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d0:	3b01      	subs	r3, #1
 80011d2:	3350      	adds	r3, #80	; 0x50
 80011d4:	443b      	add	r3, r7
 80011d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011da:	461a      	mov	r2, r3
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d ff2d 	bl	800f040 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80011e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e8:	3b01      	subs	r3, #1
 80011ea:	3350      	adds	r3, #80	; 0x50
 80011ec:	443b      	add	r3, r7
 80011ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	1898      	adds	r0, r3, r2
 80011fa:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80011fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001200:	3b01      	subs	r3, #1
 8001202:	3350      	adds	r3, #80	; 0x50
 8001204:	443b      	add	r3, r7
 8001206:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800120a:	f1c3 0315 	rsb	r3, r3, #21
 800120e:	461a      	mov	r2, r3
 8001210:	f00d fdfe 	bl	800ee10 <memset>
	            thisline[21]=' ';
 8001214:	2320      	movs	r3, #32
 8001216:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 800121a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121c:	3b01      	subs	r3, #1
 800121e:	3350      	adds	r3, #80	; 0x50
 8001220:	443b      	add	r3, r7
 8001222:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001226:	461a      	mov	r2, r3
 8001228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800122a:	4413      	add	r3, r2
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
 800122e:	e00e      	b.n	800124e <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	18d1      	adds	r1, r2, r3
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2215      	movs	r2, #21
 800123c:	4618      	mov	r0, r3
 800123e:	f00d feff 	bl	800f040 <strncpy>
	            thisline[21]=' ';
 8001242:	2320      	movs	r3, #32
 8001244:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800124a:	3315      	adds	r3, #21
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800124e:	2300      	movs	r3, #0
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	f107 0220 	add.w	r2, r7, #32
 800125a:	2300      	movs	r3, #0
 800125c:	2102      	movs	r1, #2
 800125e:	f7ff fee9 	bl	8001034 <OLED_Printlin>
	        line++;
 8001262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001264:	3301      	adds	r3, #1
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001268:	e746      	b.n	80010f8 <OLED_Print+0x1e>
}
 800126a:	3750      	adds	r7, #80	; 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 800127c:	f7ff fd2a 	bl	8000cd4 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	4619      	mov	r1, r3
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff01 	bl	8001092 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e01a      	b.n	80012cc <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	7859      	ldrb	r1, [r3, #1]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	f7ff feb7 	bl	8001034 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbde      	blt.n	8001296 <OLED_SCREEN+0x26>
	}
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	460b      	mov	r3, r1
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff6f 	bl	80001e0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	4619      	mov	r1, r3
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	440b      	add	r3, r1
 8001320:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	7818      	ldrb	r0, [r3, #0]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	b2d9      	uxtb	r1, r3
 8001332:	2300      	movs	r3, #0
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	f7ff fe7d 	bl	8001034 <OLED_Printlin>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	460b      	mov	r3, r1
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001352:	4a46      	ldr	r2, [pc, #280]	; (800146c <OLED_SELECT+0x128>)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	8019      	strh	r1, [r3, #0]
 800135e:	3302      	adds	r3, #2
 8001360:	0c12      	lsrs	r2, r2, #16
 8001362:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

	    if(selopt==0){
 8001364:	7afb      	ldrb	r3, [r7, #11]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d124      	bne.n	80013b4 <OLED_SELECT+0x70>
	        prevpage=screen->seldata[screen->selsize-1][0];
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001376:	3b01      	subs	r3, #1
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800138c:	3b01      	subs	r3, #1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	691a      	ldr	r2, [r3, #16]
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	773b      	strb	r3, [r7, #28]
 80013b2:	e021      	b.n	80013f8 <OLED_SELECT+0xb4>
	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80013be:	3b01      	subs	r3, #1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	7afb      	ldrb	r3, [r7, #11]
 80013ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80013d2:	3b01      	subs	r3, #1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	7afb      	ldrb	r3, [r7, #11]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	773b      	strb	r3, [r7, #28]

	    }
	    if(restore==OLED_RESTORE){
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d122      	bne.n	8001444 <OLED_SELECT+0x100>
	    	if (selopt == 0) {
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d110      	bne.n	8001426 <OLED_SELECT+0xe2>
	    		rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	689c      	ldr	r4, [r3, #8]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f893 	bl	8001540 <find_restore_string>
 800141a:	4603      	mov	r3, r0
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4423      	add	r3, r4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	e010      	b.n	8001448 <OLED_SELECT+0x104>
	    	} else {
	    		rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	689c      	ldr	r4, [r3, #8]
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	3b01      	subs	r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4619      	mov	r1, r3
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 f884 	bl	8001540 <find_restore_string>
 8001438:	4603      	mov	r3, r0
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4423      	add	r3, r4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e001      	b.n	8001448 <OLED_SELECT+0x104>
	    	}
	    } else {
	    	rest = "  ";
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <OLED_SELECT+0x12c>)
 8001446:	61bb      	str	r3, [r7, #24]
	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001448:	7fb9      	ldrb	r1, [r7, #30]
 800144a:	7ff8      	ldrb	r0, [r7, #31]
 800144c:	2300      	movs	r3, #0
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	f7ff fdf0 	bl	8001034 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001454:	f107 0214 	add.w	r2, r7, #20
 8001458:	7f39      	ldrb	r1, [r7, #28]
 800145a:	7f78      	ldrb	r0, [r7, #29]
 800145c:	2300      	movs	r3, #0
 800145e:	f7ff fde9 	bl	8001034 <OLED_Printlin>

}
 8001462:	bf00      	nop
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	0800f7c4 	.word	0x0800f7c4
 8001470:	0800f7c0 	.word	0x0800f7c0

08001474 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001480:	f001 fa98 	bl	80029b4 <get_number_files>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <OLED_display_files+0x1a>
		return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e034      	b.n	80014f8 <OLED_display_files+0x84>
	}
	uint16_t file_count = get_number_files();
 800148e:	f001 fa91 	bl	80029b4 <get_number_files>
 8001492:	4603      	mov	r3, r0
 8001494:	827b      	strh	r3, [r7, #18]

	char** file_names = malloc(file_count * sizeof(char*));
 8001496:	8a7b      	ldrh	r3, [r7, #18]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4618      	mov	r0, r3
 800149c:	f00d fc9a 	bl	800edd4 <malloc>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]

	if (get_all_files(file_names) != RFS_OK) {
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f001 faa6 	bl	80029f6 <get_all_files>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <OLED_display_files+0x4a>
		free_filenames(file_names, file_count);
 80014b0:	8a7b      	ldrh	r3, [r7, #18]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 f825 	bl	8001504 <free_filenames>
		return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e01c      	b.n	80014f8 <OLED_display_files+0x84>
	}

	for (int i = 0; i < file_count; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e00f      	b.n	80014e4 <OLED_display_files+0x70>
		OLED_SCRNREF(&SCRN_ShowFiles, i + 1, file_names[i]);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <OLED_display_files+0x8c>)
 80014da:	f7ff ff02 	bl	80012e2 <OLED_SCRNREF>
	for (int i = 0; i < file_count; i++) {
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	8a7b      	ldrh	r3, [r7, #18]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbeb      	blt.n	80014c4 <OLED_display_files+0x50>
	}

	free_filenames(file_names, file_count);
 80014ec:	8a7b      	ldrh	r3, [r7, #18]
 80014ee:	4619      	mov	r1, r3
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f807 	bl	8001504 <free_filenames>
	return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	0800fd0c 	.word	0x0800fd0c

08001504 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e00a      	b.n	800152a <free_filenames+0x26>
		free(file_names[i]);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f00d fc60 	bl	800ede4 <free>
	for (int i = 0; i < size; i++) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbf0      	blt.n	8001514 <free_filenames+0x10>
	}
	free(file_names);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f00d fc56 	bl	800ede4 <free>
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 800154c:	2301      	movs	r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	e021      	b.n	8001596 <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d110      	bne.n	8001590 <find_restore_string+0x50>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	785a      	ldrb	r2, [r3, #1]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	429a      	cmp	r2, r3
 8001588:	d102      	bne.n	8001590 <find_restore_string+0x50>
			index_of_string = i;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	73fb      	strb	r3, [r7, #15]
			break;
 800158e:	e007      	b.n	80015a0 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3301      	adds	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbd8      	blt.n	8001552 <find_restore_string+0x12>
		}
	}

	return index_of_string;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fa70 	bl	8002aa2 <entry_present>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d12d      	bne.n	8001624 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 f899 	bl	8002702 <read_card_entry>
 80015d0:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 80015d2:	2100      	movs	r1, #0
 80015d4:	4815      	ldr	r0, [pc, #84]	; (800162c <oled_show_file+0x7c>)
 80015d6:	f7ff fe4b 	bl	8001270 <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	2100      	movs	r1, #0
 80015e2:	4812      	ldr	r0, [pc, #72]	; (800162c <oled_show_file+0x7c>)
 80015e4:	f7ff fe7d 	bl	80012e2 <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	461a      	mov	r2, r3
 80015ee:	2101      	movs	r1, #1
 80015f0:	480e      	ldr	r0, [pc, #56]	; (800162c <oled_show_file+0x7c>)
 80015f2:	f7ff fe76 	bl	80012e2 <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	791b      	ldrb	r3, [r3, #4]
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f7ff fb1d 	bl	8000c40 <uid_tostring>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	2102      	movs	r1, #2
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <oled_show_file+0x7c>)
 800160e:	f7ff fe68 	bl	80012e2 <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <oled_show_file+0x7c>)
 8001618:	f7ff fe94 	bl	8001344 <OLED_SELECT>

	free(work);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f00d fbe1 	bl	800ede4 <free>
 8001622:	e000      	b.n	8001626 <oled_show_file+0x76>
		return; //No card entry present
 8001624:	bf00      	nop
}
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800fd20 	.word	0x0800fd20

08001630 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af02      	add	r7, sp, #8
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 800163a:	230f      	movs	r3, #15
 800163c:	733b      	strb	r3, [r7, #12]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	737b      	strb	r3, [r7, #13]
 8001642:	2300      	movs	r3, #0
 8001644:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <STAT_READ+0x54>)
 800164e:	f001 ffaf 	bl	80035b0 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8001652:	bf00      	nop
 8001654:	f107 0208 	add.w	r2, r7, #8
 8001658:	f107 010c 	add.w	r1, r7, #12
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2303      	movs	r3, #3
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <STAT_READ+0x58>)
 8001664:	f005 f873 	bl	800674e <HAL_SPI_TransmitReceive>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f2      	bne.n	8001654 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <STAT_READ+0x54>)
 8001676:	f001 ff9b 	bl	80035b0 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 800167a:	7abb      	ldrb	r3, [r7, #10]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020000 	.word	0x40020000
 8001688:	20000744 	.word	0x20000744

0800168c <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	460a      	mov	r2, r1
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 800169c:	231f      	movs	r3, #31
 800169e:	733b      	strb	r3, [r7, #12]
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	737b      	strb	r3, [r7, #13]
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <STAT_WRITE+0x4c>)
 80016b0:	f001 ff7e 	bl	80035b0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80016b4:	f107 010c 	add.w	r1, r7, #12
 80016b8:	2364      	movs	r3, #100	; 0x64
 80016ba:	2203      	movs	r2, #3
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <STAT_WRITE+0x50>)
 80016be:	f004 ff0a 	bl	80064d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <STAT_WRITE+0x4c>)
 80016ca:	f001 ff71 	bl	80035b0 <HAL_GPIO_WritePin>

	return(HAL_OK);
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40020000 	.word	0x40020000
 80016dc:	20000744 	.word	0x20000744

080016e0 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80016e6:	2306      	movs	r3, #6
 80016e8:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80016ea:	f000 f825 	bl	8001738 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80016ee:	e011      	b.n	8001714 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <WRIT_EN+0x50>)
 80016f8:	f001 ff5a 	bl	80035b0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 80016fc:	1df9      	adds	r1, r7, #7
 80016fe:	2364      	movs	r3, #100	; 0x64
 8001700:	2201      	movs	r2, #1
 8001702:	480c      	ldr	r0, [pc, #48]	; (8001734 <WRIT_EN+0x54>)
 8001704:	f004 fee7 	bl	80064d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	4808      	ldr	r0, [pc, #32]	; (8001730 <WRIT_EN+0x50>)
 8001710:	f001 ff4e 	bl	80035b0 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001714:	20c0      	movs	r0, #192	; 0xc0
 8001716:	f7ff ff8b 	bl	8001630 <STAT_READ>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b02      	cmp	r3, #2
 8001722:	d1e5      	bne.n	80016f0 <WRIT_EN+0x10>
	}


}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40020000 	.word	0x40020000
 8001734:	20000744 	.word	0x20000744

08001738 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 800173e:	2304      	movs	r3, #4
 8001740:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001742:	e011      	b.n	8001768 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <WRITE_DIS+0x4c>)
 800174c:	f001 ff30 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001750:	1df9      	adds	r1, r7, #7
 8001752:	2364      	movs	r3, #100	; 0x64
 8001754:	2201      	movs	r2, #1
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <WRITE_DIS+0x50>)
 8001758:	f004 febd 	bl	80064d6 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <WRITE_DIS+0x4c>)
 8001764:	f001 ff24 	bl	80035b0 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001768:	20c0      	movs	r0, #192	; 0xc0
 800176a:	f7ff ff61 	bl	8001630 <STAT_READ>
 800176e:	4603      	mov	r3, r0
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	d0e5      	beq.n	8001744 <WRITE_DIS+0xc>
		}
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020000 	.word	0x40020000
 8001788:	20000744 	.word	0x20000744

0800178c <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 800179c:	23d8      	movs	r3, #216	; 0xd8
 800179e:	723b      	strb	r3, [r7, #8]
 80017a0:	2300      	movs	r3, #0
 80017a2:	727b      	strb	r3, [r7, #9]
 80017a4:	89fb      	ldrh	r3, [r7, #14]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	72bb      	strb	r3, [r7, #10]
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 80017b4:	f7ff ff94 	bl	80016e0 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <block_erase+0x70>)
 80017c0:	f001 fef6 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 80017c4:	f107 0108 	add.w	r1, r7, #8
 80017c8:	2364      	movs	r3, #100	; 0x64
 80017ca:	2204      	movs	r2, #4
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <block_erase+0x74>)
 80017ce:	f004 fe82 	bl	80064d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d8:	4808      	ldr	r0, [pc, #32]	; (80017fc <block_erase+0x70>)
 80017da:	f001 fee9 	bl	80035b0 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80017de:	bf00      	nop
 80017e0:	20c0      	movs	r0, #192	; 0xc0
 80017e2:	f7ff ff25 	bl	8001630 <STAT_READ>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d0f7      	beq.n	80017e0 <block_erase+0x54>
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020000 	.word	0x40020000
 8001800:	20000744 	.word	0x20000744

08001804 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180e:	480a      	ldr	r0, [pc, #40]	; (8001838 <MEM_INIT+0x34>)
 8001810:	f001 fece 	bl	80035b0 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001814:	2100      	movs	r1, #0
 8001816:	20a0      	movs	r0, #160	; 0xa0
 8001818:	f7ff ff38 	bl	800168c <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 800181c:	20a0      	movs	r0, #160	; 0xa0
 800181e:	f7ff ff07 	bl	8001630 <STAT_READ>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MEM_INIT+0x28>
		return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e002      	b.n	8001832 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 800182c:	f7ff ff84 	bl	8001738 <WRITE_DIS>
	return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40020000 	.word	0x40020000

0800183c <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4603      	mov	r3, r0
 8001848:	81fb      	strh	r3, [r7, #14]
 800184a:	460b      	mov	r3, r1
 800184c:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3303      	adds	r3, #3
 8001852:	4618      	mov	r0, r3
 8001854:	f00d fabe 	bl	800edd4 <malloc>
 8001858:	4603      	mov	r3, r0
 800185a:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 800185c:	2310      	movs	r3, #16
 800185e:	743b      	strb	r3, [r7, #16]
 8001860:	2300      	movs	r3, #0
 8001862:	747b      	strb	r3, [r7, #17]
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	b29b      	uxth	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	74bb      	strb	r3, [r7, #18]
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 800187a:	89bb      	ldrh	r3, [r7, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	b29a      	uxth	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3302      	adds	r3, #2
 800188c:	89ba      	ldrh	r2, [r7, #12]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3303      	adds	r3, #3
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	4618      	mov	r0, r3
 800189c:	f00d faaa 	bl	800edf4 <memcpy>

	WRIT_EN();
 80018a0:	f7ff ff1e 	bl	80016e0 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018aa:	482d      	ldr	r0, [pc, #180]	; (8001960 <MEM_WRITE+0x124>)
 80018ac:	f001 fe80 	bl	80035b0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	3303      	adds	r3, #3
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	6979      	ldr	r1, [r7, #20]
 80018bc:	4829      	ldr	r0, [pc, #164]	; (8001964 <MEM_WRITE+0x128>)
 80018be:	f004 fe0a 	bl	80064d6 <HAL_SPI_Transmit>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00a      	beq.n	80018de <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ce:	4824      	ldr	r0, [pc, #144]	; (8001960 <MEM_WRITE+0x124>)
 80018d0:	f001 fe6e 	bl	80035b0 <HAL_GPIO_WritePin>
		free(setup);
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f00d fa85 	bl	800ede4 <free>
		return(HAL_ERROR);
 80018da:	2301      	movs	r3, #1
 80018dc:	e03c      	b.n	8001958 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	481e      	ldr	r0, [pc, #120]	; (8001960 <MEM_WRITE+0x124>)
 80018e6:	f001 fe63 	bl	80035b0 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 80018ea:	bf00      	nop
 80018ec:	20c0      	movs	r0, #192	; 0xc0
 80018ee:	f7ff fe9f 	bl	8001630 <STAT_READ>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d0f7      	beq.n	80018ec <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001902:	4817      	ldr	r0, [pc, #92]	; (8001960 <MEM_WRITE+0x124>)
 8001904:	f001 fe54 	bl	80035b0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 8001908:	f107 0110 	add.w	r1, r7, #16
 800190c:	2364      	movs	r3, #100	; 0x64
 800190e:	2204      	movs	r2, #4
 8001910:	4814      	ldr	r0, [pc, #80]	; (8001964 <MEM_WRITE+0x128>)
 8001912:	f004 fde0 	bl	80064d6 <HAL_SPI_Transmit>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00a      	beq.n	8001932 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	480f      	ldr	r0, [pc, #60]	; (8001960 <MEM_WRITE+0x124>)
 8001924:	f001 fe44 	bl	80035b0 <HAL_GPIO_WritePin>
		free(setup);
 8001928:	6978      	ldr	r0, [r7, #20]
 800192a:	f00d fa5b 	bl	800ede4 <free>
		return(HAL_ERROR);
 800192e:	2301      	movs	r3, #1
 8001930:	e012      	b.n	8001958 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <MEM_WRITE+0x124>)
 800193a:	f001 fe39 	bl	80035b0 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 800193e:	bf00      	nop
 8001940:	20c0      	movs	r0, #192	; 0xc0
 8001942:	f7ff fe75 	bl	8001630 <STAT_READ>
 8001946:	4603      	mov	r3, r0
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d0f7      	beq.n	8001940 <MEM_WRITE+0x104>
	free(setup);
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f00d fa47 	bl	800ede4 <free>
	return(HAL_OK);
 8001956:	2300      	movs	r3, #0

}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020000 	.word	0x40020000
 8001964:	20000744 	.word	0x20000744

08001968 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af02      	add	r7, sp, #8
 800196e:	60ba      	str	r2, [r7, #8]
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4603      	mov	r3, r0
 8001974:	81fb      	strh	r3, [r7, #14]
 8001976:	460b      	mov	r3, r1
 8001978:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 800197a:	2313      	movs	r3, #19
 800197c:	753b      	strb	r3, [r7, #20]
 800197e:	2300      	movs	r3, #0
 8001980:	757b      	strb	r3, [r7, #21]
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	b29b      	uxth	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	75bb      	strb	r3, [r7, #22]
 800198c:	89fb      	ldrh	r3, [r7, #14]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8001992:	2304      	movs	r3, #4
 8001994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8001998:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00d fa17 	bl	800edd4 <malloc>
 80019a6:	4603      	mov	r3, r0
 80019a8:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 80019aa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00d fa0e 	bl	800edd4 <malloc>
 80019b8:	4603      	mov	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80019bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	69f8      	ldr	r0, [r7, #28]
 80019ca:	f00d fa21 	bl	800ee10 <memset>
	read_command[0]=READ_BUF;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2203      	movs	r2, #3
 80019d2:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 80019d4:	89bb      	ldrh	r3, [r7, #12]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b29a      	uxth	r2, r3
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3302      	adds	r3, #2
 80019e6:	89ba      	ldrh	r2, [r7, #12]
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3303      	adds	r3, #3
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fa:	4842      	ldr	r0, [pc, #264]	; (8001b04 <MEM_READPAGE+0x19c>)
 80019fc:	f001 fdd8 	bl	80035b0 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8001a00:	f107 0114 	add.w	r1, r7, #20
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	2204      	movs	r2, #4
 8001a08:	483f      	ldr	r0, [pc, #252]	; (8001b08 <MEM_READPAGE+0x1a0>)
 8001a0a:	f004 fd64 	bl	80064d6 <HAL_SPI_Transmit>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a1a:	483a      	ldr	r0, [pc, #232]	; (8001b04 <MEM_READPAGE+0x19c>)
 8001a1c:	f001 fdc8 	bl	80035b0 <HAL_GPIO_WritePin>
		free(read_command);
 8001a20:	69f8      	ldr	r0, [r7, #28]
 8001a22:	f00d f9df 	bl	800ede4 <free>
		free(rec_data);
 8001a26:	69b8      	ldr	r0, [r7, #24]
 8001a28:	f00d f9dc 	bl	800ede4 <free>
		return(HAL_ERROR);
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e064      	b.n	8001afa <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a36:	4833      	ldr	r0, [pc, #204]	; (8001b04 <MEM_READPAGE+0x19c>)
 8001a38:	f001 fdba 	bl	80035b0 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8001a3c:	bf00      	nop
 8001a3e:	20c0      	movs	r0, #192	; 0xc0
 8001a40:	f7ff fdf6 	bl	8001630 <STAT_READ>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d0f7      	beq.n	8001a3e <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	482b      	ldr	r0, [pc, #172]	; (8001b04 <MEM_READPAGE+0x19c>)
 8001a56:	f001 fdab 	bl	80035b0 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 8001a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	2264      	movs	r2, #100	; 0x64
 8001a6a:	9200      	str	r2, [sp, #0]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	69f9      	ldr	r1, [r7, #28]
 8001a70:	4825      	ldr	r0, [pc, #148]	; (8001b08 <MEM_READPAGE+0x1a0>)
 8001a72:	f004 fe6c 	bl	800674e <HAL_SPI_TransmitReceive>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00d      	beq.n	8001a98 <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a82:	4820      	ldr	r0, [pc, #128]	; (8001b04 <MEM_READPAGE+0x19c>)
 8001a84:	f001 fd94 	bl	80035b0 <HAL_GPIO_WritePin>
		free(read_command);
 8001a88:	69f8      	ldr	r0, [r7, #28]
 8001a8a:	f00d f9ab 	bl	800ede4 <free>
		free(rec_data);
 8001a8e:	69b8      	ldr	r0, [r7, #24]
 8001a90:	f00d f9a8 	bl	800ede4 <free>
		return(HAL_ERROR);
 8001a94:	2301      	movs	r3, #1
 8001a96:	e030      	b.n	8001afa <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9e:	4819      	ldr	r0, [pc, #100]	; (8001b04 <MEM_READPAGE+0x19c>)
 8001aa0:	f001 fd86 	bl	80035b0 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001aa4:	bf00      	nop
 8001aa6:	20c0      	movs	r0, #192	; 0xc0
 8001aa8:	f7ff fdc2 	bl	8001630 <STAT_READ>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d0f7      	beq.n	8001aa6 <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d104      	bne.n	8001ac6 <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	791a      	ldrb	r2, [r3, #4]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	e012      	b.n	8001aec <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e00b      	b.n	8001ae4 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3304      	adds	r3, #4
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	441a      	add	r2, r3
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	440b      	add	r3, r1
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8ef      	bhi.n	8001acc <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8001aec:	69f8      	ldr	r0, [r7, #28]
 8001aee:	f00d f979 	bl	800ede4 <free>
	free(rec_data);
 8001af2:	69b8      	ldr	r0, [r7, #24]
 8001af4:	f00d f976 	bl	800ede4 <free>
	return(HAL_OK);
 8001af8:	2300      	movs	r3, #0

}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020000 	.word	0x40020000
 8001b08:	20000744 	.word	0x20000744

08001b0c <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	e016      	b.n	8001b46 <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	1cfa      	adds	r2, r7, #3
 8001b22:	2301      	movs	r3, #1
 8001b24:	2100      	movs	r1, #0
 8001b26:	f7ff ff1f 	bl	8001968 <MEM_READPAGE>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <mem_find_free_block+0x2a>
			return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
 8001b34:	e00d      	b.n	8001b52 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	2bff      	cmp	r3, #255	; 0xff
 8001b3a:	d101      	bne.n	8001b40 <mem_find_free_block+0x34>
			return i;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	e008      	b.n	8001b52 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4c:	dbe4      	blt.n	8001b18 <mem_find_free_block+0xc>
		}
	}
	return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	e007      	b.n	8001b76 <memory_reset+0x1c>
		block_erase(i);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fe0e 	bl	800178c <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7c:	dbf3      	blt.n	8001b66 <memory_reset+0xc>
	}
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b8c:	2108      	movs	r1, #8
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <BUZZ+0x20>)
 8001b90:	f005 f9d8 	bl	8006f44 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b98:	f001 fa68 	bl	800306c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <BUZZ+0x20>)
 8001ba0:	f005 fa80 	bl	80070a4 <HAL_TIM_PWM_Stop>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000079c 	.word	0x2000079c

08001bac <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001bba:	2102      	movs	r1, #2
 8001bbc:	4820      	ldr	r0, [pc, #128]	; (8001c40 <choose+0x94>)
 8001bbe:	f001 fcdf 	bl	8003580 <HAL_GPIO_ReadPin>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d136      	bne.n	8001c36 <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <choose+0x98>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001bd0:	e012      	b.n	8001bf8 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001bd2:	481c      	ldr	r0, [pc, #112]	; (8001c44 <choose+0x98>)
 8001bd4:	f005 f878 	bl	8006cc8 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <choose+0x98>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d108      	bne.n	8001bf8 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001be6:	4817      	ldr	r0, [pc, #92]	; (8001c44 <choose+0x98>)
 8001be8:	f005 f8c8 	bl	8006d7c <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e01e      	b.n	8001c36 <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	4811      	ldr	r0, [pc, #68]	; (8001c40 <choose+0x94>)
 8001bfc:	f001 fcc0 	bl	8003580 <HAL_GPIO_ReadPin>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0e5      	beq.n	8001bd2 <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <choose+0x74>
	 	    	*count = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff fb8a 	bl	8001344 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <choose+0x98>)
 8001c32:	f005 f8a3 	bl	8006d7c <HAL_TIM_Base_Stop>
	 	}
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020000 	.word	0x40020000
 8001c44:	200007e4 	.word	0x200007e4

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4c:	f001 f9cc 	bl	8002fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c50:	f000 f872 	bl	8001d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c54:	f000 fa3a 	bl	80020cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c58:	f000 f8d8 	bl	8001e0c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c5c:	f000 f904 	bl	8001e68 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c60:	f000 f93a 	bl	8001ed8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c64:	f000 f96e 	bl	8001f44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c68:	f000 f9e2 	bl	8002030 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c6c:	f009 fc9a 	bl	800b5a4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <main+0xa0>)
 8001c72:	2104      	movs	r1, #4
 8001c74:	2001      	movs	r0, #1
 8001c76:	f009 fd8d 	bl	800b794 <osMessageQueueNew>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <main+0xa4>)
 8001c7e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <main+0xa8>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <main+0xac>)
 8001c86:	f009 fcd7 	bl	800b638 <osThreadNew>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <main+0xb0>)
 8001c8e:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001c90:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <main+0xb4>)
 8001c92:	2100      	movs	r1, #0
 8001c94:	481a      	ldr	r0, [pc, #104]	; (8001d00 <main+0xb8>)
 8001c96:	f009 fccf 	bl	800b638 <osThreadNew>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <main+0xbc>)
 8001c9e:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <main+0xc0>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4819      	ldr	r0, [pc, #100]	; (8001d0c <main+0xc4>)
 8001ca6:	f009 fcc7 	bl	800b638 <osThreadNew>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <main+0xc8>)
 8001cae:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001cb0:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <main+0xcc>)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4818      	ldr	r0, [pc, #96]	; (8001d18 <main+0xd0>)
 8001cb6:	f009 fcbf 	bl	800b638 <osThreadNew>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <main+0xd4>)
 8001cbe:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <main+0xd8>)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4817      	ldr	r0, [pc, #92]	; (8001d24 <main+0xdc>)
 8001cc6:	f009 fcb7 	bl	800b638 <osThreadNew>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <main+0xe0>)
 8001cce:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8001cd0:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <main+0xe4>)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <main+0xe8>)
 8001cd6:	f009 fcaf 	bl	800b638 <osThreadNew>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <main+0xec>)
 8001cde:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ce0:	f009 fc84 	bl	800b5ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <main+0x9c>
 8001ce6:	bf00      	nop
 8001ce8:	0800fc38 	.word	0x0800fc38
 8001cec:	20000844 	.word	0x20000844
 8001cf0:	0800fb60 	.word	0x0800fb60
 8001cf4:	080021b5 	.word	0x080021b5
 8001cf8:	2000082c 	.word	0x2000082c
 8001cfc:	0800fb84 	.word	0x0800fb84
 8001d00:	08002251 	.word	0x08002251
 8001d04:	20000830 	.word	0x20000830
 8001d08:	0800fba8 	.word	0x0800fba8
 8001d0c:	080022d5 	.word	0x080022d5
 8001d10:	20000834 	.word	0x20000834
 8001d14:	0800fbcc 	.word	0x0800fbcc
 8001d18:	08002301 	.word	0x08002301
 8001d1c:	20000838 	.word	0x20000838
 8001d20:	0800fbf0 	.word	0x0800fbf0
 8001d24:	080023a5 	.word	0x080023a5
 8001d28:	2000083c 	.word	0x2000083c
 8001d2c:	0800fc14 	.word	0x0800fc14
 8001d30:	08002481 	.word	0x08002481
 8001d34:	20000840 	.word	0x20000840

08001d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b094      	sub	sp, #80	; 0x50
 8001d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	2230      	movs	r2, #48	; 0x30
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00d f862 	bl	800ee10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <SystemClock_Config+0xcc>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <SystemClock_Config+0xcc>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <SystemClock_Config+0xcc>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <SystemClock_Config+0xd0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d84:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <SystemClock_Config+0xd0>)
 8001d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <SystemClock_Config+0xd0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da2:	2302      	movs	r3, #2
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dac:	2308      	movs	r3, #8
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001db0:	23a8      	movs	r3, #168	; 0xa8
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001db4:	2304      	movs	r3, #4
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001db8:	2307      	movs	r3, #7
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbc:	f107 0320 	add.w	r3, r7, #32
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fe4b 	bl	8005a5c <HAL_RCC_OscConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dcc:	f000 fbe0 	bl	8002590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2102      	movs	r1, #2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f8ad 	bl	8005f4c <HAL_RCC_ClockConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001df8:	f000 fbca 	bl	8002590 <Error_Handler>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e12:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <MX_I2C1_Init+0x54>)
 8001e14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e18:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <MX_I2C1_Init+0x58>)
 8001e1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <MX_I2C1_Init+0x50>)
 8001e4a:	f001 fbcb 	bl	80035e4 <HAL_I2C_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e54:	f000 fb9c 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000698 	.word	0x20000698
 8001e60:	40005400 	.word	0x40005400
 8001e64:	000186a0 	.word	0x000186a0

08001e68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e6e:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <MX_SPI1_Init+0x6c>)
 8001e70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e80:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001e9e:	2218      	movs	r2, #24
 8001ea0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001eb6:	220a      	movs	r2, #10
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_SPI1_Init+0x68>)
 8001ebc:	f004 fa82 	bl	80063c4 <HAL_SPI_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001ec6:	f000 fb63 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200006ec 	.word	0x200006ec
 8001ed4:	40013000 	.word	0x40013000

08001ed8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ede:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <MX_SPI2_Init+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f24:	220a      	movs	r2, #10
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_SPI2_Init+0x64>)
 8001f2a:	f004 fa4b 	bl	80063c4 <HAL_SPI_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f34:	f000 fb2c 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000744 	.word	0x20000744
 8001f40:	40003800 	.word	0x40003800

08001f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	; 0x38
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	615a      	str	r2, [r3, #20]
 8001f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <MX_TIM2_Init+0xe8>)
 8001f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <MX_TIM2_Init+0xe8>)
 8001f7e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001f82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <MX_TIM2_Init+0xe8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <MX_TIM2_Init+0xe8>)
 8001f8c:	2231      	movs	r2, #49	; 0x31
 8001f8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <MX_TIM2_Init+0xe8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <MX_TIM2_Init+0xe8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f9c:	4823      	ldr	r0, [pc, #140]	; (800202c <MX_TIM2_Init+0xe8>)
 8001f9e:	f004 fe43 	bl	8006c28 <HAL_TIM_Base_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fa8:	f000 faf2 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481c      	ldr	r0, [pc, #112]	; (800202c <MX_TIM2_Init+0xe8>)
 8001fba:	f005 faa1 	bl	8007500 <HAL_TIM_ConfigClockSource>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fc4:	f000 fae4 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fc8:	4818      	ldr	r0, [pc, #96]	; (800202c <MX_TIM2_Init+0xe8>)
 8001fca:	f004 ff61 	bl	8006e90 <HAL_TIM_PWM_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001fd4:	f000 fadc 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe0:	f107 0320 	add.w	r3, r7, #32
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4811      	ldr	r0, [pc, #68]	; (800202c <MX_TIM2_Init+0xe8>)
 8001fe8:	f005 fe46 	bl	8007c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ff2:	f000 facd 	bl	8002590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff6:	2360      	movs	r3, #96	; 0x60
 8001ff8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001ffa:	2318      	movs	r3, #24
 8001ffc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2208      	movs	r2, #8
 800200a:	4619      	mov	r1, r3
 800200c:	4807      	ldr	r0, [pc, #28]	; (800202c <MX_TIM2_Init+0xe8>)
 800200e:	f005 f9b5 	bl	800737c <HAL_TIM_PWM_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002018:	f000 faba 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <MX_TIM2_Init+0xe8>)
 800201e:	f000 fe93 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 8002022:	bf00      	nop
 8002024:	3738      	adds	r7, #56	; 0x38
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000079c 	.word	0x2000079c

08002030 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	463b      	mov	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_TIM3_Init+0x94>)
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <MX_TIM3_Init+0x98>)
 8002050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_TIM3_Init+0x94>)
 8002054:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002058:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_TIM3_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_TIM3_Init+0x94>)
 8002062:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002066:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_TIM3_Init+0x94>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MX_TIM3_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002074:	4813      	ldr	r0, [pc, #76]	; (80020c4 <MX_TIM3_Init+0x94>)
 8002076:	f004 fdd7 	bl	8006c28 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002080:	f000 fa86 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	4619      	mov	r1, r3
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MX_TIM3_Init+0x94>)
 8002092:	f005 fa35 	bl	8007500 <HAL_TIM_ConfigClockSource>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800209c:	f000 fa78 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_TIM3_Init+0x94>)
 80020ae:	f005 fde3 	bl	8007c78 <HAL_TIMEx_MasterConfigSynchronization>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020b8:	f000 fa6a 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200007e4 	.word	0x200007e4
 80020c8:	40000400 	.word	0x40000400

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <MX_GPIO_Init+0xdc>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <MX_GPIO_Init+0xdc>)
 80020ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <MX_GPIO_Init+0xdc>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <MX_GPIO_Init+0xdc>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <MX_GPIO_Init+0xdc>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <MX_GPIO_Init+0xdc>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <MX_GPIO_Init+0xdc>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <MX_GPIO_Init+0xdc>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <MX_GPIO_Init+0xdc>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 718c 	mov.w	r1, #280	; 0x118
 800213c:	481b      	ldr	r0, [pc, #108]	; (80021ac <MX_GPIO_Init+0xe0>)
 800213e:	f001 fa37 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2122      	movs	r1, #34	; 0x22
 8002146:	481a      	ldr	r0, [pc, #104]	; (80021b0 <MX_GPIO_Init+0xe4>)
 8002148:	f001 fa32 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800214c:	2302      	movs	r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4619      	mov	r1, r3
 800215e:	4813      	ldr	r0, [pc, #76]	; (80021ac <MX_GPIO_Init+0xe0>)
 8002160:	f001 f88a 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002164:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	4619      	mov	r1, r3
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <MX_GPIO_Init+0xe0>)
 800217e:	f001 f87b 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002182:	2322      	movs	r3, #34	; 0x22
 8002184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002186:	2301      	movs	r3, #1
 8002188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_GPIO_Init+0xe4>)
 800219a:	f001 f86d 	bl	8003278 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800219e:	bf00      	nop
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400

080021b4 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021bc:	f00c f8f6 	bl	800e3ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 80021c0:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <Start_Init+0x80>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00a fb3d 	bl	800c844 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <Start_Init+0x84>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00a fb38 	bl	800c844 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <Start_Init+0x88>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f00a fb33 	bl	800c844 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <Start_Init+0x8c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00a fb2e 	bl	800c844 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <Start_Init+0x90>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00a fb29 	bl	800c844 <vTaskSuspend>

    MFRC_INIT();
 80021f2:	f7fe faf1 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 80021f6:	f7fe faa7 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 80021fa:	f7fe fe29 	bl	8000e50 <OLED_INIT>
    OLED_Print(TC);
 80021fe:	4812      	ldr	r0, [pc, #72]	; (8002248 <Start_Init+0x94>)
 8002200:	f7fe ff6b 	bl	80010da <OLED_Print>
    MEM_INIT();
 8002204:	f7ff fafe 	bl	8001804 <MEM_INIT>
    memory_reset();
 8002208:	f7ff fca7 	bl	8001b5a <memory_reset>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 800220c:	bf00      	nop
 800220e:	2102      	movs	r1, #2
 8002210:	480e      	ldr	r0, [pc, #56]	; (800224c <Start_Init+0x98>)
 8002212:	f001 f9b5 	bl	8003580 <HAL_GPIO_ReadPin>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f8      	bne.n	800220e <Start_Init+0x5a>
    vTaskResume(HomeHandle);
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <Start_Init+0x88>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f00a fbb7 	bl	800c994 <vTaskResume>
    osDelay(10);
 8002226:	200a      	movs	r0, #10
 8002228:	f009 fa99 	bl	800b75e <osDelay>
    vTaskSuspend(NULL);
 800222c:	2000      	movs	r0, #0
 800222e:	f00a fb09 	bl	800c844 <vTaskSuspend>
	vTaskSuspend(ReadCardHandle);
 8002232:	e7c5      	b.n	80021c0 <Start_Init+0xc>
 8002234:	20000830 	.word	0x20000830
 8002238:	20000834 	.word	0x20000834
 800223c:	20000838 	.word	0x20000838
 8002240:	2000083c 	.word	0x2000083c
 8002244:	20000840 	.word	0x20000840
 8002248:	20000400 	.word	0x20000400
 800224c:	40020000 	.word	0x40020000

08002250 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002258:	201c      	movs	r0, #28
 800225a:	f00c fdbb 	bl	800edd4 <malloc>
 800225e:	4603      	mov	r3, r0
 8002260:	60fb      	str	r3, [r7, #12]
	int ranonce = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
	MFRC_ANTON();
 800226a:	f7fe fa33 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002274:	2100      	movs	r1, #0
 8002276:	4814      	ldr	r0, [pc, #80]	; (80022c8 <StartReadCard+0x78>)
 8002278:	f7fe fffa 	bl	8001270 <OLED_SCREEN>
		ranonce++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
	}
	if(UL_readcard(read_card) == PCD_OK){
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fc99 	bl	8000bbc <UL_readcard>
 800228a:	4603      	mov	r3, r0
 800228c:	2bcc      	cmp	r3, #204	; 0xcc
 800228e:	d10d      	bne.n	80022ac <StartReadCard+0x5c>
			BUZZ();
 8002290:	f7ff fc7a 	bl	8001b88 <BUZZ>
			MFRC_ANTOFF();
 8002294:	f7fe fa58 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0); //Send a pointer to our string to the Card Found task to use
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <StartReadCard+0x7c>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	f107 010c 	add.w	r1, r7, #12
 80022a0:	2300      	movs	r3, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	f009 fd10 	bl	800bcc8 <xQueueGenericSend>
			suspend = 1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
		}
	if (suspend == 1) {
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d1d9      	bne.n	8002266 <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <StartReadCard+0x80>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00a fb6c 	bl	800c994 <vTaskResume>
		ranonce = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f00a fabf 	bl	800c844 <vTaskSuspend>
  {
 80022c6:	e7ce      	b.n	8002266 <StartReadCard+0x16>
 80022c8:	0800fcd0 	.word	0x0800fcd0
 80022cc:	20000844 	.word	0x20000844
 80022d0:	2000083c 	.word	0x2000083c

080022d4 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 80022e6:	2100      	movs	r1, #0
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <StartWriteCard+0x28>)
 80022ea:	f7fe ffc1 	bl	8001270 <OLED_SCREEN>
	  	ranonce++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f009 fa32 	bl	800b75e <osDelay>
	  if (ranonce == 0){
 80022fa:	e7f1      	b.n	80022e0 <StartWriteCard+0xc>
 80022fc:	0800fcf8 	.word	0x0800fcf8

08002300 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8
 8002306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 800231a:	2100      	movs	r1, #0
 800231c:	481d      	ldr	r0, [pc, #116]	; (8002394 <StartHome+0x94>)
 800231e:	f7fe ffa7 	bl	8001270 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2201      	movs	r2, #1
 8002328:	4619      	mov	r1, r3
 800232a:	481a      	ldr	r0, [pc, #104]	; (8002394 <StartHome+0x94>)
 800232c:	f7ff f80a 	bl	8001344 <OLED_SELECT>
		  ranonce++;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 8002336:	f107 0210 	add.w	r2, r7, #16
 800233a:	f107 010c 	add.w	r1, r7, #12
 800233e:	2301      	movs	r3, #1
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2306      	movs	r3, #6
 8002344:	4813      	ldr	r0, [pc, #76]	; (8002394 <StartHome+0x94>)
 8002346:	f7ff fc31 	bl	8001bac <choose>
	  if (suspend == 1) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d1df      	bne.n	8002310 <StartHome+0x10>
		switch(count) {
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d012      	beq.n	800237c <StartHome+0x7c>
 8002356:	2b02      	cmp	r3, #2
 8002358:	d816      	bhi.n	8002388 <StartHome+0x88>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <StartHome+0x64>
 800235e:	2b01      	cmp	r3, #1
 8002360:	d006      	beq.n	8002370 <StartHome+0x70>
 8002362:	e011      	b.n	8002388 <StartHome+0x88>
			case 0:
				vTaskResume(ReadCardHandle);
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <StartHome+0x98>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f00a fb13 	bl	800c994 <vTaskResume>
				break;
 800236e:	e00b      	b.n	8002388 <StartHome+0x88>
			case 1:
				vTaskResume(WriteCardHandle);
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <StartHome+0x9c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f00a fb0d 	bl	800c994 <vTaskResume>
				break;
 800237a:	e005      	b.n	8002388 <StartHome+0x88>
			case 2:
				vTaskResume(ShowFilesHandle);
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <StartHome+0xa0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f00a fb07 	bl	800c994 <vTaskResume>
				break;
 8002386:	bf00      	nop
		}
		ranonce = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 800238c:	2000      	movs	r0, #0
 800238e:	f00a fa59 	bl	800c844 <vTaskSuspend>
  {
 8002392:	e7bd      	b.n	8002310 <StartHome+0x10>
 8002394:	0800fcbc 	.word	0x0800fcbc
 8002398:	20000830 	.word	0x20000830
 800239c:	20000834 	.word	0x20000834
 80023a0:	20000840 	.word	0x20000840

080023a4 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
	 int ranonce = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
	 Card* read_card;
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
	if (ranonce == 0) {
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d131      	bne.n	8002422 <CardFoundStart+0x7e>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 80023be:	bf00      	nop
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <CardFoundStart+0xd0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f107 010c 	add.w	r1, r7, #12
 80023c8:	2200      	movs	r2, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f009 fe16 	bl	800bffc <xQueueReceive>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d1f4      	bne.n	80023c0 <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	791b      	ldrb	r3, [r3, #4]
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f7fe fc2d 	bl	8000c40 <uid_tostring>
 80023e6:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 80023e8:	2100      	movs	r1, #0
 80023ea:	4823      	ldr	r0, [pc, #140]	; (8002478 <CardFoundStart+0xd4>)
 80023ec:	f7fe ff40 	bl	8001270 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	2101      	movs	r1, #1
 80023f4:	4820      	ldr	r0, [pc, #128]	; (8002478 <CardFoundStart+0xd4>)
 80023f6:	f7fe ff74 	bl	80012e2 <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	461a      	mov	r2, r3
 8002400:	2102      	movs	r1, #2
 8002402:	481d      	ldr	r0, [pc, #116]	; (8002478 <CardFoundStart+0xd4>)
 8002404:	f7fe ff6d 	bl	80012e2 <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2200      	movs	r2, #0
 800240e:	4619      	mov	r1, r3
 8002410:	4819      	ldr	r0, [pc, #100]	; (8002478 <CardFoundStart+0xd4>)
 8002412:	f7fe ff97 	bl	8001344 <OLED_SELECT>
		ranonce++;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3301      	adds	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 800241c:	69b8      	ldr	r0, [r7, #24]
 800241e:	f00c fce1 	bl	800ede4 <free>
	}

	choose(&SCRN_CardFound, &suspend, &count, 2, OLED_NORESTORE);
 8002422:	f107 0210 	add.w	r2, r7, #16
 8002426:	f107 0108 	add.w	r1, r7, #8
 800242a:	2300      	movs	r3, #0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2302      	movs	r3, #2
 8002430:	4811      	ldr	r0, [pc, #68]	; (8002478 <CardFoundStart+0xd4>)
 8002432:	f7ff fbbb 	bl	8001bac <choose>
 	if (suspend == 1) {
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d1bb      	bne.n	80023b4 <CardFoundStart+0x10>
 		vTaskResume(HomeHandle);
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <CardFoundStart+0xd8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f00a faa7 	bl	800c994 <vTaskResume>
 		if (count == 0) {
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <CardFoundStart+0xc0>
 			int free_block = mem_find_free_block();
 800244c:	f7ff fb5e 	bl	8001b0c <mem_find_free_block>
 8002450:	6178      	str	r0, [r7, #20]
 			enter_card(read_card, mem_find_free_block());
 8002452:	68fc      	ldr	r4, [r7, #12]
 8002454:	f7ff fb5a 	bl	8001b0c <mem_find_free_block>
 8002458:	4603      	mov	r3, r0
 800245a:	b29b      	uxth	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	4620      	mov	r0, r4
 8002460:	f000 f89b 	bl	800259a <enter_card>
 		}
 		ranonce = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
 		count = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
 		vTaskSuspend(NULL);
 800246c:	2000      	movs	r0, #0
 800246e:	f00a f9e9 	bl	800c844 <vTaskSuspend>
  {
 8002472:	e79f      	b.n	80023b4 <CardFoundStart+0x10>
 8002474:	20000844 	.word	0x20000844
 8002478:	0800fce4 	.word	0x0800fce4
 800247c:	20000838 	.word	0x20000838

08002480 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
  int count = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  int ranonce = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
	/* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
	  if (ranonce == 0) {
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <StartShowFiles+0x3a>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 800249a:	2100      	movs	r1, #0
 800249c:	4830      	ldr	r0, [pc, #192]	; (8002560 <StartShowFiles+0xe0>)
 800249e:	f7fe fee7 	bl	8001270 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 80024a2:	2201      	movs	r2, #1
 80024a4:	2100      	movs	r1, #0
 80024a6:	482e      	ldr	r0, [pc, #184]	; (8002560 <StartShowFiles+0xe0>)
 80024a8:	f7fe ff4c 	bl	8001344 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 80024ac:	2100      	movs	r1, #0
 80024ae:	482c      	ldr	r0, [pc, #176]	; (8002560 <StartShowFiles+0xe0>)
 80024b0:	f7fe ffe0 	bl	8001474 <OLED_display_files>
		  ranonce++;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_ShowFiles, &suspend, &count, 4, OLED_RESTORE);
 80024ba:	f107 020c 	add.w	r2, r7, #12
 80024be:	f107 0108 	add.w	r1, r7, #8
 80024c2:	2301      	movs	r3, #1
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2304      	movs	r3, #4
 80024c8:	4825      	ldr	r0, [pc, #148]	; (8002560 <StartShowFiles+0xe0>)
 80024ca:	f7ff fb6f 	bl	8001bac <choose>
	  if (suspend == 1) {
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d1dd      	bne.n	8002490 <StartShowFiles+0x10>
		  if (count == 3) {
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d10b      	bne.n	80024f2 <StartShowFiles+0x72>
			  vTaskResume(HomeHandle);
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <StartShowFiles+0xe4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f00a fa58 	bl	800c994 <vTaskResume>
			  count = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
			  ranonce = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
			  vTaskSuspend(NULL);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f00a f9a9 	bl	800c844 <vTaskSuspend>
		  }
		  if ((entry_present(count) == RFS_OK)) {
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fad3 	bl	8002aa2 <entry_present>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1c6      	bne.n	8002490 <StartShowFiles+0x10>
			  suspend = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
			  ranonce = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
			  uint16_t entry = count;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	827b      	strh	r3, [r7, #18]
			  oled_show_file(entry);
 800250e:	8a7b      	ldrh	r3, [r7, #18]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff f84d 	bl	80015b0 <oled_show_file>
			  count = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]

			  while(1) {
				  choose(&SCRN_FileData, &suspend, &count, 2, OLED_NORESTORE);
 800251a:	f107 020c 	add.w	r2, r7, #12
 800251e:	f107 0108 	add.w	r1, r7, #8
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2302      	movs	r3, #2
 8002528:	480f      	ldr	r0, [pc, #60]	; (8002568 <StartShowFiles+0xe8>)
 800252a:	f7ff fb3f 	bl	8001bac <choose>
				  if (suspend == 1) {
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d1f2      	bne.n	800251a <StartShowFiles+0x9a>
					  if (count == 1) {
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <StartShowFiles+0xc6>
						  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 800253a:	2201      	movs	r2, #1
 800253c:	2100      	movs	r1, #0
 800253e:	4808      	ldr	r0, [pc, #32]	; (8002560 <StartShowFiles+0xe0>)
 8002540:	f7fe ff00 	bl	8001344 <OLED_SELECT>
						  break;
 8002544:	e00b      	b.n	800255e <StartShowFiles+0xde>
					  } else if (count == 0) {
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e6      	bne.n	800251a <StartShowFiles+0x9a>
						  remove_card(entry);
 800254c:	8a7b      	ldrh	r3, [r7, #18]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fac4 	bl	8002adc <remove_card>
						  OLED_SELECT(&SCRN_ShowFiles, 0, OLED_RESTORE);
 8002554:	2201      	movs	r2, #1
 8002556:	2100      	movs	r1, #0
 8002558:	4801      	ldr	r0, [pc, #4]	; (8002560 <StartShowFiles+0xe0>)
 800255a:	f7fe fef3 	bl	8001344 <OLED_SELECT>
  {
 800255e:	e797      	b.n	8002490 <StartShowFiles+0x10>
 8002560:	0800fd0c 	.word	0x0800fd0c
 8002564:	20000838 	.word	0x20000838
 8002568:	0800fd20 	.word	0x0800fd20

0800256c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800257e:	f000 fd55 	bl	800302c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40000c00 	.word	0x40000c00

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	e7fe      	b.n	8002598 <Error_Handler+0x8>

0800259a <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 800259a:	b5b0      	push	{r4, r5, r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f8ec 	bl	800178c <block_erase>
	enter_metadata(card, entry);
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	4619      	mov	r1, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f83f 	bl	800263c <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 80025be:	89fb      	ldrh	r3, [r7, #14]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29c      	uxth	r4, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689d      	ldr	r5, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd fe07 	bl	80001e0 <strlen>
 80025d2:	4603      	mov	r3, r0
 80025d4:	462a      	mov	r2, r5
 80025d6:	2100      	movs	r1, #0
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff f92f 	bl	800183c <MEM_WRITE>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 80025e4:	2304      	movs	r3, #4
 80025e6:	e025      	b.n	8002634 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80025e8:	89fb      	ldrh	r3, [r7, #14]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29c      	uxth	r4, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd fdf4 	bl	80001e0 <strlen>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b299      	uxth	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff f919 	bl	800183c <MEM_WRITE>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 8002610:	2304      	movs	r3, #4
 8002612:	e00f      	b.n	8002634 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	3302      	adds	r3, #2
 8002618:	b298      	uxth	r0, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8b1b      	ldrh	r3, [r3, #24]
 8002622:	2100      	movs	r1, #0
 8002624:	f7ff f90a 	bl	800183c <MEM_WRITE>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <enter_card+0x98>
		return RFS_WRITE_ERROR;
 800262e:	2304      	movs	r3, #4
 8002630:	e000      	b.n	8002634 <enter_card+0x9a>
	}

	return RFS_OK;
 8002632:	2300      	movs	r3, #0

}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bdb0      	pop	{r4, r5, r7, pc}

0800263c <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8b1b      	ldrh	r3, [r3, #24]
 800264c:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7c1b      	ldrb	r3, [r3, #16]
 8002652:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd fdbe 	bl	80001e0 <strlen>
 8002664:	4603      	mov	r3, r0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3303      	adds	r3, #3
 800266a:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 800266c:	7b3b      	ldrb	r3, [r7, #12]
 800266e:	4618      	mov	r0, r3
 8002670:	f00c fbb0 	bl	800edd4 <malloc>
 8002674:	4603      	mov	r3, r0
 8002676:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68dc      	ldr	r4, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fdad 	bl	80001e0 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4621      	mov	r1, r4
 800268c:	68b8      	ldr	r0, [r7, #8]
 800268e:	f00c fbb1 	bl	800edf4 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd fda2 	bl	80001e0 <strlen>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd fd98 	bl	80001e0 <strlen>
 80026b0:	4603      	mov	r3, r0
 80026b2:	3301      	adds	r3, #1
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	4413      	add	r3, r2
 80026b8:	7b7a      	ldrb	r2, [r7, #13]
 80026ba:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fd8d 	bl	80001e0 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	3302      	adds	r3, #2
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	7bba      	ldrb	r2, [r7, #14]
 80026d0:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	b298      	uxth	r0, r3
 80026d8:	7b3b      	ldrb	r3, [r7, #12]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	2100      	movs	r1, #0
 80026de:	f7ff f8ad 	bl	800183c <MEM_WRITE>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <enter_metadata+0xb6>
		free(metadata);
 80026e8:	68b8      	ldr	r0, [r7, #8]
 80026ea:	f00c fb7b 	bl	800ede4 <free>
		return RFS_WRITE_ERROR;
 80026ee:	2304      	movs	r3, #4
 80026f0:	e003      	b.n	80026fa <enter_metadata+0xbe>
	}
	free(metadata);
 80026f2:	68b8      	ldr	r0, [r7, #8]
 80026f4:	f00c fb76 	bl	800ede4 <free>
	return RFS_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}

08002702 <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 800270c:	201c      	movs	r0, #28
 800270e:	f00c fb61 	bl	800edd4 <malloc>
 8002712:	4603      	mov	r3, r0
 8002714:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	4619      	mov	r1, r3
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f81e 	bl	800275c <read_metadata>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <read_card_entry+0x28>
		return NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	e014      	b.n	8002754 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	4619      	mov	r1, r3
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f881 	bl	8002836 <read_nameuid>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <read_card_entry+0x3c>
		return NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	e00a      	b.n	8002754 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f8e2 	bl	800290c <read_cardcontents>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <read_card_entry+0x50>
		return NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <read_card_entry+0x52>
	}

	return result;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f8f5 	bl	800295c <get_datasize>
 8002772:	4603      	mov	r3, r0
 8002774:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8002776:	8afb      	ldrh	r3, [r7, #22]
 8002778:	4618      	mov	r0, r3
 800277a:	f00c fb2b 	bl	800edd4 <malloc>
 800277e:	4603      	mov	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 8002782:	8afb      	ldrh	r3, [r7, #22]
 8002784:	3b02      	subs	r3, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f00c fb24 	bl	800edd4 <malloc>
 800278c:	4603      	mov	r3, r0
 800278e:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	019b      	lsls	r3, r3, #6
 8002794:	b298      	uxth	r0, r3
 8002796:	8afb      	ldrh	r3, [r7, #22]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	2100      	movs	r1, #0
 800279c:	f7ff f8e4 	bl	8001968 <MEM_READPAGE>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <read_metadata+0x54>
		free(metadata);
 80027a6:	6938      	ldr	r0, [r7, #16]
 80027a8:	f00c fb1c 	bl	800ede4 <free>
		return RFS_READ_ERROR;
 80027ac:	2305      	movs	r3, #5
 80027ae:	e03e      	b.n	800282e <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2bff      	cmp	r3, #255	; 0xff
 80027b6:	d104      	bne.n	80027c2 <read_metadata+0x66>
		free(metadata);
 80027b8:	6938      	ldr	r0, [r7, #16]
 80027ba:	f00c fb13 	bl	800ede4 <free>
		return RFS_NO_CARD;
 80027be:	2301      	movs	r3, #1
 80027c0:	e035      	b.n	800282e <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 80027c2:	8afb      	ldrh	r3, [r7, #22]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	461a      	mov	r2, r3
 80027c8:	6939      	ldr	r1, [r7, #16]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f00c fb12 	bl	800edf4 <memcpy>
	type[metadata_size - 3] = '\0';
 80027d0:	8afb      	ldrh	r3, [r7, #22]
 80027d2:	3b03      	subs	r3, #3
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80027e2:	8afb      	ldrh	r3, [r7, #22]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80027f2:	8afb      	ldrh	r3, [r7, #22]
 80027f4:	3b02      	subs	r3, #2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 8002800:	8afb      	ldrh	r3, [r7, #22]
 8002802:	3b01      	subs	r3, #1
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d104      	bne.n	8002818 <read_metadata+0xbc>
		free(metadata);
 800280e:	6938      	ldr	r0, [r7, #16]
 8002810:	f00c fae8 	bl	800ede4 <free>
		return RFS_CARD_PROTECTED;
 8002814:	2303      	movs	r3, #3
 8002816:	e00a      	b.n	800282e <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 8002818:	8afb      	ldrh	r3, [r7, #22]
 800281a:	3b01      	subs	r3, #1
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8002826:	6938      	ldr	r0, [r7, #16]
 8002828:	f00c fadc 	bl	800ede4 <free>

	return RFS_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f888 	bl	800295c <get_datasize>
 800284c:	4603      	mov	r3, r0
 800284e:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8002850:	8afb      	ldrh	r3, [r7, #22]
 8002852:	4618      	mov	r0, r3
 8002854:	f00c fabe 	bl	800edd4 <malloc>
 8002858:	4603      	mov	r3, r0
 800285a:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 800285c:	8afb      	ldrh	r3, [r7, #22]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	7912      	ldrb	r2, [r2, #4]
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	3301      	adds	r3, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f00c fab4 	bl	800edd4 <malloc>
 800286c:	4603      	mov	r3, r0
 800286e:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	4618      	mov	r0, r3
 8002876:	f00c faad 	bl	800edd4 <malloc>
 800287a:	4603      	mov	r3, r0
 800287c:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	b29b      	uxth	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	b298      	uxth	r0, r3
 8002888:	8afb      	ldrh	r3, [r7, #22]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	2100      	movs	r1, #0
 800288e:	f7ff f86b 	bl	8001968 <MEM_READPAGE>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <read_nameuid+0x6c>
		free(raw_data);
 8002898:	6938      	ldr	r0, [r7, #16]
 800289a:	f00c faa3 	bl	800ede4 <free>
		return RFS_READ_ERROR;
 800289e:	2305      	movs	r3, #5
 80028a0:	e030      	b.n	8002904 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2bff      	cmp	r3, #255	; 0xff
 80028a8:	d104      	bne.n	80028b4 <read_nameuid+0x7e>
		free(raw_data);
 80028aa:	6938      	ldr	r0, [r7, #16]
 80028ac:	f00c fa9a 	bl	800ede4 <free>
		return RFS_NO_CARD;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e027      	b.n	8002904 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 80028b4:	8afb      	ldrh	r3, [r7, #22]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	7912      	ldrb	r2, [r2, #4]
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	6939      	ldr	r1, [r7, #16]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f00c fa97 	bl	800edf4 <memcpy>
	name[datasize - result->uidsize] = '\0';
 80028c6:	8afb      	ldrh	r3, [r7, #22]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	7912      	ldrb	r2, [r2, #4]
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7fd fc7e 	bl	80001e0 <strlen>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1899      	adds	r1, r3, r2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	791b      	ldrb	r3, [r3, #4]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68b8      	ldr	r0, [r7, #8]
 80028f2:	f00c fa7f 	bl	800edf4 <memcpy>
	result->uid = uid;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	601a      	str	r2, [r3, #0]
	free(raw_data);
 80028fc:	6938      	ldr	r0, [r7, #16]
 80028fe:	f00c fa71 	bl	800ede4 <free>

	return RFS_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8b1b      	ldrh	r3, [r3, #24]
 800291c:	4618      	mov	r0, r3
 800291e:	f00c fa59 	bl	800edd4 <malloc>
 8002922:	4603      	mov	r3, r0
 8002924:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	b29b      	uxth	r3, r3
 800292c:	3302      	adds	r3, #2
 800292e:	b298      	uxth	r0, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8b1b      	ldrh	r3, [r3, #24]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	2100      	movs	r1, #0
 8002938:	f7ff f816 	bl	8001968 <MEM_READPAGE>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <read_cardcontents+0x40>
		free(contents);
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f00c fa4e 	bl	800ede4 <free>
		return RFS_READ_ERROR;
 8002948:	2305      	movs	r3, #5
 800294a:	e003      	b.n	8002954 <read_cardcontents+0x48>
	}

	result->contents = contents;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	80fb      	strh	r3, [r7, #6]
 8002968:	4613      	mov	r3, r2
 800296a:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8002970:	2300      	movs	r3, #0
 8002972:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8002974:	e014      	b.n	80029a0 <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	b29a      	uxth	r2, r3
 800297c:	797b      	ldrb	r3, [r7, #5]
 800297e:	b29b      	uxth	r3, r3
 8002980:	4413      	add	r3, r2
 8002982:	b298      	uxth	r0, r3
 8002984:	f107 020d 	add.w	r2, r7, #13
 8002988:	89f9      	ldrh	r1, [r7, #14]
 800298a:	2301      	movs	r3, #1
 800298c:	f7fe ffec 	bl	8001968 <MEM_READPAGE>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8002996:	2300      	movs	r3, #0
 8002998:	e008      	b.n	80029ac <get_datasize+0x50>
		}
		size++;
 800299a:	89fb      	ldrh	r3, [r7, #14]
 800299c:	3301      	adds	r3, #1
 800299e:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	2bff      	cmp	r3, #255	; 0xff
 80029a4:	d1e7      	bne.n	8002976 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29b      	uxth	r3, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
	int count = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 80029be:	2300      	movs	r3, #0
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	e00d      	b.n	80029e0 <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f86a 	bl	8002aa2 <entry_present>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <get_number_files+0x36>
			count++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e6:	dbed      	blt.n	80029c4 <get_number_files+0x10>
 80029e8:	e000      	b.n	80029ec <get_number_files+0x38>
		} else {
			break;
 80029ea:	bf00      	nop
		}

	}

	return count;
 80029ec:	687b      	ldr	r3, [r7, #4]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 80029f6:	b5b0      	push	{r4, r5, r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	e040      	b.n	8002a86 <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f84a 	bl	8002aa2 <entry_present>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d13d      	bne.n	8002a90 <get_all_files+0x9a>
			work = read_card_entry(i);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fe72 	bl	8002702 <read_card_entry>
 8002a1e:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fbdb 	bl	80001e0 <strlen>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	1c59      	adds	r1, r3, #1
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	18d4      	adds	r4, r2, r3
 8002a36:	4608      	mov	r0, r1
 8002a38:	f00c f9cc 	bl	800edd4 <malloc>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	681c      	ldr	r4, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689d      	ldr	r5, [r3, #8]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fbc4 	bl	80001e0 <strlen>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f00c f9c8 	bl	800edf4 <memcpy>
			result[i][strlen(work->name)] = '\0';
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	681c      	ldr	r4, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fbb4 	bl	80001e0 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4423      	add	r3, r4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8c:	dbba      	blt.n	8002a04 <get_all_files+0xe>
 8002a8e:	e000      	b.n	8002a92 <get_all_files+0x9c>
		} else {
			break;
 8002a90:	bf00      	nop
		}
	}

	free(work);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f00c f9a6 	bl	800ede4 <free>
	return RFS_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bdb0      	pop	{r4, r5, r7, pc}

08002aa2 <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	019b      	lsls	r3, r3, #6
 8002ab0:	b298      	uxth	r0, r3
 8002ab2:	f107 020f 	add.w	r2, r7, #15
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f7fe ff55 	bl	8001968 <MEM_READPAGE>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <entry_present+0x26>
		return RFS_READ_ERROR;
 8002ac4:	2305      	movs	r3, #5
 8002ac6:	e005      	b.n	8002ad4 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	d101      	bne.n	8002ad2 <entry_present+0x30>
		return RFS_NO_CARD;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <entry_present+0x32>
	}

	return RFS_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fe4f 	bl	800178c <block_erase>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_MspInit+0x54>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_MspInit+0x54>)
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_MspInit+0x54>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_MspInit+0x54>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_MspInit+0x54>)
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_MspInit+0x54>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	210f      	movs	r1, #15
 8002b3a:	f06f 0001 	mvn.w	r0, #1
 8002b3e:	f000 fb71 	bl	8003224 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_I2C_MspInit+0x84>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d12b      	bne.n	8002bca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b8e:	23c0      	movs	r3, #192	; 0xc0
 8002b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b92:	2312      	movs	r3, #18
 8002b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480c      	ldr	r0, [pc, #48]	; (8002bdc <HAL_I2C_MspInit+0x8c>)
 8002baa:	f000 fb65 	bl	8003278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_I2C_MspInit+0x88>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40005400 	.word	0x40005400
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020400 	.word	0x40020400

08002be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_SPI_MspInit+0xe8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d12c      	bne.n	8002c5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a30      	ldr	r2, [pc, #192]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c3a:	23a0      	movs	r3, #160	; 0xa0
 8002c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	481e      	ldr	r0, [pc, #120]	; (8002cd0 <HAL_SPI_MspInit+0xf0>)
 8002c56:	f000 fb0f 	bl	8003278 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c5a:	e031      	b.n	8002cc0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_SPI_MspInit+0xf4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12c      	bne.n	8002cc0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_SPI_MspInit+0xec>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002c9e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <HAL_SPI_MspInit+0xf8>)
 8002cbc:	f000 fadc 	bl	8003278 <HAL_GPIO_Init>
}
 8002cc0:	bf00      	nop
 8002cc2:	3730      	adds	r7, #48	; 0x30
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40013000 	.word	0x40013000
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	40003800 	.word	0x40003800
 8002cd8:	40020400 	.word	0x40020400

08002cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d10e      	bne.n	8002d0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_TIM_Base_MspInit+0x64>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <HAL_TIM_Base_MspInit+0x64>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_TIM_Base_MspInit+0x64>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d0a:	e012      	b.n	8002d32 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <HAL_TIM_Base_MspInit+0x68>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10d      	bne.n	8002d32 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_TIM_Base_MspInit+0x64>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_TIM_Base_MspInit+0x64>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_TIM_Base_MspInit+0x64>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40000400 	.word	0x40000400

08002d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d11d      	bne.n	8002da6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_TIM_MspPostInit+0x68>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <HAL_TIM_MspPostInit+0x68>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_TIM_MspPostInit+0x68>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d86:	2304      	movs	r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4804      	ldr	r0, [pc, #16]	; (8002db4 <HAL_TIM_MspPostInit+0x6c>)
 8002da2:	f000 fa69 	bl	8003278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002da6:	bf00      	nop
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020000 	.word	0x40020000

08002db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_InitTick+0xe4>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <HAL_InitTick+0xe4>)
 8002dd2:	f043 0308 	orr.w	r3, r3, #8
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_InitTick+0xe4>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002de4:	f107 0210 	add.w	r2, r7, #16
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fab6 	bl	8006360 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002dfe:	f003 fa9b 	bl	8006338 <HAL_RCC_GetPCLK1Freq>
 8002e02:	6378      	str	r0, [r7, #52]	; 0x34
 8002e04:	e004      	b.n	8002e10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e06:	f003 fa97 	bl	8006338 <HAL_RCC_GetPCLK1Freq>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <HAL_InitTick+0xe8>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	0c9b      	lsrs	r3, r3, #18
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e20:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <HAL_InitTick+0xf0>)
 8002e22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e2a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002e44:	4817      	ldr	r0, [pc, #92]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e46:	f003 feef 	bl	8006c28 <HAL_TIM_Base_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002e50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d11b      	bne.n	8002e90 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002e58:	4812      	ldr	r0, [pc, #72]	; (8002ea4 <HAL_InitTick+0xec>)
 8002e5a:	f003 ffb7 	bl	8006dcc <HAL_TIM_Base_Start_IT>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d111      	bne.n	8002e90 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e6c:	2032      	movs	r0, #50	; 0x32
 8002e6e:	f000 f9f5 	bl	800325c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d808      	bhi.n	8002e8a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	2032      	movs	r0, #50	; 0x32
 8002e7e:	f000 f9d1 	bl	8003224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_InitTick+0xf4>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	e002      	b.n	8002e90 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3738      	adds	r7, #56	; 0x38
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	431bde83 	.word	0x431bde83
 8002ea4:	20000848 	.word	0x20000848
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	2000051c 	.word	0x2000051c

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <NMI_Handler+0x4>

08002eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eba:	e7fe      	b.n	8002eba <HardFault_Handler+0x4>

08002ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <MemManage_Handler+0x4>

08002ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <BusFault_Handler+0x4>

08002ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <UsageFault_Handler+0x4>

08002ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <TIM5_IRQHandler+0x10>)
 8002ee2:	f004 f943 	bl	800716c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000848 	.word	0x20000848

08002ef0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <OTG_FS_IRQHandler+0x10>)
 8002ef6:	f001 fc84 	bl	8004802 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200064e8 	.word	0x200064e8

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f00b ff24 	bl	800ed80 <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20010000 	.word	0x20010000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	20000890 	.word	0x20000890
 8002f6c:	20006c28 	.word	0x20006c28

08002f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SystemInit+0x20>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <SystemInit+0x20>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>

08002fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa6:	3304      	adds	r3, #4

08002fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>

08002fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb8:	3204      	adds	r2, #4

08002fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fbe:	f7ff ffd7 	bl	8002f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc2:	f00b fee3 	bl	800ed8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc6:	f7fe fe3f 	bl	8001c48 <main>
  bx  lr    
 8002fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	2000067c 	.word	0x2000067c
  ldr r2, =_sidata
 8002fd8:	0800fd90 	.word	0x0800fd90
  ldr r2, =_sbss
 8002fdc:	2000067c 	.word	0x2000067c
  ldr r4, =_ebss
 8002fe0:	20006c24 	.word	0x20006c24

08002fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC_IRQHandler>
	...

08002fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_Init+0x40>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_Init+0x40>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_Init+0x40>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003010:	2003      	movs	r0, #3
 8003012:	f000 f8fc 	bl	800320e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003016:	200f      	movs	r0, #15
 8003018:	f7ff fece 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301c:	f7ff fd6c 	bl	8002af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00

0800302c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_IncTick+0x20>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_IncTick+0x24>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_IncTick+0x24>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000520 	.word	0x20000520
 8003050:	20000894 	.word	0x20000894

08003054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return uwTick;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_GetTick+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000894 	.word	0x20000894

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff ffee 	bl	8003054 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_Delay+0x44>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003092:	bf00      	nop
 8003094:	f7ff ffde 	bl	8003054 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000520 	.word	0x20000520

080030b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	60d3      	str	r3, [r2, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <__NVIC_GetPriorityGrouping+0x18>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f003 0307 	and.w	r3, r3, #7
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0b      	blt.n	8003142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <__NVIC_EnableIRQ+0x38>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2001      	movs	r0, #1
 800313a:	fa00 f202 	lsl.w	r2, r0, r2
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db0a      	blt.n	800317e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	490c      	ldr	r1, [pc, #48]	; (80031a0 <__NVIC_SetPriority+0x4c>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	440b      	add	r3, r1
 8003178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800317c:	e00a      	b.n	8003194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <__NVIC_SetPriority+0x50>)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3b04      	subs	r3, #4
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	440b      	add	r3, r1
 8003192:	761a      	strb	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf28      	it	cs
 80031c6:	2304      	movcs	r3, #4
 80031c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <NVIC_EncodePriority+0x30>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3b03      	subs	r3, #3
 80031d6:	e000      	b.n	80031da <NVIC_EncodePriority+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	401a      	ands	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	4313      	orrs	r3, r2
         );
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff4c 	bl	80030b4 <__NVIC_SetPriorityGrouping>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003236:	f7ff ff61 	bl	80030fc <__NVIC_GetPriorityGrouping>
 800323a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	6978      	ldr	r0, [r7, #20]
 8003242:	f7ff ffb1 	bl	80031a8 <NVIC_EncodePriority>
 8003246:	4602      	mov	r2, r0
 8003248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff80 	bl	8003154 <__NVIC_SetPriority>
}
 8003254:	bf00      	nop
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff54 	bl	8003118 <__NVIC_EnableIRQ>
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	; 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e159      	b.n	8003548 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003294:	2201      	movs	r2, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	f040 8148 	bne.w	8003542 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d005      	beq.n	80032ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d130      	bne.n	800332c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 0201 	and.w	r2, r3, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b03      	cmp	r3, #3
 8003336:	d017      	beq.n	8003368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d123      	bne.n	80033bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	08da      	lsrs	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3208      	adds	r2, #8
 80033b6:	69b9      	ldr	r1, [r7, #24]
 80033b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0203 	and.w	r2, r3, #3
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a2 	beq.w	8003542 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b57      	ldr	r3, [pc, #348]	; (8003560 <HAL_GPIO_Init+0x2e8>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_GPIO_Init+0x2e8>)
 8003408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340c:	6453      	str	r3, [r2, #68]	; 0x44
 800340e:	4b54      	ldr	r3, [pc, #336]	; (8003560 <HAL_GPIO_Init+0x2e8>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800341a:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_GPIO_Init+0x2ec>)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	3302      	adds	r3, #2
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	220f      	movs	r2, #15
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a49      	ldr	r2, [pc, #292]	; (8003568 <HAL_GPIO_Init+0x2f0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d019      	beq.n	800347a <HAL_GPIO_Init+0x202>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a48      	ldr	r2, [pc, #288]	; (800356c <HAL_GPIO_Init+0x2f4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_GPIO_Init+0x1fe>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a47      	ldr	r2, [pc, #284]	; (8003570 <HAL_GPIO_Init+0x2f8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00d      	beq.n	8003472 <HAL_GPIO_Init+0x1fa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a46      	ldr	r2, [pc, #280]	; (8003574 <HAL_GPIO_Init+0x2fc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <HAL_GPIO_Init+0x1f6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a45      	ldr	r2, [pc, #276]	; (8003578 <HAL_GPIO_Init+0x300>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d101      	bne.n	800346a <HAL_GPIO_Init+0x1f2>
 8003466:	2304      	movs	r3, #4
 8003468:	e008      	b.n	800347c <HAL_GPIO_Init+0x204>
 800346a:	2307      	movs	r3, #7
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x204>
 800346e:	2303      	movs	r3, #3
 8003470:	e004      	b.n	800347c <HAL_GPIO_Init+0x204>
 8003472:	2302      	movs	r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x204>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x204>
 800347a:	2300      	movs	r3, #0
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	f002 0203 	and.w	r2, r2, #3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4093      	lsls	r3, r2
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348c:	4935      	ldr	r1, [pc, #212]	; (8003564 <HAL_GPIO_Init+0x2ec>)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349a:	4b38      	ldr	r3, [pc, #224]	; (800357c <HAL_GPIO_Init+0x304>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034be:	4a2f      	ldr	r2, [pc, #188]	; (800357c <HAL_GPIO_Init+0x304>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c4:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_GPIO_Init+0x304>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <HAL_GPIO_Init+0x304>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <HAL_GPIO_Init+0x304>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003512:	4a1a      	ldr	r2, [pc, #104]	; (800357c <HAL_GPIO_Init+0x304>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_GPIO_Init+0x304>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800353c:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_GPIO_Init+0x304>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	f67f aea2 	bls.w	8003294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40013800 	.word	0x40013800
 8003568:	40020000 	.word	0x40020000
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800
 8003574:	40020c00 	.word	0x40020c00
 8003578:	40021000 	.word	0x40021000
 800357c:	40013c00 	.word	0x40013c00

08003580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e001      	b.n	80035a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035cc:	e003      	b.n	80035d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ce:	887b      	ldrh	r3, [r7, #2]
 80035d0:	041a      	lsls	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	619a      	str	r2, [r3, #24]
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e12b      	b.n	800384e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff faa0 	bl	8002b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003648:	f002 fe76 	bl	8006338 <HAL_RCC_GetPCLK1Freq>
 800364c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4a81      	ldr	r2, [pc, #516]	; (8003858 <HAL_I2C_Init+0x274>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d807      	bhi.n	8003668 <HAL_I2C_Init+0x84>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a80      	ldr	r2, [pc, #512]	; (800385c <HAL_I2C_Init+0x278>)
 800365c:	4293      	cmp	r3, r2
 800365e:	bf94      	ite	ls
 8003660:	2301      	movls	r3, #1
 8003662:	2300      	movhi	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e006      	b.n	8003676 <HAL_I2C_Init+0x92>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a7d      	ldr	r2, [pc, #500]	; (8003860 <HAL_I2C_Init+0x27c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	bf94      	ite	ls
 8003670:	2301      	movls	r3, #1
 8003672:	2300      	movhi	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0e7      	b.n	800384e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a78      	ldr	r2, [pc, #480]	; (8003864 <HAL_I2C_Init+0x280>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0c9b      	lsrs	r3, r3, #18
 8003688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a6a      	ldr	r2, [pc, #424]	; (8003858 <HAL_I2C_Init+0x274>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d802      	bhi.n	80036b8 <HAL_I2C_Init+0xd4>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3301      	adds	r3, #1
 80036b6:	e009      	b.n	80036cc <HAL_I2C_Init+0xe8>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	4a69      	ldr	r2, [pc, #420]	; (8003868 <HAL_I2C_Init+0x284>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	3301      	adds	r3, #1
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	495c      	ldr	r1, [pc, #368]	; (8003858 <HAL_I2C_Init+0x274>)
 80036e8:	428b      	cmp	r3, r1
 80036ea:	d819      	bhi.n	8003720 <HAL_I2C_Init+0x13c>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e59      	subs	r1, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036fa:	1c59      	adds	r1, r3, #1
 80036fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003700:	400b      	ands	r3, r1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_I2C_Init+0x138>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e59      	subs	r1, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fbb1 f3f3 	udiv	r3, r1, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	e051      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 800371c:	2304      	movs	r3, #4
 800371e:	e04f      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d111      	bne.n	800374c <HAL_I2C_Init+0x168>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e58      	subs	r0, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e012      	b.n	8003772 <HAL_I2C_Init+0x18e>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	0099      	lsls	r1, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Init+0x196>
 8003776:	2301      	movs	r3, #1
 8003778:	e022      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <HAL_I2C_Init+0x1bc>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1e58      	subs	r0, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	440b      	add	r3, r1
 8003790:	fbb0 f3f3 	udiv	r3, r0, r3
 8003794:	3301      	adds	r3, #1
 8003796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	e00f      	b.n	80037c0 <HAL_I2C_Init+0x1dc>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	0099      	lsls	r1, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	6809      	ldr	r1, [r1, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6911      	ldr	r1, [r2, #16]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	000186a0 	.word	0x000186a0
 800385c:	001e847f 	.word	0x001e847f
 8003860:	003d08ff 	.word	0x003d08ff
 8003864:	431bde83 	.word	0x431bde83
 8003868:	10624dd3 	.word	0x10624dd3

0800386c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	4608      	mov	r0, r1
 8003876:	4611      	mov	r1, r2
 8003878:	461a      	mov	r2, r3
 800387a:	4603      	mov	r3, r0
 800387c:	817b      	strh	r3, [r7, #10]
 800387e:	460b      	mov	r3, r1
 8003880:	813b      	strh	r3, [r7, #8]
 8003882:	4613      	mov	r3, r2
 8003884:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003886:	f7ff fbe5 	bl	8003054 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b20      	cmp	r3, #32
 8003896:	f040 80d9 	bne.w	8003a4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2319      	movs	r3, #25
 80038a0:	2201      	movs	r2, #1
 80038a2:	496d      	ldr	r1, [pc, #436]	; (8003a58 <HAL_I2C_Mem_Write+0x1ec>)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fc7f 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0cc      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Mem_Write+0x56>
 80038be:	2302      	movs	r3, #2
 80038c0:	e0c5      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d007      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2221      	movs	r2, #33	; 0x21
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a3a      	ldr	r2, [r7, #32]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a4d      	ldr	r2, [pc, #308]	; (8003a5c <HAL_I2C_Mem_Write+0x1f0>)
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800392a:	88f8      	ldrh	r0, [r7, #6]
 800392c:	893a      	ldrh	r2, [r7, #8]
 800392e:	8979      	ldrh	r1, [r7, #10]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4603      	mov	r3, r0
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fab6 	bl	8003eac <I2C_RequestMemoryWrite>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d052      	beq.n	80039ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e081      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fd00 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b04      	cmp	r3, #4
 8003960:	d107      	bne.n	8003972 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06b      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11b      	bne.n	80039ec <HAL_I2C_Mem_Write+0x180>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d017      	beq.n	80039ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1aa      	bne.n	800394a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fcec 	bl	80043d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d107      	bne.n	8003a1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e016      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	00100002 	.word	0x00100002
 8003a5c:	ffff0000 	.word	0xffff0000

08003a60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	; 0x30
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a7a:	f7ff faeb 	bl	8003054 <HAL_GetTick>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	f040 8208 	bne.w	8003e9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2319      	movs	r3, #25
 8003a94:	2201      	movs	r2, #1
 8003a96:	497b      	ldr	r1, [pc, #492]	; (8003c84 <HAL_I2C_Mem_Read+0x224>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fb85 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e1fb      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2C_Mem_Read+0x56>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e1f4      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d007      	beq.n	8003adc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2222      	movs	r2, #34	; 0x22
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a5b      	ldr	r2, [pc, #364]	; (8003c88 <HAL_I2C_Mem_Read+0x228>)
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1e:	88f8      	ldrh	r0, [r7, #6]
 8003b20:	893a      	ldrh	r2, [r7, #8]
 8003b22:	8979      	ldrh	r1, [r7, #10]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fa52 	bl	8003fd8 <I2C_RequestMemoryRead>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1b0      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d113      	bne.n	8003b6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b46:	2300      	movs	r3, #0
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e184      	b.n	8003e78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d11b      	bne.n	8003bae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e164      	b.n	8003e78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d11b      	bne.n	8003bee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	e144      	b.n	8003e78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c04:	e138      	b.n	8003e78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	f200 80f1 	bhi.w	8003df2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d123      	bne.n	8003c60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fc1b 	bl	8004458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e139      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c5e:	e10b      	b.n	8003e78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d14e      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4906      	ldr	r1, [pc, #24]	; (8003c8c <HAL_I2C_Mem_Read+0x22c>)
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fa98 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e10e      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
 8003c82:	bf00      	nop
 8003c84:	00100002 	.word	0x00100002
 8003c88:	ffff0000 	.word	0xffff0000
 8003c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d04:	e0b8      	b.n	8003e78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4966      	ldr	r1, [pc, #408]	; (8003ea8 <HAL_I2C_Mem_Read+0x448>)
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fa49 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0bf      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2200      	movs	r2, #0
 8003d6a:	494f      	ldr	r1, [pc, #316]	; (8003ea8 <HAL_I2C_Mem_Read+0x448>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fa1b 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e091      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df0:	e042      	b.n	8003e78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fb2e 	bl	8004458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e04c      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d118      	bne.n	8003e78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f47f aec2 	bne.w	8003c06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3728      	adds	r7, #40	; 0x28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	00010004 	.word	0x00010004

08003eac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f960 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efc:	d103      	bne.n	8003f06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e05f      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	492d      	ldr	r1, [pc, #180]	; (8003fd4 <I2C_RequestMemoryWrite+0x128>)
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f998 	bl	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e04c      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	6a39      	ldr	r1, [r7, #32]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fa02 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d107      	bne.n	8003f6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e02b      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f78:	893b      	ldrh	r3, [r7, #8]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	e021      	b.n	8003fc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f9dc 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e005      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	00010002 	.word	0x00010002

08003fd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	817b      	strh	r3, [r7, #10]
 8003fea:	460b      	mov	r3, r1
 8003fec:	813b      	strh	r3, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004000:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	2200      	movs	r2, #0
 800401a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f8c2 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d103      	bne.n	8004042 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0aa      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	4952      	ldr	r1, [pc, #328]	; (80041a4 <I2C_RequestMemoryRead+0x1cc>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f8fa 	bl	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e097      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004084:	6a39      	ldr	r1, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f964 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b04      	cmp	r3, #4
 8004098:	d107      	bne.n	80040aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e076      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]
 80040be:	e021      	b.n	8004104 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f93e 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e050      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040fa:	893b      	ldrh	r3, [r7, #8]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	6a39      	ldr	r1, [r7, #32]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f923 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00d      	beq.n	8004130 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b04      	cmp	r3, #4
 800411a:	d107      	bne.n	800412c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e035      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2200      	movs	r2, #0
 8004148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f82b 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d103      	bne.n	8004170 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e013      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004174:	897b      	ldrh	r3, [r7, #10]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <I2C_RequestMemoryRead+0x1cc>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f863 	bl	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	00010002 	.word	0x00010002

080041a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b8:	e025      	b.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d021      	beq.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe ff47 	bl	8003054 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e023      	b.n	800424e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10d      	bne.n	800422c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	43da      	mvns	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	e00c      	b.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	429a      	cmp	r2, r3
 800424a:	d0b6      	beq.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004264:	e051      	b.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d123      	bne.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004284:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800428e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e046      	b.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d021      	beq.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe fec5 	bl	8003054 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e020      	b.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d10c      	bne.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf14      	ite	ne
 8004326:	2301      	movne	r3, #1
 8004328:	2300      	moveq	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	e00b      	b.n	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	43da      	mvns	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4013      	ands	r3, r2
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d18d      	bne.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004360:	e02d      	b.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8ce 	bl	8004504 <I2C_IsAcknowledgeFailed>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02d      	b.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d021      	beq.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437a:	f7fe fe6b 	bl	8003054 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	d302      	bcc.n	8004390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d116      	bne.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d1ca      	bne.n	8004362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e2:	e02d      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f88d 	bl	8004504 <I2C_IsAcknowledgeFailed>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e02d      	b.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d021      	beq.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fc:	f7fe fe2a 	bl	8003054 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e007      	b.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d1ca      	bne.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004464:	e042      	b.n	80044ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d119      	bne.n	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e029      	b.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fe fdd4 	bl	8003054 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d1b5      	bne.n	8004466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451a:	d11b      	bne.n	8004554 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004524:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0204 	orr.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004564:	b08f      	sub	sp, #60	; 0x3c
 8004566:	af0a      	add	r7, sp, #40	; 0x28
 8004568:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e10f      	b.n	8004794 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f00a f8ec 	bl	800e76c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2203      	movs	r2, #3
 8004598:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f003 fcf7 	bl	8007fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	687e      	ldr	r6, [r7, #4]
 80045c0:	466d      	mov	r5, sp
 80045c2:	f106 0410 	add.w	r4, r6, #16
 80045c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80045d6:	1d33      	adds	r3, r6, #4
 80045d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045da:	6838      	ldr	r0, [r7, #0]
 80045dc:	f003 fbce 	bl	8007d7c <USB_CoreInit>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0d0      	b.n	8004794 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f003 fce5 	bl	8007fc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	e04a      	b.n	800469a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004604:	7bfa      	ldrb	r2, [r7, #15]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	333d      	adds	r3, #61	; 0x3d
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	333c      	adds	r3, #60	; 0x3c
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	b298      	uxth	r0, r3
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3344      	adds	r3, #68	; 0x44
 8004640:	4602      	mov	r2, r0
 8004642:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3340      	adds	r3, #64	; 0x40
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3348      	adds	r3, #72	; 0x48
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	334c      	adds	r3, #76	; 0x4c
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004680:	7bfa      	ldrb	r2, [r7, #15]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	3354      	adds	r3, #84	; 0x54
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	3301      	adds	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d3af      	bcc.n	8004604 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e044      	b.n	8004734 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046c0:	7bfa      	ldrb	r2, [r7, #15]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004718:	7bfa      	ldrb	r2, [r7, #15]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	3301      	adds	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d3b5      	bcc.n	80046aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	687e      	ldr	r6, [r7, #4]
 8004746:	466d      	mov	r5, sp
 8004748:	f106 0410 	add.w	r4, r6, #16
 800474c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004754:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004758:	e885 0003 	stmia.w	r5, {r0, r1}
 800475c:	1d33      	adds	r3, r6, #4
 800475e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004760:	6838      	ldr	r0, [r7, #0]
 8004762:	f003 fc7d 	bl	8008060 <USB_DevInit>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e00d      	b.n	8004794 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f004 fdcc 	bl	800932a <USB_DevDisconnect>

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800479c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_PCD_Start+0x1c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e020      	b.n	80047fa <HAL_PCD_Start+0x5e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d109      	bne.n	80047dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d005      	beq.n	80047dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f003 fbcf 	bl	8007f84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f004 fd7c 	bl	80092e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004802:	b590      	push	{r4, r7, lr}
 8004804:	b08d      	sub	sp, #52	; 0x34
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f004 fe3a 	bl	8009492 <USB_GetMode>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	f040 848a 	bne.w	800513a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f004 fd9e 	bl	800936c <USB_ReadInterrupts>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8480 	beq.w	8005138 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f004 fd8b 	bl	800936c <USB_ReadInterrupts>
 8004856:	4603      	mov	r3, r0
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d107      	bne.n	8004870 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f002 0202 	and.w	r2, r2, #2
 800486e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f004 fd79 	bl	800936c <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d161      	bne.n	8004948 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0210 	bic.w	r2, r2, #16
 8004892:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4413      	add	r3, r2
 80048b0:	3304      	adds	r3, #4
 80048b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	0c5b      	lsrs	r3, r3, #17
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d124      	bne.n	800490a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d035      	beq.n	8004938 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048da:	b29b      	uxth	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	6a38      	ldr	r0, [r7, #32]
 80048e0:	f004 fbb0 	bl	8009044 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f0:	441a      	add	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004902:	441a      	add	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	621a      	str	r2, [r3, #32]
 8004908:	e016      	b.n	8004938 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	0c5b      	lsrs	r3, r3, #17
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	2b06      	cmp	r3, #6
 8004914:	d110      	bne.n	8004938 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800491c:	2208      	movs	r2, #8
 800491e:	4619      	mov	r1, r3
 8004920:	6a38      	ldr	r0, [r7, #32]
 8004922:	f004 fb8f 	bl	8009044 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004932:	441a      	add	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0210 	orr.w	r2, r2, #16
 8004946:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f004 fd0d 	bl	800936c <USB_ReadInterrupts>
 8004952:	4603      	mov	r3, r0
 8004954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004958:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800495c:	f040 80a7 	bne.w	8004aae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f004 fd12 	bl	8009392 <USB_ReadDevAllOutEpInterrupt>
 800496e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004970:	e099      	b.n	8004aa6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 808e 	beq.w	8004a9a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	4611      	mov	r1, r2
 8004988:	4618      	mov	r0, r3
 800498a:	f004 fd36 	bl	80093fa <USB_ReadDevOutEPInterrupt>
 800498e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	461a      	mov	r2, r3
 80049a8:	2301      	movs	r3, #1
 80049aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80049ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fec2 	bl	8005738 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00c      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	2308      	movs	r3, #8
 80049ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 ff98 	bl	8005908 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	2310      	movs	r3, #16
 80049f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d030      	beq.n	8004a60 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d109      	bne.n	8004a1e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a1c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	4613      	mov	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	3304      	adds	r3, #4
 8004a32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	78db      	ldrb	r3, [r3, #3]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d108      	bne.n	8004a4e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f009 ff8b 	bl	800e964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	461a      	mov	r2, r3
 8004a78:	2320      	movs	r3, #32
 8004a7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f af62 	bne.w	8004972 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f004 fc5a 	bl	800936c <USB_ReadInterrupts>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac2:	f040 80db 	bne.w	8004c7c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f004 fc7b 	bl	80093c6 <USB_ReadDevAllInEpInterrupt>
 8004ad0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ad6:	e0cd      	b.n	8004c74 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80c2 	beq.w	8004c68 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f004 fca1 	bl	8009436 <USB_ReadDevInEPInterrupt>
 8004af4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d057      	beq.n	8004bb0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	2201      	movs	r2, #1
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b20:	4013      	ands	r3, r2
 8004b22:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	461a      	mov	r2, r3
 8004b32:	2301      	movs	r3, #1
 8004b34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d132      	bne.n	8004ba4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	334c      	adds	r3, #76	; 0x4c
 8004b4e:	6819      	ldr	r1, [r3, #0]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4403      	add	r3, r0
 8004b5e:	3348      	adds	r3, #72	; 0x48
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4419      	add	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4403      	add	r3, r0
 8004b72:	334c      	adds	r3, #76	; 0x4c
 8004b74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d113      	bne.n	8004ba4 <HAL_PCD_IRQHandler+0x3a2>
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3354      	adds	r3, #84	; 0x54
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d108      	bne.n	8004ba4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	f004 fca8 	bl	80094f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f009 fe5f 	bl	800e86e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2308      	movs	r3, #8
 8004bca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	461a      	mov	r2, r3
 8004be4:	2310      	movs	r3, #16
 8004be6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d023      	beq.n	8004c56 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c10:	6a38      	ldr	r0, [r7, #32]
 8004c12:	f003 fb89 	bl	8008328 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	3338      	adds	r3, #56	; 0x38
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4413      	add	r3, r2
 8004c26:	3304      	adds	r3, #4
 8004c28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	78db      	ldrb	r3, [r3, #3]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d108      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f009 fea2 	bl	800e988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	461a      	mov	r2, r3
 8004c52:	2302      	movs	r3, #2
 8004c54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fcdb 	bl	800561e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f47f af2e 	bne.w	8004ad8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f004 fb73 	bl	800936c <USB_ReadInterrupts>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c90:	d122      	bne.n	8004cd8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d108      	bne.n	8004cc2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fec2 	bl	8005a44 <HAL_PCDEx_LPM_Callback>
 8004cc0:	e002      	b.n	8004cc8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f009 fe40 	bl	800e948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fb45 	bl	800936c <USB_ReadInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cec:	d112      	bne.n	8004d14 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d102      	bne.n	8004d04 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f009 fdfc 	bl	800e8fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d12:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f004 fb27 	bl	800936c <USB_ReadInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	f040 80b7 	bne.w	8004e9a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2110      	movs	r1, #16
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 faee 	bl	8008328 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d50:	e046      	b.n	8004de0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	461a      	mov	r2, r3
 8004d94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004daa:	0151      	lsls	r1, r2, #5
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	440a      	add	r2, r1
 8004db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004db8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dd8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	3301      	adds	r3, #1
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3b3      	bcc.n	8004d52 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004dfc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e16:	f043 030b 	orr.w	r3, r3, #11
 8004e1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2c:	f043 030b 	orr.w	r3, r3, #11
 8004e30:	6453      	str	r3, [r2, #68]	; 0x44
 8004e32:	e015      	b.n	8004e60 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e46:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e4a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5a:	f043 030b 	orr.w	r3, r3, #11
 8004e5e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e72:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e84:	461a      	mov	r2, r3
 8004e86:	f004 fb35 	bl	80094f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f004 fa64 	bl	800936c <USB_ReadInterrupts>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eae:	d124      	bne.n	8004efa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f004 fafa 	bl	80094ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f003 faaf 	bl	8008422 <USB_GetDevSpeed>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681c      	ldr	r4, [r3, #0]
 8004ed0:	f001 fa26 	bl	8006320 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f002 ffae 	bl	8007e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f009 fcea 	bl	800e8be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 fa34 	bl	800936c <USB_ReadInterrupts>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d10a      	bne.n	8004f24 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f009 fcc7 	bl	800e8a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f002 0208 	and.w	r2, r2, #8
 8004f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 fa1f 	bl	800936c <USB_ReadInterrupts>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d122      	bne.n	8004f7e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f44:	2301      	movs	r3, #1
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
 8004f48:	e014      	b.n	8004f74 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d105      	bne.n	8004f6e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fb27 	bl	80055bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	3301      	adds	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d3e5      	bcc.n	8004f4a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 f9f2 	bl	800936c <USB_ReadInterrupts>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f92:	d13b      	bne.n	800500c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f94:	2301      	movs	r3, #1
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	e02b      	b.n	8004ff2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3340      	adds	r3, #64	; 0x40
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d115      	bne.n	8004fec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da12      	bge.n	8004fec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	333f      	adds	r3, #63	; 0x3f
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fae8 	bl	80055bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3ce      	bcc.n	8004f9a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800500a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f004 f9ab 	bl	800936c <USB_ReadInterrupts>
 8005016:	4603      	mov	r3, r0
 8005018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800501c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005020:	d155      	bne.n	80050ce <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005022:	2301      	movs	r3, #1
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
 8005026:	e045      	b.n	80050b4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d12e      	bne.n	80050ae <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005050:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	da2b      	bge.n	80050ae <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005062:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005066:	429a      	cmp	r2, r3
 8005068:	d121      	bne.n	80050ae <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050aa:	6053      	str	r3, [r2, #4]
            break;
 80050ac:	e007      	b.n	80050be <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	3301      	adds	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d3b4      	bcc.n	8005028 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80050cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f004 f94a 	bl	800936c <USB_ReadInterrupts>
 80050d8:	4603      	mov	r3, r0
 80050da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d10a      	bne.n	80050fa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f009 fc61 	bl	800e9ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 f934 	bl	800936c <USB_ReadInterrupts>
 8005104:	4603      	mov	r3, r0
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b04      	cmp	r3, #4
 800510c:	d115      	bne.n	800513a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f009 fc51 	bl	800e9c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	e000      	b.n	800513a <HAL_PCD_IRQHandler+0x938>
      return;
 8005138:	bf00      	nop
    }
  }
}
 800513a:	3734      	adds	r7, #52	; 0x34
 800513c:	46bd      	mov	sp, r7
 800513e:	bd90      	pop	{r4, r7, pc}

08005140 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_PCD_SetAddress+0x1a>
 8005156:	2302      	movs	r3, #2
 8005158:	e013      	b.n	8005182 <HAL_PCD_SetAddress+0x42>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f004 f892 	bl	800929c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	4608      	mov	r0, r1
 8005194:	4611      	mov	r1, r2
 8005196:	461a      	mov	r2, r3
 8005198:	4603      	mov	r3, r0
 800519a:	70fb      	strb	r3, [r7, #3]
 800519c:	460b      	mov	r3, r1
 800519e:	803b      	strh	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	da0f      	bge.n	80051d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	3338      	adds	r3, #56	; 0x38
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	3304      	adds	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	705a      	strb	r2, [r3, #1]
 80051ce:	e00f      	b.n	80051f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051fc:	883a      	ldrh	r2, [r7, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	78ba      	ldrb	r2, [r7, #2]
 8005206:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800521a:	78bb      	ldrb	r3, [r7, #2]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d102      	bne.n	8005226 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_PCD_EP_Open+0xaa>
 8005230:	2302      	movs	r3, #2
 8005232:	e00e      	b.n	8005252 <HAL_PCD_EP_Open+0xc8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	4618      	mov	r0, r3
 8005244:	f003 f912 	bl	800846c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005250:	7afb      	ldrb	r3, [r7, #11]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800526a:	2b00      	cmp	r3, #0
 800526c:	da0f      	bge.n	800528e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	4613      	mov	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	3338      	adds	r3, #56	; 0x38
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	3304      	adds	r3, #4
 8005284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	705a      	strb	r2, [r3, #1]
 800528c:	e00f      	b.n	80052ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	f003 020f 	and.w	r2, r3, #15
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_PCD_EP_Close+0x6e>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e00e      	b.n	80052e6 <HAL_PCD_EP_Close+0x8c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f003 f950 	bl	800857c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	460b      	mov	r3, r1
 80052fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052fe:	7afb      	ldrb	r3, [r7, #11]
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	4613      	mov	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	3304      	adds	r3, #4
 8005316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2200      	movs	r2, #0
 8005328:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	b2da      	uxtb	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d102      	bne.n	800534a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6979      	ldr	r1, [r7, #20]
 8005362:	f003 fc2f 	bl	8008bc4 <USB_EP0StartXfer>
 8005366:	e008      	b.n	800537a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	6979      	ldr	r1, [r7, #20]
 8005376:	f003 f9dd 	bl	8008734 <USB_EPStartXfer>
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	f003 020f 	and.w	r2, r3, #15
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80053a6:	681b      	ldr	r3, [r3, #0]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	460b      	mov	r3, r1
 80053c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	f003 020f 	and.w	r2, r3, #15
 80053ca:	4613      	mov	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	3338      	adds	r3, #56	; 0x38
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	3304      	adds	r3, #4
 80053da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2200      	movs	r2, #0
 80053ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2201      	movs	r2, #1
 80053f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f4:	7afb      	ldrb	r3, [r7, #11]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d102      	bne.n	800540e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	6979      	ldr	r1, [r7, #20]
 8005426:	f003 fbcd 	bl	8008bc4 <USB_EP0StartXfer>
 800542a:	e008      	b.n	800543e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	6979      	ldr	r1, [r7, #20]
 800543a:	f003 f97b 	bl	8008734 <USB_EPStartXfer>
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d901      	bls.n	8005466 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e050      	b.n	8005508 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800546a:	2b00      	cmp	r3, #0
 800546c:	da0f      	bge.n	800548e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	3338      	adds	r3, #56	; 0x38
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	3304      	adds	r3, #4
 8005484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	705a      	strb	r2, [r3, #1]
 800548c:	e00d      	b.n	80054aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	3304      	adds	r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_PCD_EP_SetStall+0x82>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e01e      	b.n	8005508 <HAL_PCD_EP_SetStall+0xc0>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	4618      	mov	r0, r3
 80054da:	f003 fe0b 	bl	80090f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	b2d9      	uxtb	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054f8:	461a      	mov	r2, r3
 80054fa:	f003 fffb 	bl	80094f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	f003 020f 	and.w	r2, r3, #15
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d901      	bls.n	800552e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e042      	b.n	80055b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800552e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005532:	2b00      	cmp	r3, #0
 8005534:	da0f      	bge.n	8005556 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	f003 020f 	and.w	r2, r3, #15
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	3338      	adds	r3, #56	; 0x38
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	3304      	adds	r3, #4
 800554c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	705a      	strb	r2, [r3, #1]
 8005554:	e00f      	b.n	8005576 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	f003 020f 	and.w	r2, r3, #15
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	4413      	add	r3, r2
 800556c:	3304      	adds	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	b2da      	uxtb	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_PCD_EP_ClrStall+0x86>
 8005592:	2302      	movs	r3, #2
 8005594:	e00e      	b.n	80055b4 <HAL_PCD_EP_ClrStall+0xa4>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f003 fe13 	bl	80091d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	da0c      	bge.n	80055ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	f003 020f 	and.w	r2, r3, #15
 80055d6:	4613      	mov	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	3338      	adds	r3, #56	; 0x38
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	3304      	adds	r3, #4
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	e00c      	b.n	8005604 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4413      	add	r3, r2
 8005600:	3304      	adds	r3, #4
 8005602:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	4618      	mov	r0, r3
 800560c:	f003 fc32 	bl	8008e74 <USB_EPStopXfer>
 8005610:	4603      	mov	r3, r0
 8005612:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005614:	7afb      	ldrb	r3, [r7, #11]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b08a      	sub	sp, #40	; 0x28
 8005622:	af02      	add	r7, sp, #8
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	3338      	adds	r3, #56	; 0x38
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	3304      	adds	r3, #4
 8005644:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	429a      	cmp	r2, r3
 8005650:	d901      	bls.n	8005656 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e06c      	b.n	8005730 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	429a      	cmp	r2, r3
 800566a:	d902      	bls.n	8005672 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3303      	adds	r3, #3
 8005676:	089b      	lsrs	r3, r3, #2
 8005678:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800567a:	e02b      	b.n	80056d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	429a      	cmp	r2, r3
 8005690:	d902      	bls.n	8005698 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	3303      	adds	r3, #3
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6919      	ldr	r1, [r3, #16]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	f003 fc86 	bl	8008fc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	441a      	add	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	441a      	add	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d809      	bhi.n	80056fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1a      	ldr	r2, [r3, #32]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d203      	bcs.n	80056fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1be      	bne.n	800567c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	429a      	cmp	r2, r3
 8005708:	d811      	bhi.n	800572e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	2201      	movs	r2, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	43db      	mvns	r3, r3
 8005724:	6939      	ldr	r1, [r7, #16]
 8005726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800572a:	4013      	ands	r3, r2
 800572c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	333c      	adds	r3, #60	; 0x3c
 8005750:	3304      	adds	r3, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d17b      	bne.n	8005866 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4a61      	ldr	r2, [pc, #388]	; (8005900 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	f240 80b9 	bls.w	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80b3 	beq.w	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	461a      	mov	r2, r3
 800579c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a0:	6093      	str	r3, [r2, #8]
 80057a2:	e0a7      	b.n	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	461a      	mov	r2, r3
 80057bc:	2320      	movs	r3, #32
 80057be:	6093      	str	r3, [r2, #8]
 80057c0:	e098      	b.n	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f040 8093 	bne.w	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	4a4b      	ldr	r2, [pc, #300]	; (8005900 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d90f      	bls.n	80057f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	461a      	mov	r2, r3
 80057ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f2:	6093      	str	r3, [r2, #8]
 80057f4:	e07e      	b.n	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	3304      	adds	r3, #4
 800580a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	0159      	lsls	r1, r3, #5
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	440b      	add	r3, r1
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d114      	bne.n	8005858 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005840:	461a      	mov	r2, r3
 8005842:	2101      	movs	r1, #1
 8005844:	f003 fe56 	bl	80094f4 <USB_EP0_OutStart>
 8005848:	e006      	b.n	8005858 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	441a      	add	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f008 ffea 	bl	800e838 <HAL_PCD_DataOutStageCallback>
 8005864:	e046      	b.n	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d124      	bne.n	80058b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	6093      	str	r3, [r2, #8]
 800588c:	e032      	b.n	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	461a      	mov	r2, r3
 80058a6:	2320      	movs	r3, #32
 80058a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f008 ffc1 	bl	800e838 <HAL_PCD_DataOutStageCallback>
 80058b6:	e01d      	b.n	80058f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d114      	bne.n	80058e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	4613      	mov	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d108      	bne.n	80058e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058e0:	461a      	mov	r2, r3
 80058e2:	2100      	movs	r1, #0
 80058e4:	f003 fe06 	bl	80094f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f008 ffa2 	bl	800e838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	4f54300a 	.word	0x4f54300a
 8005904:	4f54310a 	.word	0x4f54310a

08005908 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	333c      	adds	r3, #60	; 0x3c
 8005920:	3304      	adds	r3, #4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <PCD_EP_OutSetupPacket_int+0x88>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d90e      	bls.n	800595c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	461a      	mov	r2, r3
 8005956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f008 ff59 	bl	800e814 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <PCD_EP_OutSetupPacket_int+0x88>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d90c      	bls.n	8005984 <PCD_EP_OutSetupPacket_int+0x7c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d108      	bne.n	8005984 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800597c:	461a      	mov	r2, r3
 800597e:	2101      	movs	r1, #1
 8005980:	f003 fdb8 	bl	80094f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	4f54300a 	.word	0x4f54300a

08005994 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
 80059a0:	4613      	mov	r3, r2
 80059a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d107      	bne.n	80059c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059b2:	883b      	ldrh	r3, [r7, #0]
 80059b4:	0419      	lsls	r1, r3, #16
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	430a      	orrs	r2, r1
 80059be:	629a      	str	r2, [r3, #40]	; 0x28
 80059c0:	e028      	b.n	8005a14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	e00d      	b.n	80059f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	3340      	adds	r3, #64	; 0x40
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4413      	add	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	3301      	adds	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d3ec      	bcc.n	80059d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059fc:	883b      	ldrh	r3, [r7, #0]
 80059fe:	0418      	lsls	r0, r3, #16
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	4302      	orrs	r2, r0
 8005a0c:	3340      	adds	r3, #64	; 0x40
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e267      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d075      	beq.n	8005b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a7a:	4b88      	ldr	r3, [pc, #544]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d00c      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a86:	4b85      	ldr	r3, [pc, #532]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d112      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a92:	4b82      	ldr	r3, [pc, #520]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	4b7e      	ldr	r3, [pc, #504]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d05b      	beq.n	8005b64 <HAL_RCC_OscConfig+0x108>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d157      	bne.n	8005b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e242      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac0:	d106      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x74>
 8005ac2:	4b76      	ldr	r3, [pc, #472]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a75      	ldr	r2, [pc, #468]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e01d      	b.n	8005b0c <HAL_RCC_OscConfig+0xb0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x98>
 8005ada:	4b70      	ldr	r3, [pc, #448]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a6f      	ldr	r2, [pc, #444]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4b6d      	ldr	r3, [pc, #436]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6c      	ldr	r2, [pc, #432]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	e00b      	b.n	8005b0c <HAL_RCC_OscConfig+0xb0>
 8005af4:	4b69      	ldr	r3, [pc, #420]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a68      	ldr	r2, [pc, #416]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	4b66      	ldr	r3, [pc, #408]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a65      	ldr	r2, [pc, #404]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d013      	beq.n	8005b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b14:	f7fd fa9e 	bl	8003054 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b1c:	f7fd fa9a 	bl	8003054 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	; 0x64
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e207      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2e:	4b5b      	ldr	r3, [pc, #364]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0xc0>
 8005b3a:	e014      	b.n	8005b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3c:	f7fd fa8a 	bl	8003054 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fd fa86 	bl	8003054 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e1f3      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b56:	4b51      	ldr	r3, [pc, #324]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0xe8>
 8005b62:	e000      	b.n	8005b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d063      	beq.n	8005c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b72:	4b4a      	ldr	r3, [pc, #296]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b7e:	4b47      	ldr	r3, [pc, #284]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d11c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b8a:	4b44      	ldr	r3, [pc, #272]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d116      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b96:	4b41      	ldr	r3, [pc, #260]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <HAL_RCC_OscConfig+0x152>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d001      	beq.n	8005bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e1c7      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bae:	4b3b      	ldr	r3, [pc, #236]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4937      	ldr	r1, [pc, #220]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc2:	e03a      	b.n	8005c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d020      	beq.n	8005c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bcc:	4b34      	ldr	r3, [pc, #208]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd2:	f7fd fa3f 	bl	8003054 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bda:	f7fd fa3b 	bl	8003054 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e1a8      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bec:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f0      	beq.n	8005bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf8:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4925      	ldr	r1, [pc, #148]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]
 8005c0c:	e015      	b.n	8005c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <HAL_RCC_OscConfig+0x244>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fd fa1e 	bl	8003054 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c1c:	f7fd fa1a 	bl	8003054 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e187      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d036      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c4e:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <HAL_RCC_OscConfig+0x248>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c54:	f7fd f9fe 	bl	8003054 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5c:	f7fd f9fa 	bl	8003054 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e167      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_RCC_OscConfig+0x240>)
 8005c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0x200>
 8005c7a:	e01b      	b.n	8005cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c7c:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_RCC_OscConfig+0x248>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c82:	f7fd f9e7 	bl	8003054 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c88:	e00e      	b.n	8005ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c8a:	f7fd f9e3 	bl	8003054 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d907      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e150      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	42470000 	.word	0x42470000
 8005ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca8:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1ea      	bne.n	8005c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8097 	beq.w	8005df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc6:	4b81      	ldr	r3, [pc, #516]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10f      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	4b7d      	ldr	r3, [pc, #500]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	4a7c      	ldr	r2, [pc, #496]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce2:	4b7a      	ldr	r3, [pc, #488]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf2:	4b77      	ldr	r3, [pc, #476]	; (8005ed0 <HAL_RCC_OscConfig+0x474>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d118      	bne.n	8005d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cfe:	4b74      	ldr	r3, [pc, #464]	; (8005ed0 <HAL_RCC_OscConfig+0x474>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a73      	ldr	r2, [pc, #460]	; (8005ed0 <HAL_RCC_OscConfig+0x474>)
 8005d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d0a:	f7fd f9a3 	bl	8003054 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d12:	f7fd f99f 	bl	8003054 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e10c      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d24:	4b6a      	ldr	r3, [pc, #424]	; (8005ed0 <HAL_RCC_OscConfig+0x474>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d106      	bne.n	8005d46 <HAL_RCC_OscConfig+0x2ea>
 8005d38:	4b64      	ldr	r3, [pc, #400]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	4a63      	ldr	r2, [pc, #396]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6713      	str	r3, [r2, #112]	; 0x70
 8005d44:	e01c      	b.n	8005d80 <HAL_RCC_OscConfig+0x324>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0x30c>
 8005d4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	4a5e      	ldr	r2, [pc, #376]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d54:	f043 0304 	orr.w	r3, r3, #4
 8005d58:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5a:	4b5c      	ldr	r3, [pc, #368]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	4a5b      	ldr	r2, [pc, #364]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	6713      	str	r3, [r2, #112]	; 0x70
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0x324>
 8005d68:	4b58      	ldr	r3, [pc, #352]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	4a57      	ldr	r2, [pc, #348]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	6713      	str	r3, [r2, #112]	; 0x70
 8005d74:	4b55      	ldr	r3, [pc, #340]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a54      	ldr	r2, [pc, #336]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005d7a:	f023 0304 	bic.w	r3, r3, #4
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d015      	beq.n	8005db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d88:	f7fd f964 	bl	8003054 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8e:	e00a      	b.n	8005da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d90:	f7fd f960 	bl	8003054 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e0cb      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da6:	4b49      	ldr	r3, [pc, #292]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ee      	beq.n	8005d90 <HAL_RCC_OscConfig+0x334>
 8005db2:	e014      	b.n	8005dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db4:	f7fd f94e 	bl	8003054 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dbc:	f7fd f94a 	bl	8003054 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e0b5      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd2:	4b3e      	ldr	r3, [pc, #248]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1ee      	bne.n	8005dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d105      	bne.n	8005df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de4:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	4a38      	ldr	r2, [pc, #224]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 80a1 	beq.w	8005f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dfa:	4b34      	ldr	r3, [pc, #208]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d05c      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d141      	bne.n	8005e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <HAL_RCC_OscConfig+0x478>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e14:	f7fd f91e 	bl	8003054 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fd f91a 	bl	8003054 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e087      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2e:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69da      	ldr	r2, [r3, #28]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	019b      	lsls	r3, r3, #6
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	3b01      	subs	r3, #1
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	061b      	lsls	r3, r3, #24
 8005e5e:	491b      	ldr	r1, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e64:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_RCC_OscConfig+0x478>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6a:	f7fd f8f3 	bl	8003054 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e72:	f7fd f8ef 	bl	8003054 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e05c      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x416>
 8005e90:	e054      	b.n	8005f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <HAL_RCC_OscConfig+0x478>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fd f8dc 	bl	8003054 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea0:	f7fd f8d8 	bl	8003054 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e045      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_RCC_OscConfig+0x470>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x444>
 8005ebe:	e03d      	b.n	8005f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e038      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <HAL_RCC_OscConfig+0x4ec>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d028      	beq.n	8005f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d121      	bne.n	8005f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d11a      	bne.n	8005f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f08:	4013      	ands	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d111      	bne.n	8005f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	3b01      	subs	r3, #1
 8005f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d107      	bne.n	8005f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40023800 	.word	0x40023800

08005f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0cc      	b.n	80060fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f60:	4b68      	ldr	r3, [pc, #416]	; (8006104 <HAL_RCC_ClockConfig+0x1b8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d90c      	bls.n	8005f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6e:	4b65      	ldr	r3, [pc, #404]	; (8006104 <HAL_RCC_ClockConfig+0x1b8>)
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f76:	4b63      	ldr	r3, [pc, #396]	; (8006104 <HAL_RCC_ClockConfig+0x1b8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0b8      	b.n	80060fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d020      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fa0:	4b59      	ldr	r3, [pc, #356]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4a58      	ldr	r2, [pc, #352]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb8:	4b53      	ldr	r3, [pc, #332]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4a52      	ldr	r2, [pc, #328]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc4:	4b50      	ldr	r3, [pc, #320]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	494d      	ldr	r1, [pc, #308]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d044      	beq.n	800606c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d107      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fea:	4b47      	ldr	r3, [pc, #284]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d119      	bne.n	800602a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e07f      	b.n	80060fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d003      	beq.n	800600a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006006:	2b03      	cmp	r3, #3
 8006008:	d107      	bne.n	800601a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800600a:	4b3f      	ldr	r3, [pc, #252]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e06f      	b.n	80060fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601a:	4b3b      	ldr	r3, [pc, #236]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e067      	b.n	80060fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800602a:	4b37      	ldr	r3, [pc, #220]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f023 0203 	bic.w	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4934      	ldr	r1, [pc, #208]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	4313      	orrs	r3, r2
 800603a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800603c:	f7fd f80a 	bl	8003054 <HAL_GetTick>
 8006040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	e00a      	b.n	800605a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006044:	f7fd f806 	bl	8003054 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e04f      	b.n	80060fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 020c 	and.w	r2, r3, #12
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	429a      	cmp	r2, r3
 800606a:	d1eb      	bne.n	8006044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800606c:	4b25      	ldr	r3, [pc, #148]	; (8006104 <HAL_RCC_ClockConfig+0x1b8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d20c      	bcs.n	8006094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607a:	4b22      	ldr	r3, [pc, #136]	; (8006104 <HAL_RCC_ClockConfig+0x1b8>)
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006082:	4b20      	ldr	r3, [pc, #128]	; (8006104 <HAL_RCC_ClockConfig+0x1b8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d001      	beq.n	8006094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e032      	b.n	80060fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060a0:	4b19      	ldr	r3, [pc, #100]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4916      	ldr	r1, [pc, #88]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	490e      	ldr	r1, [pc, #56]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060d2:	f000 f821 	bl	8006118 <HAL_RCC_GetSysClockFreq>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	490a      	ldr	r1, [pc, #40]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 80060e4:	5ccb      	ldrb	r3, [r1, r3]
 80060e6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ea:	4a09      	ldr	r2, [pc, #36]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 80060ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ee:	4b09      	ldr	r3, [pc, #36]	; (8006114 <HAL_RCC_ClockConfig+0x1c8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fc fe60 	bl	8002db8 <HAL_InitTick>

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40023c00 	.word	0x40023c00
 8006108:	40023800 	.word	0x40023800
 800610c:	0800fd34 	.word	0x0800fd34
 8006110:	20000518 	.word	0x20000518
 8006114:	2000051c 	.word	0x2000051c

08006118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800611c:	b094      	sub	sp, #80	; 0x50
 800611e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	647b      	str	r3, [r7, #68]	; 0x44
 8006124:	2300      	movs	r3, #0
 8006126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006128:	2300      	movs	r3, #0
 800612a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006130:	4b79      	ldr	r3, [pc, #484]	; (8006318 <HAL_RCC_GetSysClockFreq+0x200>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 030c 	and.w	r3, r3, #12
 8006138:	2b08      	cmp	r3, #8
 800613a:	d00d      	beq.n	8006158 <HAL_RCC_GetSysClockFreq+0x40>
 800613c:	2b08      	cmp	r3, #8
 800613e:	f200 80e1 	bhi.w	8006304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0x34>
 8006146:	2b04      	cmp	r3, #4
 8006148:	d003      	beq.n	8006152 <HAL_RCC_GetSysClockFreq+0x3a>
 800614a:	e0db      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800614c:	4b73      	ldr	r3, [pc, #460]	; (800631c <HAL_RCC_GetSysClockFreq+0x204>)
 800614e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006150:	e0db      	b.n	800630a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006152:	4b72      	ldr	r3, [pc, #456]	; (800631c <HAL_RCC_GetSysClockFreq+0x204>)
 8006154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006156:	e0d8      	b.n	800630a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006158:	4b6f      	ldr	r3, [pc, #444]	; (8006318 <HAL_RCC_GetSysClockFreq+0x200>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006160:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006162:	4b6d      	ldr	r3, [pc, #436]	; (8006318 <HAL_RCC_GetSysClockFreq+0x200>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d063      	beq.n	8006236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800616e:	4b6a      	ldr	r3, [pc, #424]	; (8006318 <HAL_RCC_GetSysClockFreq+0x200>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	099b      	lsrs	r3, r3, #6
 8006174:	2200      	movs	r2, #0
 8006176:	63bb      	str	r3, [r7, #56]	; 0x38
 8006178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
 8006182:	2300      	movs	r3, #0
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
 8006186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800618a:	4622      	mov	r2, r4
 800618c:	462b      	mov	r3, r5
 800618e:	f04f 0000 	mov.w	r0, #0
 8006192:	f04f 0100 	mov.w	r1, #0
 8006196:	0159      	lsls	r1, r3, #5
 8006198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800619c:	0150      	lsls	r0, r2, #5
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4621      	mov	r1, r4
 80061a4:	1a51      	subs	r1, r2, r1
 80061a6:	6139      	str	r1, [r7, #16]
 80061a8:	4629      	mov	r1, r5
 80061aa:	eb63 0301 	sbc.w	r3, r3, r1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061bc:	4659      	mov	r1, fp
 80061be:	018b      	lsls	r3, r1, #6
 80061c0:	4651      	mov	r1, sl
 80061c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061c6:	4651      	mov	r1, sl
 80061c8:	018a      	lsls	r2, r1, #6
 80061ca:	4651      	mov	r1, sl
 80061cc:	ebb2 0801 	subs.w	r8, r2, r1
 80061d0:	4659      	mov	r1, fp
 80061d2:	eb63 0901 	sbc.w	r9, r3, r1
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ea:	4690      	mov	r8, r2
 80061ec:	4699      	mov	r9, r3
 80061ee:	4623      	mov	r3, r4
 80061f0:	eb18 0303 	adds.w	r3, r8, r3
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	462b      	mov	r3, r5
 80061f8:	eb49 0303 	adc.w	r3, r9, r3
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800620a:	4629      	mov	r1, r5
 800620c:	028b      	lsls	r3, r1, #10
 800620e:	4621      	mov	r1, r4
 8006210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006214:	4621      	mov	r1, r4
 8006216:	028a      	lsls	r2, r1, #10
 8006218:	4610      	mov	r0, r2
 800621a:	4619      	mov	r1, r3
 800621c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800621e:	2200      	movs	r2, #0
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
 8006222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006228:	f7fa f832 	bl	8000290 <__aeabi_uldivmod>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4613      	mov	r3, r2
 8006232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006234:	e058      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006236:	4b38      	ldr	r3, [pc, #224]	; (8006318 <HAL_RCC_GetSysClockFreq+0x200>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	099b      	lsrs	r3, r3, #6
 800623c:	2200      	movs	r2, #0
 800623e:	4618      	mov	r0, r3
 8006240:	4611      	mov	r1, r2
 8006242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006246:	623b      	str	r3, [r7, #32]
 8006248:	2300      	movs	r3, #0
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
 800624c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006250:	4642      	mov	r2, r8
 8006252:	464b      	mov	r3, r9
 8006254:	f04f 0000 	mov.w	r0, #0
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	0159      	lsls	r1, r3, #5
 800625e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006262:	0150      	lsls	r0, r2, #5
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4641      	mov	r1, r8
 800626a:	ebb2 0a01 	subs.w	sl, r2, r1
 800626e:	4649      	mov	r1, r9
 8006270:	eb63 0b01 	sbc.w	fp, r3, r1
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006288:	ebb2 040a 	subs.w	r4, r2, sl
 800628c:	eb63 050b 	sbc.w	r5, r3, fp
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	00eb      	lsls	r3, r5, #3
 800629a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629e:	00e2      	lsls	r2, r4, #3
 80062a0:	4614      	mov	r4, r2
 80062a2:	461d      	mov	r5, r3
 80062a4:	4643      	mov	r3, r8
 80062a6:	18e3      	adds	r3, r4, r3
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	464b      	mov	r3, r9
 80062ac:	eb45 0303 	adc.w	r3, r5, r3
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	f04f 0300 	mov.w	r3, #0
 80062ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062be:	4629      	mov	r1, r5
 80062c0:	028b      	lsls	r3, r1, #10
 80062c2:	4621      	mov	r1, r4
 80062c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c8:	4621      	mov	r1, r4
 80062ca:	028a      	lsls	r2, r1, #10
 80062cc:	4610      	mov	r0, r2
 80062ce:	4619      	mov	r1, r3
 80062d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d2:	2200      	movs	r2, #0
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	61fa      	str	r2, [r7, #28]
 80062d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062dc:	f7f9 ffd8 	bl	8000290 <__aeabi_uldivmod>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4613      	mov	r3, r2
 80062e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	0c1b      	lsrs	r3, r3, #16
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	3301      	adds	r3, #1
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006302:	e002      	b.n	800630a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCC_GetSysClockFreq+0x204>)
 8006306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800630a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800630c:	4618      	mov	r0, r3
 800630e:	3750      	adds	r7, #80	; 0x50
 8006310:	46bd      	mov	sp, r7
 8006312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800
 800631c:	00f42400 	.word	0x00f42400

08006320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <HAL_RCC_GetHCLKFreq+0x14>)
 8006326:	681b      	ldr	r3, [r3, #0]
}
 8006328:	4618      	mov	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20000518 	.word	0x20000518

08006338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800633c:	f7ff fff0 	bl	8006320 <HAL_RCC_GetHCLKFreq>
 8006340:	4602      	mov	r2, r0
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	0a9b      	lsrs	r3, r3, #10
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	4903      	ldr	r1, [pc, #12]	; (800635c <HAL_RCC_GetPCLK1Freq+0x24>)
 800634e:	5ccb      	ldrb	r3, [r1, r3]
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40023800 	.word	0x40023800
 800635c:	0800fd44 	.word	0x0800fd44

08006360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	220f      	movs	r2, #15
 800636e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0203 	and.w	r2, r3, #3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	08db      	lsrs	r3, r3, #3
 800639a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063a2:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <HAL_RCC_GetClockConfig+0x60>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0207 	and.w	r2, r3, #7
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40023c00 	.word	0x40023c00

080063c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e07b      	b.n	80064ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d108      	bne.n	80063f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e6:	d009      	beq.n	80063fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	61da      	str	r2, [r3, #28]
 80063ee:	e005      	b.n	80063fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fc fbe2 	bl	8002be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006432:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	ea42 0103 	orr.w	r1, r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0104 	and.w	r1, r3, #4
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	f003 0210 	and.w	r2, r3, #16
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b088      	sub	sp, #32
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	4613      	mov	r3, r2
 80064e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_SPI_Transmit+0x22>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e126      	b.n	8006746 <HAL_SPI_Transmit+0x270>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006500:	f7fc fda8 	bl	8003054 <HAL_GetTick>
 8006504:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b01      	cmp	r3, #1
 8006514:	d002      	beq.n	800651c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006516:	2302      	movs	r3, #2
 8006518:	77fb      	strb	r3, [r7, #31]
    goto error;
 800651a:	e10b      	b.n	8006734 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_SPI_Transmit+0x52>
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800652c:	e102      	b.n	8006734 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2203      	movs	r2, #3
 8006532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006574:	d10f      	bne.n	8006596 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006584:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006594:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d007      	beq.n	80065b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065bc:	d14b      	bne.n	8006656 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_SPI_Transmit+0xf6>
 80065c6:	8afb      	ldrh	r3, [r7, #22]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d13e      	bne.n	800664a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	881a      	ldrh	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065f0:	e02b      	b.n	800664a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d112      	bne.n	8006626 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	881a      	ldrh	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	1c9a      	adds	r2, r3, #2
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	86da      	strh	r2, [r3, #54]	; 0x36
 8006624:	e011      	b.n	800664a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006626:	f7fc fd15 	bl	8003054 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d803      	bhi.n	800663e <HAL_SPI_Transmit+0x168>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d102      	bne.n	8006644 <HAL_SPI_Transmit+0x16e>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d102      	bne.n	800664a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006648:	e074      	b.n	8006734 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1ce      	bne.n	80065f2 <HAL_SPI_Transmit+0x11c>
 8006654:	e04c      	b.n	80066f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SPI_Transmit+0x18e>
 800665e:	8afb      	ldrh	r3, [r7, #22]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d140      	bne.n	80066e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800668a:	e02c      	b.n	80066e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d113      	bne.n	80066c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	7812      	ldrb	r2, [r2, #0]
 80066a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	86da      	strh	r2, [r3, #54]	; 0x36
 80066c0:	e011      	b.n	80066e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c2:	f7fc fcc7 	bl	8003054 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d803      	bhi.n	80066da <HAL_SPI_Transmit+0x204>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d102      	bne.n	80066e0 <HAL_SPI_Transmit+0x20a>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066e4:	e026      	b.n	8006734 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1cd      	bne.n	800668c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fa55 	bl	8006ba4 <SPI_EndRxTxTransaction>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e000      	b.n	8006734 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006732:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006744:	7ffb      	ldrb	r3, [r7, #31]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b08c      	sub	sp, #48	; 0x30
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800675c:	2301      	movs	r3, #1
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x26>
 8006770:	2302      	movs	r3, #2
 8006772:	e18a      	b.n	8006a8a <HAL_SPI_TransmitReceive+0x33c>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800677c:	f7fc fc6a 	bl	8003054 <HAL_GetTick>
 8006780:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006792:	887b      	ldrh	r3, [r7, #2]
 8006794:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800679a:	2b01      	cmp	r3, #1
 800679c:	d00f      	beq.n	80067be <HAL_SPI_TransmitReceive+0x70>
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a4:	d107      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x68>
 80067ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d003      	beq.n	80067be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
 80067b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067bc:	e15b      	b.n	8006a76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_SPI_TransmitReceive+0x82>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_SPI_TransmitReceive+0x82>
 80067ca:	887b      	ldrh	r3, [r7, #2]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067d6:	e14e      	b.n	8006a76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d003      	beq.n	80067ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2205      	movs	r2, #5
 80067e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	887a      	ldrh	r2, [r7, #2]
 80067fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	887a      	ldrh	r2, [r7, #2]
 8006802:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	887a      	ldrh	r2, [r7, #2]
 800680e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	887a      	ldrh	r2, [r7, #2]
 8006814:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d007      	beq.n	8006840 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800683e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006848:	d178      	bne.n	800693c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_SPI_TransmitReceive+0x10a>
 8006852:	8b7b      	ldrh	r3, [r7, #26]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d166      	bne.n	8006926 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	881a      	ldrh	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800687c:	e053      	b.n	8006926 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	d11b      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x176>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x176>
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d113      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	881a      	ldrh	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	1c9a      	adds	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d119      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x1b8>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d014      	beq.n	8006906 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	b292      	uxth	r2, r2
 80068e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	1c9a      	adds	r2, r3, #2
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006902:	2301      	movs	r3, #1
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006906:	f7fc fba5 	bl	8003054 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006912:	429a      	cmp	r2, r3
 8006914:	d807      	bhi.n	8006926 <HAL_SPI_TransmitReceive+0x1d8>
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d003      	beq.n	8006926 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006924:	e0a7      	b.n	8006a76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1a6      	bne.n	800687e <HAL_SPI_TransmitReceive+0x130>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1a1      	bne.n	800687e <HAL_SPI_TransmitReceive+0x130>
 800693a:	e07c      	b.n	8006a36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_SPI_TransmitReceive+0x1fc>
 8006944:	8b7b      	ldrh	r3, [r7, #26]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d16b      	bne.n	8006a22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006970:	e057      	b.n	8006a22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d11c      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x26c>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d017      	beq.n	80069ba <HAL_SPI_TransmitReceive+0x26c>
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	2b01      	cmp	r3, #1
 800698e:	d114      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d119      	bne.n	80069fc <HAL_SPI_TransmitReceive+0x2ae>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d014      	beq.n	80069fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069f8:	2301      	movs	r3, #1
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069fc:	f7fc fb2a 	bl	8003054 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d803      	bhi.n	8006a14 <HAL_SPI_TransmitReceive+0x2c6>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d102      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x2cc>
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a20:	e029      	b.n	8006a76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1a2      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x224>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d19d      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f8b2 	bl	8006ba4 <SPI_EndRxTxTransaction>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a52:	e010      	b.n	8006a76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	e000      	b.n	8006a76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3730      	adds	r7, #48	; 0x30
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006aa4:	f7fc fad6 	bl	8003054 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ab4:	f7fc face 	bl	8003054 <HAL_GetTick>
 8006ab8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006aba:	4b39      	ldr	r3, [pc, #228]	; (8006ba0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	015b      	lsls	r3, r3, #5
 8006ac0:	0d1b      	lsrs	r3, r3, #20
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
 8006ac8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aca:	e054      	b.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d050      	beq.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ad4:	f7fc fabe 	bl	8003054 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d902      	bls.n	8006aea <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d13d      	bne.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006af8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b02:	d111      	bne.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0c:	d004      	beq.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b16:	d107      	bne.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b30:	d10f      	bne.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e017      	b.n	8006b96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	bf0c      	ite	eq
 8006b86:	2301      	moveq	r3, #1
 8006b88:	2300      	movne	r3, #0
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d19b      	bne.n	8006acc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000518 	.word	0x20000518

08006ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bb0:	4b1b      	ldr	r3, [pc, #108]	; (8006c20 <SPI_EndRxTxTransaction+0x7c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <SPI_EndRxTxTransaction+0x80>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	0d5b      	lsrs	r3, r3, #21
 8006bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bce:	d112      	bne.n	8006bf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2180      	movs	r1, #128	; 0x80
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff ff5a 	bl	8006a94 <SPI_WaitFlagStateUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d016      	beq.n	8006c14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e00f      	b.n	8006c16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0c:	2b80      	cmp	r3, #128	; 0x80
 8006c0e:	d0f2      	beq.n	8006bf6 <SPI_EndRxTxTransaction+0x52>
 8006c10:	e000      	b.n	8006c14 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c12:	bf00      	nop
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000518 	.word	0x20000518
 8006c24:	165e9f81 	.word	0x165e9f81

08006c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e041      	b.n	8006cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fc f844 	bl	8002cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f000 fd3a 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d001      	beq.n	8006ce0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e03c      	b.n	8006d5a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1e      	ldr	r2, [pc, #120]	; (8006d68 <HAL_TIM_Base_Start+0xa0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d018      	beq.n	8006d24 <HAL_TIM_Base_Start+0x5c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfa:	d013      	beq.n	8006d24 <HAL_TIM_Base_Start+0x5c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <HAL_TIM_Base_Start+0xa4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00e      	beq.n	8006d24 <HAL_TIM_Base_Start+0x5c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_TIM_Base_Start+0xa8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d009      	beq.n	8006d24 <HAL_TIM_Base_Start+0x5c>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <HAL_TIM_Base_Start+0xac>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <HAL_TIM_Base_Start+0x5c>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <HAL_TIM_Base_Start+0xb0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d111      	bne.n	8006d48 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b06      	cmp	r3, #6
 8006d34:	d010      	beq.n	8006d58 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d46:	e007      	b.n	8006d58 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40000c00 	.word	0x40000c00
 8006d78:	40014000 	.word	0x40014000

08006d7c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10f      	bne.n	8006db4 <HAL_TIM_Base_Stop+0x38>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d107      	bne.n	8006db4 <HAL_TIM_Base_Stop+0x38>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
	...

08006dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d001      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e044      	b.n	8006e6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <HAL_TIM_Base_Start_IT+0xb0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d018      	beq.n	8006e38 <HAL_TIM_Base_Start_IT+0x6c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d013      	beq.n	8006e38 <HAL_TIM_Base_Start_IT+0x6c>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00e      	beq.n	8006e38 <HAL_TIM_Base_Start_IT+0x6c>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a19      	ldr	r2, [pc, #100]	; (8006e84 <HAL_TIM_Base_Start_IT+0xb8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d009      	beq.n	8006e38 <HAL_TIM_Base_Start_IT+0x6c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d004      	beq.n	8006e38 <HAL_TIM_Base_Start_IT+0x6c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <HAL_TIM_Base_Start_IT+0xc0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d111      	bne.n	8006e5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b06      	cmp	r3, #6
 8006e48:	d010      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5a:	e007      	b.n	8006e6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	40014000 	.word	0x40014000

08006e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e041      	b.n	8006f26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f839 	bl	8006f2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f000 fc06 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <HAL_TIM_PWM_Start+0x24>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e022      	b.n	8006fae <HAL_TIM_PWM_Start+0x6a>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d109      	bne.n	8006f82 <HAL_TIM_PWM_Start+0x3e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	bf14      	ite	ne
 8006f7a:	2301      	movne	r3, #1
 8006f7c:	2300      	moveq	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	e015      	b.n	8006fae <HAL_TIM_PWM_Start+0x6a>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d109      	bne.n	8006f9c <HAL_TIM_PWM_Start+0x58>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	e008      	b.n	8006fae <HAL_TIM_PWM_Start+0x6a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	bf14      	ite	ne
 8006fa8:	2301      	movne	r3, #1
 8006faa:	2300      	moveq	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e068      	b.n	8007088 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0x82>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc4:	e013      	b.n	8006fee <HAL_TIM_PWM_Start+0xaa>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d104      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0x92>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd4:	e00b      	b.n	8006fee <HAL_TIM_PWM_Start+0xaa>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d104      	bne.n	8006fe6 <HAL_TIM_PWM_Start+0xa2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe4:	e003      	b.n	8006fee <HAL_TIM_PWM_Start+0xaa>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fe18 	bl	8007c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a23      	ldr	r2, [pc, #140]	; (8007090 <HAL_TIM_PWM_Start+0x14c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d107      	bne.n	8007016 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1d      	ldr	r2, [pc, #116]	; (8007090 <HAL_TIM_PWM_Start+0x14c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d018      	beq.n	8007052 <HAL_TIM_PWM_Start+0x10e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007028:	d013      	beq.n	8007052 <HAL_TIM_PWM_Start+0x10e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a19      	ldr	r2, [pc, #100]	; (8007094 <HAL_TIM_PWM_Start+0x150>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_TIM_PWM_Start+0x10e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a17      	ldr	r2, [pc, #92]	; (8007098 <HAL_TIM_PWM_Start+0x154>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_TIM_PWM_Start+0x10e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a16      	ldr	r2, [pc, #88]	; (800709c <HAL_TIM_PWM_Start+0x158>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIM_PWM_Start+0x10e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a14      	ldr	r2, [pc, #80]	; (80070a0 <HAL_TIM_PWM_Start+0x15c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d111      	bne.n	8007076 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b06      	cmp	r3, #6
 8007062:	d010      	beq.n	8007086 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007074:	e007      	b.n	8007086 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0201 	orr.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40010000 	.word	0x40010000
 8007094:	40000400 	.word	0x40000400
 8007098:	40000800 	.word	0x40000800
 800709c:	40000c00 	.word	0x40000c00
 80070a0:	40014000 	.word	0x40014000

080070a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2200      	movs	r2, #0
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fdb8 	bl	8007c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a29      	ldr	r2, [pc, #164]	; (8007168 <HAL_TIM_PWM_Stop+0xc4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d117      	bne.n	80070f6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a1a      	ldr	r2, [r3, #32]
 80070cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80070d0:	4013      	ands	r3, r2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10f      	bne.n	80070f6 <HAL_TIM_PWM_Stop+0x52>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	f240 4344 	movw	r3, #1092	; 0x444
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <HAL_TIM_PWM_Stop+0x52>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10f      	bne.n	8007126 <HAL_TIM_PWM_Stop+0x82>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a1a      	ldr	r2, [r3, #32]
 800710c:	f240 4344 	movw	r3, #1092	; 0x444
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d107      	bne.n	8007126 <HAL_TIM_PWM_Stop+0x82>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <HAL_TIM_PWM_Stop+0x92>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007134:	e013      	b.n	800715e <HAL_TIM_PWM_Stop+0xba>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b04      	cmp	r3, #4
 800713a:	d104      	bne.n	8007146 <HAL_TIM_PWM_Stop+0xa2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007144:	e00b      	b.n	800715e <HAL_TIM_PWM_Stop+0xba>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b08      	cmp	r3, #8
 800714a:	d104      	bne.n	8007156 <HAL_TIM_PWM_Stop+0xb2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007154:	e003      	b.n	800715e <HAL_TIM_PWM_Stop+0xba>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40010000 	.word	0x40010000

0800716c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d122      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b02      	cmp	r3, #2
 800718e:	d11b      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0202 	mvn.w	r2, #2
 8007198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa77 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 80071b4:	e005      	b.n	80071c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa69 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fa7a 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d122      	bne.n	800721c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d11b      	bne.n	800721c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f06f 0204 	mvn.w	r2, #4
 80071ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa4d 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 8007208:	e005      	b.n	8007216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa3f 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fa50 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b08      	cmp	r3, #8
 8007228:	d122      	bne.n	8007270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b08      	cmp	r3, #8
 8007236:	d11b      	bne.n	8007270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0208 	mvn.w	r2, #8
 8007240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2204      	movs	r2, #4
 8007246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa23 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 800725c:	e005      	b.n	800726a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa15 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa26 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	2b10      	cmp	r3, #16
 800727c:	d122      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b10      	cmp	r3, #16
 800728a:	d11b      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f06f 0210 	mvn.w	r2, #16
 8007294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2208      	movs	r2, #8
 800729a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f9f9 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 80072b0:	e005      	b.n	80072be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9eb 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f9fc 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10e      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d107      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0201 	mvn.w	r2, #1
 80072e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fb f93e 	bl	800256c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fa:	2b80      	cmp	r3, #128	; 0x80
 80072fc:	d10e      	bne.n	800731c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007308:	2b80      	cmp	r3, #128	; 0x80
 800730a:	d107      	bne.n	800731c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fd26 	bl	8007d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d10e      	bne.n	8007348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d107      	bne.n	8007348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f9c1 	bl	80076ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b20      	cmp	r3, #32
 8007354:	d10e      	bne.n	8007374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b20      	cmp	r3, #32
 8007362:	d107      	bne.n	8007374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0220 	mvn.w	r2, #32
 800736c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fcf0 	bl	8007d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007396:	2302      	movs	r3, #2
 8007398:	e0ae      	b.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	f200 809f 	bhi.w	80074e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073e5 	.word	0x080073e5
 80073b4:	080074e9 	.word	0x080074e9
 80073b8:	080074e9 	.word	0x080074e9
 80073bc:	080074e9 	.word	0x080074e9
 80073c0:	08007425 	.word	0x08007425
 80073c4:	080074e9 	.word	0x080074e9
 80073c8:	080074e9 	.word	0x080074e9
 80073cc:	080074e9 	.word	0x080074e9
 80073d0:	08007467 	.word	0x08007467
 80073d4:	080074e9 	.word	0x080074e9
 80073d8:	080074e9 	.word	0x080074e9
 80073dc:	080074e9 	.word	0x080074e9
 80073e0:	080074a7 	.word	0x080074a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f9f8 	bl	80077e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0208 	orr.w	r2, r2, #8
 80073fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0204 	bic.w	r2, r2, #4
 800740e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6999      	ldr	r1, [r3, #24]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	619a      	str	r2, [r3, #24]
      break;
 8007422:	e064      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fa3e 	bl	80078ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800743e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6999      	ldr	r1, [r3, #24]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	021a      	lsls	r2, r3, #8
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	619a      	str	r2, [r3, #24]
      break;
 8007464:	e043      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fa89 	bl	8007984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69da      	ldr	r2, [r3, #28]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0208 	orr.w	r2, r2, #8
 8007480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0204 	bic.w	r2, r2, #4
 8007490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69d9      	ldr	r1, [r3, #28]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	61da      	str	r2, [r3, #28]
      break;
 80074a4:	e023      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fad3 	bl	8007a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69d9      	ldr	r1, [r3, #28]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	021a      	lsls	r2, r3, #8
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	61da      	str	r2, [r3, #28]
      break;
 80074e6:	e002      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
      break;
 80074ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_TIM_ConfigClockSource+0x1c>
 8007518:	2302      	movs	r3, #2
 800751a:	e0b4      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x186>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800753a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007554:	d03e      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0xd4>
 8007556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800755a:	f200 8087 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007562:	f000 8086 	beq.w	8007672 <HAL_TIM_ConfigClockSource+0x172>
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756a:	d87f      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800756c:	2b70      	cmp	r3, #112	; 0x70
 800756e:	d01a      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0xa6>
 8007570:	2b70      	cmp	r3, #112	; 0x70
 8007572:	d87b      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 8007574:	2b60      	cmp	r3, #96	; 0x60
 8007576:	d050      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x11a>
 8007578:	2b60      	cmp	r3, #96	; 0x60
 800757a:	d877      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800757c:	2b50      	cmp	r3, #80	; 0x50
 800757e:	d03c      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0xfa>
 8007580:	2b50      	cmp	r3, #80	; 0x50
 8007582:	d873      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d058      	beq.n	800763a <HAL_TIM_ConfigClockSource+0x13a>
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d86f      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800758c:	2b30      	cmp	r3, #48	; 0x30
 800758e:	d064      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 8007590:	2b30      	cmp	r3, #48	; 0x30
 8007592:	d86b      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d060      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 8007598:	2b20      	cmp	r3, #32
 800759a:	d867      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d05c      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d05a      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 80075a4:	e062      	b.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6899      	ldr	r1, [r3, #8]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f000 fb19 	bl	8007bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	609a      	str	r2, [r3, #8]
      break;
 80075d2:	e04f      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	6899      	ldr	r1, [r3, #8]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f000 fb02 	bl	8007bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f6:	609a      	str	r2, [r3, #8]
      break;
 80075f8:	e03c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6859      	ldr	r1, [r3, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	461a      	mov	r2, r3
 8007608:	f000 fa76 	bl	8007af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2150      	movs	r1, #80	; 0x50
 8007612:	4618      	mov	r0, r3
 8007614:	f000 facf 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 8007618:	e02c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	461a      	mov	r2, r3
 8007628:	f000 fa95 	bl	8007b56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2160      	movs	r1, #96	; 0x60
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fabf 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 8007638:	e01c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6859      	ldr	r1, [r3, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	461a      	mov	r2, r3
 8007648:	f000 fa56 	bl	8007af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2140      	movs	r1, #64	; 0x40
 8007652:	4618      	mov	r0, r3
 8007654:	f000 faaf 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 8007658:	e00c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f000 faa6 	bl	8007bb6 <TIM_ITRx_SetConfig>
      break;
 800766a:	e003      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
      break;
 8007670:	e000      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a34      	ldr	r2, [pc, #208]	; (80077c4 <TIM_Base_SetConfig+0xe4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00f      	beq.n	8007718 <TIM_Base_SetConfig+0x38>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fe:	d00b      	beq.n	8007718 <TIM_Base_SetConfig+0x38>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a31      	ldr	r2, [pc, #196]	; (80077c8 <TIM_Base_SetConfig+0xe8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_Base_SetConfig+0x38>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a30      	ldr	r2, [pc, #192]	; (80077cc <TIM_Base_SetConfig+0xec>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_Base_SetConfig+0x38>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a2f      	ldr	r2, [pc, #188]	; (80077d0 <TIM_Base_SetConfig+0xf0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d108      	bne.n	800772a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a25      	ldr	r2, [pc, #148]	; (80077c4 <TIM_Base_SetConfig+0xe4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d01b      	beq.n	800776a <TIM_Base_SetConfig+0x8a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007738:	d017      	beq.n	800776a <TIM_Base_SetConfig+0x8a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <TIM_Base_SetConfig+0xe8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <TIM_Base_SetConfig+0x8a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a21      	ldr	r2, [pc, #132]	; (80077cc <TIM_Base_SetConfig+0xec>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00f      	beq.n	800776a <TIM_Base_SetConfig+0x8a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <TIM_Base_SetConfig+0xf0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00b      	beq.n	800776a <TIM_Base_SetConfig+0x8a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1f      	ldr	r2, [pc, #124]	; (80077d4 <TIM_Base_SetConfig+0xf4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d007      	beq.n	800776a <TIM_Base_SetConfig+0x8a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <TIM_Base_SetConfig+0xf8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_Base_SetConfig+0x8a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <TIM_Base_SetConfig+0xfc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d108      	bne.n	800777c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <TIM_Base_SetConfig+0xe4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d103      	bne.n	80077b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	615a      	str	r2, [r3, #20]
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	40014000 	.word	0x40014000
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800

080077e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f023 0201 	bic.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f023 0302 	bic.w	r3, r3, #2
 8007828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <TIM_OC1_SetConfig+0xc8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d10c      	bne.n	8007856 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f023 0308 	bic.w	r3, r3, #8
 8007842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f023 0304 	bic.w	r3, r3, #4
 8007854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <TIM_OC1_SetConfig+0xc8>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d111      	bne.n	8007882 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800786c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	621a      	str	r2, [r3, #32]
}
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	40010000 	.word	0x40010000

080078ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f023 0210 	bic.w	r2, r3, #16
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f023 0320 	bic.w	r3, r3, #32
 80078f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <TIM_OC2_SetConfig+0xd4>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d10d      	bne.n	8007928 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a15      	ldr	r2, [pc, #84]	; (8007980 <TIM_OC2_SetConfig+0xd4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d113      	bne.n	8007958 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800793e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40010000 	.word	0x40010000

08007984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0303 	bic.w	r3, r3, #3
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <TIM_OC3_SetConfig+0xd0>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d10d      	bne.n	80079fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	021b      	lsls	r3, r3, #8
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <TIM_OC3_SetConfig+0xd0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d113      	bne.n	8007a2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	621a      	str	r2, [r3, #32]
}
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	40010000 	.word	0x40010000

08007a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	031b      	lsls	r3, r3, #12
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a10      	ldr	r2, [pc, #64]	; (8007af4 <TIM_OC4_SetConfig+0x9c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d109      	bne.n	8007acc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	019b      	lsls	r3, r3, #6
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	621a      	str	r2, [r3, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	40010000 	.word	0x40010000

08007af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f023 0201 	bic.w	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 030a 	bic.w	r3, r3, #10
 8007b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	621a      	str	r2, [r3, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b087      	sub	sp, #28
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	f023 0210 	bic.w	r2, r3, #16
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	031b      	lsls	r3, r3, #12
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f043 0307 	orr.w	r3, r3, #7
 8007bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	021a      	lsls	r2, r3, #8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	609a      	str	r2, [r3, #8]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 031f 	and.w	r3, r3, #31
 8007c3e:	2201      	movs	r2, #1
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1a      	ldr	r2, [r3, #32]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	401a      	ands	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 031f 	and.w	r3, r3, #31
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	fa01 f303 	lsl.w	r3, r1, r3
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	621a      	str	r2, [r3, #32]
}
 8007c6a:	bf00      	nop
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e050      	b.n	8007d32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1c      	ldr	r2, [pc, #112]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d018      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cdc:	d013      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a18      	ldr	r2, [pc, #96]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00e      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d009      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a15      	ldr	r2, [pc, #84]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d004      	beq.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a13      	ldr	r2, [pc, #76]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10c      	bne.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40014000 	.word	0x40014000

08007d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	f107 001c 	add.w	r0, r7, #28
 8007d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d122      	bne.n	8007dda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d105      	bne.n	8007dce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 fbee 	bl	80095b0 <USB_CoreReset>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]
 8007dd8:	e01a      	b.n	8007e10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fbe2 	bl	80095b0 <USB_CoreReset>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	639a      	str	r2, [r3, #56]	; 0x38
 8007e02:	e005      	b.n	8007e10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d10b      	bne.n	8007e2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f043 0206 	orr.w	r2, r3, #6
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e3a:	b004      	add	sp, #16
 8007e3c:	4770      	bx	lr
	...

08007e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d165      	bne.n	8007f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4a41      	ldr	r2, [pc, #260]	; (8007f5c <USB_SetTurnaroundTime+0x11c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d906      	bls.n	8007e6a <USB_SetTurnaroundTime+0x2a>
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4a40      	ldr	r2, [pc, #256]	; (8007f60 <USB_SetTurnaroundTime+0x120>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d202      	bcs.n	8007e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e64:	230f      	movs	r3, #15
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e062      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4a3c      	ldr	r2, [pc, #240]	; (8007f60 <USB_SetTurnaroundTime+0x120>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d306      	bcc.n	8007e80 <USB_SetTurnaroundTime+0x40>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	4a3b      	ldr	r2, [pc, #236]	; (8007f64 <USB_SetTurnaroundTime+0x124>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d202      	bcs.n	8007e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e7a:	230e      	movs	r3, #14
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	e057      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4a38      	ldr	r2, [pc, #224]	; (8007f64 <USB_SetTurnaroundTime+0x124>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d306      	bcc.n	8007e96 <USB_SetTurnaroundTime+0x56>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	4a37      	ldr	r2, [pc, #220]	; (8007f68 <USB_SetTurnaroundTime+0x128>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d202      	bcs.n	8007e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e90:	230d      	movs	r3, #13
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e04c      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	4a33      	ldr	r2, [pc, #204]	; (8007f68 <USB_SetTurnaroundTime+0x128>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d306      	bcc.n	8007eac <USB_SetTurnaroundTime+0x6c>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4a32      	ldr	r2, [pc, #200]	; (8007f6c <USB_SetTurnaroundTime+0x12c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d802      	bhi.n	8007eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007ea6:	230c      	movs	r3, #12
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e041      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4a2f      	ldr	r2, [pc, #188]	; (8007f6c <USB_SetTurnaroundTime+0x12c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d906      	bls.n	8007ec2 <USB_SetTurnaroundTime+0x82>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4a2e      	ldr	r2, [pc, #184]	; (8007f70 <USB_SetTurnaroundTime+0x130>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d802      	bhi.n	8007ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ebc:	230b      	movs	r3, #11
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e036      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4a2a      	ldr	r2, [pc, #168]	; (8007f70 <USB_SetTurnaroundTime+0x130>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d906      	bls.n	8007ed8 <USB_SetTurnaroundTime+0x98>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	4a29      	ldr	r2, [pc, #164]	; (8007f74 <USB_SetTurnaroundTime+0x134>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d802      	bhi.n	8007ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007ed2:	230a      	movs	r3, #10
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	e02b      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4a26      	ldr	r2, [pc, #152]	; (8007f74 <USB_SetTurnaroundTime+0x134>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d906      	bls.n	8007eee <USB_SetTurnaroundTime+0xae>
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4a25      	ldr	r2, [pc, #148]	; (8007f78 <USB_SetTurnaroundTime+0x138>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d202      	bcs.n	8007eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ee8:	2309      	movs	r3, #9
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e020      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4a21      	ldr	r2, [pc, #132]	; (8007f78 <USB_SetTurnaroundTime+0x138>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d306      	bcc.n	8007f04 <USB_SetTurnaroundTime+0xc4>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4a20      	ldr	r2, [pc, #128]	; (8007f7c <USB_SetTurnaroundTime+0x13c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d802      	bhi.n	8007f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007efe:	2308      	movs	r3, #8
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e015      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4a1d      	ldr	r2, [pc, #116]	; (8007f7c <USB_SetTurnaroundTime+0x13c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d906      	bls.n	8007f1a <USB_SetTurnaroundTime+0xda>
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4a1c      	ldr	r2, [pc, #112]	; (8007f80 <USB_SetTurnaroundTime+0x140>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d202      	bcs.n	8007f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f14:	2307      	movs	r3, #7
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	e00a      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f1a:	2306      	movs	r3, #6
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e007      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d102      	bne.n	8007f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f26:	2309      	movs	r3, #9
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e001      	b.n	8007f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f2c:	2309      	movs	r3, #9
 8007f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	029b      	lsls	r3, r3, #10
 8007f44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	00d8acbf 	.word	0x00d8acbf
 8007f60:	00e4e1c0 	.word	0x00e4e1c0
 8007f64:	00f42400 	.word	0x00f42400
 8007f68:	01067380 	.word	0x01067380
 8007f6c:	011a499f 	.word	0x011a499f
 8007f70:	01312cff 	.word	0x01312cff
 8007f74:	014ca43f 	.word	0x014ca43f
 8007f78:	016e3600 	.word	0x016e3600
 8007f7c:	01a6ab1f 	.word	0x01a6ab1f
 8007f80:	01e84800 	.word	0x01e84800

08007f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f043 0201 	orr.w	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 0201 	bic.w	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d115      	bne.n	8008016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	f7fb f838 	bl	800306c <HAL_Delay>
      ms++;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fa45 	bl	8009492 <USB_GetMode>
 8008008:	4603      	mov	r3, r0
 800800a:	2b01      	cmp	r3, #1
 800800c:	d01e      	beq.n	800804c <USB_SetCurrentMode+0x84>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b31      	cmp	r3, #49	; 0x31
 8008012:	d9f0      	bls.n	8007ff6 <USB_SetCurrentMode+0x2e>
 8008014:	e01a      	b.n	800804c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d115      	bne.n	8008048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008028:	2001      	movs	r0, #1
 800802a:	f7fb f81f 	bl	800306c <HAL_Delay>
      ms++;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3301      	adds	r3, #1
 8008032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fa2c 	bl	8009492 <USB_GetMode>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <USB_SetCurrentMode+0x84>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b31      	cmp	r3, #49	; 0x31
 8008044:	d9f0      	bls.n	8008028 <USB_SetCurrentMode+0x60>
 8008046:	e001      	b.n	800804c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e005      	b.n	8008058 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b32      	cmp	r3, #50	; 0x32
 8008050:	d101      	bne.n	8008056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e000      	b.n	8008058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008060:	b084      	sub	sp, #16
 8008062:	b580      	push	{r7, lr}
 8008064:	b086      	sub	sp, #24
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800806e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800807a:	2300      	movs	r3, #0
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	e009      	b.n	8008094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3340      	adds	r3, #64	; 0x40
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	2200      	movs	r2, #0
 800808c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	3301      	adds	r3, #1
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b0e      	cmp	r3, #14
 8008098:	d9f2      	bls.n	8008080 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800809a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d11c      	bne.n	80080da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ae:	f043 0302 	orr.w	r3, r3, #2
 80080b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	639a      	str	r2, [r3, #56]	; 0x38
 80080d8:	e00b      	b.n	80080f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080f8:	461a      	mov	r2, r3
 80080fa:	2300      	movs	r3, #0
 80080fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008104:	4619      	mov	r1, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810c:	461a      	mov	r2, r3
 800810e:	680b      	ldr	r3, [r1, #0]
 8008110:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	2b01      	cmp	r3, #1
 8008116:	d10c      	bne.n	8008132 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800811e:	2100      	movs	r1, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f965 	bl	80083f0 <USB_SetDevSpeed>
 8008126:	e008      	b.n	800813a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008128:	2101      	movs	r1, #1
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f960 	bl	80083f0 <USB_SetDevSpeed>
 8008130:	e003      	b.n	800813a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008132:	2103      	movs	r1, #3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f95b 	bl	80083f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800813a:	2110      	movs	r1, #16
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8f3 	bl	8008328 <USB_FlushTxFifo>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f91f 	bl	8008390 <USB_FlushRxFifo>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008162:	461a      	mov	r2, r3
 8008164:	2300      	movs	r3, #0
 8008166:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816e:	461a      	mov	r2, r3
 8008170:	2300      	movs	r3, #0
 8008172:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817a:	461a      	mov	r2, r3
 800817c:	2300      	movs	r3, #0
 800817e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	e043      	b.n	800820e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800819c:	d118      	bne.n	80081d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	461a      	mov	r2, r3
 80081b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	e013      	b.n	80081e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c6:	461a      	mov	r2, r3
 80081c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e008      	b.n	80081e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081dc:	461a      	mov	r2, r3
 80081de:	2300      	movs	r3, #0
 80081e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ee:	461a      	mov	r2, r3
 80081f0:	2300      	movs	r3, #0
 80081f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008200:	461a      	mov	r2, r3
 8008202:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008206:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	3301      	adds	r3, #1
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	429a      	cmp	r2, r3
 8008214:	d3b7      	bcc.n	8008186 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
 800821a:	e043      	b.n	80082a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800822e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008232:	d118      	bne.n	8008266 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	461a      	mov	r2, r3
 8008248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	e013      	b.n	8008278 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825c:	461a      	mov	r2, r3
 800825e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	e008      	b.n	8008278 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008272:	461a      	mov	r2, r3
 8008274:	2300      	movs	r3, #0
 8008276:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	461a      	mov	r2, r3
 8008286:	2300      	movs	r3, #0
 8008288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	461a      	mov	r2, r3
 8008298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800829c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3301      	adds	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3b7      	bcc.n	800821c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f043 0210 	orr.w	r2, r3, #16
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <USB_DevInit+0x2c4>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d005      	beq.n	80082fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f043 0208 	orr.w	r2, r3, #8
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d107      	bne.n	8008314 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800830c:	f043 0304 	orr.w	r3, r3, #4
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008320:	b004      	add	sp, #16
 8008322:	4770      	bx	lr
 8008324:	803c3800 	.word	0x803c3800

08008328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3301      	adds	r3, #1
 800833a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4a13      	ldr	r2, [pc, #76]	; (800838c <USB_FlushTxFifo+0x64>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d901      	bls.n	8008348 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e01b      	b.n	8008380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	daf2      	bge.n	8008336 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	019b      	lsls	r3, r3, #6
 8008358:	f043 0220 	orr.w	r2, r3, #32
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	3301      	adds	r3, #1
 8008364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4a08      	ldr	r2, [pc, #32]	; (800838c <USB_FlushTxFifo+0x64>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d901      	bls.n	8008372 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e006      	b.n	8008380 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b20      	cmp	r3, #32
 800837c:	d0f0      	beq.n	8008360 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	00030d40 	.word	0x00030d40

08008390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4a11      	ldr	r2, [pc, #68]	; (80083ec <USB_FlushRxFifo+0x5c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d901      	bls.n	80083ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e018      	b.n	80083e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	daf2      	bge.n	800839c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2210      	movs	r2, #16
 80083be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4a08      	ldr	r2, [pc, #32]	; (80083ec <USB_FlushRxFifo+0x5c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e006      	b.n	80083e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b10      	cmp	r3, #16
 80083dc:	d0f0      	beq.n	80083c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	00030d40 	.word	0x00030d40

080083f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	68f9      	ldr	r1, [r7, #12]
 800840c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008410:	4313      	orrs	r3, r2
 8008412:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008422:	b480      	push	{r7}
 8008424:	b087      	sub	sp, #28
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0306 	and.w	r3, r3, #6
 800843a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008442:	2300      	movs	r3, #0
 8008444:	75fb      	strb	r3, [r7, #23]
 8008446:	e00a      	b.n	800845e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d002      	beq.n	8008454 <USB_GetDevSpeed+0x32>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b06      	cmp	r3, #6
 8008452:	d102      	bne.n	800845a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008454:	2302      	movs	r3, #2
 8008456:	75fb      	strb	r3, [r7, #23]
 8008458:	e001      	b.n	800845e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800845a:	230f      	movs	r3, #15
 800845c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008460:	4618      	mov	r0, r3
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d13a      	bne.n	80084fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	2101      	movs	r1, #1
 800849a:	fa01 f303 	lsl.w	r3, r1, r3
 800849e:	b29b      	uxth	r3, r3
 80084a0:	68f9      	ldr	r1, [r7, #12]
 80084a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084a6:	4313      	orrs	r3, r2
 80084a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d155      	bne.n	800856c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	059b      	lsls	r3, r3, #22
 80084e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084e4:	4313      	orrs	r3, r2
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	e036      	b.n	800856c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008504:	69da      	ldr	r2, [r3, #28]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	f003 030f 	and.w	r3, r3, #15
 800850e:	2101      	movs	r1, #1
 8008510:	fa01 f303 	lsl.w	r3, r1, r3
 8008514:	041b      	lsls	r3, r3, #16
 8008516:	68f9      	ldr	r1, [r7, #12]
 8008518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800851c:	4313      	orrs	r3, r2
 800851e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d11a      	bne.n	800856c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	791b      	ldrb	r3, [r3, #4]
 8008550:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008552:	430b      	orrs	r3, r1
 8008554:	4313      	orrs	r3, r2
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	785b      	ldrb	r3, [r3, #1]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d161      	bne.n	800865c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ae:	d11f      	bne.n	80085f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	2101      	movs	r1, #1
 8008602:	fa01 f303 	lsl.w	r3, r1, r3
 8008606:	b29b      	uxth	r3, r3
 8008608:	43db      	mvns	r3, r3
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008610:	4013      	ands	r3, r2
 8008612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	2101      	movs	r1, #1
 8008626:	fa01 f303 	lsl.w	r3, r1, r3
 800862a:	b29b      	uxth	r3, r3
 800862c:	43db      	mvns	r3, r3
 800862e:	68f9      	ldr	r1, [r7, #12]
 8008630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008634:	4013      	ands	r3, r2
 8008636:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	0159      	lsls	r1, r3, #5
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	440b      	add	r3, r1
 800864e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008652:	4619      	mov	r1, r3
 8008654:	4b35      	ldr	r3, [pc, #212]	; (800872c <USB_DeactivateEndpoint+0x1b0>)
 8008656:	4013      	ands	r3, r2
 8008658:	600b      	str	r3, [r1, #0]
 800865a:	e060      	b.n	800871e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800866e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008672:	d11f      	bne.n	80086b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008692:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	2101      	movs	r1, #1
 80086c6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	43db      	mvns	r3, r3
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086d4:	4013      	ands	r3, r2
 80086d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f303 	lsl.w	r3, r1, r3
 80086ee:	041b      	lsls	r3, r3, #16
 80086f0:	43db      	mvns	r3, r3
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f8:	4013      	ands	r3, r2
 80086fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	0159      	lsls	r1, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	440b      	add	r3, r1
 8008712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008716:	4619      	mov	r1, r3
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <USB_DeactivateEndpoint+0x1b4>)
 800871a:	4013      	ands	r3, r2
 800871c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	ec337800 	.word	0xec337800
 8008730:	eff37800 	.word	0xeff37800

08008734 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08a      	sub	sp, #40	; 0x28
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b01      	cmp	r3, #1
 8008752:	f040 815c 	bne.w	8008a0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d132      	bne.n	80087c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	440a      	add	r2, r1
 8008774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800877c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800879c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087bc:	0cdb      	lsrs	r3, r3, #19
 80087be:	04db      	lsls	r3, r3, #19
 80087c0:	6113      	str	r3, [r2, #16]
 80087c2:	e074      	b.n	80088ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087de:	0cdb      	lsrs	r3, r3, #19
 80087e0:	04db      	lsls	r3, r3, #19
 80087e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008802:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6999      	ldr	r1, [r3, #24]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	440b      	add	r3, r1
 8008820:	1e59      	subs	r1, r3, #1
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	fbb1 f3f3 	udiv	r3, r1, r3
 800882a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800882c:	4b9d      	ldr	r3, [pc, #628]	; (8008aa4 <USB_EPStartXfer+0x370>)
 800882e:	400b      	ands	r3, r1
 8008830:	69b9      	ldr	r1, [r7, #24]
 8008832:	0148      	lsls	r0, r1, #5
 8008834:	69f9      	ldr	r1, [r7, #28]
 8008836:	4401      	add	r1, r0
 8008838:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800883c:	4313      	orrs	r3, r2
 800883e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	691a      	ldr	r2, [r3, #16]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008856:	69b9      	ldr	r1, [r7, #24]
 8008858:	0148      	lsls	r0, r1, #5
 800885a:	69f9      	ldr	r1, [r7, #28]
 800885c:	4401      	add	r1, r0
 800885e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008862:	4313      	orrs	r3, r2
 8008864:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d11f      	bne.n	80088ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	0151      	lsls	r1, r2, #5
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	440a      	add	r2, r1
 8008884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008888:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800888c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d14b      	bne.n	800894c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d009      	beq.n	80088d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	461a      	mov	r2, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	791b      	ldrb	r3, [r3, #4]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d128      	bne.n	800892a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d110      	bne.n	800890a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	e00f      	b.n	800892a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	0151      	lsls	r1, r2, #5
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	440a      	add	r2, r1
 8008920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008928:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008944:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	e133      	b.n	8008bb4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800896a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	791b      	ldrb	r3, [r3, #4]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d015      	beq.n	80089a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 811b 	beq.w	8008bb4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	2101      	movs	r1, #1
 8008990:	fa01 f303 	lsl.w	r3, r1, r3
 8008994:	69f9      	ldr	r1, [r7, #28]
 8008996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800899a:	4313      	orrs	r3, r2
 800899c:	634b      	str	r3, [r1, #52]	; 0x34
 800899e:	e109      	b.n	8008bb4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d110      	bne.n	80089d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	e00f      	b.n	80089f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	0151      	lsls	r1, r2, #5
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	440a      	add	r2, r1
 80089e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6919      	ldr	r1, [r3, #16]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	b298      	uxth	r0, r3
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	4603      	mov	r3, r0
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fade 	bl	8008fc8 <USB_WritePacket>
 8008a0c:	e0d2      	b.n	8008bb4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a28:	0cdb      	lsrs	r3, r3, #19
 8008a2a:	04db      	lsls	r3, r3, #19
 8008a2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d126      	bne.n	8008aa8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a70:	69b9      	ldr	r1, [r7, #24]
 8008a72:	0148      	lsls	r0, r1, #5
 8008a74:	69f9      	ldr	r1, [r7, #28]
 8008a76:	4401      	add	r1, r0
 8008a78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a9e:	6113      	str	r3, [r2, #16]
 8008aa0:	e03a      	b.n	8008b18 <USB_EPStartXfer+0x3e4>
 8008aa2:	bf00      	nop
 8008aa4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	699a      	ldr	r2, [r3, #24]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	1e5a      	subs	r2, r3, #1
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	8afa      	ldrh	r2, [r7, #22]
 8008ac4:	fb03 f202 	mul.w	r2, r3, r2
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad8:	691a      	ldr	r2, [r3, #16]
 8008ada:	8afb      	ldrh	r3, [r7, #22]
 8008adc:	04d9      	lsls	r1, r3, #19
 8008ade:	4b38      	ldr	r3, [pc, #224]	; (8008bc0 <USB_EPStartXfer+0x48c>)
 8008ae0:	400b      	ands	r3, r1
 8008ae2:	69b9      	ldr	r1, [r7, #24]
 8008ae4:	0148      	lsls	r0, r1, #5
 8008ae6:	69f9      	ldr	r1, [r7, #28]
 8008ae8:	4401      	add	r1, r0
 8008aea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008aee:	4313      	orrs	r3, r2
 8008af0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afe:	691a      	ldr	r2, [r3, #16]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b08:	69b9      	ldr	r1, [r7, #24]
 8008b0a:	0148      	lsls	r0, r1, #5
 8008b0c:	69f9      	ldr	r1, [r7, #28]
 8008b0e:	4401      	add	r1, r0
 8008b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b14:	4313      	orrs	r3, r2
 8008b16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d10d      	bne.n	8008b3a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6919      	ldr	r1, [r3, #16]
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	460a      	mov	r2, r1
 8008b38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	791b      	ldrb	r3, [r3, #4]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d128      	bne.n	8008b94 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d110      	bne.n	8008b74 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e00f      	b.n	8008b94 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	0151      	lsls	r1, r2, #5
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	440a      	add	r2, r1
 8008b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	1ff80000 	.word	0x1ff80000

08008bc4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f040 80ce 	bne.w	8008d82 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d132      	bne.n	8008c54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4c:	0cdb      	lsrs	r3, r3, #19
 8008c4e:	04db      	lsls	r3, r3, #19
 8008c50:	6113      	str	r3, [r2, #16]
 8008c52:	e04e      	b.n	8008cf2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6e:	0cdb      	lsrs	r3, r3, #19
 8008c70:	04db      	lsls	r3, r3, #19
 8008c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	0151      	lsls	r1, r2, #5
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	440a      	add	r2, r1
 8008c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	699a      	ldr	r2, [r3, #24]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d903      	bls.n	8008cac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	691a      	ldr	r2, [r3, #16]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ce2:	6939      	ldr	r1, [r7, #16]
 8008ce4:	0148      	lsls	r0, r1, #5
 8008ce6:	6979      	ldr	r1, [r7, #20]
 8008ce8:	4401      	add	r1, r0
 8008cea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d11e      	bne.n	8008d36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d009      	beq.n	8008d14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	0151      	lsls	r1, r2, #5
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	440a      	add	r2, r1
 8008d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	e097      	b.n	8008e66 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 8083 	beq.w	8008e66 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	2101      	movs	r1, #1
 8008d72:	fa01 f303 	lsl.w	r3, r1, r3
 8008d76:	6979      	ldr	r1, [r7, #20]
 8008d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	634b      	str	r3, [r1, #52]	; 0x34
 8008d80:	e071      	b.n	8008e66 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d9c:	0cdb      	lsrs	r3, r3, #19
 8008d9e:	04db      	lsls	r3, r3, #19
 8008da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008dc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	0151      	lsls	r1, r2, #5
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	440a      	add	r2, r1
 8008df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e14:	6939      	ldr	r1, [r7, #16]
 8008e16:	0148      	lsls	r0, r1, #5
 8008e18:	6979      	ldr	r1, [r7, #20]
 8008e1a:	4401      	add	r1, r0
 8008e1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e20:	4313      	orrs	r3, r2
 8008e22:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10d      	bne.n	8008e46 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6919      	ldr	r1, [r3, #16]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	460a      	mov	r2, r1
 8008e44:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d14a      	bne.n	8008f28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eaa:	f040 8086 	bne.w	8008fba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	7812      	ldrb	r2, [r2, #0]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ed0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	0151      	lsls	r1, r2, #5
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	440a      	add	r2, r1
 8008eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d902      	bls.n	8008f0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	75fb      	strb	r3, [r7, #23]
          break;
 8008f0a:	e056      	b.n	8008fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f24:	d0e7      	beq.n	8008ef6 <USB_EPStopXfer+0x82>
 8008f26:	e048      	b.n	8008fba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f40:	d13b      	bne.n	8008fba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	7812      	ldrb	r2, [r2, #0]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d902      	bls.n	8008fa0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f9e:	e00c      	b.n	8008fba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fb8:	d0e7      	beq.n	8008f8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b089      	sub	sp, #36	; 0x24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	71fb      	strb	r3, [r7, #7]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d123      	bne.n	8009036 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008fee:	88bb      	ldrh	r3, [r7, #4]
 8008ff0:	3303      	adds	r3, #3
 8008ff2:	089b      	lsrs	r3, r3, #2
 8008ff4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61bb      	str	r3, [r7, #24]
 8008ffa:	e018      	b.n	800902e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	031a      	lsls	r2, r3, #12
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	4413      	add	r3, r2
 8009004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009008:	461a      	mov	r2, r3
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3301      	adds	r3, #1
 8009014:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	3301      	adds	r3, #1
 800901a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3301      	adds	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	3301      	adds	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	3301      	adds	r3, #1
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	d3e2      	bcc.n	8008ffc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3724      	adds	r7, #36	; 0x24
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009044:	b480      	push	{r7}
 8009046:	b08b      	sub	sp, #44	; 0x2c
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	089b      	lsrs	r3, r3, #2
 800905e:	b29b      	uxth	r3, r3
 8009060:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800906a:	2300      	movs	r3, #0
 800906c:	623b      	str	r3, [r7, #32]
 800906e:	e014      	b.n	800909a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	601a      	str	r2, [r3, #0]
    pDest++;
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	3301      	adds	r3, #1
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	3301      	adds	r3, #1
 8009086:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	3301      	adds	r3, #1
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	3301      	adds	r3, #1
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	3301      	adds	r3, #1
 8009098:	623b      	str	r3, [r7, #32]
 800909a:	6a3a      	ldr	r2, [r7, #32]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d3e6      	bcc.n	8009070 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090a2:	8bfb      	ldrh	r3, [r7, #30]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d01e      	beq.n	80090e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b2:	461a      	mov	r2, r3
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	fa22 f303 	lsr.w	r3, r2, r3
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	701a      	strb	r2, [r3, #0]
      i++;
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	3301      	adds	r3, #1
 80090d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	3301      	adds	r3, #1
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80090da:	8bfb      	ldrh	r3, [r7, #30]
 80090dc:	3b01      	subs	r3, #1
 80090de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090e0:	8bfb      	ldrh	r3, [r7, #30]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1ea      	bne.n	80090bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	372c      	adds	r7, #44	; 0x2c
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d12c      	bne.n	800916a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	db12      	blt.n	8009148 <USB_EPSetStall+0x54>
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00f      	beq.n	8009148 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	0151      	lsls	r1, r2, #5
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	440a      	add	r2, r1
 800913e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009142:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009146:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	0151      	lsls	r1, r2, #5
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	440a      	add	r2, r1
 800915e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	e02b      	b.n	80091c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	db12      	blt.n	80091a2 <USB_EPSetStall+0xae>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00f      	beq.n	80091a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	0151      	lsls	r1, r2, #5
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	440a      	add	r2, r1
 80091b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	785b      	ldrb	r3, [r3, #1]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d128      	bne.n	800923e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	0151      	lsls	r1, r2, #5
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	440a      	add	r2, r1
 8009202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800920a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	791b      	ldrb	r3, [r3, #4]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d003      	beq.n	800921c <USB_EPClearStall+0x4c>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d138      	bne.n	800928e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	0151      	lsls	r1, r2, #5
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	440a      	add	r2, r1
 8009232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	e027      	b.n	800928e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	4413      	add	r3, r2
 8009246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	0151      	lsls	r1, r2, #5
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	440a      	add	r2, r1
 8009254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009258:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800925c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	791b      	ldrb	r3, [r3, #4]
 8009262:	2b03      	cmp	r3, #3
 8009264:	d003      	beq.n	800926e <USB_EPClearStall+0x9e>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	791b      	ldrb	r3, [r3, #4]
 800926a:	2b02      	cmp	r3, #2
 800926c:	d10f      	bne.n	800928e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800928c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80092d0:	68f9      	ldr	r1, [r7, #12]
 80092d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d6:	4313      	orrs	r3, r2
 80092d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009316:	f023 0302 	bic.w	r3, r3, #2
 800931a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800932a:	b480      	push	{r7}
 800932c:	b085      	sub	sp, #20
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009344:	f023 0303 	bic.w	r3, r3, #3
 8009348:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009358:	f043 0302 	orr.w	r3, r3, #2
 800935c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4013      	ands	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009384:	68fb      	ldr	r3, [r7, #12]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	4013      	ands	r3, r2
 80093b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	0c1b      	lsrs	r3, r3, #16
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	4013      	ands	r3, r2
 80093e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	b29b      	uxth	r3, r3
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	4013      	ands	r3, r2
 8009426:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009428:	68bb      	ldr	r3, [r7, #8]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009436:	b480      	push	{r7}
 8009438:	b087      	sub	sp, #28
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	460b      	mov	r3, r1
 8009440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009458:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	fa22 f303 	lsr.w	r3, r2, r3
 8009466:	01db      	lsls	r3, r3, #7
 8009468:	b2db      	uxtb	r3, r3
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	4013      	ands	r3, r2
 8009482:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009484:	68bb      	ldr	r3, [r7, #8]
}
 8009486:	4618      	mov	r0, r3
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	f003 0301 	and.w	r3, r3, #1
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80094cc:	f023 0307 	bic.w	r3, r3, #7
 80094d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	460b      	mov	r3, r1
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	333c      	adds	r3, #60	; 0x3c
 800950a:	3304      	adds	r3, #4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	4a26      	ldr	r2, [pc, #152]	; (80095ac <USB_EP0_OutStart+0xb8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d90a      	bls.n	800952e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009528:	d101      	bne.n	800952e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	e037      	b.n	800959e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009534:	461a      	mov	r2, r3
 8009536:	2300      	movs	r3, #0
 8009538:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800954c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800955c:	f043 0318 	orr.w	r3, r3, #24
 8009560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009570:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009574:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d10f      	bne.n	800959c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	461a      	mov	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009596:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800959a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	4f54300a 	.word	0x4f54300a

080095b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3301      	adds	r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4a13      	ldr	r2, [pc, #76]	; (8009614 <USB_CoreReset+0x64>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d901      	bls.n	80095ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e01b      	b.n	8009606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	daf2      	bge.n	80095bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f043 0201 	orr.w	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3301      	adds	r3, #1
 80095ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <USB_CoreReset+0x64>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d901      	bls.n	80095f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e006      	b.n	8009606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	2b01      	cmp	r3, #1
 8009602:	d0f0      	beq.n	80095e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	00030d40 	.word	0x00030d40

08009618 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009624:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009628:	f005 fb66 	bl	800ecf8 <USBD_static_malloc>
 800962c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d109      	bne.n	8009648 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	32b0      	adds	r2, #176	; 0xb0
 800963e:	2100      	movs	r1, #0
 8009640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009644:	2302      	movs	r3, #2
 8009646:	e0d4      	b.n	80097f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009648:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800964c:	2100      	movs	r1, #0
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f005 fbde 	bl	800ee10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	32b0      	adds	r2, #176	; 0xb0
 800965e:	68f9      	ldr	r1, [r7, #12]
 8009660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	32b0      	adds	r2, #176	; 0xb0
 800966e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	7c1b      	ldrb	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d138      	bne.n	80096f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009680:	4b5e      	ldr	r3, [pc, #376]	; (80097fc <USBD_CDC_Init+0x1e4>)
 8009682:	7819      	ldrb	r1, [r3, #0]
 8009684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009688:	2202      	movs	r2, #2
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f005 fa11 	bl	800eab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009690:	4b5a      	ldr	r3, [pc, #360]	; (80097fc <USBD_CDC_Init+0x1e4>)
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 020f 	and.w	r2, r3, #15
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	3324      	adds	r3, #36	; 0x24
 80096a6:	2201      	movs	r2, #1
 80096a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096aa:	4b55      	ldr	r3, [pc, #340]	; (8009800 <USBD_CDC_Init+0x1e8>)
 80096ac:	7819      	ldrb	r1, [r3, #0]
 80096ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096b2:	2202      	movs	r2, #2
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f005 f9fc 	bl	800eab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096ba:	4b51      	ldr	r3, [pc, #324]	; (8009800 <USBD_CDC_Init+0x1e8>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	f003 020f 	and.w	r2, r3, #15
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096d2:	2201      	movs	r2, #1
 80096d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80096d6:	4b4b      	ldr	r3, [pc, #300]	; (8009804 <USBD_CDC_Init+0x1ec>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	f003 020f 	and.w	r2, r3, #15
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	3326      	adds	r3, #38	; 0x26
 80096ec:	2210      	movs	r2, #16
 80096ee:	801a      	strh	r2, [r3, #0]
 80096f0:	e035      	b.n	800975e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096f2:	4b42      	ldr	r3, [pc, #264]	; (80097fc <USBD_CDC_Init+0x1e4>)
 80096f4:	7819      	ldrb	r1, [r3, #0]
 80096f6:	2340      	movs	r3, #64	; 0x40
 80096f8:	2202      	movs	r2, #2
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f005 f9d9 	bl	800eab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009700:	4b3e      	ldr	r3, [pc, #248]	; (80097fc <USBD_CDC_Init+0x1e4>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 020f 	and.w	r2, r3, #15
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	3324      	adds	r3, #36	; 0x24
 8009716:	2201      	movs	r2, #1
 8009718:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800971a:	4b39      	ldr	r3, [pc, #228]	; (8009800 <USBD_CDC_Init+0x1e8>)
 800971c:	7819      	ldrb	r1, [r3, #0]
 800971e:	2340      	movs	r3, #64	; 0x40
 8009720:	2202      	movs	r2, #2
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f005 f9c5 	bl	800eab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009728:	4b35      	ldr	r3, [pc, #212]	; (8009800 <USBD_CDC_Init+0x1e8>)
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	f003 020f 	and.w	r2, r3, #15
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009740:	2201      	movs	r2, #1
 8009742:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009744:	4b2f      	ldr	r3, [pc, #188]	; (8009804 <USBD_CDC_Init+0x1ec>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f003 020f 	and.w	r2, r3, #15
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	3326      	adds	r3, #38	; 0x26
 800975a:	2210      	movs	r2, #16
 800975c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800975e:	4b29      	ldr	r3, [pc, #164]	; (8009804 <USBD_CDC_Init+0x1ec>)
 8009760:	7819      	ldrb	r1, [r3, #0]
 8009762:	2308      	movs	r3, #8
 8009764:	2203      	movs	r2, #3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f005 f9a3 	bl	800eab2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800976c:	4b25      	ldr	r3, [pc, #148]	; (8009804 <USBD_CDC_Init+0x1ec>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 020f 	and.w	r2, r3, #15
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	3324      	adds	r3, #36	; 0x24
 8009782:	2201      	movs	r2, #1
 8009784:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	33b0      	adds	r3, #176	; 0xb0
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80097bc:	2302      	movs	r3, #2
 80097be:	e018      	b.n	80097f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7c1b      	ldrb	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097c8:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <USBD_CDC_Init+0x1e8>)
 80097ca:	7819      	ldrb	r1, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f005 fa5a 	bl	800ec90 <USBD_LL_PrepareReceive>
 80097dc:	e008      	b.n	80097f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097de:	4b08      	ldr	r3, [pc, #32]	; (8009800 <USBD_CDC_Init+0x1e8>)
 80097e0:	7819      	ldrb	r1, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f005 fa50 	bl	800ec90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200005ab 	.word	0x200005ab
 8009800:	200005ac 	.word	0x200005ac
 8009804:	200005ad 	.word	0x200005ad

08009808 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009814:	4b3a      	ldr	r3, [pc, #232]	; (8009900 <USBD_CDC_DeInit+0xf8>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f005 f96f 	bl	800eafe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009820:	4b37      	ldr	r3, [pc, #220]	; (8009900 <USBD_CDC_DeInit+0xf8>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f003 020f 	and.w	r2, r3, #15
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	440b      	add	r3, r1
 8009834:	3324      	adds	r3, #36	; 0x24
 8009836:	2200      	movs	r2, #0
 8009838:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800983a:	4b32      	ldr	r3, [pc, #200]	; (8009904 <USBD_CDC_DeInit+0xfc>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f005 f95c 	bl	800eafe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009846:	4b2f      	ldr	r3, [pc, #188]	; (8009904 <USBD_CDC_DeInit+0xfc>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	f003 020f 	and.w	r2, r3, #15
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800985e:	2200      	movs	r2, #0
 8009860:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009862:	4b29      	ldr	r3, [pc, #164]	; (8009908 <USBD_CDC_DeInit+0x100>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f005 f948 	bl	800eafe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800986e:	4b26      	ldr	r3, [pc, #152]	; (8009908 <USBD_CDC_DeInit+0x100>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	f003 020f 	and.w	r2, r3, #15
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	4613      	mov	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4413      	add	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	440b      	add	r3, r1
 8009882:	3324      	adds	r3, #36	; 0x24
 8009884:	2200      	movs	r2, #0
 8009886:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009888:	4b1f      	ldr	r3, [pc, #124]	; (8009908 <USBD_CDC_DeInit+0x100>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 020f 	and.w	r2, r3, #15
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	3326      	adds	r3, #38	; 0x26
 800989e:	2200      	movs	r2, #0
 80098a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	32b0      	adds	r2, #176	; 0xb0
 80098ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01f      	beq.n	80098f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	33b0      	adds	r3, #176	; 0xb0
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	32b0      	adds	r2, #176	; 0xb0
 80098d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f005 fa1c 	bl	800ed14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	32b0      	adds	r2, #176	; 0xb0
 80098e6:	2100      	movs	r1, #0
 80098e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	200005ab 	.word	0x200005ab
 8009904:	200005ac 	.word	0x200005ac
 8009908:	200005ad 	.word	0x200005ad

0800990c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	32b0      	adds	r2, #176	; 0xb0
 8009920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009924:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800992a:	2300      	movs	r3, #0
 800992c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	e0bf      	b.n	8009abc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009944:	2b00      	cmp	r3, #0
 8009946:	d050      	beq.n	80099ea <USBD_CDC_Setup+0xde>
 8009948:	2b20      	cmp	r3, #32
 800994a:	f040 80af 	bne.w	8009aac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	88db      	ldrh	r3, [r3, #6]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d03a      	beq.n	80099cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b25b      	sxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	da1b      	bge.n	8009998 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	33b0      	adds	r3, #176	; 0xb0
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009976:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	88d2      	ldrh	r2, [r2, #6]
 800997c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	88db      	ldrh	r3, [r3, #6]
 8009982:	2b07      	cmp	r3, #7
 8009984:	bf28      	it	cs
 8009986:	2307      	movcs	r3, #7
 8009988:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	89fa      	ldrh	r2, [r7, #14]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fd43 	bl	800b41c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009996:	e090      	b.n	8009aba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	785a      	ldrb	r2, [r3, #1]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	88db      	ldrh	r3, [r3, #6]
 80099a6:	2b3f      	cmp	r3, #63	; 0x3f
 80099a8:	d803      	bhi.n	80099b2 <USBD_CDC_Setup+0xa6>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	88db      	ldrh	r3, [r3, #6]
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	e000      	b.n	80099b4 <USBD_CDC_Setup+0xa8>
 80099b2:	2240      	movs	r2, #64	; 0x40
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80099ba:	6939      	ldr	r1, [r7, #16]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80099c2:	461a      	mov	r2, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fd55 	bl	800b474 <USBD_CtlPrepareRx>
      break;
 80099ca:	e076      	b.n	8009aba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	33b0      	adds	r3, #176	; 0xb0
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	7850      	ldrb	r0, [r2, #1]
 80099e2:	2200      	movs	r2, #0
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	4798      	blx	r3
      break;
 80099e8:	e067      	b.n	8009aba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	785b      	ldrb	r3, [r3, #1]
 80099ee:	2b0b      	cmp	r3, #11
 80099f0:	d851      	bhi.n	8009a96 <USBD_CDC_Setup+0x18a>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBD_CDC_Setup+0xec>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a29 	.word	0x08009a29
 80099fc:	08009aa5 	.word	0x08009aa5
 8009a00:	08009a97 	.word	0x08009a97
 8009a04:	08009a97 	.word	0x08009a97
 8009a08:	08009a97 	.word	0x08009a97
 8009a0c:	08009a97 	.word	0x08009a97
 8009a10:	08009a97 	.word	0x08009a97
 8009a14:	08009a97 	.word	0x08009a97
 8009a18:	08009a97 	.word	0x08009a97
 8009a1c:	08009a97 	.word	0x08009a97
 8009a20:	08009a53 	.word	0x08009a53
 8009a24:	08009a7d 	.word	0x08009a7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d107      	bne.n	8009a44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a34:	f107 030a 	add.w	r3, r7, #10
 8009a38:	2202      	movs	r2, #2
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 fced 	bl	800b41c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a42:	e032      	b.n	8009aaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 fc77 	bl	800b33a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8009a50:	e02b      	b.n	8009aaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d107      	bne.n	8009a6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a5e:	f107 030d 	add.w	r3, r7, #13
 8009a62:	2201      	movs	r2, #1
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fcd8 	bl	800b41c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a6c:	e01d      	b.n	8009aaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 fc62 	bl	800b33a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a76:	2303      	movs	r3, #3
 8009a78:	75fb      	strb	r3, [r7, #23]
          break;
 8009a7a:	e016      	b.n	8009aaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d00f      	beq.n	8009aa8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f001 fc55 	bl	800b33a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a90:	2303      	movs	r3, #3
 8009a92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a94:	e008      	b.n	8009aa8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 fc4e 	bl	800b33a <USBD_CtlError>
          ret = USBD_FAIL;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8009aa2:	e002      	b.n	8009aaa <USBD_CDC_Setup+0x19e>
          break;
 8009aa4:	bf00      	nop
 8009aa6:	e008      	b.n	8009aba <USBD_CDC_Setup+0x1ae>
          break;
 8009aa8:	bf00      	nop
      }
      break;
 8009aaa:	e006      	b.n	8009aba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 fc43 	bl	800b33a <USBD_CtlError>
      ret = USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	32b0      	adds	r2, #176	; 0xb0
 8009ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e065      	b.n	8009bba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	32b0      	adds	r2, #176	; 0xb0
 8009af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	f003 020f 	and.w	r2, r3, #15
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	3318      	adds	r3, #24
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d02f      	beq.n	8009b78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	f003 020f 	and.w	r2, r3, #15
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	440b      	add	r3, r1
 8009b2a:	3318      	adds	r3, #24
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	f003 010f 	and.w	r1, r3, #15
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	460b      	mov	r3, r1
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	440b      	add	r3, r1
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4403      	add	r3, r0
 8009b40:	3348      	adds	r3, #72	; 0x48
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d112      	bne.n	8009b78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	f003 020f 	and.w	r2, r3, #15
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	3318      	adds	r3, #24
 8009b66:	2200      	movs	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b6a:	78f9      	ldrb	r1, [r7, #3]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2200      	movs	r2, #0
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f005 f86c 	bl	800ec4e <USBD_LL_Transmit>
 8009b76:	e01f      	b.n	8009bb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	33b0      	adds	r3, #176	; 0xb0
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d010      	beq.n	8009bb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	33b0      	adds	r3, #176	; 0xb0
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009bb4:	78fa      	ldrb	r2, [r7, #3]
 8009bb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	32b0      	adds	r2, #176	; 0xb0
 8009bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	32b0      	adds	r2, #176	; 0xb0
 8009be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e01a      	b.n	8009c2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f005 f86a 	bl	800ecd2 <USBD_LL_GetRxDataSize>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	33b0      	adds	r3, #176	; 0xb0
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c24:	4611      	mov	r1, r2
 8009c26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	32b0      	adds	r2, #176	; 0xb0
 8009c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e025      	b.n	8009ca0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	33b0      	adds	r3, #176	; 0xb0
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01a      	beq.n	8009c9e <USBD_CDC_EP0_RxReady+0x6c>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c6e:	2bff      	cmp	r3, #255	; 0xff
 8009c70:	d015      	beq.n	8009c9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	33b0      	adds	r3, #176	; 0xb0
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c92:	b292      	uxth	r2, r2
 8009c94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	22ff      	movs	r2, #255	; 0xff
 8009c9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cb0:	2182      	movs	r1, #130	; 0x82
 8009cb2:	4818      	ldr	r0, [pc, #96]	; (8009d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cb4:	f000 fd09 	bl	800a6ca <USBD_GetEpDesc>
 8009cb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cba:	2101      	movs	r1, #1
 8009cbc:	4815      	ldr	r0, [pc, #84]	; (8009d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cbe:	f000 fd04 	bl	800a6ca <USBD_GetEpDesc>
 8009cc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cc4:	2181      	movs	r1, #129	; 0x81
 8009cc6:	4813      	ldr	r0, [pc, #76]	; (8009d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cc8:	f000 fcff 	bl	800a6ca <USBD_GetEpDesc>
 8009ccc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2210      	movs	r2, #16
 8009cd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ce8:	711a      	strb	r2, [r3, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cfc:	711a      	strb	r2, [r3, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2243      	movs	r2, #67	; 0x43
 8009d06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d08:	4b02      	ldr	r3, [pc, #8]	; (8009d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000568 	.word	0x20000568

08009d18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d20:	2182      	movs	r1, #130	; 0x82
 8009d22:	4818      	ldr	r0, [pc, #96]	; (8009d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d24:	f000 fcd1 	bl	800a6ca <USBD_GetEpDesc>
 8009d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	4815      	ldr	r0, [pc, #84]	; (8009d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d2e:	f000 fccc 	bl	800a6ca <USBD_GetEpDesc>
 8009d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d34:	2181      	movs	r1, #129	; 0x81
 8009d36:	4813      	ldr	r0, [pc, #76]	; (8009d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d38:	f000 fcc7 	bl	800a6ca <USBD_GetEpDesc>
 8009d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2210      	movs	r2, #16
 8009d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d006      	beq.n	8009d5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	2200      	movs	r2, #0
 8009d54:	711a      	strb	r2, [r3, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f042 0202 	orr.w	r2, r2, #2
 8009d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	711a      	strb	r2, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f042 0202 	orr.w	r2, r2, #2
 8009d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2243      	movs	r2, #67	; 0x43
 8009d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d78:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000568 	.word	0x20000568

08009d88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d90:	2182      	movs	r1, #130	; 0x82
 8009d92:	4818      	ldr	r0, [pc, #96]	; (8009df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d94:	f000 fc99 	bl	800a6ca <USBD_GetEpDesc>
 8009d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	4815      	ldr	r0, [pc, #84]	; (8009df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d9e:	f000 fc94 	bl	800a6ca <USBD_GetEpDesc>
 8009da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009da4:	2181      	movs	r1, #129	; 0x81
 8009da6:	4813      	ldr	r0, [pc, #76]	; (8009df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009da8:	f000 fc8f 	bl	800a6ca <USBD_GetEpDesc>
 8009dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2210      	movs	r2, #16
 8009db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d006      	beq.n	8009dce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dc8:	711a      	strb	r2, [r3, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ddc:	711a      	strb	r2, [r3, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2243      	movs	r2, #67	; 0x43
 8009de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000568 	.word	0x20000568

08009df8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	220a      	movs	r2, #10
 8009e04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e06:	4b03      	ldr	r3, [pc, #12]	; (8009e14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	20000524 	.word	0x20000524

08009e18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e009      	b.n	8009e40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	33b0      	adds	r3, #176	; 0xb0
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	32b0      	adds	r2, #176	; 0xb0
 8009e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e66:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e008      	b.n	8009e84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	371c      	adds	r7, #28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	32b0      	adds	r2, #176	; 0xb0
 8009ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e004      	b.n	8009ebe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	32b0      	adds	r2, #176	; 0xb0
 8009ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	32b0      	adds	r2, #176	; 0xb0
 8009eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e018      	b.n	8009f2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7c1b      	ldrb	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10a      	bne.n	8009f18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f02:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <USBD_CDC_ReceivePacket+0x68>)
 8009f04:	7819      	ldrb	r1, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f004 febd 	bl	800ec90 <USBD_LL_PrepareReceive>
 8009f16:	e008      	b.n	8009f2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f18:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <USBD_CDC_ReceivePacket+0x68>)
 8009f1a:	7819      	ldrb	r1, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f22:	2340      	movs	r3, #64	; 0x40
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f004 feb3 	bl	800ec90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	200005ac 	.word	0x200005ac

08009f38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e01f      	b.n	8009f90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	79fa      	ldrb	r2, [r7, #7]
 8009f82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f004 fd2d 	bl	800e9e4 <USBD_LL_Init>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e025      	b.n	8009ffc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	32ae      	adds	r2, #174	; 0xae
 8009fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00f      	beq.n	8009fec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32ae      	adds	r2, #174	; 0xae
 8009fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	f107 020e 	add.w	r2, r7, #14
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	4798      	blx	r3
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f004 fd35 	bl	800ea7c <USBD_LL_Start>
 800a012:	4603      	mov	r3, r0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	4798      	blx	r3
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	460b      	mov	r3, r1
 800a074:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	78fa      	ldrb	r2, [r7, #3]
 800a084:	4611      	mov	r1, r2
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	4798      	blx	r3
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a090:	2303      	movs	r3, #3
 800a092:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 f908 	bl	800b2c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0d2:	f003 031f 	and.w	r3, r3, #31
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d01a      	beq.n	800a110 <USBD_LL_SetupStage+0x72>
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d822      	bhi.n	800a124 <USBD_LL_SetupStage+0x86>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <USBD_LL_SetupStage+0x4a>
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d00a      	beq.n	800a0fc <USBD_LL_SetupStage+0x5e>
 800a0e6:	e01d      	b.n	800a124 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fb5f 	bl	800a7b4 <USBD_StdDevReq>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0fa:	e020      	b.n	800a13e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fbc7 	bl	800a898 <USBD_StdItfReq>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
      break;
 800a10e:	e016      	b.n	800a13e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fc29 	bl	800a970 <USBD_StdEPReq>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]
      break;
 800a122:	e00c      	b.n	800a13e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a12a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f004 fd02 	bl	800eb3c <USBD_LL_StallEP>
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]
      break;
 800a13c:	bf00      	nop
  }

  return ret;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	460b      	mov	r3, r1
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d16e      	bne.n	800a23e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a166:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a16e:	2b03      	cmp	r3, #3
 800a170:	f040 8098 	bne.w	800a2a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d913      	bls.n	800a1a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	689a      	ldr	r2, [r3, #8]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	4293      	cmp	r3, r2
 800a198:	bf28      	it	cs
 800a19a:	4613      	movcs	r3, r2
 800a19c:	461a      	mov	r2, r3
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f001 f984 	bl	800b4ae <USBD_CtlContinueRx>
 800a1a6:	e07d      	b.n	800a2a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1ae:	f003 031f 	and.w	r3, r3, #31
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d014      	beq.n	800a1e0 <USBD_LL_DataOutStage+0x98>
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d81d      	bhi.n	800a1f6 <USBD_LL_DataOutStage+0xae>
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <USBD_LL_DataOutStage+0x7c>
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d003      	beq.n	800a1ca <USBD_LL_DataOutStage+0x82>
 800a1c2:	e018      	b.n	800a1f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	75bb      	strb	r3, [r7, #22]
            break;
 800a1c8:	e018      	b.n	800a1fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 fa5e 	bl	800a696 <USBD_CoreFindIF>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	75bb      	strb	r3, [r7, #22]
            break;
 800a1de:	e00d      	b.n	800a1fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 fa60 	bl	800a6b0 <USBD_CoreFindEP>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75bb      	strb	r3, [r7, #22]
            break;
 800a1f4:	e002      	b.n	800a1fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	75bb      	strb	r3, [r7, #22]
            break;
 800a1fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a1fc:	7dbb      	ldrb	r3, [r7, #22]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d119      	bne.n	800a236 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d113      	bne.n	800a236 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a20e:	7dba      	ldrb	r2, [r7, #22]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	32ae      	adds	r2, #174	; 0xae
 800a214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a21e:	7dba      	ldrb	r2, [r7, #22]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a226:	7dba      	ldrb	r2, [r7, #22]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	32ae      	adds	r2, #174	; 0xae
 800a22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f001 f94a 	bl	800b4d0 <USBD_CtlSendStatus>
 800a23c:	e032      	b.n	800a2a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a244:	b2db      	uxtb	r3, r3
 800a246:	4619      	mov	r1, r3
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 fa31 	bl	800a6b0 <USBD_CoreFindEP>
 800a24e:	4603      	mov	r3, r0
 800a250:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a252:	7dbb      	ldrb	r3, [r7, #22]
 800a254:	2bff      	cmp	r3, #255	; 0xff
 800a256:	d025      	beq.n	800a2a4 <USBD_LL_DataOutStage+0x15c>
 800a258:	7dbb      	ldrb	r3, [r7, #22]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d122      	bne.n	800a2a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b03      	cmp	r3, #3
 800a268:	d117      	bne.n	800a29a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a26a:	7dba      	ldrb	r2, [r7, #22]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	32ae      	adds	r2, #174	; 0xae
 800a270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00f      	beq.n	800a29a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a27a:	7dba      	ldrb	r2, [r7, #22]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a282:	7dba      	ldrb	r2, [r7, #22]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	32ae      	adds	r2, #174	; 0xae
 800a288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	7afa      	ldrb	r2, [r7, #11]
 800a290:	4611      	mov	r1, r2
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	4798      	blx	r3
 800a296:	4603      	mov	r3, r0
 800a298:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	e000      	b.n	800a2a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b086      	sub	sp, #24
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d16f      	bne.n	800a3a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3314      	adds	r3, #20
 800a2c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d15a      	bne.n	800a388 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	689a      	ldr	r2, [r3, #8]
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d914      	bls.n	800a308 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	1ad2      	subs	r2, r2, r3
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f001 f8ac 	bl	800b452 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2100      	movs	r1, #0
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f004 fcc5 	bl	800ec90 <USBD_LL_PrepareReceive>
 800a306:	e03f      	b.n	800a388 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	429a      	cmp	r2, r3
 800a312:	d11c      	bne.n	800a34e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d316      	bcc.n	800a34e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d20f      	bcs.n	800a34e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a32e:	2200      	movs	r2, #0
 800a330:	2100      	movs	r1, #0
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f001 f88d 	bl	800b452 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a340:	2300      	movs	r3, #0
 800a342:	2200      	movs	r2, #0
 800a344:	2100      	movs	r1, #0
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f004 fca2 	bl	800ec90 <USBD_LL_PrepareReceive>
 800a34c:	e01c      	b.n	800a388 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b03      	cmp	r3, #3
 800a358:	d10f      	bne.n	800a37a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a37a:	2180      	movs	r1, #128	; 0x80
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f004 fbdd 	bl	800eb3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f001 f8b7 	bl	800b4f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d03a      	beq.n	800a408 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff fe42 	bl	800a01c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3a0:	e032      	b.n	800a408 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f97f 	bl	800a6b0 <USBD_CoreFindEP>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	2bff      	cmp	r3, #255	; 0xff
 800a3ba:	d025      	beq.n	800a408 <USBD_LL_DataInStage+0x15a>
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d122      	bne.n	800a408 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d11c      	bne.n	800a408 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3ce:	7dfa      	ldrb	r2, [r7, #23]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	32ae      	adds	r2, #174	; 0xae
 800a3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d014      	beq.n	800a408 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a3de:	7dfa      	ldrb	r2, [r7, #23]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a3e6:	7dfa      	ldrb	r2, [r7, #23]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	32ae      	adds	r2, #174	; 0xae
 800a3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	7afa      	ldrb	r2, [r7, #11]
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	4798      	blx	r3
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a3fe:	7dbb      	ldrb	r3, [r7, #22]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a404:	7dbb      	ldrb	r3, [r7, #22]
 800a406:	e000      	b.n	800a40a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d014      	beq.n	800a478 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00e      	beq.n	800a478 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	6852      	ldr	r2, [r2, #4]
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	4611      	mov	r1, r2
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a474:	2303      	movs	r3, #3
 800a476:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	2200      	movs	r2, #0
 800a47c:	2100      	movs	r1, #0
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f004 fb17 	bl	800eab2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2240      	movs	r2, #64	; 0x40
 800a490:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a494:	2340      	movs	r3, #64	; 0x40
 800a496:	2200      	movs	r2, #0
 800a498:	2180      	movs	r1, #128	; 0x80
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f004 fb09 	bl	800eab2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2240      	movs	r2, #64	; 0x40
 800a4aa:	621a      	str	r2, [r3, #32]

  return ret;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	78fa      	ldrb	r2, [r7, #3]
 800a4c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2204      	movs	r2, #4
 800a4f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b04      	cmp	r3, #4
 800a514:	d106      	bne.n	800a524 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b03      	cmp	r3, #3
 800a544:	d110      	bne.n	800a568 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00b      	beq.n	800a568 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	32ae      	adds	r2, #174	; 0xae
 800a588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a590:	2303      	movs	r3, #3
 800a592:	e01c      	b.n	800a5ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d115      	bne.n	800a5cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	32ae      	adds	r2, #174	; 0xae
 800a5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32ae      	adds	r2, #174	; 0xae
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	32ae      	adds	r2, #174	; 0xae
 800a5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e01c      	b.n	800a632 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b03      	cmp	r3, #3
 800a602:	d115      	bne.n	800a630 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	32ae      	adds	r2, #174	; 0xae
 800a60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	32ae      	adds	r2, #174	; 0xae
 800a622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	78fa      	ldrb	r2, [r7, #3]
 800a62a:	4611      	mov	r1, r2
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00e      	beq.n	800a68c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6852      	ldr	r2, [r2, #4]
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	4611      	mov	r1, r2
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	4798      	blx	r3
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a688:	2303      	movs	r3, #3
 800a68a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b086      	sub	sp, #24
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d920      	bls.n	800a734 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a6fa:	e013      	b.n	800a724 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a6fc:	f107 030a 	add.w	r3, r7, #10
 800a700:	4619      	mov	r1, r3
 800a702:	6978      	ldr	r0, [r7, #20]
 800a704:	f000 f81b 	bl	800a73e <USBD_GetNextDesc>
 800a708:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	2b05      	cmp	r3, #5
 800a710:	d108      	bne.n	800a724 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	789b      	ldrb	r3, [r3, #2]
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d008      	beq.n	800a732 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	885b      	ldrh	r3, [r3, #2]
 800a728:	b29a      	uxth	r2, r3
 800a72a:	897b      	ldrh	r3, [r7, #10]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d8e5      	bhi.n	800a6fc <USBD_GetEpDesc+0x32>
 800a730:	e000      	b.n	800a734 <USBD_GetEpDesc+0x6a>
          break;
 800a732:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a734:	693b      	ldr	r3, [r7, #16]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a73e:	b480      	push	{r7}
 800a740:	b085      	sub	sp, #20
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	881a      	ldrh	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	b29b      	uxth	r3, r3
 800a756:	4413      	add	r3, r2
 800a758:	b29a      	uxth	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4413      	add	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a76a:	68fb      	ldr	r3, [r7, #12]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	3301      	adds	r3, #1
 800a78e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a796:	8a3b      	ldrh	r3, [r7, #16]
 800a798:	021b      	lsls	r3, r3, #8
 800a79a:	b21a      	sxth	r2, r3
 800a79c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	b21b      	sxth	r3, r3
 800a7a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7a6:	89fb      	ldrh	r3, [r7, #14]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	371c      	adds	r7, #28
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7ca:	2b40      	cmp	r3, #64	; 0x40
 800a7cc:	d005      	beq.n	800a7da <USBD_StdDevReq+0x26>
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d857      	bhi.n	800a882 <USBD_StdDevReq+0xce>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00f      	beq.n	800a7f6 <USBD_StdDevReq+0x42>
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d153      	bne.n	800a882 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	32ae      	adds	r2, #174	; 0xae
 800a7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	4798      	blx	r3
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f4:	e04a      	b.n	800a88c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	2b09      	cmp	r3, #9
 800a7fc:	d83b      	bhi.n	800a876 <USBD_StdDevReq+0xc2>
 800a7fe:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <USBD_StdDevReq+0x50>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a859 	.word	0x0800a859
 800a808:	0800a86d 	.word	0x0800a86d
 800a80c:	0800a877 	.word	0x0800a877
 800a810:	0800a863 	.word	0x0800a863
 800a814:	0800a877 	.word	0x0800a877
 800a818:	0800a837 	.word	0x0800a837
 800a81c:	0800a82d 	.word	0x0800a82d
 800a820:	0800a877 	.word	0x0800a877
 800a824:	0800a84f 	.word	0x0800a84f
 800a828:	0800a841 	.word	0x0800a841
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa3c 	bl	800acac <USBD_GetDescriptor>
          break;
 800a834:	e024      	b.n	800a880 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fba1 	bl	800af80 <USBD_SetAddress>
          break;
 800a83e:	e01f      	b.n	800a880 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fbe0 	bl	800b008 <USBD_SetConfig>
 800a848:	4603      	mov	r3, r0
 800a84a:	73fb      	strb	r3, [r7, #15]
          break;
 800a84c:	e018      	b.n	800a880 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fc83 	bl	800b15c <USBD_GetConfig>
          break;
 800a856:	e013      	b.n	800a880 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fcb4 	bl	800b1c8 <USBD_GetStatus>
          break;
 800a860:	e00e      	b.n	800a880 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fce3 	bl	800b230 <USBD_SetFeature>
          break;
 800a86a:	e009      	b.n	800a880 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fd07 	bl	800b282 <USBD_ClrFeature>
          break;
 800a874:	e004      	b.n	800a880 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fd5e 	bl	800b33a <USBD_CtlError>
          break;
 800a87e:	bf00      	nop
      }
      break;
 800a880:	e004      	b.n	800a88c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fd58 	bl	800b33a <USBD_CtlError>
      break;
 800a88a:	bf00      	nop
  }

  return ret;
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop

0800a898 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ae:	2b40      	cmp	r3, #64	; 0x40
 800a8b0:	d005      	beq.n	800a8be <USBD_StdItfReq+0x26>
 800a8b2:	2b40      	cmp	r3, #64	; 0x40
 800a8b4:	d852      	bhi.n	800a95c <USBD_StdItfReq+0xc4>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <USBD_StdItfReq+0x26>
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	d14e      	bne.n	800a95c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d840      	bhi.n	800a94e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	889b      	ldrh	r3, [r3, #4]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d836      	bhi.n	800a944 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	889b      	ldrh	r3, [r3, #4]
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff fed9 	bl	800a696 <USBD_CoreFindIF>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8e8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ea:	2bff      	cmp	r3, #255	; 0xff
 800a8ec:	d01d      	beq.n	800a92a <USBD_StdItfReq+0x92>
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d11a      	bne.n	800a92a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a8f4:	7bba      	ldrb	r2, [r7, #14]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32ae      	adds	r2, #174	; 0xae
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00f      	beq.n	800a924 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a904:	7bba      	ldrb	r2, [r7, #14]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a90c:	7bba      	ldrb	r2, [r7, #14]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	32ae      	adds	r2, #174	; 0xae
 800a912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	4798      	blx	r3
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a922:	e004      	b.n	800a92e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a924:	2303      	movs	r3, #3
 800a926:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a928:	e001      	b.n	800a92e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a92a:	2303      	movs	r3, #3
 800a92c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	88db      	ldrh	r3, [r3, #6]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d110      	bne.n	800a958 <USBD_StdItfReq+0xc0>
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10d      	bne.n	800a958 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fdc7 	bl	800b4d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a942:	e009      	b.n	800a958 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fcf7 	bl	800b33a <USBD_CtlError>
          break;
 800a94c:	e004      	b.n	800a958 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fcf2 	bl	800b33a <USBD_CtlError>
          break;
 800a956:	e000      	b.n	800a95a <USBD_StdItfReq+0xc2>
          break;
 800a958:	bf00      	nop
      }
      break;
 800a95a:	e004      	b.n	800a966 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fceb 	bl	800b33a <USBD_CtlError>
      break;
 800a964:	bf00      	nop
  }

  return ret;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	889b      	ldrh	r3, [r3, #4]
 800a982:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a98c:	2b40      	cmp	r3, #64	; 0x40
 800a98e:	d007      	beq.n	800a9a0 <USBD_StdEPReq+0x30>
 800a990:	2b40      	cmp	r3, #64	; 0x40
 800a992:	f200 817f 	bhi.w	800ac94 <USBD_StdEPReq+0x324>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d02a      	beq.n	800a9f0 <USBD_StdEPReq+0x80>
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	f040 817a 	bne.w	800ac94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff fe83 	bl	800a6b0 <USBD_CoreFindEP>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9ae:	7b7b      	ldrb	r3, [r7, #13]
 800a9b0:	2bff      	cmp	r3, #255	; 0xff
 800a9b2:	f000 8174 	beq.w	800ac9e <USBD_StdEPReq+0x32e>
 800a9b6:	7b7b      	ldrb	r3, [r7, #13]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f040 8170 	bne.w	800ac9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a9be:	7b7a      	ldrb	r2, [r7, #13]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a9c6:	7b7a      	ldrb	r2, [r7, #13]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	32ae      	adds	r2, #174	; 0xae
 800a9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 8163 	beq.w	800ac9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a9d8:	7b7a      	ldrb	r2, [r7, #13]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	32ae      	adds	r2, #174	; 0xae
 800a9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	4798      	blx	r3
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9ee:	e156      	b.n	800ac9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d008      	beq.n	800aa0a <USBD_StdEPReq+0x9a>
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	f300 8145 	bgt.w	800ac88 <USBD_StdEPReq+0x318>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 809b 	beq.w	800ab3a <USBD_StdEPReq+0x1ca>
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d03c      	beq.n	800aa82 <USBD_StdEPReq+0x112>
 800aa08:	e13e      	b.n	800ac88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d002      	beq.n	800aa1c <USBD_StdEPReq+0xac>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d016      	beq.n	800aa48 <USBD_StdEPReq+0xd8>
 800aa1a:	e02c      	b.n	800aa76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00d      	beq.n	800aa3e <USBD_StdEPReq+0xce>
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	2b80      	cmp	r3, #128	; 0x80
 800aa26:	d00a      	beq.n	800aa3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f004 f885 	bl	800eb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa32:	2180      	movs	r1, #128	; 0x80
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f004 f881 	bl	800eb3c <USBD_LL_StallEP>
 800aa3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa3c:	e020      	b.n	800aa80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fc7a 	bl	800b33a <USBD_CtlError>
              break;
 800aa46:	e01b      	b.n	800aa80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	885b      	ldrh	r3, [r3, #2]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10e      	bne.n	800aa6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00b      	beq.n	800aa6e <USBD_StdEPReq+0xfe>
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	2b80      	cmp	r3, #128	; 0x80
 800aa5a:	d008      	beq.n	800aa6e <USBD_StdEPReq+0xfe>
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	88db      	ldrh	r3, [r3, #6]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d104      	bne.n	800aa6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa64:	7bbb      	ldrb	r3, [r7, #14]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f004 f867 	bl	800eb3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fd2e 	bl	800b4d0 <USBD_CtlSendStatus>

              break;
 800aa74:	e004      	b.n	800aa80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fc5e 	bl	800b33a <USBD_CtlError>
              break;
 800aa7e:	bf00      	nop
          }
          break;
 800aa80:	e107      	b.n	800ac92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d002      	beq.n	800aa94 <USBD_StdEPReq+0x124>
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d016      	beq.n	800aac0 <USBD_StdEPReq+0x150>
 800aa92:	e04b      	b.n	800ab2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00d      	beq.n	800aab6 <USBD_StdEPReq+0x146>
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	2b80      	cmp	r3, #128	; 0x80
 800aa9e:	d00a      	beq.n	800aab6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f004 f849 	bl	800eb3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaaa:	2180      	movs	r1, #128	; 0x80
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f004 f845 	bl	800eb3c <USBD_LL_StallEP>
 800aab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aab4:	e040      	b.n	800ab38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fc3e 	bl	800b33a <USBD_CtlError>
              break;
 800aabe:	e03b      	b.n	800ab38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885b      	ldrh	r3, [r3, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d136      	bne.n	800ab36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d004      	beq.n	800aadc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aad2:	7bbb      	ldrb	r3, [r7, #14]
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f004 f84f 	bl	800eb7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fcf7 	bl	800b4d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff fde2 	bl	800a6b0 <USBD_CoreFindEP>
 800aaec:	4603      	mov	r3, r0
 800aaee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaf0:	7b7b      	ldrb	r3, [r7, #13]
 800aaf2:	2bff      	cmp	r3, #255	; 0xff
 800aaf4:	d01f      	beq.n	800ab36 <USBD_StdEPReq+0x1c6>
 800aaf6:	7b7b      	ldrb	r3, [r7, #13]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d11c      	bne.n	800ab36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aafc:	7b7a      	ldrb	r2, [r7, #13]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab04:	7b7a      	ldrb	r2, [r7, #13]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	32ae      	adds	r2, #174	; 0xae
 800ab0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d010      	beq.n	800ab36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab14:	7b7a      	ldrb	r2, [r7, #13]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	32ae      	adds	r2, #174	; 0xae
 800ab1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	4798      	blx	r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab2a:	e004      	b.n	800ab36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fc03 	bl	800b33a <USBD_CtlError>
              break;
 800ab34:	e000      	b.n	800ab38 <USBD_StdEPReq+0x1c8>
              break;
 800ab36:	bf00      	nop
          }
          break;
 800ab38:	e0ab      	b.n	800ac92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d002      	beq.n	800ab4c <USBD_StdEPReq+0x1dc>
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d032      	beq.n	800abb0 <USBD_StdEPReq+0x240>
 800ab4a:	e097      	b.n	800ac7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <USBD_StdEPReq+0x1f2>
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	2b80      	cmp	r3, #128	; 0x80
 800ab56:	d004      	beq.n	800ab62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fbed 	bl	800b33a <USBD_CtlError>
                break;
 800ab60:	e091      	b.n	800ac86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	da0b      	bge.n	800ab82 <USBD_StdEPReq+0x212>
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	3310      	adds	r3, #16
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3304      	adds	r3, #4
 800ab80:	e00b      	b.n	800ab9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab88:	4613      	mov	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	4413      	add	r3, r2
 800ab98:	3304      	adds	r3, #4
 800ab9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2202      	movs	r2, #2
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fc37 	bl	800b41c <USBD_CtlSendData>
              break;
 800abae:	e06a      	b.n	800ac86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	da11      	bge.n	800abdc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	f003 020f 	and.w	r2, r3, #15
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	440b      	add	r3, r1
 800abca:	3324      	adds	r3, #36	; 0x24
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d117      	bne.n	800ac02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fbb0 	bl	800b33a <USBD_CtlError>
                  break;
 800abda:	e054      	b.n	800ac86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	f003 020f 	and.w	r2, r3, #15
 800abe2:	6879      	ldr	r1, [r7, #4]
 800abe4:	4613      	mov	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	440b      	add	r3, r1
 800abee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fb9d 	bl	800b33a <USBD_CtlError>
                  break;
 800ac00:	e041      	b.n	800ac86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	da0b      	bge.n	800ac22 <USBD_StdEPReq+0x2b2>
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	3310      	adds	r3, #16
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	3304      	adds	r3, #4
 800ac20:	e00b      	b.n	800ac3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	4413      	add	r3, r2
 800ac38:	3304      	adds	r3, #4
 800ac3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <USBD_StdEPReq+0x2d8>
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
 800ac44:	2b80      	cmp	r3, #128	; 0x80
 800ac46:	d103      	bne.n	800ac50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	e00e      	b.n	800ac6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f003 ffaf 	bl	800ebb8 <USBD_LL_IsStallEP>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2201      	movs	r2, #1
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	e002      	b.n	800ac6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2202      	movs	r2, #2
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fbd1 	bl	800b41c <USBD_CtlSendData>
              break;
 800ac7a:	e004      	b.n	800ac86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fb5b 	bl	800b33a <USBD_CtlError>
              break;
 800ac84:	bf00      	nop
          }
          break;
 800ac86:	e004      	b.n	800ac92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fb55 	bl	800b33a <USBD_CtlError>
          break;
 800ac90:	bf00      	nop
      }
      break;
 800ac92:	e005      	b.n	800aca0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fb4f 	bl	800b33a <USBD_CtlError>
      break;
 800ac9c:	e000      	b.n	800aca0 <USBD_StdEPReq+0x330>
      break;
 800ac9e:	bf00      	nop
  }

  return ret;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	885b      	ldrh	r3, [r3, #2]
 800acc6:	0a1b      	lsrs	r3, r3, #8
 800acc8:	b29b      	uxth	r3, r3
 800acca:	3b01      	subs	r3, #1
 800accc:	2b06      	cmp	r3, #6
 800acce:	f200 8128 	bhi.w	800af22 <USBD_GetDescriptor+0x276>
 800acd2:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <USBD_GetDescriptor+0x2c>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800acf5 	.word	0x0800acf5
 800acdc:	0800ad0d 	.word	0x0800ad0d
 800ace0:	0800ad4d 	.word	0x0800ad4d
 800ace4:	0800af23 	.word	0x0800af23
 800ace8:	0800af23 	.word	0x0800af23
 800acec:	0800aec3 	.word	0x0800aec3
 800acf0:	0800aeef 	.word	0x0800aeef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7c12      	ldrb	r2, [r2, #16]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	60f8      	str	r0, [r7, #12]
      break;
 800ad0a:	e112      	b.n	800af32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	7c1b      	ldrb	r3, [r3, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10d      	bne.n	800ad30 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1c:	f107 0208 	add.w	r2, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad2e:	e100      	b.n	800af32 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	f107 0208 	add.w	r2, r7, #8
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
 800ad40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3301      	adds	r3, #1
 800ad46:	2202      	movs	r2, #2
 800ad48:	701a      	strb	r2, [r3, #0]
      break;
 800ad4a:	e0f2      	b.n	800af32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	885b      	ldrh	r3, [r3, #2]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b05      	cmp	r3, #5
 800ad54:	f200 80ac 	bhi.w	800aeb0 <USBD_GetDescriptor+0x204>
 800ad58:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <USBD_GetDescriptor+0xb4>)
 800ad5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5e:	bf00      	nop
 800ad60:	0800ad79 	.word	0x0800ad79
 800ad64:	0800adad 	.word	0x0800adad
 800ad68:	0800ade1 	.word	0x0800ade1
 800ad6c:	0800ae15 	.word	0x0800ae15
 800ad70:	0800ae49 	.word	0x0800ae49
 800ad74:	0800ae7d 	.word	0x0800ae7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7c12      	ldrb	r2, [r2, #16]
 800ad90:	f107 0108 	add.w	r1, r7, #8
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9a:	e091      	b.n	800aec0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 facb 	bl	800b33a <USBD_CtlError>
            err++;
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	3301      	adds	r3, #1
 800ada8:	72fb      	strb	r3, [r7, #11]
          break;
 800adaa:	e089      	b.n	800aec0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7c12      	ldrb	r2, [r2, #16]
 800adc4:	f107 0108 	add.w	r1, r7, #8
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
 800adcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adce:	e077      	b.n	800aec0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fab1 	bl	800b33a <USBD_CtlError>
            err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
          break;
 800adde:	e06f      	b.n	800aec0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7c12      	ldrb	r2, [r2, #16]
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3
 800ae00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae02:	e05d      	b.n	800aec0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa97 	bl	800b33a <USBD_CtlError>
            err++;
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	72fb      	strb	r3, [r7, #11]
          break;
 800ae12:	e055      	b.n	800aec0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	7c12      	ldrb	r2, [r2, #16]
 800ae2c:	f107 0108 	add.w	r1, r7, #8
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae36:	e043      	b.n	800aec0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fa7d 	bl	800b33a <USBD_CtlError>
            err++;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	3301      	adds	r3, #1
 800ae44:	72fb      	strb	r3, [r7, #11]
          break;
 800ae46:	e03b      	b.n	800aec0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6a:	e029      	b.n	800aec0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa63 	bl	800b33a <USBD_CtlError>
            err++;
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	3301      	adds	r3, #1
 800ae78:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7a:	e021      	b.n	800aec0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	7c12      	ldrb	r2, [r2, #16]
 800ae94:	f107 0108 	add.w	r1, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9e:	e00f      	b.n	800aec0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa49 	bl	800b33a <USBD_CtlError>
            err++;
 800aea8:	7afb      	ldrb	r3, [r7, #11]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	72fb      	strb	r3, [r7, #11]
          break;
 800aeae:	e007      	b.n	800aec0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa41 	bl	800b33a <USBD_CtlError>
          err++;
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	3301      	adds	r3, #1
 800aebc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aebe:	bf00      	nop
      }
      break;
 800aec0:	e037      	b.n	800af32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7c1b      	ldrb	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d109      	bne.n	800aede <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	f107 0208 	add.w	r2, r7, #8
 800aed6:	4610      	mov	r0, r2
 800aed8:	4798      	blx	r3
 800aeda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aedc:	e029      	b.n	800af32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fa2a 	bl	800b33a <USBD_CtlError>
        err++;
 800aee6:	7afb      	ldrb	r3, [r7, #11]
 800aee8:	3301      	adds	r3, #1
 800aeea:	72fb      	strb	r3, [r7, #11]
      break;
 800aeec:	e021      	b.n	800af32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	7c1b      	ldrb	r3, [r3, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10d      	bne.n	800af12 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefe:	f107 0208 	add.w	r2, r7, #8
 800af02:	4610      	mov	r0, r2
 800af04:	4798      	blx	r3
 800af06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	2207      	movs	r2, #7
 800af0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af10:	e00f      	b.n	800af32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fa10 	bl	800b33a <USBD_CtlError>
        err++;
 800af1a:	7afb      	ldrb	r3, [r7, #11]
 800af1c:	3301      	adds	r3, #1
 800af1e:	72fb      	strb	r3, [r7, #11]
      break;
 800af20:	e007      	b.n	800af32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fa08 	bl	800b33a <USBD_CtlError>
      err++;
 800af2a:	7afb      	ldrb	r3, [r7, #11]
 800af2c:	3301      	adds	r3, #1
 800af2e:	72fb      	strb	r3, [r7, #11]
      break;
 800af30:	bf00      	nop
  }

  if (err != 0U)
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d11e      	bne.n	800af76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	88db      	ldrh	r3, [r3, #6]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d016      	beq.n	800af6e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af40:	893b      	ldrh	r3, [r7, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00e      	beq.n	800af64 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	88da      	ldrh	r2, [r3, #6]
 800af4a:	893b      	ldrh	r3, [r7, #8]
 800af4c:	4293      	cmp	r3, r2
 800af4e:	bf28      	it	cs
 800af50:	4613      	movcs	r3, r2
 800af52:	b29b      	uxth	r3, r3
 800af54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af56:	893b      	ldrh	r3, [r7, #8]
 800af58:	461a      	mov	r2, r3
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fa5d 	bl	800b41c <USBD_CtlSendData>
 800af62:	e009      	b.n	800af78 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f9e7 	bl	800b33a <USBD_CtlError>
 800af6c:	e004      	b.n	800af78 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 faae 	bl	800b4d0 <USBD_CtlSendStatus>
 800af74:	e000      	b.n	800af78 <USBD_GetDescriptor+0x2cc>
    return;
 800af76:	bf00      	nop
  }
}
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop

0800af80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	889b      	ldrh	r3, [r3, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d131      	bne.n	800aff6 <USBD_SetAddress+0x76>
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	88db      	ldrh	r3, [r3, #6]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d12d      	bne.n	800aff6 <USBD_SetAddress+0x76>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	885b      	ldrh	r3, [r3, #2]
 800af9e:	2b7f      	cmp	r3, #127	; 0x7f
 800afa0:	d829      	bhi.n	800aff6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	885b      	ldrh	r3, [r3, #2]
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d104      	bne.n	800afc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f9bc 	bl	800b33a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc2:	e01d      	b.n	800b000 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	7bfa      	ldrb	r2, [r7, #15]
 800afc8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f003 fe1d 	bl	800ec10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa7a 	bl	800b4d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d004      	beq.n	800afec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2202      	movs	r2, #2
 800afe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afea:	e009      	b.n	800b000 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff4:	e004      	b.n	800b000 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f99e 	bl	800b33a <USBD_CtlError>
  }
}
 800affe:	bf00      	nop
 800b000:	bf00      	nop
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	885b      	ldrh	r3, [r3, #2]
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	4b4e      	ldr	r3, [pc, #312]	; (800b158 <USBD_SetConfig+0x150>)
 800b01e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b020:	4b4d      	ldr	r3, [pc, #308]	; (800b158 <USBD_SetConfig+0x150>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d905      	bls.n	800b034 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f985 	bl	800b33a <USBD_CtlError>
    return USBD_FAIL;
 800b030:	2303      	movs	r3, #3
 800b032:	e08c      	b.n	800b14e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d002      	beq.n	800b046 <USBD_SetConfig+0x3e>
 800b040:	2b03      	cmp	r3, #3
 800b042:	d029      	beq.n	800b098 <USBD_SetConfig+0x90>
 800b044:	e075      	b.n	800b132 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b046:	4b44      	ldr	r3, [pc, #272]	; (800b158 <USBD_SetConfig+0x150>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d020      	beq.n	800b090 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b04e:	4b42      	ldr	r3, [pc, #264]	; (800b158 <USBD_SetConfig+0x150>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	461a      	mov	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b058:	4b3f      	ldr	r3, [pc, #252]	; (800b158 <USBD_SetConfig+0x150>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7fe ffe7 	bl	800a032 <USBD_SetClassConfig>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d008      	beq.n	800b080 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f962 	bl	800b33a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2202      	movs	r2, #2
 800b07a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b07e:	e065      	b.n	800b14c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fa25 	bl	800b4d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2203      	movs	r2, #3
 800b08a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b08e:	e05d      	b.n	800b14c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fa1d 	bl	800b4d0 <USBD_CtlSendStatus>
      break;
 800b096:	e059      	b.n	800b14c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b098:	4b2f      	ldr	r3, [pc, #188]	; (800b158 <USBD_SetConfig+0x150>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d112      	bne.n	800b0c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b0a8:	4b2b      	ldr	r3, [pc, #172]	; (800b158 <USBD_SetConfig+0x150>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0b2:	4b29      	ldr	r3, [pc, #164]	; (800b158 <USBD_SetConfig+0x150>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7fe ffd6 	bl	800a06a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fa06 	bl	800b4d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0c4:	e042      	b.n	800b14c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b0c6:	4b24      	ldr	r3, [pc, #144]	; (800b158 <USBD_SetConfig+0x150>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d02a      	beq.n	800b12a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7fe ffc4 	bl	800a06a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <USBD_SetConfig+0x150>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0ec:	4b1a      	ldr	r3, [pc, #104]	; (800b158 <USBD_SetConfig+0x150>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fe ff9d 	bl	800a032 <USBD_SetClassConfig>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00f      	beq.n	800b122 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f918 	bl	800b33a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7fe ffa9 	bl	800a06a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b120:	e014      	b.n	800b14c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f9d4 	bl	800b4d0 <USBD_CtlSendStatus>
      break;
 800b128:	e010      	b.n	800b14c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f9d0 	bl	800b4d0 <USBD_CtlSendStatus>
      break;
 800b130:	e00c      	b.n	800b14c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f900 	bl	800b33a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b13a:	4b07      	ldr	r3, [pc, #28]	; (800b158 <USBD_SetConfig+0x150>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fe ff92 	bl	800a06a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b146:	2303      	movs	r3, #3
 800b148:	73fb      	strb	r3, [r7, #15]
      break;
 800b14a:	bf00      	nop
  }

  return ret;
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20000898 	.word	0x20000898

0800b15c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	88db      	ldrh	r3, [r3, #6]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d004      	beq.n	800b178 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b16e:	6839      	ldr	r1, [r7, #0]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f8e2 	bl	800b33a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b176:	e023      	b.n	800b1c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b02      	cmp	r3, #2
 800b182:	dc02      	bgt.n	800b18a <USBD_GetConfig+0x2e>
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc03      	bgt.n	800b190 <USBD_GetConfig+0x34>
 800b188:	e015      	b.n	800b1b6 <USBD_GetConfig+0x5a>
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d00b      	beq.n	800b1a6 <USBD_GetConfig+0x4a>
 800b18e:	e012      	b.n	800b1b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3308      	adds	r3, #8
 800b19a:	2201      	movs	r2, #1
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f93c 	bl	800b41c <USBD_CtlSendData>
        break;
 800b1a4:	e00c      	b.n	800b1c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f934 	bl	800b41c <USBD_CtlSendData>
        break;
 800b1b4:	e004      	b.n	800b1c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f8be 	bl	800b33a <USBD_CtlError>
        break;
 800b1be:	bf00      	nop
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d81e      	bhi.n	800b21e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	88db      	ldrh	r3, [r3, #6]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d004      	beq.n	800b1f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f8a5 	bl	800b33a <USBD_CtlError>
        break;
 800b1f0:	e01a      	b.n	800b228 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f043 0202 	orr.w	r2, r3, #2
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	330c      	adds	r3, #12
 800b212:	2202      	movs	r2, #2
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f900 	bl	800b41c <USBD_CtlSendData>
      break;
 800b21c:	e004      	b.n	800b228 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f88a 	bl	800b33a <USBD_CtlError>
      break;
 800b226:	bf00      	nop
  }
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	885b      	ldrh	r3, [r3, #2]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d107      	bne.n	800b252 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f940 	bl	800b4d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b250:	e013      	b.n	800b27a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	885b      	ldrh	r3, [r3, #2]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d10b      	bne.n	800b272 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	889b      	ldrh	r3, [r3, #4]
 800b25e:	0a1b      	lsrs	r3, r3, #8
 800b260:	b29b      	uxth	r3, r3
 800b262:	b2da      	uxtb	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f930 	bl	800b4d0 <USBD_CtlSendStatus>
}
 800b270:	e003      	b.n	800b27a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f860 	bl	800b33a <USBD_CtlError>
}
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b292:	b2db      	uxtb	r3, r3
 800b294:	3b01      	subs	r3, #1
 800b296:	2b02      	cmp	r3, #2
 800b298:	d80b      	bhi.n	800b2b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	885b      	ldrh	r3, [r3, #2]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d10c      	bne.n	800b2bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f910 	bl	800b4d0 <USBD_CtlSendStatus>
      }
      break;
 800b2b0:	e004      	b.n	800b2bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f840 	bl	800b33a <USBD_CtlError>
      break;
 800b2ba:	e000      	b.n	800b2be <USBD_ClrFeature+0x3c>
      break;
 800b2bc:	bf00      	nop
  }
}
 800b2be:	bf00      	nop
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	781a      	ldrb	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f7ff fa41 	bl	800a778 <SWAPBYTE>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3301      	adds	r3, #1
 800b302:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3301      	adds	r3, #1
 800b308:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff fa34 	bl	800a778 <SWAPBYTE>
 800b310:	4603      	mov	r3, r0
 800b312:	461a      	mov	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3301      	adds	r3, #1
 800b322:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7ff fa27 	bl	800a778 <SWAPBYTE>
 800b32a:	4603      	mov	r3, r0
 800b32c:	461a      	mov	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	80da      	strh	r2, [r3, #6]
}
 800b332:	bf00      	nop
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b344:	2180      	movs	r1, #128	; 0x80
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f003 fbf8 	bl	800eb3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b34c:	2100      	movs	r1, #0
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f003 fbf4 	bl	800eb3c <USBD_LL_StallEP>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d036      	beq.n	800b3e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b376:	6938      	ldr	r0, [r7, #16]
 800b378:	f000 f836 	bl	800b3e8 <USBD_GetLen>
 800b37c:	4603      	mov	r3, r0
 800b37e:	3301      	adds	r3, #1
 800b380:	b29b      	uxth	r3, r3
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	4413      	add	r3, r2
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	7812      	ldrb	r2, [r2, #0]
 800b394:	701a      	strb	r2, [r3, #0]
  idx++;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	3301      	adds	r3, #1
 800b39a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	2203      	movs	r2, #3
 800b3a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3a6:	7dfb      	ldrb	r3, [r7, #23]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3ac:	e013      	b.n	800b3d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	7812      	ldrb	r2, [r2, #0]
 800b3b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	613b      	str	r3, [r7, #16]
    idx++;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3c6:	7dfb      	ldrb	r3, [r7, #23]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e7      	bne.n	800b3ae <USBD_GetString+0x52>
 800b3de:	e000      	b.n	800b3e2 <USBD_GetString+0x86>
    return;
 800b3e0:	bf00      	nop
  }
}
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3f8:	e005      	b.n	800b406 <USBD_GetLen+0x1e>
  {
    len++;
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	3301      	adds	r3, #1
 800b404:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1f5      	bne.n	800b3fa <USBD_GetLen+0x12>
  }

  return len;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2202      	movs	r2, #2
 800b42c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	2100      	movs	r1, #0
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f003 fc03 	bl	800ec4e <USBD_LL_Transmit>

  return USBD_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	60f8      	str	r0, [r7, #12]
 800b45a:	60b9      	str	r1, [r7, #8]
 800b45c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	2100      	movs	r1, #0
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f003 fbf2 	bl	800ec4e <USBD_LL_Transmit>

  return USBD_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2203      	movs	r2, #3
 800b484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	2100      	movs	r1, #0
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f003 fbf6 	bl	800ec90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	2100      	movs	r1, #0
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f003 fbe5 	bl	800ec90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2204      	movs	r2, #4
 800b4dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f003 fbb1 	bl	800ec4e <USBD_LL_Transmit>

  return USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b082      	sub	sp, #8
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2205      	movs	r2, #5
 800b502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b506:	2300      	movs	r3, #0
 800b508:	2200      	movs	r2, #0
 800b50a:	2100      	movs	r1, #0
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f003 fbbf 	bl	800ec90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <__NVIC_SetPriority>:
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	4603      	mov	r3, r0
 800b524:	6039      	str	r1, [r7, #0]
 800b526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	db0a      	blt.n	800b546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	b2da      	uxtb	r2, r3
 800b534:	490c      	ldr	r1, [pc, #48]	; (800b568 <__NVIC_SetPriority+0x4c>)
 800b536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b53a:	0112      	lsls	r2, r2, #4
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	440b      	add	r3, r1
 800b540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b544:	e00a      	b.n	800b55c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	4908      	ldr	r1, [pc, #32]	; (800b56c <__NVIC_SetPriority+0x50>)
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	f003 030f 	and.w	r3, r3, #15
 800b552:	3b04      	subs	r3, #4
 800b554:	0112      	lsls	r2, r2, #4
 800b556:	b2d2      	uxtb	r2, r2
 800b558:	440b      	add	r3, r1
 800b55a:	761a      	strb	r2, [r3, #24]
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	e000e100 	.word	0xe000e100
 800b56c:	e000ed00 	.word	0xe000ed00

0800b570 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b570:	b580      	push	{r7, lr}
 800b572:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b574:	4b05      	ldr	r3, [pc, #20]	; (800b58c <SysTick_Handler+0x1c>)
 800b576:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b578:	f001 feb2 	bl	800d2e0 <xTaskGetSchedulerState>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d001      	beq.n	800b586 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b582:	f002 fc99 	bl	800deb8 <xPortSysTickHandler>
  }
}
 800b586:	bf00      	nop
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	e000e010 	.word	0xe000e010

0800b590 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b594:	2100      	movs	r1, #0
 800b596:	f06f 0004 	mvn.w	r0, #4
 800b59a:	f7ff ffbf 	bl	800b51c <__NVIC_SetPriority>
#endif
}
 800b59e:	bf00      	nop
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5aa:	f3ef 8305 	mrs	r3, IPSR
 800b5ae:	603b      	str	r3, [r7, #0]
  return(result);
 800b5b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b5b6:	f06f 0305 	mvn.w	r3, #5
 800b5ba:	607b      	str	r3, [r7, #4]
 800b5bc:	e00c      	b.n	800b5d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b5be:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <osKernelInitialize+0x44>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d105      	bne.n	800b5d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b5c6:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <osKernelInitialize+0x44>)
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	607b      	str	r3, [r7, #4]
 800b5d0:	e002      	b.n	800b5d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b5d8:	687b      	ldr	r3, [r7, #4]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	2000089c 	.word	0x2000089c

0800b5ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5f2:	f3ef 8305 	mrs	r3, IPSR
 800b5f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b5f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b5fe:	f06f 0305 	mvn.w	r3, #5
 800b602:	607b      	str	r3, [r7, #4]
 800b604:	e010      	b.n	800b628 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b606:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <osKernelStart+0x48>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d109      	bne.n	800b622 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b60e:	f7ff ffbf 	bl	800b590 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b612:	4b08      	ldr	r3, [pc, #32]	; (800b634 <osKernelStart+0x48>)
 800b614:	2202      	movs	r2, #2
 800b616:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b618:	f001 fa1a 	bl	800ca50 <vTaskStartScheduler>
      stat = osOK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	607b      	str	r3, [r7, #4]
 800b620:	e002      	b.n	800b628 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b622:	f04f 33ff 	mov.w	r3, #4294967295
 800b626:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b628:	687b      	ldr	r3, [r7, #4]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	2000089c 	.word	0x2000089c

0800b638 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08e      	sub	sp, #56	; 0x38
 800b63c:	af04      	add	r7, sp, #16
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b644:	2300      	movs	r3, #0
 800b646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b648:	f3ef 8305 	mrs	r3, IPSR
 800b64c:	617b      	str	r3, [r7, #20]
  return(result);
 800b64e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b650:	2b00      	cmp	r3, #0
 800b652:	d17f      	bne.n	800b754 <osThreadNew+0x11c>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d07c      	beq.n	800b754 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b65a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b65e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b660:	2318      	movs	r3, #24
 800b662:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b664:	2300      	movs	r3, #0
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b668:	f04f 33ff 	mov.w	r3, #4294967295
 800b66c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d045      	beq.n	800b700 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <osThreadNew+0x4a>
        name = attr->name;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d002      	beq.n	800b690 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d008      	beq.n	800b6a8 <osThreadNew+0x70>
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	2b38      	cmp	r3, #56	; 0x38
 800b69a:	d805      	bhi.n	800b6a8 <osThreadNew+0x70>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <osThreadNew+0x74>
        return (NULL);
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e054      	b.n	800b756 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	089b      	lsrs	r3, r3, #2
 800b6ba:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00e      	beq.n	800b6e2 <osThreadNew+0xaa>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	2b6b      	cmp	r3, #107	; 0x6b
 800b6ca:	d90a      	bls.n	800b6e2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <osThreadNew+0xaa>
        mem = 1;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	61bb      	str	r3, [r7, #24]
 800b6e0:	e010      	b.n	800b704 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10c      	bne.n	800b704 <osThreadNew+0xcc>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d108      	bne.n	800b704 <osThreadNew+0xcc>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d104      	bne.n	800b704 <osThreadNew+0xcc>
          mem = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61bb      	str	r3, [r7, #24]
 800b6fe:	e001      	b.n	800b704 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d110      	bne.n	800b72c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b712:	9202      	str	r2, [sp, #8]
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	6a3a      	ldr	r2, [r7, #32]
 800b71e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 feb9 	bl	800c498 <xTaskCreateStatic>
 800b726:	4603      	mov	r3, r0
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	e013      	b.n	800b754 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d110      	bne.n	800b754 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b732:	6a3b      	ldr	r3, [r7, #32]
 800b734:	b29a      	uxth	r2, r3
 800b736:	f107 0310 	add.w	r3, r7, #16
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 ff04 	bl	800c552 <xTaskCreate>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d001      	beq.n	800b754 <osThreadNew+0x11c>
            hTask = NULL;
 800b750:	2300      	movs	r3, #0
 800b752:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b754:	693b      	ldr	r3, [r7, #16]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3728      	adds	r7, #40	; 0x28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b766:	f3ef 8305 	mrs	r3, IPSR
 800b76a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b76c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <osDelay+0x1c>
    stat = osErrorISR;
 800b772:	f06f 0305 	mvn.w	r3, #5
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e007      	b.n	800b78a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <osDelay+0x2c>
      vTaskDelay(ticks);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f001 f829 	bl	800c7dc <vTaskDelay>
    }
  }

  return (stat);
 800b78a:	68fb      	ldr	r3, [r7, #12]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b794:	b580      	push	{r7, lr}
 800b796:	b08a      	sub	sp, #40	; 0x28
 800b798:	af02      	add	r7, sp, #8
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7a4:	f3ef 8305 	mrs	r3, IPSR
 800b7a8:	613b      	str	r3, [r7, #16]
  return(result);
 800b7aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d15f      	bne.n	800b870 <osMessageQueueNew+0xdc>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d05c      	beq.n	800b870 <osMessageQueueNew+0xdc>
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d059      	beq.n	800b870 <osMessageQueueNew+0xdc>
    mem = -1;
 800b7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d029      	beq.n	800b81c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d012      	beq.n	800b7f6 <osMessageQueueNew+0x62>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	2b4f      	cmp	r3, #79	; 0x4f
 800b7d6:	d90e      	bls.n	800b7f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00a      	beq.n	800b7f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	695a      	ldr	r2, [r3, #20]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	fb01 f303 	mul.w	r3, r1, r3
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d302      	bcc.n	800b7f6 <osMessageQueueNew+0x62>
        mem = 1;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	61bb      	str	r3, [r7, #24]
 800b7f4:	e014      	b.n	800b820 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d110      	bne.n	800b820 <osMessageQueueNew+0x8c>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10c      	bne.n	800b820 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d108      	bne.n	800b820 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d104      	bne.n	800b820 <osMessageQueueNew+0x8c>
          mem = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	61bb      	str	r3, [r7, #24]
 800b81a:	e001      	b.n	800b820 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d10b      	bne.n	800b83e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	691a      	ldr	r2, [r3, #16]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	2100      	movs	r1, #0
 800b830:	9100      	str	r1, [sp, #0]
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 f971 	bl	800bb1c <xQueueGenericCreateStatic>
 800b83a:	61f8      	str	r0, [r7, #28]
 800b83c:	e008      	b.n	800b850 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b844:	2200      	movs	r2, #0
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 f9df 	bl	800bc0c <xQueueGenericCreate>
 800b84e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00c      	beq.n	800b870 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	e001      	b.n	800b868 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b868:	6979      	ldr	r1, [r7, #20]
 800b86a:	69f8      	ldr	r0, [r7, #28]
 800b86c:	f000 fdb6 	bl	800c3dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b870:	69fb      	ldr	r3, [r7, #28]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3720      	adds	r7, #32
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4a07      	ldr	r2, [pc, #28]	; (800b8a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b88c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	4a06      	ldr	r2, [pc, #24]	; (800b8ac <vApplicationGetIdleTaskMemory+0x30>)
 800b892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b89a:	601a      	str	r2, [r3, #0]
}
 800b89c:	bf00      	nop
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	200008a0 	.word	0x200008a0
 800b8ac:	2000090c 	.word	0x2000090c

0800b8b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4a07      	ldr	r2, [pc, #28]	; (800b8dc <vApplicationGetTimerTaskMemory+0x2c>)
 800b8c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	4a06      	ldr	r2, [pc, #24]	; (800b8e0 <vApplicationGetTimerTaskMemory+0x30>)
 800b8c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ce:	601a      	str	r2, [r3, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	20000d0c 	.word	0x20000d0c
 800b8e0:	20000d78 	.word	0x20000d78

0800b8e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f103 0208 	add.w	r2, r3, #8
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f103 0208 	add.w	r2, r3, #8
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f103 0208 	add.w	r2, r3, #8
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b932:	bf00      	nop
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b93e:	b480      	push	{r7}
 800b940:	b085      	sub	sp, #20
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	689a      	ldr	r2, [r3, #8]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	601a      	str	r2, [r3, #0]
}
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b986:	b480      	push	{r7}
 800b988:	b085      	sub	sp, #20
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99c:	d103      	bne.n	800b9a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	e00c      	b.n	800b9c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	e002      	b.n	800b9b4 <vListInsert+0x2e>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d2f6      	bcs.n	800b9ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	601a      	str	r2, [r3, #0]
}
 800b9ec:	bf00      	nop
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	6892      	ldr	r2, [r2, #8]
 800ba0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	6852      	ldr	r2, [r2, #4]
 800ba18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d103      	bne.n	800ba2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1e5a      	subs	r2, r3, #1
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba76:	f002 f98d 	bl	800dd94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba86:	fb01 f303 	mul.w	r3, r1, r3
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa6:	3b01      	subs	r3, #1
 800baa8:	68f9      	ldr	r1, [r7, #12]
 800baaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baac:	fb01 f303 	mul.w	r3, r1, r3
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	22ff      	movs	r2, #255	; 0xff
 800baba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	22ff      	movs	r2, #255	; 0xff
 800bac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d114      	bne.n	800baf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d01a      	beq.n	800bb0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3310      	adds	r3, #16
 800bad8:	4618      	mov	r0, r3
 800bada:	f001 fa43 	bl	800cf64 <xTaskRemoveFromEventList>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d012      	beq.n	800bb0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bae4:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <xQueueGenericReset+0xcc>)
 800bae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	e009      	b.n	800bb0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3310      	adds	r3, #16
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fef2 	bl	800b8e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3324      	adds	r3, #36	; 0x24
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff feed 	bl	800b8e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb0a:	f002 f973 	bl	800ddf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb0e:	2301      	movs	r3, #1
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	; 0x38
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <xQueueGenericCreateStatic+0x52>
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <xQueueGenericCreateStatic+0x56>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e000      	b.n	800bb74 <xQueueGenericCreateStatic+0x58>
 800bb72:	2300      	movs	r3, #0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	623b      	str	r3, [r7, #32]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <xQueueGenericCreateStatic+0x7e>
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <xQueueGenericCreateStatic+0x82>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e000      	b.n	800bba0 <xQueueGenericCreateStatic+0x84>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	61fb      	str	r3, [r7, #28]
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbba:	2350      	movs	r3, #80	; 0x50
 800bbbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b50      	cmp	r3, #80	; 0x50
 800bbc2:	d00a      	beq.n	800bbda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	61bb      	str	r3, [r7, #24]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00d      	beq.n	800bc02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f83f 	bl	800bc80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3730      	adds	r7, #48	; 0x30
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10a      	bne.n	800bc36 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	613b      	str	r3, [r7, #16]
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	fb02 f303 	mul.w	r3, r2, r3
 800bc3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	3350      	adds	r3, #80	; 0x50
 800bc44:	4618      	mov	r0, r3
 800bc46:	f002 f9c7 	bl	800dfd8 <pvPortMalloc>
 800bc4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d011      	beq.n	800bc76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	3350      	adds	r3, #80	; 0x50
 800bc5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc64:	79fa      	ldrb	r2, [r7, #7]
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 f805 	bl	800bc80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc76:	69bb      	ldr	r3, [r7, #24]
	}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3720      	adds	r7, #32
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d103      	bne.n	800bc9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	69ba      	ldr	r2, [r7, #24]
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	e002      	b.n	800bca2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcae:	2101      	movs	r1, #1
 800bcb0:	69b8      	ldr	r0, [r7, #24]
 800bcb2:	f7ff fecb 	bl	800ba4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	78fa      	ldrb	r2, [r7, #3]
 800bcba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	; 0x38
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <xQueueGenericSend+0x32>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d103      	bne.n	800bd08 <xQueueGenericSend+0x40>
 800bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <xQueueGenericSend+0x44>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e000      	b.n	800bd0e <xQueueGenericSend+0x46>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10a      	bne.n	800bd28 <xQueueGenericSend+0x60>
	__asm volatile
 800bd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd24:	bf00      	nop
 800bd26:	e7fe      	b.n	800bd26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d103      	bne.n	800bd36 <xQueueGenericSend+0x6e>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d101      	bne.n	800bd3a <xQueueGenericSend+0x72>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <xQueueGenericSend+0x74>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10a      	bne.n	800bd56 <xQueueGenericSend+0x8e>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	623b      	str	r3, [r7, #32]
}
 800bd52:	bf00      	nop
 800bd54:	e7fe      	b.n	800bd54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd56:	f001 fac3 	bl	800d2e0 <xTaskGetSchedulerState>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <xQueueGenericSend+0x9e>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <xQueueGenericSend+0xa2>
 800bd66:	2301      	movs	r3, #1
 800bd68:	e000      	b.n	800bd6c <xQueueGenericSend+0xa4>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10a      	bne.n	800bd86 <xQueueGenericSend+0xbe>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	61fb      	str	r3, [r7, #28]
}
 800bd82:	bf00      	nop
 800bd84:	e7fe      	b.n	800bd84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd86:	f002 f805 	bl	800dd94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d302      	bcc.n	800bd9c <xQueueGenericSend+0xd4>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d129      	bne.n	800bdf0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	68b9      	ldr	r1, [r7, #8]
 800bda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda2:	f000 fa0b 	bl	800c1bc <prvCopyDataToQueue>
 800bda6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d010      	beq.n	800bdd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	3324      	adds	r3, #36	; 0x24
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f001 f8d5 	bl	800cf64 <xTaskRemoveFromEventList>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d013      	beq.n	800bde8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bdc0:	4b3f      	ldr	r3, [pc, #252]	; (800bec0 <xQueueGenericSend+0x1f8>)
 800bdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	e00a      	b.n	800bde8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d007      	beq.n	800bde8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bdd8:	4b39      	ldr	r3, [pc, #228]	; (800bec0 <xQueueGenericSend+0x1f8>)
 800bdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bde8:	f002 f804 	bl	800ddf4 <vPortExitCritical>
				return pdPASS;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e063      	b.n	800beb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d103      	bne.n	800bdfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdf6:	f001 fffd 	bl	800ddf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e05c      	b.n	800beb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be00:	2b00      	cmp	r3, #0
 800be02:	d106      	bne.n	800be12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be04:	f107 0314 	add.w	r3, r7, #20
 800be08:	4618      	mov	r0, r3
 800be0a:	f001 f90f 	bl	800d02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be0e:	2301      	movs	r3, #1
 800be10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be12:	f001 ffef 	bl	800ddf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be16:	f000 fe81 	bl	800cb1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be1a:	f001 ffbb 	bl	800dd94 <vPortEnterCritical>
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be24:	b25b      	sxtb	r3, r3
 800be26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2a:	d103      	bne.n	800be34 <xQueueGenericSend+0x16c>
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be3a:	b25b      	sxtb	r3, r3
 800be3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be40:	d103      	bne.n	800be4a <xQueueGenericSend+0x182>
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be4a:	f001 ffd3 	bl	800ddf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be4e:	1d3a      	adds	r2, r7, #4
 800be50:	f107 0314 	add.w	r3, r7, #20
 800be54:	4611      	mov	r1, r2
 800be56:	4618      	mov	r0, r3
 800be58:	f001 f8fe 	bl	800d058 <xTaskCheckForTimeOut>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d124      	bne.n	800beac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be64:	f000 faa2 	bl	800c3ac <prvIsQueueFull>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d018      	beq.n	800bea0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	3310      	adds	r3, #16
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f001 f824 	bl	800cec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be7e:	f000 fa2d 	bl	800c2dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be82:	f000 fe59 	bl	800cb38 <xTaskResumeAll>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f47f af7c 	bne.w	800bd86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be8e:	4b0c      	ldr	r3, [pc, #48]	; (800bec0 <xQueueGenericSend+0x1f8>)
 800be90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	e772      	b.n	800bd86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bea2:	f000 fa1b 	bl	800c2dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bea6:	f000 fe47 	bl	800cb38 <xTaskResumeAll>
 800beaa:	e76c      	b.n	800bd86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800beac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beae:	f000 fa15 	bl	800c2dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beb2:	f000 fe41 	bl	800cb38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800beb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3738      	adds	r7, #56	; 0x38
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b090      	sub	sp, #64	; 0x40
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d103      	bne.n	800bf00 <xQueueGenericSendFromISR+0x3c>
 800bef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <xQueueGenericSendFromISR+0x40>
 800bf00:	2301      	movs	r3, #1
 800bf02:	e000      	b.n	800bf06 <xQueueGenericSendFromISR+0x42>
 800bf04:	2300      	movs	r3, #0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10a      	bne.n	800bf20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d103      	bne.n	800bf2e <xQueueGenericSendFromISR+0x6a>
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d101      	bne.n	800bf32 <xQueueGenericSendFromISR+0x6e>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e000      	b.n	800bf34 <xQueueGenericSendFromISR+0x70>
 800bf32:	2300      	movs	r3, #0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10a      	bne.n	800bf4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	623b      	str	r3, [r7, #32]
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf4e:	f002 f803 	bl	800df58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf52:	f3ef 8211 	mrs	r2, BASEPRI
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	61fa      	str	r2, [r7, #28]
 800bf68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d302      	bcc.n	800bf80 <xQueueGenericSendFromISR+0xbc>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d12f      	bne.n	800bfe0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	68b9      	ldr	r1, [r7, #8]
 800bf94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf96:	f000 f911 	bl	800c1bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa2:	d112      	bne.n	800bfca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d016      	beq.n	800bfda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	3324      	adds	r3, #36	; 0x24
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 ffd7 	bl	800cf64 <xTaskRemoveFromEventList>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00e      	beq.n	800bfda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	e007      	b.n	800bfda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfce:	3301      	adds	r3, #1
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	b25a      	sxtb	r2, r3
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bfde:	e001      	b.n	800bfe4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bfee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3740      	adds	r7, #64	; 0x40
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
	...

0800bffc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08c      	sub	sp, #48	; 0x30
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c008:	2300      	movs	r3, #0
 800c00a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	2b00      	cmp	r3, #0
 800c014:	d10a      	bne.n	800c02c <xQueueReceive+0x30>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	623b      	str	r3, [r7, #32]
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <xQueueReceive+0x3e>
 800c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <xQueueReceive+0x42>
 800c03a:	2301      	movs	r3, #1
 800c03c:	e000      	b.n	800c040 <xQueueReceive+0x44>
 800c03e:	2300      	movs	r3, #0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10a      	bne.n	800c05a <xQueueReceive+0x5e>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	61fb      	str	r3, [r7, #28]
}
 800c056:	bf00      	nop
 800c058:	e7fe      	b.n	800c058 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c05a:	f001 f941 	bl	800d2e0 <xTaskGetSchedulerState>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <xQueueReceive+0x6e>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <xQueueReceive+0x72>
 800c06a:	2301      	movs	r3, #1
 800c06c:	e000      	b.n	800c070 <xQueueReceive+0x74>
 800c06e:	2300      	movs	r3, #0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <xQueueReceive+0x8e>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	61bb      	str	r3, [r7, #24]
}
 800c086:	bf00      	nop
 800c088:	e7fe      	b.n	800c088 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c08a:	f001 fe83 	bl	800dd94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c092:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	d01f      	beq.n	800c0da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c09a:	68b9      	ldr	r1, [r7, #8]
 800c09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c09e:	f000 f8f7 	bl	800c290 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	1e5a      	subs	r2, r3, #1
 800c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00f      	beq.n	800c0d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	3310      	adds	r3, #16
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 ff54 	bl	800cf64 <xTaskRemoveFromEventList>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d007      	beq.n	800c0d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0c2:	4b3d      	ldr	r3, [pc, #244]	; (800c1b8 <xQueueReceive+0x1bc>)
 800c0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c0d2:	f001 fe8f 	bl	800ddf4 <vPortExitCritical>
				return pdPASS;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e069      	b.n	800c1ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d103      	bne.n	800c0e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0e0:	f001 fe88 	bl	800ddf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	e062      	b.n	800c1ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d106      	bne.n	800c0fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0ee:	f107 0310 	add.w	r3, r7, #16
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 ff9a 	bl	800d02c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0fc:	f001 fe7a 	bl	800ddf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c100:	f000 fd0c 	bl	800cb1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c104:	f001 fe46 	bl	800dd94 <vPortEnterCritical>
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c10e:	b25b      	sxtb	r3, r3
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d103      	bne.n	800c11e <xQueueReceive+0x122>
 800c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c124:	b25b      	sxtb	r3, r3
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12a:	d103      	bne.n	800c134 <xQueueReceive+0x138>
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c134:	f001 fe5e 	bl	800ddf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c138:	1d3a      	adds	r2, r7, #4
 800c13a:	f107 0310 	add.w	r3, r7, #16
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f000 ff89 	bl	800d058 <xTaskCheckForTimeOut>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d123      	bne.n	800c194 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c14e:	f000 f917 	bl	800c380 <prvIsQueueEmpty>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d017      	beq.n	800c188 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15a:	3324      	adds	r3, #36	; 0x24
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	4611      	mov	r1, r2
 800c160:	4618      	mov	r0, r3
 800c162:	f000 feaf 	bl	800cec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c168:	f000 f8b8 	bl	800c2dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c16c:	f000 fce4 	bl	800cb38 <xTaskResumeAll>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d189      	bne.n	800c08a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c176:	4b10      	ldr	r3, [pc, #64]	; (800c1b8 <xQueueReceive+0x1bc>)
 800c178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	e780      	b.n	800c08a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c18a:	f000 f8a7 	bl	800c2dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c18e:	f000 fcd3 	bl	800cb38 <xTaskResumeAll>
 800c192:	e77a      	b.n	800c08a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c196:	f000 f8a1 	bl	800c2dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c19a:	f000 fccd 	bl	800cb38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a0:	f000 f8ee 	bl	800c380 <prvIsQueueEmpty>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f43f af6f 	beq.w	800c08a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3730      	adds	r7, #48	; 0x30
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10d      	bne.n	800c1f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d14d      	bne.n	800c27e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f001 f898 	bl	800d31c <xTaskPriorityDisinherit>
 800c1ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	609a      	str	r2, [r3, #8]
 800c1f4:	e043      	b.n	800c27e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d119      	bne.n	800c230 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6858      	ldr	r0, [r3, #4]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c204:	461a      	mov	r2, r3
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	f002 fdf4 	bl	800edf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c214:	441a      	add	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	429a      	cmp	r2, r3
 800c224:	d32b      	bcc.n	800c27e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	605a      	str	r2, [r3, #4]
 800c22e:	e026      	b.n	800c27e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	68d8      	ldr	r0, [r3, #12]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c238:	461a      	mov	r2, r3
 800c23a:	68b9      	ldr	r1, [r7, #8]
 800c23c:	f002 fdda 	bl	800edf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68da      	ldr	r2, [r3, #12]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c248:	425b      	negs	r3, r3
 800c24a:	441a      	add	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d207      	bcs.n	800c26c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	689a      	ldr	r2, [r3, #8]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c264:	425b      	negs	r3, r3
 800c266:	441a      	add	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d105      	bne.n	800c27e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	3b01      	subs	r3, #1
 800c27c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c286:	697b      	ldr	r3, [r7, #20]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d018      	beq.n	800c2d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2aa:	441a      	add	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68da      	ldr	r2, [r3, #12]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d303      	bcc.n	800c2c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	68d9      	ldr	r1, [r3, #12]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	6838      	ldr	r0, [r7, #0]
 800c2d0:	f002 fd90 	bl	800edf4 <memcpy>
	}
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2e4:	f001 fd56 	bl	800dd94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2f0:	e011      	b.n	800c316 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d012      	beq.n	800c320 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	3324      	adds	r3, #36	; 0x24
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fe30 	bl	800cf64 <xTaskRemoveFromEventList>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c30a:	f000 ff07 	bl	800d11c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	3b01      	subs	r3, #1
 800c312:	b2db      	uxtb	r3, r3
 800c314:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	dce9      	bgt.n	800c2f2 <prvUnlockQueue+0x16>
 800c31e:	e000      	b.n	800c322 <prvUnlockQueue+0x46>
					break;
 800c320:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	22ff      	movs	r2, #255	; 0xff
 800c326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c32a:	f001 fd63 	bl	800ddf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c32e:	f001 fd31 	bl	800dd94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c338:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c33a:	e011      	b.n	800c360 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d012      	beq.n	800c36a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	3310      	adds	r3, #16
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 fe0b 	bl	800cf64 <xTaskRemoveFromEventList>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c354:	f000 fee2 	bl	800d11c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c364:	2b00      	cmp	r3, #0
 800c366:	dce9      	bgt.n	800c33c <prvUnlockQueue+0x60>
 800c368:	e000      	b.n	800c36c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c36a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	22ff      	movs	r2, #255	; 0xff
 800c370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c374:	f001 fd3e 	bl	800ddf4 <vPortExitCritical>
}
 800c378:	bf00      	nop
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c388:	f001 fd04 	bl	800dd94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c394:	2301      	movs	r3, #1
 800c396:	60fb      	str	r3, [r7, #12]
 800c398:	e001      	b.n	800c39e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c39e:	f001 fd29 	bl	800ddf4 <vPortExitCritical>

	return xReturn;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3b4:	f001 fcee 	bl	800dd94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d102      	bne.n	800c3ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	60fb      	str	r3, [r7, #12]
 800c3c8:	e001      	b.n	800c3ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ce:	f001 fd11 	bl	800ddf4 <vPortExitCritical>

	return xReturn;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e014      	b.n	800c416 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3ec:	4a0f      	ldr	r2, [pc, #60]	; (800c42c <vQueueAddToRegistry+0x50>)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10b      	bne.n	800c410 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3f8:	490c      	ldr	r1, [pc, #48]	; (800c42c <vQueueAddToRegistry+0x50>)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c402:	4a0a      	ldr	r2, [pc, #40]	; (800c42c <vQueueAddToRegistry+0x50>)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	4413      	add	r3, r2
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c40e:	e006      	b.n	800c41e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3301      	adds	r3, #1
 800c414:	60fb      	str	r3, [r7, #12]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2b07      	cmp	r3, #7
 800c41a:	d9e7      	bls.n	800c3ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c41c:	bf00      	nop
 800c41e:	bf00      	nop
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20001578 	.word	0x20001578

0800c430 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c440:	f001 fca8 	bl	800dd94 <vPortEnterCritical>
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c44a:	b25b      	sxtb	r3, r3
 800c44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c450:	d103      	bne.n	800c45a <vQueueWaitForMessageRestricted+0x2a>
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c460:	b25b      	sxtb	r3, r3
 800c462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c466:	d103      	bne.n	800c470 <vQueueWaitForMessageRestricted+0x40>
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c470:	f001 fcc0 	bl	800ddf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d106      	bne.n	800c48a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	3324      	adds	r3, #36	; 0x24
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fd41 	bl	800cf0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c48a:	6978      	ldr	r0, [r7, #20]
 800c48c:	f7ff ff26 	bl	800c2dc <prvUnlockQueue>
	}
 800c490:	bf00      	nop
 800c492:	3718      	adds	r7, #24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08e      	sub	sp, #56	; 0x38
 800c49c:	af04      	add	r7, sp, #16
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
 800c4a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10a      	bne.n	800c4c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	623b      	str	r3, [r7, #32]
}
 800c4be:	bf00      	nop
 800c4c0:	e7fe      	b.n	800c4c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10a      	bne.n	800c4de <xTaskCreateStatic+0x46>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	61fb      	str	r3, [r7, #28]
}
 800c4da:	bf00      	nop
 800c4dc:	e7fe      	b.n	800c4dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4de:	236c      	movs	r3, #108	; 0x6c
 800c4e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	2b6c      	cmp	r3, #108	; 0x6c
 800c4e6:	d00a      	beq.n	800c4fe <xTaskCreateStatic+0x66>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	61bb      	str	r3, [r7, #24]
}
 800c4fa:	bf00      	nop
 800c4fc:	e7fe      	b.n	800c4fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	2b00      	cmp	r3, #0
 800c504:	d01e      	beq.n	800c544 <xTaskCreateStatic+0xac>
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d01b      	beq.n	800c544 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c514:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	2202      	movs	r2, #2
 800c51a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c51e:	2300      	movs	r3, #0
 800c520:	9303      	str	r3, [sp, #12]
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	9302      	str	r3, [sp, #8]
 800c526:	f107 0314 	add.w	r3, r7, #20
 800c52a:	9301      	str	r3, [sp, #4]
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	68b9      	ldr	r1, [r7, #8]
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 f850 	bl	800c5dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c53c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c53e:	f000 f8dd 	bl	800c6fc <prvAddNewTaskToReadyList>
 800c542:	e001      	b.n	800c548 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c544:	2300      	movs	r3, #0
 800c546:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c548:	697b      	ldr	r3, [r7, #20]
	}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3728      	adds	r7, #40	; 0x28
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c552:	b580      	push	{r7, lr}
 800c554:	b08c      	sub	sp, #48	; 0x30
 800c556:	af04      	add	r7, sp, #16
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	603b      	str	r3, [r7, #0]
 800c55e:	4613      	mov	r3, r2
 800c560:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c562:	88fb      	ldrh	r3, [r7, #6]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4618      	mov	r0, r3
 800c568:	f001 fd36 	bl	800dfd8 <pvPortMalloc>
 800c56c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00e      	beq.n	800c592 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c574:	206c      	movs	r0, #108	; 0x6c
 800c576:	f001 fd2f 	bl	800dfd8 <pvPortMalloc>
 800c57a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	631a      	str	r2, [r3, #48]	; 0x30
 800c588:	e005      	b.n	800c596 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c58a:	6978      	ldr	r0, [r7, #20]
 800c58c:	f001 fdf0 	bl	800e170 <vPortFree>
 800c590:	e001      	b.n	800c596 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d017      	beq.n	800c5cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5a4:	88fa      	ldrh	r2, [r7, #6]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9303      	str	r3, [sp, #12]
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	9302      	str	r3, [sp, #8]
 800c5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68b9      	ldr	r1, [r7, #8]
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f000 f80e 	bl	800c5dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5c0:	69f8      	ldr	r0, [r7, #28]
 800c5c2:	f000 f89b 	bl	800c6fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	61bb      	str	r3, [r7, #24]
 800c5ca:	e002      	b.n	800c5d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5d2:	69bb      	ldr	r3, [r7, #24]
	}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3720      	adds	r7, #32
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	21a5      	movs	r1, #165	; 0xa5
 800c5f6:	f002 fc0b 	bl	800ee10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c604:	3b01      	subs	r3, #1
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	f023 0307 	bic.w	r3, r3, #7
 800c612:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	617b      	str	r3, [r7, #20]
}
 800c630:	bf00      	nop
 800c632:	e7fe      	b.n	800c632 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d01f      	beq.n	800c67a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c63a:	2300      	movs	r3, #0
 800c63c:	61fb      	str	r3, [r7, #28]
 800c63e:	e012      	b.n	800c666 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c640:	68ba      	ldr	r2, [r7, #8]
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	4413      	add	r3, r2
 800c646:	7819      	ldrb	r1, [r3, #0]
 800c648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	4413      	add	r3, r2
 800c64e:	3334      	adds	r3, #52	; 0x34
 800c650:	460a      	mov	r2, r1
 800c652:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	4413      	add	r3, r2
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d006      	beq.n	800c66e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	3301      	adds	r3, #1
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	2b1d      	cmp	r3, #29
 800c66a:	d9e9      	bls.n	800c640 <prvInitialiseNewTask+0x64>
 800c66c:	e000      	b.n	800c670 <prvInitialiseNewTask+0x94>
			{
				break;
 800c66e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	2200      	movs	r2, #0
 800c674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c678:	e003      	b.n	800c682 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	2200      	movs	r2, #0
 800c67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c684:	2b37      	cmp	r3, #55	; 0x37
 800c686:	d901      	bls.n	800c68c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c688:	2337      	movs	r3, #55	; 0x37
 800c68a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c690:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c696:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	2200      	movs	r2, #0
 800c69c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff f93e 	bl	800b924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	3318      	adds	r3, #24
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff f939 	bl	800b924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	68f9      	ldr	r1, [r7, #12]
 800c6da:	69b8      	ldr	r0, [r7, #24]
 800c6dc:	f001 fa2e 	bl	800db3c <pxPortInitialiseStack>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6f2:	bf00      	nop
 800c6f4:	3720      	adds	r7, #32
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c704:	f001 fb46 	bl	800dd94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c708:	4b2d      	ldr	r3, [pc, #180]	; (800c7c0 <prvAddNewTaskToReadyList+0xc4>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3301      	adds	r3, #1
 800c70e:	4a2c      	ldr	r2, [pc, #176]	; (800c7c0 <prvAddNewTaskToReadyList+0xc4>)
 800c710:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c712:	4b2c      	ldr	r3, [pc, #176]	; (800c7c4 <prvAddNewTaskToReadyList+0xc8>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d109      	bne.n	800c72e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c71a:	4a2a      	ldr	r2, [pc, #168]	; (800c7c4 <prvAddNewTaskToReadyList+0xc8>)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c720:	4b27      	ldr	r3, [pc, #156]	; (800c7c0 <prvAddNewTaskToReadyList+0xc4>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d110      	bne.n	800c74a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c728:	f000 fd1c 	bl	800d164 <prvInitialiseTaskLists>
 800c72c:	e00d      	b.n	800c74a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c72e:	4b26      	ldr	r3, [pc, #152]	; (800c7c8 <prvAddNewTaskToReadyList+0xcc>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d109      	bne.n	800c74a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c736:	4b23      	ldr	r3, [pc, #140]	; (800c7c4 <prvAddNewTaskToReadyList+0xc8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	429a      	cmp	r2, r3
 800c742:	d802      	bhi.n	800c74a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c744:	4a1f      	ldr	r2, [pc, #124]	; (800c7c4 <prvAddNewTaskToReadyList+0xc8>)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c74a:	4b20      	ldr	r3, [pc, #128]	; (800c7cc <prvAddNewTaskToReadyList+0xd0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3301      	adds	r3, #1
 800c750:	4a1e      	ldr	r2, [pc, #120]	; (800c7cc <prvAddNewTaskToReadyList+0xd0>)
 800c752:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c754:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <prvAddNewTaskToReadyList+0xd0>)
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c760:	4b1b      	ldr	r3, [pc, #108]	; (800c7d0 <prvAddNewTaskToReadyList+0xd4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d903      	bls.n	800c770 <prvAddNewTaskToReadyList+0x74>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	4a18      	ldr	r2, [pc, #96]	; (800c7d0 <prvAddNewTaskToReadyList+0xd4>)
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4a15      	ldr	r2, [pc, #84]	; (800c7d4 <prvAddNewTaskToReadyList+0xd8>)
 800c77e:	441a      	add	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3304      	adds	r3, #4
 800c784:	4619      	mov	r1, r3
 800c786:	4610      	mov	r0, r2
 800c788:	f7ff f8d9 	bl	800b93e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c78c:	f001 fb32 	bl	800ddf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c790:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <prvAddNewTaskToReadyList+0xcc>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00e      	beq.n	800c7b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <prvAddNewTaskToReadyList+0xc8>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d207      	bcs.n	800c7b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7a6:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <prvAddNewTaskToReadyList+0xdc>)
 800c7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7b6:	bf00      	nop
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20001a8c 	.word	0x20001a8c
 800c7c4:	200015b8 	.word	0x200015b8
 800c7c8:	20001a98 	.word	0x20001a98
 800c7cc:	20001aa8 	.word	0x20001aa8
 800c7d0:	20001a94 	.word	0x20001a94
 800c7d4:	200015bc 	.word	0x200015bc
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d017      	beq.n	800c81e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7ee:	4b13      	ldr	r3, [pc, #76]	; (800c83c <vTaskDelay+0x60>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <vTaskDelay+0x30>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60bb      	str	r3, [r7, #8]
}
 800c808:	bf00      	nop
 800c80a:	e7fe      	b.n	800c80a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c80c:	f000 f986 	bl	800cb1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c810:	2100      	movs	r1, #0
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fdf0 	bl	800d3f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c818:	f000 f98e 	bl	800cb38 <xTaskResumeAll>
 800c81c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d107      	bne.n	800c834 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c824:	4b06      	ldr	r3, [pc, #24]	; (800c840 <vTaskDelay+0x64>)
 800c826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c834:	bf00      	nop
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	20001ab4 	.word	0x20001ab4
 800c840:	e000ed04 	.word	0xe000ed04

0800c844 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c84c:	f001 faa2 	bl	800dd94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <vTaskSuspend+0x18>
 800c856:	4b30      	ldr	r3, [pc, #192]	; (800c918 <vTaskSuspend+0xd4>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	e000      	b.n	800c85e <vTaskSuspend+0x1a>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3304      	adds	r3, #4
 800c864:	4618      	mov	r0, r3
 800c866:	f7ff f8c7 	bl	800b9f8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d004      	beq.n	800c87c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3318      	adds	r3, #24
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff f8be 	bl	800b9f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3304      	adds	r3, #4
 800c880:	4619      	mov	r1, r3
 800c882:	4826      	ldr	r0, [pc, #152]	; (800c91c <vTaskSuspend+0xd8>)
 800c884:	f7ff f85b 	bl	800b93e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	2b01      	cmp	r3, #1
 800c892:	d103      	bne.n	800c89c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c89c:	f001 faaa 	bl	800ddf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c8a0:	4b1f      	ldr	r3, [pc, #124]	; (800c920 <vTaskSuspend+0xdc>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d005      	beq.n	800c8b4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c8a8:	f001 fa74 	bl	800dd94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c8ac:	f000 fcf8 	bl	800d2a0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c8b0:	f001 faa0 	bl	800ddf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c8b4:	4b18      	ldr	r3, [pc, #96]	; (800c918 <vTaskSuspend+0xd4>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d127      	bne.n	800c90e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c8be:	4b18      	ldr	r3, [pc, #96]	; (800c920 <vTaskSuspend+0xdc>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d017      	beq.n	800c8f6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c8c6:	4b17      	ldr	r3, [pc, #92]	; (800c924 <vTaskSuspend+0xe0>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00a      	beq.n	800c8e4 <vTaskSuspend+0xa0>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	60bb      	str	r3, [r7, #8]
}
 800c8e0:	bf00      	nop
 800c8e2:	e7fe      	b.n	800c8e2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c8e4:	4b10      	ldr	r3, [pc, #64]	; (800c928 <vTaskSuspend+0xe4>)
 800c8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8f4:	e00b      	b.n	800c90e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c8f6:	4b09      	ldr	r3, [pc, #36]	; (800c91c <vTaskSuspend+0xd8>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <vTaskSuspend+0xe8>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d103      	bne.n	800c90a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c902:	4b05      	ldr	r3, [pc, #20]	; (800c918 <vTaskSuspend+0xd4>)
 800c904:	2200      	movs	r2, #0
 800c906:	601a      	str	r2, [r3, #0]
	}
 800c908:	e001      	b.n	800c90e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c90a:	f000 fa7d 	bl	800ce08 <vTaskSwitchContext>
	}
 800c90e:	bf00      	nop
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	200015b8 	.word	0x200015b8
 800c91c:	20001a78 	.word	0x20001a78
 800c920:	20001a98 	.word	0x20001a98
 800c924:	20001ab4 	.word	0x20001ab4
 800c928:	e000ed04 	.word	0xe000ed04
 800c92c:	20001a8c 	.word	0x20001a8c

0800c930 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c930:	b480      	push	{r7}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c938:	2300      	movs	r3, #0
 800c93a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10a      	bne.n	800c95c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60fb      	str	r3, [r7, #12]
}
 800c958:	bf00      	nop
 800c95a:	e7fe      	b.n	800c95a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	695b      	ldr	r3, [r3, #20]
 800c960:	4a0a      	ldr	r2, [pc, #40]	; (800c98c <prvTaskIsTaskSuspended+0x5c>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d10a      	bne.n	800c97c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96a:	4a09      	ldr	r2, [pc, #36]	; (800c990 <prvTaskIsTaskSuspended+0x60>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d005      	beq.n	800c97c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c978:	2301      	movs	r3, #1
 800c97a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c97c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c97e:	4618      	mov	r0, r3
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	20001a78 	.word	0x20001a78
 800c990:	20001a4c 	.word	0x20001a4c

0800c994 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10a      	bne.n	800c9bc <vTaskResume+0x28>
	__asm volatile
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	60bb      	str	r3, [r7, #8]
}
 800c9b8:	bf00      	nop
 800c9ba:	e7fe      	b.n	800c9ba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c9bc:	4b20      	ldr	r3, [pc, #128]	; (800ca40 <vTaskResume+0xac>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d038      	beq.n	800ca38 <vTaskResume+0xa4>
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d035      	beq.n	800ca38 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c9cc:	f001 f9e2 	bl	800dd94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f7ff ffad 	bl	800c930 <prvTaskIsTaskSuspended>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d02b      	beq.n	800ca34 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3304      	adds	r3, #4
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff f809 	bl	800b9f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ea:	4b16      	ldr	r3, [pc, #88]	; (800ca44 <vTaskResume+0xb0>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d903      	bls.n	800c9fa <vTaskResume+0x66>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f6:	4a13      	ldr	r2, [pc, #76]	; (800ca44 <vTaskResume+0xb0>)
 800c9f8:	6013      	str	r3, [r2, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fe:	4613      	mov	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4a10      	ldr	r2, [pc, #64]	; (800ca48 <vTaskResume+0xb4>)
 800ca08:	441a      	add	r2, r3
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	4619      	mov	r1, r3
 800ca10:	4610      	mov	r0, r2
 800ca12:	f7fe ff94 	bl	800b93e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca1a:	4b09      	ldr	r3, [pc, #36]	; (800ca40 <vTaskResume+0xac>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d307      	bcc.n	800ca34 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ca24:	4b09      	ldr	r3, [pc, #36]	; (800ca4c <vTaskResume+0xb8>)
 800ca26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ca34:	f001 f9de 	bl	800ddf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca38:	bf00      	nop
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	200015b8 	.word	0x200015b8
 800ca44:	20001a94 	.word	0x20001a94
 800ca48:	200015bc 	.word	0x200015bc
 800ca4c:	e000ed04 	.word	0xe000ed04

0800ca50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca56:	2300      	movs	r3, #0
 800ca58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca5e:	463a      	mov	r2, r7
 800ca60:	1d39      	adds	r1, r7, #4
 800ca62:	f107 0308 	add.w	r3, r7, #8
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fe ff08 	bl	800b87c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	9202      	str	r2, [sp, #8]
 800ca74:	9301      	str	r3, [sp, #4]
 800ca76:	2300      	movs	r3, #0
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	460a      	mov	r2, r1
 800ca7e:	4921      	ldr	r1, [pc, #132]	; (800cb04 <vTaskStartScheduler+0xb4>)
 800ca80:	4821      	ldr	r0, [pc, #132]	; (800cb08 <vTaskStartScheduler+0xb8>)
 800ca82:	f7ff fd09 	bl	800c498 <xTaskCreateStatic>
 800ca86:	4603      	mov	r3, r0
 800ca88:	4a20      	ldr	r2, [pc, #128]	; (800cb0c <vTaskStartScheduler+0xbc>)
 800ca8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca8c:	4b1f      	ldr	r3, [pc, #124]	; (800cb0c <vTaskStartScheduler+0xbc>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca94:	2301      	movs	r3, #1
 800ca96:	617b      	str	r3, [r7, #20]
 800ca98:	e001      	b.n	800ca9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d102      	bne.n	800caaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800caa4:	f000 fcfc 	bl	800d4a0 <xTimerCreateTimerTask>
 800caa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d116      	bne.n	800cade <vTaskStartScheduler+0x8e>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	613b      	str	r3, [r7, #16]
}
 800cac2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cac4:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <vTaskStartScheduler+0xc0>)
 800cac6:	f04f 32ff 	mov.w	r2, #4294967295
 800caca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cacc:	4b11      	ldr	r3, [pc, #68]	; (800cb14 <vTaskStartScheduler+0xc4>)
 800cace:	2201      	movs	r2, #1
 800cad0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cad2:	4b11      	ldr	r3, [pc, #68]	; (800cb18 <vTaskStartScheduler+0xc8>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cad8:	f001 f8ba 	bl	800dc50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cadc:	e00e      	b.n	800cafc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae4:	d10a      	bne.n	800cafc <vTaskStartScheduler+0xac>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	60fb      	str	r3, [r7, #12]
}
 800caf8:	bf00      	nop
 800cafa:	e7fe      	b.n	800cafa <vTaskStartScheduler+0xaa>
}
 800cafc:	bf00      	nop
 800cafe:	3718      	adds	r7, #24
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	0800f920 	.word	0x0800f920
 800cb08:	0800d135 	.word	0x0800d135
 800cb0c:	20001ab0 	.word	0x20001ab0
 800cb10:	20001aac 	.word	0x20001aac
 800cb14:	20001a98 	.word	0x20001a98
 800cb18:	20001a90 	.word	0x20001a90

0800cb1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cb20:	4b04      	ldr	r3, [pc, #16]	; (800cb34 <vTaskSuspendAll+0x18>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	3301      	adds	r3, #1
 800cb26:	4a03      	ldr	r2, [pc, #12]	; (800cb34 <vTaskSuspendAll+0x18>)
 800cb28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cb2a:	bf00      	nop
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	20001ab4 	.word	0x20001ab4

0800cb38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb46:	4b42      	ldr	r3, [pc, #264]	; (800cc50 <xTaskResumeAll+0x118>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10a      	bne.n	800cb64 <xTaskResumeAll+0x2c>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	603b      	str	r3, [r7, #0]
}
 800cb60:	bf00      	nop
 800cb62:	e7fe      	b.n	800cb62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb64:	f001 f916 	bl	800dd94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb68:	4b39      	ldr	r3, [pc, #228]	; (800cc50 <xTaskResumeAll+0x118>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	4a38      	ldr	r2, [pc, #224]	; (800cc50 <xTaskResumeAll+0x118>)
 800cb70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb72:	4b37      	ldr	r3, [pc, #220]	; (800cc50 <xTaskResumeAll+0x118>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d162      	bne.n	800cc40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb7a:	4b36      	ldr	r3, [pc, #216]	; (800cc54 <xTaskResumeAll+0x11c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d05e      	beq.n	800cc40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb82:	e02f      	b.n	800cbe4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb84:	4b34      	ldr	r3, [pc, #208]	; (800cc58 <xTaskResumeAll+0x120>)
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3318      	adds	r3, #24
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe ff31 	bl	800b9f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe ff2c 	bl	800b9f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba4:	4b2d      	ldr	r3, [pc, #180]	; (800cc5c <xTaskResumeAll+0x124>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d903      	bls.n	800cbb4 <xTaskResumeAll+0x7c>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb0:	4a2a      	ldr	r2, [pc, #168]	; (800cc5c <xTaskResumeAll+0x124>)
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4a27      	ldr	r2, [pc, #156]	; (800cc60 <xTaskResumeAll+0x128>)
 800cbc2:	441a      	add	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4619      	mov	r1, r3
 800cbca:	4610      	mov	r0, r2
 800cbcc:	f7fe feb7 	bl	800b93e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd4:	4b23      	ldr	r3, [pc, #140]	; (800cc64 <xTaskResumeAll+0x12c>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d302      	bcc.n	800cbe4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cbde:	4b22      	ldr	r3, [pc, #136]	; (800cc68 <xTaskResumeAll+0x130>)
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbe4:	4b1c      	ldr	r3, [pc, #112]	; (800cc58 <xTaskResumeAll+0x120>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1cb      	bne.n	800cb84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbf2:	f000 fb55 	bl	800d2a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cbf6:	4b1d      	ldr	r3, [pc, #116]	; (800cc6c <xTaskResumeAll+0x134>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d010      	beq.n	800cc24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc02:	f000 f847 	bl	800cc94 <xTaskIncrementTick>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cc0c:	4b16      	ldr	r3, [pc, #88]	; (800cc68 <xTaskResumeAll+0x130>)
 800cc0e:	2201      	movs	r2, #1
 800cc10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1f1      	bne.n	800cc02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cc1e:	4b13      	ldr	r3, [pc, #76]	; (800cc6c <xTaskResumeAll+0x134>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc24:	4b10      	ldr	r3, [pc, #64]	; (800cc68 <xTaskResumeAll+0x130>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d009      	beq.n	800cc40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc30:	4b0f      	ldr	r3, [pc, #60]	; (800cc70 <xTaskResumeAll+0x138>)
 800cc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc40:	f001 f8d8 	bl	800ddf4 <vPortExitCritical>

	return xAlreadyYielded;
 800cc44:	68bb      	ldr	r3, [r7, #8]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20001ab4 	.word	0x20001ab4
 800cc54:	20001a8c 	.word	0x20001a8c
 800cc58:	20001a4c 	.word	0x20001a4c
 800cc5c:	20001a94 	.word	0x20001a94
 800cc60:	200015bc 	.word	0x200015bc
 800cc64:	200015b8 	.word	0x200015b8
 800cc68:	20001aa0 	.word	0x20001aa0
 800cc6c:	20001a9c 	.word	0x20001a9c
 800cc70:	e000ed04 	.word	0xe000ed04

0800cc74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <xTaskGetTickCount+0x1c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc80:	687b      	ldr	r3, [r7, #4]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20001a90 	.word	0x20001a90

0800cc94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc9e:	4b4f      	ldr	r3, [pc, #316]	; (800cddc <xTaskIncrementTick+0x148>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f040 808f 	bne.w	800cdc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cca8:	4b4d      	ldr	r3, [pc, #308]	; (800cde0 <xTaskIncrementTick+0x14c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3301      	adds	r3, #1
 800ccae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccb0:	4a4b      	ldr	r2, [pc, #300]	; (800cde0 <xTaskIncrementTick+0x14c>)
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d120      	bne.n	800ccfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ccbc:	4b49      	ldr	r3, [pc, #292]	; (800cde4 <xTaskIncrementTick+0x150>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00a      	beq.n	800ccdc <xTaskIncrementTick+0x48>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	603b      	str	r3, [r7, #0]
}
 800ccd8:	bf00      	nop
 800ccda:	e7fe      	b.n	800ccda <xTaskIncrementTick+0x46>
 800ccdc:	4b41      	ldr	r3, [pc, #260]	; (800cde4 <xTaskIncrementTick+0x150>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	4b41      	ldr	r3, [pc, #260]	; (800cde8 <xTaskIncrementTick+0x154>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a3f      	ldr	r2, [pc, #252]	; (800cde4 <xTaskIncrementTick+0x150>)
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	4a3f      	ldr	r2, [pc, #252]	; (800cde8 <xTaskIncrementTick+0x154>)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	4b3e      	ldr	r3, [pc, #248]	; (800cdec <xTaskIncrementTick+0x158>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	4a3d      	ldr	r2, [pc, #244]	; (800cdec <xTaskIncrementTick+0x158>)
 800ccf8:	6013      	str	r3, [r2, #0]
 800ccfa:	f000 fad1 	bl	800d2a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccfe:	4b3c      	ldr	r3, [pc, #240]	; (800cdf0 <xTaskIncrementTick+0x15c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	693a      	ldr	r2, [r7, #16]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d349      	bcc.n	800cd9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd08:	4b36      	ldr	r3, [pc, #216]	; (800cde4 <xTaskIncrementTick+0x150>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d104      	bne.n	800cd1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd12:	4b37      	ldr	r3, [pc, #220]	; (800cdf0 <xTaskIncrementTick+0x15c>)
 800cd14:	f04f 32ff 	mov.w	r2, #4294967295
 800cd18:	601a      	str	r2, [r3, #0]
					break;
 800cd1a:	e03f      	b.n	800cd9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1c:	4b31      	ldr	r3, [pc, #196]	; (800cde4 <xTaskIncrementTick+0x150>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d203      	bcs.n	800cd3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd34:	4a2e      	ldr	r2, [pc, #184]	; (800cdf0 <xTaskIncrementTick+0x15c>)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd3a:	e02f      	b.n	800cd9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	3304      	adds	r3, #4
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe fe59 	bl	800b9f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d004      	beq.n	800cd58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	3318      	adds	r3, #24
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fe50 	bl	800b9f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5c:	4b25      	ldr	r3, [pc, #148]	; (800cdf4 <xTaskIncrementTick+0x160>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d903      	bls.n	800cd6c <xTaskIncrementTick+0xd8>
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd68:	4a22      	ldr	r2, [pc, #136]	; (800cdf4 <xTaskIncrementTick+0x160>)
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd70:	4613      	mov	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4a1f      	ldr	r2, [pc, #124]	; (800cdf8 <xTaskIncrementTick+0x164>)
 800cd7a:	441a      	add	r2, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	3304      	adds	r3, #4
 800cd80:	4619      	mov	r1, r3
 800cd82:	4610      	mov	r0, r2
 800cd84:	f7fe fddb 	bl	800b93e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8c:	4b1b      	ldr	r3, [pc, #108]	; (800cdfc <xTaskIncrementTick+0x168>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d3b8      	bcc.n	800cd08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd96:	2301      	movs	r3, #1
 800cd98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd9a:	e7b5      	b.n	800cd08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd9c:	4b17      	ldr	r3, [pc, #92]	; (800cdfc <xTaskIncrementTick+0x168>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda2:	4915      	ldr	r1, [pc, #84]	; (800cdf8 <xTaskIncrementTick+0x164>)
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	440b      	add	r3, r1
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d901      	bls.n	800cdb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cdb8:	4b11      	ldr	r3, [pc, #68]	; (800ce00 <xTaskIncrementTick+0x16c>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d007      	beq.n	800cdd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	617b      	str	r3, [r7, #20]
 800cdc4:	e004      	b.n	800cdd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cdc6:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <xTaskIncrementTick+0x170>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	4a0d      	ldr	r2, [pc, #52]	; (800ce04 <xTaskIncrementTick+0x170>)
 800cdce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cdd0:	697b      	ldr	r3, [r7, #20]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	20001ab4 	.word	0x20001ab4
 800cde0:	20001a90 	.word	0x20001a90
 800cde4:	20001a44 	.word	0x20001a44
 800cde8:	20001a48 	.word	0x20001a48
 800cdec:	20001aa4 	.word	0x20001aa4
 800cdf0:	20001aac 	.word	0x20001aac
 800cdf4:	20001a94 	.word	0x20001a94
 800cdf8:	200015bc 	.word	0x200015bc
 800cdfc:	200015b8 	.word	0x200015b8
 800ce00:	20001aa0 	.word	0x20001aa0
 800ce04:	20001a9c 	.word	0x20001a9c

0800ce08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce0e:	4b28      	ldr	r3, [pc, #160]	; (800ceb0 <vTaskSwitchContext+0xa8>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d003      	beq.n	800ce1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce16:	4b27      	ldr	r3, [pc, #156]	; (800ceb4 <vTaskSwitchContext+0xac>)
 800ce18:	2201      	movs	r2, #1
 800ce1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce1c:	e041      	b.n	800cea2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ce1e:	4b25      	ldr	r3, [pc, #148]	; (800ceb4 <vTaskSwitchContext+0xac>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce24:	4b24      	ldr	r3, [pc, #144]	; (800ceb8 <vTaskSwitchContext+0xb0>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	e010      	b.n	800ce4e <vTaskSwitchContext+0x46>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10a      	bne.n	800ce48 <vTaskSwitchContext+0x40>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	607b      	str	r3, [r7, #4]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <vTaskSwitchContext+0x3e>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	60fb      	str	r3, [r7, #12]
 800ce4e:	491b      	ldr	r1, [pc, #108]	; (800cebc <vTaskSwitchContext+0xb4>)
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	4613      	mov	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4413      	add	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	440b      	add	r3, r1
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d0e4      	beq.n	800ce2c <vTaskSwitchContext+0x24>
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	4613      	mov	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4a13      	ldr	r2, [pc, #76]	; (800cebc <vTaskSwitchContext+0xb4>)
 800ce6e:	4413      	add	r3, r2
 800ce70:	60bb      	str	r3, [r7, #8]
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	605a      	str	r2, [r3, #4]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	3308      	adds	r3, #8
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d104      	bne.n	800ce92 <vTaskSwitchContext+0x8a>
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	605a      	str	r2, [r3, #4]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	4a09      	ldr	r2, [pc, #36]	; (800cec0 <vTaskSwitchContext+0xb8>)
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	4a06      	ldr	r2, [pc, #24]	; (800ceb8 <vTaskSwitchContext+0xb0>)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6013      	str	r3, [r2, #0]
}
 800cea2:	bf00      	nop
 800cea4:	3714      	adds	r7, #20
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20001ab4 	.word	0x20001ab4
 800ceb4:	20001aa0 	.word	0x20001aa0
 800ceb8:	20001a94 	.word	0x20001a94
 800cebc:	200015bc 	.word	0x200015bc
 800cec0:	200015b8 	.word	0x200015b8

0800cec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	60fb      	str	r3, [r7, #12]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ceea:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <vTaskPlaceOnEventList+0x44>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3318      	adds	r3, #24
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7fe fd47 	bl	800b986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cef8:	2101      	movs	r1, #1
 800cefa:	6838      	ldr	r0, [r7, #0]
 800cefc:	f000 fa7c 	bl	800d3f8 <prvAddCurrentTaskToDelayedList>
}
 800cf00:	bf00      	nop
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	200015b8 	.word	0x200015b8

0800cf0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10a      	bne.n	800cf34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	617b      	str	r3, [r7, #20]
}
 800cf30:	bf00      	nop
 800cf32:	e7fe      	b.n	800cf32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf34:	4b0a      	ldr	r3, [pc, #40]	; (800cf60 <vTaskPlaceOnEventListRestricted+0x54>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3318      	adds	r3, #24
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7fe fcfe 	bl	800b93e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cf48:	f04f 33ff 	mov.w	r3, #4294967295
 800cf4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	68b8      	ldr	r0, [r7, #8]
 800cf52:	f000 fa51 	bl	800d3f8 <prvAddCurrentTaskToDelayedList>
	}
 800cf56:	bf00      	nop
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	200015b8 	.word	0x200015b8

0800cf64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10a      	bne.n	800cf90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	60fb      	str	r3, [r7, #12]
}
 800cf8c:	bf00      	nop
 800cf8e:	e7fe      	b.n	800cf8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	3318      	adds	r3, #24
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fe fd2f 	bl	800b9f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf9a:	4b1e      	ldr	r3, [pc, #120]	; (800d014 <xTaskRemoveFromEventList+0xb0>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d11d      	bne.n	800cfde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fd26 	bl	800b9f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb0:	4b19      	ldr	r3, [pc, #100]	; (800d018 <xTaskRemoveFromEventList+0xb4>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d903      	bls.n	800cfc0 <xTaskRemoveFromEventList+0x5c>
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfbc:	4a16      	ldr	r2, [pc, #88]	; (800d018 <xTaskRemoveFromEventList+0xb4>)
 800cfbe:	6013      	str	r3, [r2, #0]
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4a13      	ldr	r2, [pc, #76]	; (800d01c <xTaskRemoveFromEventList+0xb8>)
 800cfce:	441a      	add	r2, r3
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	f7fe fcb1 	bl	800b93e <vListInsertEnd>
 800cfdc:	e005      	b.n	800cfea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	3318      	adds	r3, #24
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	480e      	ldr	r0, [pc, #56]	; (800d020 <xTaskRemoveFromEventList+0xbc>)
 800cfe6:	f7fe fcaa 	bl	800b93e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <xTaskRemoveFromEventList+0xc0>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d905      	bls.n	800d004 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cff8:	2301      	movs	r3, #1
 800cffa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cffc:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <xTaskRemoveFromEventList+0xc4>)
 800cffe:	2201      	movs	r2, #1
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	e001      	b.n	800d008 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d004:	2300      	movs	r3, #0
 800d006:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d008:	697b      	ldr	r3, [r7, #20]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20001ab4 	.word	0x20001ab4
 800d018:	20001a94 	.word	0x20001a94
 800d01c:	200015bc 	.word	0x200015bc
 800d020:	20001a4c 	.word	0x20001a4c
 800d024:	200015b8 	.word	0x200015b8
 800d028:	20001aa0 	.word	0x20001aa0

0800d02c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d034:	4b06      	ldr	r3, [pc, #24]	; (800d050 <vTaskInternalSetTimeOutState+0x24>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d03c:	4b05      	ldr	r3, [pc, #20]	; (800d054 <vTaskInternalSetTimeOutState+0x28>)
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	605a      	str	r2, [r3, #4]
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	20001aa4 	.word	0x20001aa4
 800d054:	20001a90 	.word	0x20001a90

0800d058 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	613b      	str	r3, [r7, #16]
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60fb      	str	r3, [r7, #12]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d09a:	f000 fe7b 	bl	800dd94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d09e:	4b1d      	ldr	r3, [pc, #116]	; (800d114 <xTaskCheckForTimeOut+0xbc>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	69ba      	ldr	r2, [r7, #24]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b6:	d102      	bne.n	800d0be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	61fb      	str	r3, [r7, #28]
 800d0bc:	e023      	b.n	800d106 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	4b15      	ldr	r3, [pc, #84]	; (800d118 <xTaskCheckForTimeOut+0xc0>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d007      	beq.n	800d0da <xTaskCheckForTimeOut+0x82>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	69ba      	ldr	r2, [r7, #24]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d302      	bcc.n	800d0da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	61fb      	str	r3, [r7, #28]
 800d0d8:	e015      	b.n	800d106 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d20b      	bcs.n	800d0fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	1ad2      	subs	r2, r2, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff ff9b 	bl	800d02c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	61fb      	str	r3, [r7, #28]
 800d0fa:	e004      	b.n	800d106 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2200      	movs	r2, #0
 800d100:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d102:	2301      	movs	r3, #1
 800d104:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d106:	f000 fe75 	bl	800ddf4 <vPortExitCritical>

	return xReturn;
 800d10a:	69fb      	ldr	r3, [r7, #28]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3720      	adds	r7, #32
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20001a90 	.word	0x20001a90
 800d118:	20001aa4 	.word	0x20001aa4

0800d11c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d120:	4b03      	ldr	r3, [pc, #12]	; (800d130 <vTaskMissedYield+0x14>)
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]
}
 800d126:	bf00      	nop
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	20001aa0 	.word	0x20001aa0

0800d134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d13c:	f000 f852 	bl	800d1e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d140:	4b06      	ldr	r3, [pc, #24]	; (800d15c <prvIdleTask+0x28>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d9f9      	bls.n	800d13c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d148:	4b05      	ldr	r3, [pc, #20]	; (800d160 <prvIdleTask+0x2c>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d158:	e7f0      	b.n	800d13c <prvIdleTask+0x8>
 800d15a:	bf00      	nop
 800d15c:	200015bc 	.word	0x200015bc
 800d160:	e000ed04 	.word	0xe000ed04

0800d164 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d16a:	2300      	movs	r3, #0
 800d16c:	607b      	str	r3, [r7, #4]
 800d16e:	e00c      	b.n	800d18a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	4613      	mov	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	4413      	add	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4a12      	ldr	r2, [pc, #72]	; (800d1c4 <prvInitialiseTaskLists+0x60>)
 800d17c:	4413      	add	r3, r2
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fe fbb0 	bl	800b8e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3301      	adds	r3, #1
 800d188:	607b      	str	r3, [r7, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b37      	cmp	r3, #55	; 0x37
 800d18e:	d9ef      	bls.n	800d170 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d190:	480d      	ldr	r0, [pc, #52]	; (800d1c8 <prvInitialiseTaskLists+0x64>)
 800d192:	f7fe fba7 	bl	800b8e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d196:	480d      	ldr	r0, [pc, #52]	; (800d1cc <prvInitialiseTaskLists+0x68>)
 800d198:	f7fe fba4 	bl	800b8e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d19c:	480c      	ldr	r0, [pc, #48]	; (800d1d0 <prvInitialiseTaskLists+0x6c>)
 800d19e:	f7fe fba1 	bl	800b8e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1a2:	480c      	ldr	r0, [pc, #48]	; (800d1d4 <prvInitialiseTaskLists+0x70>)
 800d1a4:	f7fe fb9e 	bl	800b8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1a8:	480b      	ldr	r0, [pc, #44]	; (800d1d8 <prvInitialiseTaskLists+0x74>)
 800d1aa:	f7fe fb9b 	bl	800b8e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <prvInitialiseTaskLists+0x78>)
 800d1b0:	4a05      	ldr	r2, [pc, #20]	; (800d1c8 <prvInitialiseTaskLists+0x64>)
 800d1b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1b4:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <prvInitialiseTaskLists+0x7c>)
 800d1b6:	4a05      	ldr	r2, [pc, #20]	; (800d1cc <prvInitialiseTaskLists+0x68>)
 800d1b8:	601a      	str	r2, [r3, #0]
}
 800d1ba:	bf00      	nop
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	200015bc 	.word	0x200015bc
 800d1c8:	20001a1c 	.word	0x20001a1c
 800d1cc:	20001a30 	.word	0x20001a30
 800d1d0:	20001a4c 	.word	0x20001a4c
 800d1d4:	20001a60 	.word	0x20001a60
 800d1d8:	20001a78 	.word	0x20001a78
 800d1dc:	20001a44 	.word	0x20001a44
 800d1e0:	20001a48 	.word	0x20001a48

0800d1e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1ea:	e019      	b.n	800d220 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1ec:	f000 fdd2 	bl	800dd94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f0:	4b10      	ldr	r3, [pc, #64]	; (800d234 <prvCheckTasksWaitingTermination+0x50>)
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fe fbfb 	bl	800b9f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d202:	4b0d      	ldr	r3, [pc, #52]	; (800d238 <prvCheckTasksWaitingTermination+0x54>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3b01      	subs	r3, #1
 800d208:	4a0b      	ldr	r2, [pc, #44]	; (800d238 <prvCheckTasksWaitingTermination+0x54>)
 800d20a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d20c:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <prvCheckTasksWaitingTermination+0x58>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3b01      	subs	r3, #1
 800d212:	4a0a      	ldr	r2, [pc, #40]	; (800d23c <prvCheckTasksWaitingTermination+0x58>)
 800d214:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d216:	f000 fded 	bl	800ddf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f810 	bl	800d240 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d220:	4b06      	ldr	r3, [pc, #24]	; (800d23c <prvCheckTasksWaitingTermination+0x58>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1e1      	bne.n	800d1ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d228:	bf00      	nop
 800d22a:	bf00      	nop
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	20001a60 	.word	0x20001a60
 800d238:	20001a8c 	.word	0x20001a8c
 800d23c:	20001a74 	.word	0x20001a74

0800d240 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d108      	bne.n	800d264 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d256:	4618      	mov	r0, r3
 800d258:	f000 ff8a 	bl	800e170 <vPortFree>
				vPortFree( pxTCB );
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 ff87 	bl	800e170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d262:	e018      	b.n	800d296 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d103      	bne.n	800d276 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 ff7e 	bl	800e170 <vPortFree>
	}
 800d274:	e00f      	b.n	800d296 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d00a      	beq.n	800d296 <prvDeleteTCB+0x56>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	60fb      	str	r3, [r7, #12]
}
 800d292:	bf00      	nop
 800d294:	e7fe      	b.n	800d294 <prvDeleteTCB+0x54>
	}
 800d296:	bf00      	nop
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
	...

0800d2a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <prvResetNextTaskUnblockTime+0x38>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d104      	bne.n	800d2ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <prvResetNextTaskUnblockTime+0x3c>)
 800d2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2b8:	e008      	b.n	800d2cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ba:	4b07      	ldr	r3, [pc, #28]	; (800d2d8 <prvResetNextTaskUnblockTime+0x38>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4a04      	ldr	r2, [pc, #16]	; (800d2dc <prvResetNextTaskUnblockTime+0x3c>)
 800d2ca:	6013      	str	r3, [r2, #0]
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	20001a44 	.word	0x20001a44
 800d2dc:	20001aac 	.word	0x20001aac

0800d2e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2e6:	4b0b      	ldr	r3, [pc, #44]	; (800d314 <xTaskGetSchedulerState+0x34>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d102      	bne.n	800d2f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	607b      	str	r3, [r7, #4]
 800d2f2:	e008      	b.n	800d306 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2f4:	4b08      	ldr	r3, [pc, #32]	; (800d318 <xTaskGetSchedulerState+0x38>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d102      	bne.n	800d302 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	607b      	str	r3, [r7, #4]
 800d300:	e001      	b.n	800d306 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d302:	2300      	movs	r3, #0
 800d304:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d306:	687b      	ldr	r3, [r7, #4]
	}
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	20001a98 	.word	0x20001a98
 800d318:	20001ab4 	.word	0x20001ab4

0800d31c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d328:	2300      	movs	r3, #0
 800d32a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d056      	beq.n	800d3e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d332:	4b2e      	ldr	r3, [pc, #184]	; (800d3ec <xTaskPriorityDisinherit+0xd0>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d00a      	beq.n	800d352 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	60fb      	str	r3, [r7, #12]
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	60bb      	str	r3, [r7, #8]
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d374:	1e5a      	subs	r2, r3, #1
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d382:	429a      	cmp	r2, r3
 800d384:	d02c      	beq.n	800d3e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d128      	bne.n	800d3e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	3304      	adds	r3, #4
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fb30 	bl	800b9f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b0:	4b0f      	ldr	r3, [pc, #60]	; (800d3f0 <xTaskPriorityDisinherit+0xd4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d903      	bls.n	800d3c0 <xTaskPriorityDisinherit+0xa4>
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3bc:	4a0c      	ldr	r2, [pc, #48]	; (800d3f0 <xTaskPriorityDisinherit+0xd4>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4a09      	ldr	r2, [pc, #36]	; (800d3f4 <xTaskPriorityDisinherit+0xd8>)
 800d3ce:	441a      	add	r2, r3
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	f7fe fab1 	bl	800b93e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3e0:	697b      	ldr	r3, [r7, #20]
	}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200015b8 	.word	0x200015b8
 800d3f0:	20001a94 	.word	0x20001a94
 800d3f4:	200015bc 	.word	0x200015bc

0800d3f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d402:	4b21      	ldr	r3, [pc, #132]	; (800d488 <prvAddCurrentTaskToDelayedList+0x90>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d408:	4b20      	ldr	r3, [pc, #128]	; (800d48c <prvAddCurrentTaskToDelayedList+0x94>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe faf2 	bl	800b9f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41a:	d10a      	bne.n	800d432 <prvAddCurrentTaskToDelayedList+0x3a>
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d007      	beq.n	800d432 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d422:	4b1a      	ldr	r3, [pc, #104]	; (800d48c <prvAddCurrentTaskToDelayedList+0x94>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	3304      	adds	r3, #4
 800d428:	4619      	mov	r1, r3
 800d42a:	4819      	ldr	r0, [pc, #100]	; (800d490 <prvAddCurrentTaskToDelayedList+0x98>)
 800d42c:	f7fe fa87 	bl	800b93e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d430:	e026      	b.n	800d480 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4413      	add	r3, r2
 800d438:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d43a:	4b14      	ldr	r3, [pc, #80]	; (800d48c <prvAddCurrentTaskToDelayedList+0x94>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	429a      	cmp	r2, r3
 800d448:	d209      	bcs.n	800d45e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d44a:	4b12      	ldr	r3, [pc, #72]	; (800d494 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <prvAddCurrentTaskToDelayedList+0x94>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3304      	adds	r3, #4
 800d454:	4619      	mov	r1, r3
 800d456:	4610      	mov	r0, r2
 800d458:	f7fe fa95 	bl	800b986 <vListInsert>
}
 800d45c:	e010      	b.n	800d480 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d45e:	4b0e      	ldr	r3, [pc, #56]	; (800d498 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4b0a      	ldr	r3, [pc, #40]	; (800d48c <prvAddCurrentTaskToDelayedList+0x94>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3304      	adds	r3, #4
 800d468:	4619      	mov	r1, r3
 800d46a:	4610      	mov	r0, r2
 800d46c:	f7fe fa8b 	bl	800b986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d470:	4b0a      	ldr	r3, [pc, #40]	; (800d49c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	429a      	cmp	r2, r3
 800d478:	d202      	bcs.n	800d480 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d47a:	4a08      	ldr	r2, [pc, #32]	; (800d49c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	6013      	str	r3, [r2, #0]
}
 800d480:	bf00      	nop
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20001a90 	.word	0x20001a90
 800d48c:	200015b8 	.word	0x200015b8
 800d490:	20001a78 	.word	0x20001a78
 800d494:	20001a48 	.word	0x20001a48
 800d498:	20001a44 	.word	0x20001a44
 800d49c:	20001aac 	.word	0x20001aac

0800d4a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b08a      	sub	sp, #40	; 0x28
 800d4a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d4aa:	f000 fb07 	bl	800dabc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d4ae:	4b1c      	ldr	r3, [pc, #112]	; (800d520 <xTimerCreateTimerTask+0x80>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d021      	beq.n	800d4fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d4be:	1d3a      	adds	r2, r7, #4
 800d4c0:	f107 0108 	add.w	r1, r7, #8
 800d4c4:	f107 030c 	add.w	r3, r7, #12
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fe f9f1 	bl	800b8b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	9202      	str	r2, [sp, #8]
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	2302      	movs	r3, #2
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	2300      	movs	r3, #0
 800d4de:	460a      	mov	r2, r1
 800d4e0:	4910      	ldr	r1, [pc, #64]	; (800d524 <xTimerCreateTimerTask+0x84>)
 800d4e2:	4811      	ldr	r0, [pc, #68]	; (800d528 <xTimerCreateTimerTask+0x88>)
 800d4e4:	f7fe ffd8 	bl	800c498 <xTaskCreateStatic>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	4a10      	ldr	r2, [pc, #64]	; (800d52c <xTimerCreateTimerTask+0x8c>)
 800d4ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d4ee:	4b0f      	ldr	r3, [pc, #60]	; (800d52c <xTimerCreateTimerTask+0x8c>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d001      	beq.n	800d4fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10a      	bne.n	800d516 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	613b      	str	r3, [r7, #16]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d516:	697b      	ldr	r3, [r7, #20]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	20001ae8 	.word	0x20001ae8
 800d524:	0800f928 	.word	0x0800f928
 800d528:	0800d665 	.word	0x0800d665
 800d52c:	20001aec 	.word	0x20001aec

0800d530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08a      	sub	sp, #40	; 0x28
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
 800d53c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d53e:	2300      	movs	r3, #0
 800d540:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10a      	bne.n	800d55e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	623b      	str	r3, [r7, #32]
}
 800d55a:	bf00      	nop
 800d55c:	e7fe      	b.n	800d55c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d55e:	4b1a      	ldr	r3, [pc, #104]	; (800d5c8 <xTimerGenericCommand+0x98>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d02a      	beq.n	800d5bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b05      	cmp	r3, #5
 800d576:	dc18      	bgt.n	800d5aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d578:	f7ff feb2 	bl	800d2e0 <xTaskGetSchedulerState>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d109      	bne.n	800d596 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d582:	4b11      	ldr	r3, [pc, #68]	; (800d5c8 <xTimerGenericCommand+0x98>)
 800d584:	6818      	ldr	r0, [r3, #0]
 800d586:	f107 0110 	add.w	r1, r7, #16
 800d58a:	2300      	movs	r3, #0
 800d58c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d58e:	f7fe fb9b 	bl	800bcc8 <xQueueGenericSend>
 800d592:	6278      	str	r0, [r7, #36]	; 0x24
 800d594:	e012      	b.n	800d5bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d596:	4b0c      	ldr	r3, [pc, #48]	; (800d5c8 <xTimerGenericCommand+0x98>)
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f107 0110 	add.w	r1, r7, #16
 800d59e:	2300      	movs	r3, #0
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f7fe fb91 	bl	800bcc8 <xQueueGenericSend>
 800d5a6:	6278      	str	r0, [r7, #36]	; 0x24
 800d5a8:	e008      	b.n	800d5bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d5aa:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <xTimerGenericCommand+0x98>)
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	f107 0110 	add.w	r1, r7, #16
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	f7fe fc85 	bl	800bec4 <xQueueGenericSendFromISR>
 800d5ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3728      	adds	r7, #40	; 0x28
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20001ae8 	.word	0x20001ae8

0800d5cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b088      	sub	sp, #32
 800d5d0:	af02      	add	r7, sp, #8
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5d6:	4b22      	ldr	r3, [pc, #136]	; (800d660 <prvProcessExpiredTimer+0x94>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fa07 	bl	800b9f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d022      	beq.n	800d63e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	699a      	ldr	r2, [r3, #24]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	18d1      	adds	r1, r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	6978      	ldr	r0, [r7, #20]
 800d606:	f000 f8d1 	bl	800d7ac <prvInsertTimerInActiveList>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d01f      	beq.n	800d650 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d610:	2300      	movs	r3, #0
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	2300      	movs	r3, #0
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	2100      	movs	r1, #0
 800d61a:	6978      	ldr	r0, [r7, #20]
 800d61c:	f7ff ff88 	bl	800d530 <xTimerGenericCommand>
 800d620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d113      	bne.n	800d650 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	60fb      	str	r3, [r7, #12]
}
 800d63a:	bf00      	nop
 800d63c:	e7fe      	b.n	800d63c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d644:	f023 0301 	bic.w	r3, r3, #1
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	6978      	ldr	r0, [r7, #20]
 800d656:	4798      	blx	r3
}
 800d658:	bf00      	nop
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20001ae0 	.word	0x20001ae0

0800d664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d66c:	f107 0308 	add.w	r3, r7, #8
 800d670:	4618      	mov	r0, r3
 800d672:	f000 f857 	bl	800d724 <prvGetNextExpireTime>
 800d676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	4619      	mov	r1, r3
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f000 f803 	bl	800d688 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d682:	f000 f8d5 	bl	800d830 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d686:	e7f1      	b.n	800d66c <prvTimerTask+0x8>

0800d688 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d692:	f7ff fa43 	bl	800cb1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d696:	f107 0308 	add.w	r3, r7, #8
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 f866 	bl	800d76c <prvSampleTimeNow>
 800d6a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d130      	bne.n	800d70a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10a      	bne.n	800d6c4 <prvProcessTimerOrBlockTask+0x3c>
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d806      	bhi.n	800d6c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d6b6:	f7ff fa3f 	bl	800cb38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d6ba:	68f9      	ldr	r1, [r7, #12]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff ff85 	bl	800d5cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d6c2:	e024      	b.n	800d70e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d008      	beq.n	800d6dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d6ca:	4b13      	ldr	r3, [pc, #76]	; (800d718 <prvProcessTimerOrBlockTask+0x90>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d101      	bne.n	800d6d8 <prvProcessTimerOrBlockTask+0x50>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e000      	b.n	800d6da <prvProcessTimerOrBlockTask+0x52>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d6dc:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <prvProcessTimerOrBlockTask+0x94>)
 800d6de:	6818      	ldr	r0, [r3, #0]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	f7fe fea1 	bl	800c430 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d6ee:	f7ff fa23 	bl	800cb38 <xTaskResumeAll>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10a      	bne.n	800d70e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d6f8:	4b09      	ldr	r3, [pc, #36]	; (800d720 <prvProcessTimerOrBlockTask+0x98>)
 800d6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	f3bf 8f6f 	isb	sy
}
 800d708:	e001      	b.n	800d70e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d70a:	f7ff fa15 	bl	800cb38 <xTaskResumeAll>
}
 800d70e:	bf00      	nop
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20001ae4 	.word	0x20001ae4
 800d71c:	20001ae8 	.word	0x20001ae8
 800d720:	e000ed04 	.word	0xe000ed04

0800d724 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d72c:	4b0e      	ldr	r3, [pc, #56]	; (800d768 <prvGetNextExpireTime+0x44>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <prvGetNextExpireTime+0x16>
 800d736:	2201      	movs	r2, #1
 800d738:	e000      	b.n	800d73c <prvGetNextExpireTime+0x18>
 800d73a:	2200      	movs	r2, #0
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d105      	bne.n	800d754 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d748:	4b07      	ldr	r3, [pc, #28]	; (800d768 <prvGetNextExpireTime+0x44>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	e001      	b.n	800d758 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d754:	2300      	movs	r3, #0
 800d756:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d758:	68fb      	ldr	r3, [r7, #12]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3714      	adds	r7, #20
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	20001ae0 	.word	0x20001ae0

0800d76c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d774:	f7ff fa7e 	bl	800cc74 <xTaskGetTickCount>
 800d778:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d77a:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <prvSampleTimeNow+0x3c>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	429a      	cmp	r2, r3
 800d782:	d205      	bcs.n	800d790 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d784:	f000 f936 	bl	800d9f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	e002      	b.n	800d796 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d796:	4a04      	ldr	r2, [pc, #16]	; (800d7a8 <prvSampleTimeNow+0x3c>)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d79c:	68fb      	ldr	r3, [r7, #12]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20001af0 	.word	0x20001af0

0800d7ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d812      	bhi.n	800d7f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	1ad2      	subs	r2, r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d302      	bcc.n	800d7e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	617b      	str	r3, [r7, #20]
 800d7e4:	e01b      	b.n	800d81e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d7e6:	4b10      	ldr	r3, [pc, #64]	; (800d828 <prvInsertTimerInActiveList+0x7c>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	f7fe f8c8 	bl	800b986 <vListInsert>
 800d7f6:	e012      	b.n	800d81e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d206      	bcs.n	800d80e <prvInsertTimerInActiveList+0x62>
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	429a      	cmp	r2, r3
 800d806:	d302      	bcc.n	800d80e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d808:	2301      	movs	r3, #1
 800d80a:	617b      	str	r3, [r7, #20]
 800d80c:	e007      	b.n	800d81e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d80e:	4b07      	ldr	r3, [pc, #28]	; (800d82c <prvInsertTimerInActiveList+0x80>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	3304      	adds	r3, #4
 800d816:	4619      	mov	r1, r3
 800d818:	4610      	mov	r0, r2
 800d81a:	f7fe f8b4 	bl	800b986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d81e:	697b      	ldr	r3, [r7, #20]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	20001ae4 	.word	0x20001ae4
 800d82c:	20001ae0 	.word	0x20001ae0

0800d830 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08e      	sub	sp, #56	; 0x38
 800d834:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d836:	e0ca      	b.n	800d9ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	da18      	bge.n	800d870 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d83e:	1d3b      	adds	r3, r7, #4
 800d840:	3304      	adds	r3, #4
 800d842:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10a      	bne.n	800d860 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	61fb      	str	r3, [r7, #28]
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d866:	6850      	ldr	r0, [r2, #4]
 800d868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86a:	6892      	ldr	r2, [r2, #8]
 800d86c:	4611      	mov	r1, r2
 800d86e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	f2c0 80aa 	blt.w	800d9cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	695b      	ldr	r3, [r3, #20]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	3304      	adds	r3, #4
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fe f8b5 	bl	800b9f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d88e:	463b      	mov	r3, r7
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff ff6b 	bl	800d76c <prvSampleTimeNow>
 800d896:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b09      	cmp	r3, #9
 800d89c:	f200 8097 	bhi.w	800d9ce <prvProcessReceivedCommands+0x19e>
 800d8a0:	a201      	add	r2, pc, #4	; (adr r2, 800d8a8 <prvProcessReceivedCommands+0x78>)
 800d8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a6:	bf00      	nop
 800d8a8:	0800d8d1 	.word	0x0800d8d1
 800d8ac:	0800d8d1 	.word	0x0800d8d1
 800d8b0:	0800d8d1 	.word	0x0800d8d1
 800d8b4:	0800d945 	.word	0x0800d945
 800d8b8:	0800d959 	.word	0x0800d959
 800d8bc:	0800d9a3 	.word	0x0800d9a3
 800d8c0:	0800d8d1 	.word	0x0800d8d1
 800d8c4:	0800d8d1 	.word	0x0800d8d1
 800d8c8:	0800d945 	.word	0x0800d945
 800d8cc:	0800d959 	.word	0x0800d959
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8d6:	f043 0301 	orr.w	r3, r3, #1
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e6:	699b      	ldr	r3, [r3, #24]
 800d8e8:	18d1      	adds	r1, r2, r3
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8f0:	f7ff ff5c 	bl	800d7ac <prvInsertTimerInActiveList>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d069      	beq.n	800d9ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	6a1b      	ldr	r3, [r3, #32]
 800d8fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d900:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d908:	f003 0304 	and.w	r3, r3, #4
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d05e      	beq.n	800d9ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	441a      	add	r2, r3
 800d918:	2300      	movs	r3, #0
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	2300      	movs	r3, #0
 800d91e:	2100      	movs	r1, #0
 800d920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d922:	f7ff fe05 	bl	800d530 <xTimerGenericCommand>
 800d926:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d14f      	bne.n	800d9ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	61bb      	str	r3, [r7, #24]
}
 800d940:	bf00      	nop
 800d942:	e7fe      	b.n	800d942 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d94a:	f023 0301 	bic.w	r3, r3, #1
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d956:	e03a      	b.n	800d9ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d95e:	f043 0301 	orr.w	r3, r3, #1
 800d962:	b2da      	uxtb	r2, r3
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	699b      	ldr	r3, [r3, #24]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	617b      	str	r3, [r7, #20]
}
 800d98a:	bf00      	nop
 800d98c:	e7fe      	b.n	800d98c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d990:	699a      	ldr	r2, [r3, #24]
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	18d1      	adds	r1, r2, r3
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d99c:	f7ff ff06 	bl	800d7ac <prvInsertTimerInActiveList>
					break;
 800d9a0:	e015      	b.n	800d9ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9a8:	f003 0302 	and.w	r3, r3, #2
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b2:	f000 fbdd 	bl	800e170 <vPortFree>
 800d9b6:	e00a      	b.n	800d9ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9be:	f023 0301 	bic.w	r3, r3, #1
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d9ca:	e000      	b.n	800d9ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d9cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9ce:	4b08      	ldr	r3, [pc, #32]	; (800d9f0 <prvProcessReceivedCommands+0x1c0>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	1d39      	adds	r1, r7, #4
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fb10 	bl	800bffc <xQueueReceive>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f47f af2a 	bne.w	800d838 <prvProcessReceivedCommands+0x8>
	}
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	3730      	adds	r7, #48	; 0x30
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	20001ae8 	.word	0x20001ae8

0800d9f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9fa:	e048      	b.n	800da8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9fc:	4b2d      	ldr	r3, [pc, #180]	; (800dab4 <prvSwitchTimerLists+0xc0>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da06:	4b2b      	ldr	r3, [pc, #172]	; (800dab4 <prvSwitchTimerLists+0xc0>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	3304      	adds	r3, #4
 800da14:	4618      	mov	r0, r3
 800da16:	f7fd ffef 	bl	800b9f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da28:	f003 0304 	and.w	r3, r3, #4
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d02e      	beq.n	800da8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	4413      	add	r3, r2
 800da38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d90e      	bls.n	800da60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da4e:	4b19      	ldr	r3, [pc, #100]	; (800dab4 <prvSwitchTimerLists+0xc0>)
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	3304      	adds	r3, #4
 800da56:	4619      	mov	r1, r3
 800da58:	4610      	mov	r0, r2
 800da5a:	f7fd ff94 	bl	800b986 <vListInsert>
 800da5e:	e016      	b.n	800da8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da60:	2300      	movs	r3, #0
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	2300      	movs	r3, #0
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	2100      	movs	r1, #0
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f7ff fd60 	bl	800d530 <xTimerGenericCommand>
 800da70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10a      	bne.n	800da8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	603b      	str	r3, [r7, #0]
}
 800da8a:	bf00      	nop
 800da8c:	e7fe      	b.n	800da8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da8e:	4b09      	ldr	r3, [pc, #36]	; (800dab4 <prvSwitchTimerLists+0xc0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1b1      	bne.n	800d9fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da98:	4b06      	ldr	r3, [pc, #24]	; (800dab4 <prvSwitchTimerLists+0xc0>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da9e:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <prvSwitchTimerLists+0xc4>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a04      	ldr	r2, [pc, #16]	; (800dab4 <prvSwitchTimerLists+0xc0>)
 800daa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800daa6:	4a04      	ldr	r2, [pc, #16]	; (800dab8 <prvSwitchTimerLists+0xc4>)
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	6013      	str	r3, [r2, #0]
}
 800daac:	bf00      	nop
 800daae:	3718      	adds	r7, #24
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	20001ae0 	.word	0x20001ae0
 800dab8:	20001ae4 	.word	0x20001ae4

0800dabc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dac2:	f000 f967 	bl	800dd94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dac6:	4b15      	ldr	r3, [pc, #84]	; (800db1c <prvCheckForValidListAndQueue+0x60>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d120      	bne.n	800db10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dace:	4814      	ldr	r0, [pc, #80]	; (800db20 <prvCheckForValidListAndQueue+0x64>)
 800dad0:	f7fd ff08 	bl	800b8e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dad4:	4813      	ldr	r0, [pc, #76]	; (800db24 <prvCheckForValidListAndQueue+0x68>)
 800dad6:	f7fd ff05 	bl	800b8e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dada:	4b13      	ldr	r3, [pc, #76]	; (800db28 <prvCheckForValidListAndQueue+0x6c>)
 800dadc:	4a10      	ldr	r2, [pc, #64]	; (800db20 <prvCheckForValidListAndQueue+0x64>)
 800dade:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dae0:	4b12      	ldr	r3, [pc, #72]	; (800db2c <prvCheckForValidListAndQueue+0x70>)
 800dae2:	4a10      	ldr	r2, [pc, #64]	; (800db24 <prvCheckForValidListAndQueue+0x68>)
 800dae4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dae6:	2300      	movs	r3, #0
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	4b11      	ldr	r3, [pc, #68]	; (800db30 <prvCheckForValidListAndQueue+0x74>)
 800daec:	4a11      	ldr	r2, [pc, #68]	; (800db34 <prvCheckForValidListAndQueue+0x78>)
 800daee:	2110      	movs	r1, #16
 800daf0:	200a      	movs	r0, #10
 800daf2:	f7fe f813 	bl	800bb1c <xQueueGenericCreateStatic>
 800daf6:	4603      	mov	r3, r0
 800daf8:	4a08      	ldr	r2, [pc, #32]	; (800db1c <prvCheckForValidListAndQueue+0x60>)
 800dafa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dafc:	4b07      	ldr	r3, [pc, #28]	; (800db1c <prvCheckForValidListAndQueue+0x60>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d005      	beq.n	800db10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <prvCheckForValidListAndQueue+0x60>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	490b      	ldr	r1, [pc, #44]	; (800db38 <prvCheckForValidListAndQueue+0x7c>)
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe fc66 	bl	800c3dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db10:	f000 f970 	bl	800ddf4 <vPortExitCritical>
}
 800db14:	bf00      	nop
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20001ae8 	.word	0x20001ae8
 800db20:	20001ab8 	.word	0x20001ab8
 800db24:	20001acc 	.word	0x20001acc
 800db28:	20001ae0 	.word	0x20001ae0
 800db2c:	20001ae4 	.word	0x20001ae4
 800db30:	20001b94 	.word	0x20001b94
 800db34:	20001af4 	.word	0x20001af4
 800db38:	0800f930 	.word	0x0800f930

0800db3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3b04      	subs	r3, #4
 800db4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3b04      	subs	r3, #4
 800db5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f023 0201 	bic.w	r2, r3, #1
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3b04      	subs	r3, #4
 800db6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db6c:	4a0c      	ldr	r2, [pc, #48]	; (800dba0 <pxPortInitialiseStack+0x64>)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	3b14      	subs	r3, #20
 800db76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3b04      	subs	r3, #4
 800db82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f06f 0202 	mvn.w	r2, #2
 800db8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	3b20      	subs	r3, #32
 800db90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db92:	68fb      	ldr	r3, [r7, #12]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	0800dba5 	.word	0x0800dba5

0800dba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbae:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <prvTaskExitError+0x54>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb6:	d00a      	beq.n	800dbce <prvTaskExitError+0x2a>
	__asm volatile
 800dbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbc:	f383 8811 	msr	BASEPRI, r3
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	60fb      	str	r3, [r7, #12]
}
 800dbca:	bf00      	nop
 800dbcc:	e7fe      	b.n	800dbcc <prvTaskExitError+0x28>
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	60bb      	str	r3, [r7, #8]
}
 800dbe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dbe2:	bf00      	nop
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0fc      	beq.n	800dbe4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dbea:	bf00      	nop
 800dbec:	bf00      	nop
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	200005b0 	.word	0x200005b0
 800dbfc:	00000000 	.word	0x00000000

0800dc00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc00:	4b07      	ldr	r3, [pc, #28]	; (800dc20 <pxCurrentTCBConst2>)
 800dc02:	6819      	ldr	r1, [r3, #0]
 800dc04:	6808      	ldr	r0, [r1, #0]
 800dc06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0a:	f380 8809 	msr	PSP, r0
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f04f 0000 	mov.w	r0, #0
 800dc16:	f380 8811 	msr	BASEPRI, r0
 800dc1a:	4770      	bx	lr
 800dc1c:	f3af 8000 	nop.w

0800dc20 <pxCurrentTCBConst2>:
 800dc20:	200015b8 	.word	0x200015b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop

0800dc28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc28:	4808      	ldr	r0, [pc, #32]	; (800dc4c <prvPortStartFirstTask+0x24>)
 800dc2a:	6800      	ldr	r0, [r0, #0]
 800dc2c:	6800      	ldr	r0, [r0, #0]
 800dc2e:	f380 8808 	msr	MSP, r0
 800dc32:	f04f 0000 	mov.w	r0, #0
 800dc36:	f380 8814 	msr	CONTROL, r0
 800dc3a:	b662      	cpsie	i
 800dc3c:	b661      	cpsie	f
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	df00      	svc	0
 800dc48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc4a:	bf00      	nop
 800dc4c:	e000ed08 	.word	0xe000ed08

0800dc50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc56:	4b46      	ldr	r3, [pc, #280]	; (800dd70 <xPortStartScheduler+0x120>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a46      	ldr	r2, [pc, #280]	; (800dd74 <xPortStartScheduler+0x124>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d10a      	bne.n	800dc76 <xPortStartScheduler+0x26>
	__asm volatile
 800dc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc64:	f383 8811 	msr	BASEPRI, r3
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	613b      	str	r3, [r7, #16]
}
 800dc72:	bf00      	nop
 800dc74:	e7fe      	b.n	800dc74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dc76:	4b3e      	ldr	r3, [pc, #248]	; (800dd70 <xPortStartScheduler+0x120>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a3f      	ldr	r2, [pc, #252]	; (800dd78 <xPortStartScheduler+0x128>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d10a      	bne.n	800dc96 <xPortStartScheduler+0x46>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	60fb      	str	r3, [r7, #12]
}
 800dc92:	bf00      	nop
 800dc94:	e7fe      	b.n	800dc94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc96:	4b39      	ldr	r3, [pc, #228]	; (800dd7c <xPortStartScheduler+0x12c>)
 800dc98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	22ff      	movs	r2, #255	; 0xff
 800dca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dcb0:	78fb      	ldrb	r3, [r7, #3]
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	4b31      	ldr	r3, [pc, #196]	; (800dd80 <xPortStartScheduler+0x130>)
 800dcbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dcbe:	4b31      	ldr	r3, [pc, #196]	; (800dd84 <xPortStartScheduler+0x134>)
 800dcc0:	2207      	movs	r2, #7
 800dcc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcc4:	e009      	b.n	800dcda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dcc6:	4b2f      	ldr	r3, [pc, #188]	; (800dd84 <xPortStartScheduler+0x134>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	4a2d      	ldr	r2, [pc, #180]	; (800dd84 <xPortStartScheduler+0x134>)
 800dcce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dcd0:	78fb      	ldrb	r3, [r7, #3]
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcda:	78fb      	ldrb	r3, [r7, #3]
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dce2:	2b80      	cmp	r3, #128	; 0x80
 800dce4:	d0ef      	beq.n	800dcc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dce6:	4b27      	ldr	r3, [pc, #156]	; (800dd84 <xPortStartScheduler+0x134>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f1c3 0307 	rsb	r3, r3, #7
 800dcee:	2b04      	cmp	r3, #4
 800dcf0:	d00a      	beq.n	800dd08 <xPortStartScheduler+0xb8>
	__asm volatile
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	60bb      	str	r3, [r7, #8]
}
 800dd04:	bf00      	nop
 800dd06:	e7fe      	b.n	800dd06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd08:	4b1e      	ldr	r3, [pc, #120]	; (800dd84 <xPortStartScheduler+0x134>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	021b      	lsls	r3, r3, #8
 800dd0e:	4a1d      	ldr	r2, [pc, #116]	; (800dd84 <xPortStartScheduler+0x134>)
 800dd10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd12:	4b1c      	ldr	r3, [pc, #112]	; (800dd84 <xPortStartScheduler+0x134>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd1a:	4a1a      	ldr	r2, [pc, #104]	; (800dd84 <xPortStartScheduler+0x134>)
 800dd1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd26:	4b18      	ldr	r3, [pc, #96]	; (800dd88 <xPortStartScheduler+0x138>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a17      	ldr	r2, [pc, #92]	; (800dd88 <xPortStartScheduler+0x138>)
 800dd2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd32:	4b15      	ldr	r3, [pc, #84]	; (800dd88 <xPortStartScheduler+0x138>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a14      	ldr	r2, [pc, #80]	; (800dd88 <xPortStartScheduler+0x138>)
 800dd38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd3e:	f000 f8dd 	bl	800defc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd42:	4b12      	ldr	r3, [pc, #72]	; (800dd8c <xPortStartScheduler+0x13c>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd48:	f000 f8fc 	bl	800df44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd4c:	4b10      	ldr	r3, [pc, #64]	; (800dd90 <xPortStartScheduler+0x140>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a0f      	ldr	r2, [pc, #60]	; (800dd90 <xPortStartScheduler+0x140>)
 800dd52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd58:	f7ff ff66 	bl	800dc28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd5c:	f7ff f854 	bl	800ce08 <vTaskSwitchContext>
	prvTaskExitError();
 800dd60:	f7ff ff20 	bl	800dba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	e000ed00 	.word	0xe000ed00
 800dd74:	410fc271 	.word	0x410fc271
 800dd78:	410fc270 	.word	0x410fc270
 800dd7c:	e000e400 	.word	0xe000e400
 800dd80:	20001be4 	.word	0x20001be4
 800dd84:	20001be8 	.word	0x20001be8
 800dd88:	e000ed20 	.word	0xe000ed20
 800dd8c:	200005b0 	.word	0x200005b0
 800dd90:	e000ef34 	.word	0xe000ef34

0800dd94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
	__asm volatile
 800dd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9e:	f383 8811 	msr	BASEPRI, r3
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	f3bf 8f4f 	dsb	sy
 800ddaa:	607b      	str	r3, [r7, #4]
}
 800ddac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ddae:	4b0f      	ldr	r3, [pc, #60]	; (800ddec <vPortEnterCritical+0x58>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	4a0d      	ldr	r2, [pc, #52]	; (800ddec <vPortEnterCritical+0x58>)
 800ddb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ddb8:	4b0c      	ldr	r3, [pc, #48]	; (800ddec <vPortEnterCritical+0x58>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d10f      	bne.n	800dde0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ddc0:	4b0b      	ldr	r3, [pc, #44]	; (800ddf0 <vPortEnterCritical+0x5c>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00a      	beq.n	800dde0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	603b      	str	r3, [r7, #0]
}
 800dddc:	bf00      	nop
 800ddde:	e7fe      	b.n	800ddde <vPortEnterCritical+0x4a>
	}
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	200005b0 	.word	0x200005b0
 800ddf0:	e000ed04 	.word	0xe000ed04

0800ddf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ddfa:	4b12      	ldr	r3, [pc, #72]	; (800de44 <vPortExitCritical+0x50>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10a      	bne.n	800de18 <vPortExitCritical+0x24>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	607b      	str	r3, [r7, #4]
}
 800de14:	bf00      	nop
 800de16:	e7fe      	b.n	800de16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de18:	4b0a      	ldr	r3, [pc, #40]	; (800de44 <vPortExitCritical+0x50>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3b01      	subs	r3, #1
 800de1e:	4a09      	ldr	r2, [pc, #36]	; (800de44 <vPortExitCritical+0x50>)
 800de20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de22:	4b08      	ldr	r3, [pc, #32]	; (800de44 <vPortExitCritical+0x50>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d105      	bne.n	800de36 <vPortExitCritical+0x42>
 800de2a:	2300      	movs	r3, #0
 800de2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	f383 8811 	msr	BASEPRI, r3
}
 800de34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de36:	bf00      	nop
 800de38:	370c      	adds	r7, #12
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	200005b0 	.word	0x200005b0
	...

0800de50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de50:	f3ef 8009 	mrs	r0, PSP
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <pxCurrentTCBConst>)
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	f01e 0f10 	tst.w	lr, #16
 800de60:	bf08      	it	eq
 800de62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6a:	6010      	str	r0, [r2, #0]
 800de6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de74:	f380 8811 	msr	BASEPRI, r0
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	f3bf 8f6f 	isb	sy
 800de80:	f7fe ffc2 	bl	800ce08 <vTaskSwitchContext>
 800de84:	f04f 0000 	mov.w	r0, #0
 800de88:	f380 8811 	msr	BASEPRI, r0
 800de8c:	bc09      	pop	{r0, r3}
 800de8e:	6819      	ldr	r1, [r3, #0]
 800de90:	6808      	ldr	r0, [r1, #0]
 800de92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de96:	f01e 0f10 	tst.w	lr, #16
 800de9a:	bf08      	it	eq
 800de9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dea0:	f380 8809 	msr	PSP, r0
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	f3af 8000 	nop.w

0800deb0 <pxCurrentTCBConst>:
 800deb0:	200015b8 	.word	0x200015b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800deb4:	bf00      	nop
 800deb6:	bf00      	nop

0800deb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	607b      	str	r3, [r7, #4]
}
 800ded0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ded2:	f7fe fedf 	bl	800cc94 <xTaskIncrementTick>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d003      	beq.n	800dee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dedc:	4b06      	ldr	r3, [pc, #24]	; (800def8 <xPortSysTickHandler+0x40>)
 800dede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	2300      	movs	r3, #0
 800dee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	f383 8811 	msr	BASEPRI, r3
}
 800deee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800defc:	b480      	push	{r7}
 800defe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df00:	4b0b      	ldr	r3, [pc, #44]	; (800df30 <vPortSetupTimerInterrupt+0x34>)
 800df02:	2200      	movs	r2, #0
 800df04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df06:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <vPortSetupTimerInterrupt+0x38>)
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df0c:	4b0a      	ldr	r3, [pc, #40]	; (800df38 <vPortSetupTimerInterrupt+0x3c>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a0a      	ldr	r2, [pc, #40]	; (800df3c <vPortSetupTimerInterrupt+0x40>)
 800df12:	fba2 2303 	umull	r2, r3, r2, r3
 800df16:	099b      	lsrs	r3, r3, #6
 800df18:	4a09      	ldr	r2, [pc, #36]	; (800df40 <vPortSetupTimerInterrupt+0x44>)
 800df1a:	3b01      	subs	r3, #1
 800df1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df1e:	4b04      	ldr	r3, [pc, #16]	; (800df30 <vPortSetupTimerInterrupt+0x34>)
 800df20:	2207      	movs	r2, #7
 800df22:	601a      	str	r2, [r3, #0]
}
 800df24:	bf00      	nop
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	e000e010 	.word	0xe000e010
 800df34:	e000e018 	.word	0xe000e018
 800df38:	20000518 	.word	0x20000518
 800df3c:	10624dd3 	.word	0x10624dd3
 800df40:	e000e014 	.word	0xe000e014

0800df44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df54 <vPortEnableVFP+0x10>
 800df48:	6801      	ldr	r1, [r0, #0]
 800df4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df4e:	6001      	str	r1, [r0, #0]
 800df50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df52:	bf00      	nop
 800df54:	e000ed88 	.word	0xe000ed88

0800df58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df5e:	f3ef 8305 	mrs	r3, IPSR
 800df62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b0f      	cmp	r3, #15
 800df68:	d914      	bls.n	800df94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df6a:	4a17      	ldr	r2, [pc, #92]	; (800dfc8 <vPortValidateInterruptPriority+0x70>)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4413      	add	r3, r2
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df74:	4b15      	ldr	r3, [pc, #84]	; (800dfcc <vPortValidateInterruptPriority+0x74>)
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	7afa      	ldrb	r2, [r7, #11]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d20a      	bcs.n	800df94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	607b      	str	r3, [r7, #4]
}
 800df90:	bf00      	nop
 800df92:	e7fe      	b.n	800df92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df94:	4b0e      	ldr	r3, [pc, #56]	; (800dfd0 <vPortValidateInterruptPriority+0x78>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df9c:	4b0d      	ldr	r3, [pc, #52]	; (800dfd4 <vPortValidateInterruptPriority+0x7c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d90a      	bls.n	800dfba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa8:	f383 8811 	msr	BASEPRI, r3
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	603b      	str	r3, [r7, #0]
}
 800dfb6:	bf00      	nop
 800dfb8:	e7fe      	b.n	800dfb8 <vPortValidateInterruptPriority+0x60>
	}
 800dfba:	bf00      	nop
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	e000e3f0 	.word	0xe000e3f0
 800dfcc:	20001be4 	.word	0x20001be4
 800dfd0:	e000ed0c 	.word	0xe000ed0c
 800dfd4:	20001be8 	.word	0x20001be8

0800dfd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08a      	sub	sp, #40	; 0x28
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfe4:	f7fe fd9a 	bl	800cb1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfe8:	4b5b      	ldr	r3, [pc, #364]	; (800e158 <pvPortMalloc+0x180>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dff0:	f000 f920 	bl	800e234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dff4:	4b59      	ldr	r3, [pc, #356]	; (800e15c <pvPortMalloc+0x184>)
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4013      	ands	r3, r2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f040 8093 	bne.w	800e128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d01d      	beq.n	800e044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e008:	2208      	movs	r2, #8
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4413      	add	r3, r2
 800e00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f003 0307 	and.w	r3, r3, #7
 800e016:	2b00      	cmp	r3, #0
 800e018:	d014      	beq.n	800e044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f023 0307 	bic.w	r3, r3, #7
 800e020:	3308      	adds	r3, #8
 800e022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f003 0307 	and.w	r3, r3, #7
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00a      	beq.n	800e044 <pvPortMalloc+0x6c>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	617b      	str	r3, [r7, #20]
}
 800e040:	bf00      	nop
 800e042:	e7fe      	b.n	800e042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d06e      	beq.n	800e128 <pvPortMalloc+0x150>
 800e04a:	4b45      	ldr	r3, [pc, #276]	; (800e160 <pvPortMalloc+0x188>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	429a      	cmp	r2, r3
 800e052:	d869      	bhi.n	800e128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e054:	4b43      	ldr	r3, [pc, #268]	; (800e164 <pvPortMalloc+0x18c>)
 800e056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e058:	4b42      	ldr	r3, [pc, #264]	; (800e164 <pvPortMalloc+0x18c>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e05e:	e004      	b.n	800e06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	429a      	cmp	r2, r3
 800e072:	d903      	bls.n	800e07c <pvPortMalloc+0xa4>
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1f1      	bne.n	800e060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e07c:	4b36      	ldr	r3, [pc, #216]	; (800e158 <pvPortMalloc+0x180>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e082:	429a      	cmp	r2, r3
 800e084:	d050      	beq.n	800e128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2208      	movs	r2, #8
 800e08c:	4413      	add	r3, r2
 800e08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09a:	685a      	ldr	r2, [r3, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	1ad2      	subs	r2, r2, r3
 800e0a0:	2308      	movs	r3, #8
 800e0a2:	005b      	lsls	r3, r3, #1
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d91f      	bls.n	800e0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	f003 0307 	and.w	r3, r3, #7
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00a      	beq.n	800e0d0 <pvPortMalloc+0xf8>
	__asm volatile
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	613b      	str	r3, [r7, #16]
}
 800e0cc:	bf00      	nop
 800e0ce:	e7fe      	b.n	800e0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	685a      	ldr	r2, [r3, #4]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	1ad2      	subs	r2, r2, r3
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0e2:	69b8      	ldr	r0, [r7, #24]
 800e0e4:	f000 f908 	bl	800e2f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0e8:	4b1d      	ldr	r3, [pc, #116]	; (800e160 <pvPortMalloc+0x188>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	4a1b      	ldr	r2, [pc, #108]	; (800e160 <pvPortMalloc+0x188>)
 800e0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0f6:	4b1a      	ldr	r3, [pc, #104]	; (800e160 <pvPortMalloc+0x188>)
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	4b1b      	ldr	r3, [pc, #108]	; (800e168 <pvPortMalloc+0x190>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d203      	bcs.n	800e10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e102:	4b17      	ldr	r3, [pc, #92]	; (800e160 <pvPortMalloc+0x188>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a18      	ldr	r2, [pc, #96]	; (800e168 <pvPortMalloc+0x190>)
 800e108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	685a      	ldr	r2, [r3, #4]
 800e10e:	4b13      	ldr	r3, [pc, #76]	; (800e15c <pvPortMalloc+0x184>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	431a      	orrs	r2, r3
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11a:	2200      	movs	r2, #0
 800e11c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e11e:	4b13      	ldr	r3, [pc, #76]	; (800e16c <pvPortMalloc+0x194>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3301      	adds	r3, #1
 800e124:	4a11      	ldr	r2, [pc, #68]	; (800e16c <pvPortMalloc+0x194>)
 800e126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e128:	f7fe fd06 	bl	800cb38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	f003 0307 	and.w	r3, r3, #7
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00a      	beq.n	800e14c <pvPortMalloc+0x174>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	60fb      	str	r3, [r7, #12]
}
 800e148:	bf00      	nop
 800e14a:	e7fe      	b.n	800e14a <pvPortMalloc+0x172>
	return pvReturn;
 800e14c:	69fb      	ldr	r3, [r7, #28]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3728      	adds	r7, #40	; 0x28
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	200057f4 	.word	0x200057f4
 800e15c:	20005808 	.word	0x20005808
 800e160:	200057f8 	.word	0x200057f8
 800e164:	200057ec 	.word	0x200057ec
 800e168:	200057fc 	.word	0x200057fc
 800e16c:	20005800 	.word	0x20005800

0800e170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d04d      	beq.n	800e21e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e182:	2308      	movs	r3, #8
 800e184:	425b      	negs	r3, r3
 800e186:	697a      	ldr	r2, [r7, #20]
 800e188:	4413      	add	r3, r2
 800e18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	4b24      	ldr	r3, [pc, #144]	; (800e228 <vPortFree+0xb8>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4013      	ands	r3, r2
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d10a      	bne.n	800e1b4 <vPortFree+0x44>
	__asm volatile
 800e19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a2:	f383 8811 	msr	BASEPRI, r3
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	60fb      	str	r3, [r7, #12]
}
 800e1b0:	bf00      	nop
 800e1b2:	e7fe      	b.n	800e1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00a      	beq.n	800e1d2 <vPortFree+0x62>
	__asm volatile
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	60bb      	str	r3, [r7, #8]
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	4b14      	ldr	r3, [pc, #80]	; (800e228 <vPortFree+0xb8>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4013      	ands	r3, r2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d01e      	beq.n	800e21e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d11a      	bne.n	800e21e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	4b0e      	ldr	r3, [pc, #56]	; (800e228 <vPortFree+0xb8>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	43db      	mvns	r3, r3
 800e1f2:	401a      	ands	r2, r3
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1f8:	f7fe fc90 	bl	800cb1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	4b0a      	ldr	r3, [pc, #40]	; (800e22c <vPortFree+0xbc>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4413      	add	r3, r2
 800e206:	4a09      	ldr	r2, [pc, #36]	; (800e22c <vPortFree+0xbc>)
 800e208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e20a:	6938      	ldr	r0, [r7, #16]
 800e20c:	f000 f874 	bl	800e2f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <vPortFree+0xc0>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3301      	adds	r3, #1
 800e216:	4a06      	ldr	r2, [pc, #24]	; (800e230 <vPortFree+0xc0>)
 800e218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e21a:	f7fe fc8d 	bl	800cb38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e21e:	bf00      	nop
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20005808 	.word	0x20005808
 800e22c:	200057f8 	.word	0x200057f8
 800e230:	20005804 	.word	0x20005804

0800e234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e23a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e23e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e240:	4b27      	ldr	r3, [pc, #156]	; (800e2e0 <prvHeapInit+0xac>)
 800e242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f003 0307 	and.w	r3, r3, #7
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00c      	beq.n	800e268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3307      	adds	r3, #7
 800e252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f023 0307 	bic.w	r3, r3, #7
 800e25a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	4a1f      	ldr	r2, [pc, #124]	; (800e2e0 <prvHeapInit+0xac>)
 800e264:	4413      	add	r3, r2
 800e266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e26c:	4a1d      	ldr	r2, [pc, #116]	; (800e2e4 <prvHeapInit+0xb0>)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e272:	4b1c      	ldr	r3, [pc, #112]	; (800e2e4 <prvHeapInit+0xb0>)
 800e274:	2200      	movs	r2, #0
 800e276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	4413      	add	r3, r2
 800e27e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e280:	2208      	movs	r2, #8
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	1a9b      	subs	r3, r3, r2
 800e286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f023 0307 	bic.w	r3, r3, #7
 800e28e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	4a15      	ldr	r2, [pc, #84]	; (800e2e8 <prvHeapInit+0xb4>)
 800e294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e296:	4b14      	ldr	r3, [pc, #80]	; (800e2e8 <prvHeapInit+0xb4>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2200      	movs	r2, #0
 800e29c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e29e:	4b12      	ldr	r3, [pc, #72]	; (800e2e8 <prvHeapInit+0xb4>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	1ad2      	subs	r2, r2, r3
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2b4:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <prvHeapInit+0xb4>)
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	4a0a      	ldr	r2, [pc, #40]	; (800e2ec <prvHeapInit+0xb8>)
 800e2c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	4a09      	ldr	r2, [pc, #36]	; (800e2f0 <prvHeapInit+0xbc>)
 800e2ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2cc:	4b09      	ldr	r3, [pc, #36]	; (800e2f4 <prvHeapInit+0xc0>)
 800e2ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e2d2:	601a      	str	r2, [r3, #0]
}
 800e2d4:	bf00      	nop
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	20001bec 	.word	0x20001bec
 800e2e4:	200057ec 	.word	0x200057ec
 800e2e8:	200057f4 	.word	0x200057f4
 800e2ec:	200057fc 	.word	0x200057fc
 800e2f0:	200057f8 	.word	0x200057f8
 800e2f4:	20005808 	.word	0x20005808

0800e2f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e300:	4b28      	ldr	r3, [pc, #160]	; (800e3a4 <prvInsertBlockIntoFreeList+0xac>)
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	e002      	b.n	800e30c <prvInsertBlockIntoFreeList+0x14>
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	429a      	cmp	r2, r3
 800e314:	d8f7      	bhi.n	800e306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	4413      	add	r3, r2
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	429a      	cmp	r2, r3
 800e326:	d108      	bne.n	800e33a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	441a      	add	r2, r3
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	441a      	add	r2, r3
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d118      	bne.n	800e380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	4b15      	ldr	r3, [pc, #84]	; (800e3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d00d      	beq.n	800e376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	685a      	ldr	r2, [r3, #4]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	441a      	add	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	e008      	b.n	800e388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e376:	4b0c      	ldr	r3, [pc, #48]	; (800e3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	e003      	b.n	800e388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d002      	beq.n	800e396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e396:	bf00      	nop
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	200057ec 	.word	0x200057ec
 800e3a8:	200057f4 	.word	0x200057f4

0800e3ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	4912      	ldr	r1, [pc, #72]	; (800e3fc <MX_USB_DEVICE_Init+0x50>)
 800e3b4:	4812      	ldr	r0, [pc, #72]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3b6:	f7fb fdbf 	bl	8009f38 <USBD_Init>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e3c0:	f7f4 f8e6 	bl	8002590 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3c4:	490f      	ldr	r1, [pc, #60]	; (800e404 <MX_USB_DEVICE_Init+0x58>)
 800e3c6:	480e      	ldr	r0, [pc, #56]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3c8:	f7fb fde6 	bl	8009f98 <USBD_RegisterClass>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e3d2:	f7f4 f8dd 	bl	8002590 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e3d6:	490c      	ldr	r1, [pc, #48]	; (800e408 <MX_USB_DEVICE_Init+0x5c>)
 800e3d8:	4809      	ldr	r0, [pc, #36]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3da:	f7fb fd1d 	bl	8009e18 <USBD_CDC_RegisterInterface>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d001      	beq.n	800e3e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e3e4:	f7f4 f8d4 	bl	8002590 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e3e8:	4805      	ldr	r0, [pc, #20]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3ea:	f7fb fe0b 	bl	800a004 <USBD_Start>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e3f4:	f7f4 f8cc 	bl	8002590 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e3f8:	bf00      	nop
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	200005c8 	.word	0x200005c8
 800e400:	2000580c 	.word	0x2000580c
 800e404:	20000530 	.word	0x20000530
 800e408:	200005b4 	.word	0x200005b4

0800e40c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e410:	2200      	movs	r2, #0
 800e412:	4905      	ldr	r1, [pc, #20]	; (800e428 <CDC_Init_FS+0x1c>)
 800e414:	4805      	ldr	r0, [pc, #20]	; (800e42c <CDC_Init_FS+0x20>)
 800e416:	f7fb fd19 	bl	8009e4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e41a:	4905      	ldr	r1, [pc, #20]	; (800e430 <CDC_Init_FS+0x24>)
 800e41c:	4803      	ldr	r0, [pc, #12]	; (800e42c <CDC_Init_FS+0x20>)
 800e41e:	f7fb fd37 	bl	8009e90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e422:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e424:	4618      	mov	r0, r3
 800e426:	bd80      	pop	{r7, pc}
 800e428:	20005ee8 	.word	0x20005ee8
 800e42c:	2000580c 	.word	0x2000580c
 800e430:	20005ae8 	.word	0x20005ae8

0800e434 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e434:	b480      	push	{r7}
 800e436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e438:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	6039      	str	r1, [r7, #0]
 800e44e:	71fb      	strb	r3, [r7, #7]
 800e450:	4613      	mov	r3, r2
 800e452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e454:	79fb      	ldrb	r3, [r7, #7]
 800e456:	2b23      	cmp	r3, #35	; 0x23
 800e458:	d84a      	bhi.n	800e4f0 <CDC_Control_FS+0xac>
 800e45a:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <CDC_Control_FS+0x1c>)
 800e45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e460:	0800e4f1 	.word	0x0800e4f1
 800e464:	0800e4f1 	.word	0x0800e4f1
 800e468:	0800e4f1 	.word	0x0800e4f1
 800e46c:	0800e4f1 	.word	0x0800e4f1
 800e470:	0800e4f1 	.word	0x0800e4f1
 800e474:	0800e4f1 	.word	0x0800e4f1
 800e478:	0800e4f1 	.word	0x0800e4f1
 800e47c:	0800e4f1 	.word	0x0800e4f1
 800e480:	0800e4f1 	.word	0x0800e4f1
 800e484:	0800e4f1 	.word	0x0800e4f1
 800e488:	0800e4f1 	.word	0x0800e4f1
 800e48c:	0800e4f1 	.word	0x0800e4f1
 800e490:	0800e4f1 	.word	0x0800e4f1
 800e494:	0800e4f1 	.word	0x0800e4f1
 800e498:	0800e4f1 	.word	0x0800e4f1
 800e49c:	0800e4f1 	.word	0x0800e4f1
 800e4a0:	0800e4f1 	.word	0x0800e4f1
 800e4a4:	0800e4f1 	.word	0x0800e4f1
 800e4a8:	0800e4f1 	.word	0x0800e4f1
 800e4ac:	0800e4f1 	.word	0x0800e4f1
 800e4b0:	0800e4f1 	.word	0x0800e4f1
 800e4b4:	0800e4f1 	.word	0x0800e4f1
 800e4b8:	0800e4f1 	.word	0x0800e4f1
 800e4bc:	0800e4f1 	.word	0x0800e4f1
 800e4c0:	0800e4f1 	.word	0x0800e4f1
 800e4c4:	0800e4f1 	.word	0x0800e4f1
 800e4c8:	0800e4f1 	.word	0x0800e4f1
 800e4cc:	0800e4f1 	.word	0x0800e4f1
 800e4d0:	0800e4f1 	.word	0x0800e4f1
 800e4d4:	0800e4f1 	.word	0x0800e4f1
 800e4d8:	0800e4f1 	.word	0x0800e4f1
 800e4dc:	0800e4f1 	.word	0x0800e4f1
 800e4e0:	0800e4f1 	.word	0x0800e4f1
 800e4e4:	0800e4f1 	.word	0x0800e4f1
 800e4e8:	0800e4f1 	.word	0x0800e4f1
 800e4ec:	0800e4f1 	.word	0x0800e4f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e4f0:	bf00      	nop
  }

  return (USBD_OK);
 800e4f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	4805      	ldr	r0, [pc, #20]	; (800e524 <CDC_Receive_FS+0x24>)
 800e50e:	f7fb fcbf 	bl	8009e90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e512:	4804      	ldr	r0, [pc, #16]	; (800e524 <CDC_Receive_FS+0x24>)
 800e514:	f7fb fcda 	bl	8009ecc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e518:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	2000580c 	.word	0x2000580c

0800e528 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e528:	b480      	push	{r7}
 800e52a:	b087      	sub	sp, #28
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	4613      	mov	r3, r2
 800e534:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e536:	2300      	movs	r3, #0
 800e538:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e53a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	371c      	adds	r7, #28
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr
	...

0800e54c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	4603      	mov	r3, r0
 800e554:	6039      	str	r1, [r7, #0]
 800e556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	2212      	movs	r2, #18
 800e55c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e55e:	4b03      	ldr	r3, [pc, #12]	; (800e56c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e560:	4618      	mov	r0, r3
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	200005e4 	.word	0x200005e4

0800e570 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	6039      	str	r1, [r7, #0]
 800e57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	2204      	movs	r2, #4
 800e580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e582:	4b03      	ldr	r3, [pc, #12]	; (800e590 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	200005f8 	.word	0x200005f8

0800e594 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	4603      	mov	r3, r0
 800e59c:	6039      	str	r1, [r7, #0]
 800e59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d105      	bne.n	800e5b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5a6:	683a      	ldr	r2, [r7, #0]
 800e5a8:	4907      	ldr	r1, [pc, #28]	; (800e5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5aa:	4808      	ldr	r0, [pc, #32]	; (800e5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800e5ac:	f7fc fed6 	bl	800b35c <USBD_GetString>
 800e5b0:	e004      	b.n	800e5bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	4904      	ldr	r1, [pc, #16]	; (800e5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5b6:	4805      	ldr	r0, [pc, #20]	; (800e5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800e5b8:	f7fc fed0 	bl	800b35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5bc:	4b02      	ldr	r3, [pc, #8]	; (800e5c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	200062e8 	.word	0x200062e8
 800e5cc:	0800f938 	.word	0x0800f938

0800e5d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	6039      	str	r1, [r7, #0]
 800e5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e5dc:	683a      	ldr	r2, [r7, #0]
 800e5de:	4904      	ldr	r1, [pc, #16]	; (800e5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e5e0:	4804      	ldr	r0, [pc, #16]	; (800e5f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e5e2:	f7fc febb 	bl	800b35c <USBD_GetString>
  return USBD_StrDesc;
 800e5e6:	4b02      	ldr	r3, [pc, #8]	; (800e5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	200062e8 	.word	0x200062e8
 800e5f4:	0800f950 	.word	0x0800f950

0800e5f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	4603      	mov	r3, r0
 800e600:	6039      	str	r1, [r7, #0]
 800e602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	221a      	movs	r2, #26
 800e608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e60a:	f000 f843 	bl	800e694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e60e:	4b02      	ldr	r3, [pc, #8]	; (800e618 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	200005fc 	.word	0x200005fc

0800e61c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	4603      	mov	r3, r0
 800e624:	6039      	str	r1, [r7, #0]
 800e626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d105      	bne.n	800e63a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	4907      	ldr	r1, [pc, #28]	; (800e650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e632:	4808      	ldr	r0, [pc, #32]	; (800e654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e634:	f7fc fe92 	bl	800b35c <USBD_GetString>
 800e638:	e004      	b.n	800e644 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e63a:	683a      	ldr	r2, [r7, #0]
 800e63c:	4904      	ldr	r1, [pc, #16]	; (800e650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e63e:	4805      	ldr	r0, [pc, #20]	; (800e654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e640:	f7fc fe8c 	bl	800b35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e644:	4b02      	ldr	r3, [pc, #8]	; (800e650 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e646:	4618      	mov	r0, r3
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	200062e8 	.word	0x200062e8
 800e654:	0800f964 	.word	0x0800f964

0800e658 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	4603      	mov	r3, r0
 800e660:	6039      	str	r1, [r7, #0]
 800e662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e664:	79fb      	ldrb	r3, [r7, #7]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d105      	bne.n	800e676 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	4907      	ldr	r1, [pc, #28]	; (800e68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e66e:	4808      	ldr	r0, [pc, #32]	; (800e690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e670:	f7fc fe74 	bl	800b35c <USBD_GetString>
 800e674:	e004      	b.n	800e680 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	4904      	ldr	r1, [pc, #16]	; (800e68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e67a:	4805      	ldr	r0, [pc, #20]	; (800e690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e67c:	f7fc fe6e 	bl	800b35c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e680:	4b02      	ldr	r3, [pc, #8]	; (800e68c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e682:	4618      	mov	r0, r3
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	200062e8 	.word	0x200062e8
 800e690:	0800f970 	.word	0x0800f970

0800e694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e69a:	4b0f      	ldr	r3, [pc, #60]	; (800e6d8 <Get_SerialNum+0x44>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6a0:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <Get_SerialNum+0x48>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6a6:	4b0e      	ldr	r3, [pc, #56]	; (800e6e0 <Get_SerialNum+0x4c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d009      	beq.n	800e6ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e6ba:	2208      	movs	r2, #8
 800e6bc:	4909      	ldr	r1, [pc, #36]	; (800e6e4 <Get_SerialNum+0x50>)
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f000 f814 	bl	800e6ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e6c4:	2204      	movs	r2, #4
 800e6c6:	4908      	ldr	r1, [pc, #32]	; (800e6e8 <Get_SerialNum+0x54>)
 800e6c8:	68b8      	ldr	r0, [r7, #8]
 800e6ca:	f000 f80f 	bl	800e6ec <IntToUnicode>
  }
}
 800e6ce:	bf00      	nop
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	1fff7a10 	.word	0x1fff7a10
 800e6dc:	1fff7a14 	.word	0x1fff7a14
 800e6e0:	1fff7a18 	.word	0x1fff7a18
 800e6e4:	200005fe 	.word	0x200005fe
 800e6e8:	2000060e 	.word	0x2000060e

0800e6ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b087      	sub	sp, #28
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e6fe:	2300      	movs	r3, #0
 800e700:	75fb      	strb	r3, [r7, #23]
 800e702:	e027      	b.n	800e754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	0f1b      	lsrs	r3, r3, #28
 800e708:	2b09      	cmp	r3, #9
 800e70a:	d80b      	bhi.n	800e724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	0f1b      	lsrs	r3, r3, #28
 800e710:	b2da      	uxtb	r2, r3
 800e712:	7dfb      	ldrb	r3, [r7, #23]
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	4619      	mov	r1, r3
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	440b      	add	r3, r1
 800e71c:	3230      	adds	r2, #48	; 0x30
 800e71e:	b2d2      	uxtb	r2, r2
 800e720:	701a      	strb	r2, [r3, #0]
 800e722:	e00a      	b.n	800e73a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	0f1b      	lsrs	r3, r3, #28
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	7dfb      	ldrb	r3, [r7, #23]
 800e72c:	005b      	lsls	r3, r3, #1
 800e72e:	4619      	mov	r1, r3
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	440b      	add	r3, r1
 800e734:	3237      	adds	r2, #55	; 0x37
 800e736:	b2d2      	uxtb	r2, r2
 800e738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	011b      	lsls	r3, r3, #4
 800e73e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e740:	7dfb      	ldrb	r3, [r7, #23]
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	3301      	adds	r3, #1
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	4413      	add	r3, r2
 800e74a:	2200      	movs	r2, #0
 800e74c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	3301      	adds	r3, #1
 800e752:	75fb      	strb	r3, [r7, #23]
 800e754:	7dfa      	ldrb	r2, [r7, #23]
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d3d3      	bcc.n	800e704 <IntToUnicode+0x18>
  }
}
 800e75c:	bf00      	nop
 800e75e:	bf00      	nop
 800e760:	371c      	adds	r7, #28
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
	...

0800e76c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08a      	sub	sp, #40	; 0x28
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e774:	f107 0314 	add.w	r3, r7, #20
 800e778:	2200      	movs	r2, #0
 800e77a:	601a      	str	r2, [r3, #0]
 800e77c:	605a      	str	r2, [r3, #4]
 800e77e:	609a      	str	r2, [r3, #8]
 800e780:	60da      	str	r2, [r3, #12]
 800e782:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e78c:	d13a      	bne.n	800e804 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e78e:	2300      	movs	r3, #0
 800e790:	613b      	str	r3, [r7, #16]
 800e792:	4b1e      	ldr	r3, [pc, #120]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e796:	4a1d      	ldr	r2, [pc, #116]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e798:	f043 0301 	orr.w	r3, r3, #1
 800e79c:	6313      	str	r3, [r2, #48]	; 0x30
 800e79e:	4b1b      	ldr	r3, [pc, #108]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a2:	f003 0301 	and.w	r3, r3, #1
 800e7a6:	613b      	str	r3, [r7, #16]
 800e7a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e7aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e7ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e7bc:	230a      	movs	r3, #10
 800e7be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7c0:	f107 0314 	add.w	r3, r7, #20
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4812      	ldr	r0, [pc, #72]	; (800e810 <HAL_PCD_MspInit+0xa4>)
 800e7c8:	f7f4 fd56 	bl	8003278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e7cc:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d0:	4a0e      	ldr	r2, [pc, #56]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d6:	6353      	str	r3, [r2, #52]	; 0x34
 800e7d8:	2300      	movs	r3, #0
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	4b0b      	ldr	r3, [pc, #44]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7e0:	4a0a      	ldr	r2, [pc, #40]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e7e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e7e6:	6453      	str	r3, [r2, #68]	; 0x44
 800e7e8:	4b08      	ldr	r3, [pc, #32]	; (800e80c <HAL_PCD_MspInit+0xa0>)
 800e7ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7f0:	60fb      	str	r3, [r7, #12]
 800e7f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	2105      	movs	r1, #5
 800e7f8:	2043      	movs	r0, #67	; 0x43
 800e7fa:	f7f4 fd13 	bl	8003224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e7fe:	2043      	movs	r0, #67	; 0x43
 800e800:	f7f4 fd2c 	bl	800325c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e804:	bf00      	nop
 800e806:	3728      	adds	r7, #40	; 0x28
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	40023800 	.word	0x40023800
 800e810:	40020000 	.word	0x40020000

0800e814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e828:	4619      	mov	r1, r3
 800e82a:	4610      	mov	r0, r2
 800e82c:	f7fb fc37 	bl	800a09e <USBD_LL_SetupStage>
}
 800e830:	bf00      	nop
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	460b      	mov	r3, r1
 800e842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e84a:	78fa      	ldrb	r2, [r7, #3]
 800e84c:	6879      	ldr	r1, [r7, #4]
 800e84e:	4613      	mov	r3, r2
 800e850:	00db      	lsls	r3, r3, #3
 800e852:	4413      	add	r3, r2
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	440b      	add	r3, r1
 800e858:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	78fb      	ldrb	r3, [r7, #3]
 800e860:	4619      	mov	r1, r3
 800e862:	f7fb fc71 	bl	800a148 <USBD_LL_DataOutStage>
}
 800e866:	bf00      	nop
 800e868:	3708      	adds	r7, #8
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b082      	sub	sp, #8
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	460b      	mov	r3, r1
 800e878:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e880:	78fa      	ldrb	r2, [r7, #3]
 800e882:	6879      	ldr	r1, [r7, #4]
 800e884:	4613      	mov	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	440b      	add	r3, r1
 800e88e:	334c      	adds	r3, #76	; 0x4c
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	78fb      	ldrb	r3, [r7, #3]
 800e894:	4619      	mov	r1, r3
 800e896:	f7fb fd0a 	bl	800a2ae <USBD_LL_DataInStage>
}
 800e89a:	bf00      	nop
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b082      	sub	sp, #8
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fb fe3e 	bl	800a532 <USBD_LL_SOF>
}
 800e8b6:	bf00      	nop
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b084      	sub	sp, #16
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	2b02      	cmp	r3, #2
 800e8d0:	d001      	beq.n	800e8d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e8d2:	f7f3 fe5d 	bl	8002590 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8dc:	7bfa      	ldrb	r2, [r7, #15]
 800e8de:	4611      	mov	r1, r2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fb fde8 	bl	800a4b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fb fd90 	bl	800a412 <USBD_LL_Reset>
}
 800e8f2:	bf00      	nop
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fb fde3 	bl	800a4d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	6812      	ldr	r2, [r2, #0]
 800e91e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e922:	f043 0301 	orr.w	r3, r3, #1
 800e926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6a1b      	ldr	r3, [r3, #32]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d005      	beq.n	800e93c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e930:	4b04      	ldr	r3, [pc, #16]	; (800e944 <HAL_PCD_SuspendCallback+0x48>)
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	4a03      	ldr	r2, [pc, #12]	; (800e944 <HAL_PCD_SuspendCallback+0x48>)
 800e936:	f043 0306 	orr.w	r3, r3, #6
 800e93a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e93c:	bf00      	nop
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	e000ed00 	.word	0xe000ed00

0800e948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e956:	4618      	mov	r0, r3
 800e958:	f7fb fdd3 	bl	800a502 <USBD_LL_Resume>
}
 800e95c:	bf00      	nop
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	4611      	mov	r1, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fb fe2b 	bl	800a5d6 <USBD_LL_IsoOUTIncomplete>
}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	460b      	mov	r3, r1
 800e992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e99a:	78fa      	ldrb	r2, [r7, #3]
 800e99c:	4611      	mov	r1, r2
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fb fde7 	bl	800a572 <USBD_LL_IsoINIncomplete>
}
 800e9a4:	bf00      	nop
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fb fe3d 	bl	800a63a <USBD_LL_DevConnected>
}
 800e9c0:	bf00      	nop
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fb fe3a 	bl	800a650 <USBD_LL_DevDisconnected>
}
 800e9dc:	bf00      	nop
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d13c      	bne.n	800ea6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e9f4:	4a20      	ldr	r2, [pc, #128]	; (800ea78 <USBD_LL_Init+0x94>)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a1e      	ldr	r2, [pc, #120]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea04:	4b1c      	ldr	r3, [pc, #112]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ea0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ea0c:	4b1a      	ldr	r3, [pc, #104]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea0e:	2204      	movs	r2, #4
 800ea10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ea12:	4b19      	ldr	r3, [pc, #100]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea14:	2202      	movs	r2, #2
 800ea16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea18:	4b17      	ldr	r3, [pc, #92]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ea1e:	4b16      	ldr	r3, [pc, #88]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea20:	2202      	movs	r2, #2
 800ea22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea24:	4b14      	ldr	r3, [pc, #80]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ea2a:	4b13      	ldr	r3, [pc, #76]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ea30:	4b11      	ldr	r3, [pc, #68]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ea36:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ea3c:	4b0e      	ldr	r3, [pc, #56]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ea42:	480d      	ldr	r0, [pc, #52]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea44:	f7f5 fd8d 	bl	8004562 <HAL_PCD_Init>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ea4e:	f7f3 fd9f 	bl	8002590 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ea52:	2180      	movs	r1, #128	; 0x80
 800ea54:	4808      	ldr	r0, [pc, #32]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea56:	f7f6 ffe4 	bl	8005a22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ea5a:	2240      	movs	r2, #64	; 0x40
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	4806      	ldr	r0, [pc, #24]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea60:	f7f6 ff98 	bl	8005994 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ea64:	2280      	movs	r2, #128	; 0x80
 800ea66:	2101      	movs	r1, #1
 800ea68:	4803      	ldr	r0, [pc, #12]	; (800ea78 <USBD_LL_Init+0x94>)
 800ea6a:	f7f6 ff93 	bl	8005994 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ea6e:	2300      	movs	r3, #0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	200064e8 	.word	0x200064e8

0800ea7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7f5 fe82 	bl	800479c <HAL_PCD_Start>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea9c:	7bfb      	ldrb	r3, [r7, #15]
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f000 f942 	bl	800ed28 <USBD_Get_USB_Status>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b084      	sub	sp, #16
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	4608      	mov	r0, r1
 800eabc:	4611      	mov	r1, r2
 800eabe:	461a      	mov	r2, r3
 800eac0:	4603      	mov	r3, r0
 800eac2:	70fb      	strb	r3, [r7, #3]
 800eac4:	460b      	mov	r3, r1
 800eac6:	70bb      	strb	r3, [r7, #2]
 800eac8:	4613      	mov	r3, r2
 800eaca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eacc:	2300      	movs	r3, #0
 800eace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eada:	78bb      	ldrb	r3, [r7, #2]
 800eadc:	883a      	ldrh	r2, [r7, #0]
 800eade:	78f9      	ldrb	r1, [r7, #3]
 800eae0:	f7f6 fb53 	bl	800518a <HAL_PCD_EP_Open>
 800eae4:	4603      	mov	r3, r0
 800eae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f000 f91c 	bl	800ed28 <USBD_Get_USB_Status>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b084      	sub	sp, #16
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
 800eb06:	460b      	mov	r3, r1
 800eb08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb18:	78fa      	ldrb	r2, [r7, #3]
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7f6 fb9c 	bl	800525a <HAL_PCD_EP_Close>
 800eb22:	4603      	mov	r3, r0
 800eb24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 f8fd 	bl	800ed28 <USBD_Get_USB_Status>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb32:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3710      	adds	r7, #16
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb56:	78fa      	ldrb	r2, [r7, #3]
 800eb58:	4611      	mov	r1, r2
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f6 fc74 	bl	8005448 <HAL_PCD_EP_SetStall>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 f8de 	bl	800ed28 <USBD_Get_USB_Status>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb70:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	460b      	mov	r3, r1
 800eb84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb86:	2300      	movs	r3, #0
 800eb88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb94:	78fa      	ldrb	r2, [r7, #3]
 800eb96:	4611      	mov	r1, r2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7f6 fcb9 	bl	8005510 <HAL_PCD_EP_ClrStall>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eba2:	7bfb      	ldrb	r3, [r7, #15]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 f8bf 	bl	800ed28 <USBD_Get_USB_Status>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebae:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ebcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	da0b      	bge.n	800ebec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ebd4:	78fb      	ldrb	r3, [r7, #3]
 800ebd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebda:	68f9      	ldr	r1, [r7, #12]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	4413      	add	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	440b      	add	r3, r1
 800ebe6:	333e      	adds	r3, #62	; 0x3e
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	e00b      	b.n	800ec04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ebec:	78fb      	ldrb	r3, [r7, #3]
 800ebee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebf2:	68f9      	ldr	r1, [r7, #12]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	00db      	lsls	r3, r3, #3
 800ebf8:	4413      	add	r3, r2
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	440b      	add	r3, r1
 800ebfe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ec02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3714      	adds	r7, #20
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec2a:	78fa      	ldrb	r2, [r7, #3]
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f6 fa86 	bl	8005140 <HAL_PCD_SetAddress>
 800ec34:	4603      	mov	r3, r0
 800ec36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec38:	7bfb      	ldrb	r3, [r7, #15]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f874 	bl	800ed28 <USBD_Get_USB_Status>
 800ec40:	4603      	mov	r3, r0
 800ec42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b086      	sub	sp, #24
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	603b      	str	r3, [r7, #0]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec6c:	7af9      	ldrb	r1, [r7, #11]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	f7f6 fb9f 	bl	80053b4 <HAL_PCD_EP_Transmit>
 800ec76:	4603      	mov	r3, r0
 800ec78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec7a:	7dfb      	ldrb	r3, [r7, #23]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 f853 	bl	800ed28 <USBD_Get_USB_Status>
 800ec82:	4603      	mov	r3, r0
 800ec84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec86:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	607a      	str	r2, [r7, #4]
 800ec9a:	603b      	str	r3, [r7, #0]
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca4:	2300      	movs	r3, #0
 800eca6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ecae:	7af9      	ldrb	r1, [r7, #11]
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	f7f6 fb1b 	bl	80052ee <HAL_PCD_EP_Receive>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecbc:	7dfb      	ldrb	r3, [r7, #23]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 f832 	bl	800ed28 <USBD_Get_USB_Status>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ecc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3718      	adds	r7, #24
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ece4:	78fa      	ldrb	r2, [r7, #3]
 800ece6:	4611      	mov	r1, r2
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7f6 fb4b 	bl	8005384 <HAL_PCD_EP_GetRxCount>
 800ecee:	4603      	mov	r3, r0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ed00:	4b03      	ldr	r3, [pc, #12]	; (800ed10 <USBD_static_malloc+0x18>)
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	370c      	adds	r7, #12
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	200069f4 	.word	0x200069f4

0800ed14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]

}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed32:	2300      	movs	r3, #0
 800ed34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	2b03      	cmp	r3, #3
 800ed3a:	d817      	bhi.n	800ed6c <USBD_Get_USB_Status+0x44>
 800ed3c:	a201      	add	r2, pc, #4	; (adr r2, 800ed44 <USBD_Get_USB_Status+0x1c>)
 800ed3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed42:	bf00      	nop
 800ed44:	0800ed55 	.word	0x0800ed55
 800ed48:	0800ed5b 	.word	0x0800ed5b
 800ed4c:	0800ed61 	.word	0x0800ed61
 800ed50:	0800ed67 	.word	0x0800ed67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	73fb      	strb	r3, [r7, #15]
    break;
 800ed58:	e00b      	b.n	800ed72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed5e:	e008      	b.n	800ed72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed60:	2301      	movs	r3, #1
 800ed62:	73fb      	strb	r3, [r7, #15]
    break;
 800ed64:	e005      	b.n	800ed72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed66:	2303      	movs	r3, #3
 800ed68:	73fb      	strb	r3, [r7, #15]
    break;
 800ed6a:	e002      	b.n	800ed72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed70:	bf00      	nop
  }
  return usb_status;
 800ed72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3714      	adds	r7, #20
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <__errno>:
 800ed80:	4b01      	ldr	r3, [pc, #4]	; (800ed88 <__errno+0x8>)
 800ed82:	6818      	ldr	r0, [r3, #0]
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop
 800ed88:	20000618 	.word	0x20000618

0800ed8c <__libc_init_array>:
 800ed8c:	b570      	push	{r4, r5, r6, lr}
 800ed8e:	4d0d      	ldr	r5, [pc, #52]	; (800edc4 <__libc_init_array+0x38>)
 800ed90:	4c0d      	ldr	r4, [pc, #52]	; (800edc8 <__libc_init_array+0x3c>)
 800ed92:	1b64      	subs	r4, r4, r5
 800ed94:	10a4      	asrs	r4, r4, #2
 800ed96:	2600      	movs	r6, #0
 800ed98:	42a6      	cmp	r6, r4
 800ed9a:	d109      	bne.n	800edb0 <__libc_init_array+0x24>
 800ed9c:	4d0b      	ldr	r5, [pc, #44]	; (800edcc <__libc_init_array+0x40>)
 800ed9e:	4c0c      	ldr	r4, [pc, #48]	; (800edd0 <__libc_init_array+0x44>)
 800eda0:	f000 fcb2 	bl	800f708 <_init>
 800eda4:	1b64      	subs	r4, r4, r5
 800eda6:	10a4      	asrs	r4, r4, #2
 800eda8:	2600      	movs	r6, #0
 800edaa:	42a6      	cmp	r6, r4
 800edac:	d105      	bne.n	800edba <__libc_init_array+0x2e>
 800edae:	bd70      	pop	{r4, r5, r6, pc}
 800edb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800edb4:	4798      	blx	r3
 800edb6:	3601      	adds	r6, #1
 800edb8:	e7ee      	b.n	800ed98 <__libc_init_array+0xc>
 800edba:	f855 3b04 	ldr.w	r3, [r5], #4
 800edbe:	4798      	blx	r3
 800edc0:	3601      	adds	r6, #1
 800edc2:	e7f2      	b.n	800edaa <__libc_init_array+0x1e>
 800edc4:	0800fd88 	.word	0x0800fd88
 800edc8:	0800fd88 	.word	0x0800fd88
 800edcc:	0800fd88 	.word	0x0800fd88
 800edd0:	0800fd8c 	.word	0x0800fd8c

0800edd4 <malloc>:
 800edd4:	4b02      	ldr	r3, [pc, #8]	; (800ede0 <malloc+0xc>)
 800edd6:	4601      	mov	r1, r0
 800edd8:	6818      	ldr	r0, [r3, #0]
 800edda:	f000 b88d 	b.w	800eef8 <_malloc_r>
 800edde:	bf00      	nop
 800ede0:	20000618 	.word	0x20000618

0800ede4 <free>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	; (800edf0 <free+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	f000 b819 	b.w	800ee20 <_free_r>
 800edee:	bf00      	nop
 800edf0:	20000618 	.word	0x20000618

0800edf4 <memcpy>:
 800edf4:	440a      	add	r2, r1
 800edf6:	4291      	cmp	r1, r2
 800edf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800edfc:	d100      	bne.n	800ee00 <memcpy+0xc>
 800edfe:	4770      	bx	lr
 800ee00:	b510      	push	{r4, lr}
 800ee02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	d1f9      	bne.n	800ee02 <memcpy+0xe>
 800ee0e:	bd10      	pop	{r4, pc}

0800ee10 <memset>:
 800ee10:	4402      	add	r2, r0
 800ee12:	4603      	mov	r3, r0
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d100      	bne.n	800ee1a <memset+0xa>
 800ee18:	4770      	bx	lr
 800ee1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee1e:	e7f9      	b.n	800ee14 <memset+0x4>

0800ee20 <_free_r>:
 800ee20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee22:	2900      	cmp	r1, #0
 800ee24:	d044      	beq.n	800eeb0 <_free_r+0x90>
 800ee26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee2a:	9001      	str	r0, [sp, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ee32:	bfb8      	it	lt
 800ee34:	18e4      	addlt	r4, r4, r3
 800ee36:	f000 f917 	bl	800f068 <__malloc_lock>
 800ee3a:	4a1e      	ldr	r2, [pc, #120]	; (800eeb4 <_free_r+0x94>)
 800ee3c:	9801      	ldr	r0, [sp, #4]
 800ee3e:	6813      	ldr	r3, [r2, #0]
 800ee40:	b933      	cbnz	r3, 800ee50 <_free_r+0x30>
 800ee42:	6063      	str	r3, [r4, #4]
 800ee44:	6014      	str	r4, [r2, #0]
 800ee46:	b003      	add	sp, #12
 800ee48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee4c:	f000 b912 	b.w	800f074 <__malloc_unlock>
 800ee50:	42a3      	cmp	r3, r4
 800ee52:	d908      	bls.n	800ee66 <_free_r+0x46>
 800ee54:	6825      	ldr	r5, [r4, #0]
 800ee56:	1961      	adds	r1, r4, r5
 800ee58:	428b      	cmp	r3, r1
 800ee5a:	bf01      	itttt	eq
 800ee5c:	6819      	ldreq	r1, [r3, #0]
 800ee5e:	685b      	ldreq	r3, [r3, #4]
 800ee60:	1949      	addeq	r1, r1, r5
 800ee62:	6021      	streq	r1, [r4, #0]
 800ee64:	e7ed      	b.n	800ee42 <_free_r+0x22>
 800ee66:	461a      	mov	r2, r3
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	b10b      	cbz	r3, 800ee70 <_free_r+0x50>
 800ee6c:	42a3      	cmp	r3, r4
 800ee6e:	d9fa      	bls.n	800ee66 <_free_r+0x46>
 800ee70:	6811      	ldr	r1, [r2, #0]
 800ee72:	1855      	adds	r5, r2, r1
 800ee74:	42a5      	cmp	r5, r4
 800ee76:	d10b      	bne.n	800ee90 <_free_r+0x70>
 800ee78:	6824      	ldr	r4, [r4, #0]
 800ee7a:	4421      	add	r1, r4
 800ee7c:	1854      	adds	r4, r2, r1
 800ee7e:	42a3      	cmp	r3, r4
 800ee80:	6011      	str	r1, [r2, #0]
 800ee82:	d1e0      	bne.n	800ee46 <_free_r+0x26>
 800ee84:	681c      	ldr	r4, [r3, #0]
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	6053      	str	r3, [r2, #4]
 800ee8a:	4421      	add	r1, r4
 800ee8c:	6011      	str	r1, [r2, #0]
 800ee8e:	e7da      	b.n	800ee46 <_free_r+0x26>
 800ee90:	d902      	bls.n	800ee98 <_free_r+0x78>
 800ee92:	230c      	movs	r3, #12
 800ee94:	6003      	str	r3, [r0, #0]
 800ee96:	e7d6      	b.n	800ee46 <_free_r+0x26>
 800ee98:	6825      	ldr	r5, [r4, #0]
 800ee9a:	1961      	adds	r1, r4, r5
 800ee9c:	428b      	cmp	r3, r1
 800ee9e:	bf04      	itt	eq
 800eea0:	6819      	ldreq	r1, [r3, #0]
 800eea2:	685b      	ldreq	r3, [r3, #4]
 800eea4:	6063      	str	r3, [r4, #4]
 800eea6:	bf04      	itt	eq
 800eea8:	1949      	addeq	r1, r1, r5
 800eeaa:	6021      	streq	r1, [r4, #0]
 800eeac:	6054      	str	r4, [r2, #4]
 800eeae:	e7ca      	b.n	800ee46 <_free_r+0x26>
 800eeb0:	b003      	add	sp, #12
 800eeb2:	bd30      	pop	{r4, r5, pc}
 800eeb4:	20006c14 	.word	0x20006c14

0800eeb8 <sbrk_aligned>:
 800eeb8:	b570      	push	{r4, r5, r6, lr}
 800eeba:	4e0e      	ldr	r6, [pc, #56]	; (800eef4 <sbrk_aligned+0x3c>)
 800eebc:	460c      	mov	r4, r1
 800eebe:	6831      	ldr	r1, [r6, #0]
 800eec0:	4605      	mov	r5, r0
 800eec2:	b911      	cbnz	r1, 800eeca <sbrk_aligned+0x12>
 800eec4:	f000 f88c 	bl	800efe0 <_sbrk_r>
 800eec8:	6030      	str	r0, [r6, #0]
 800eeca:	4621      	mov	r1, r4
 800eecc:	4628      	mov	r0, r5
 800eece:	f000 f887 	bl	800efe0 <_sbrk_r>
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	d00a      	beq.n	800eeec <sbrk_aligned+0x34>
 800eed6:	1cc4      	adds	r4, r0, #3
 800eed8:	f024 0403 	bic.w	r4, r4, #3
 800eedc:	42a0      	cmp	r0, r4
 800eede:	d007      	beq.n	800eef0 <sbrk_aligned+0x38>
 800eee0:	1a21      	subs	r1, r4, r0
 800eee2:	4628      	mov	r0, r5
 800eee4:	f000 f87c 	bl	800efe0 <_sbrk_r>
 800eee8:	3001      	adds	r0, #1
 800eeea:	d101      	bne.n	800eef0 <sbrk_aligned+0x38>
 800eeec:	f04f 34ff 	mov.w	r4, #4294967295
 800eef0:	4620      	mov	r0, r4
 800eef2:	bd70      	pop	{r4, r5, r6, pc}
 800eef4:	20006c18 	.word	0x20006c18

0800eef8 <_malloc_r>:
 800eef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eefc:	1ccd      	adds	r5, r1, #3
 800eefe:	f025 0503 	bic.w	r5, r5, #3
 800ef02:	3508      	adds	r5, #8
 800ef04:	2d0c      	cmp	r5, #12
 800ef06:	bf38      	it	cc
 800ef08:	250c      	movcc	r5, #12
 800ef0a:	2d00      	cmp	r5, #0
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	db01      	blt.n	800ef14 <_malloc_r+0x1c>
 800ef10:	42a9      	cmp	r1, r5
 800ef12:	d905      	bls.n	800ef20 <_malloc_r+0x28>
 800ef14:	230c      	movs	r3, #12
 800ef16:	603b      	str	r3, [r7, #0]
 800ef18:	2600      	movs	r6, #0
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef20:	4e2e      	ldr	r6, [pc, #184]	; (800efdc <_malloc_r+0xe4>)
 800ef22:	f000 f8a1 	bl	800f068 <__malloc_lock>
 800ef26:	6833      	ldr	r3, [r6, #0]
 800ef28:	461c      	mov	r4, r3
 800ef2a:	bb34      	cbnz	r4, 800ef7a <_malloc_r+0x82>
 800ef2c:	4629      	mov	r1, r5
 800ef2e:	4638      	mov	r0, r7
 800ef30:	f7ff ffc2 	bl	800eeb8 <sbrk_aligned>
 800ef34:	1c43      	adds	r3, r0, #1
 800ef36:	4604      	mov	r4, r0
 800ef38:	d14d      	bne.n	800efd6 <_malloc_r+0xde>
 800ef3a:	6834      	ldr	r4, [r6, #0]
 800ef3c:	4626      	mov	r6, r4
 800ef3e:	2e00      	cmp	r6, #0
 800ef40:	d140      	bne.n	800efc4 <_malloc_r+0xcc>
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	4631      	mov	r1, r6
 800ef46:	4638      	mov	r0, r7
 800ef48:	eb04 0803 	add.w	r8, r4, r3
 800ef4c:	f000 f848 	bl	800efe0 <_sbrk_r>
 800ef50:	4580      	cmp	r8, r0
 800ef52:	d13a      	bne.n	800efca <_malloc_r+0xd2>
 800ef54:	6821      	ldr	r1, [r4, #0]
 800ef56:	3503      	adds	r5, #3
 800ef58:	1a6d      	subs	r5, r5, r1
 800ef5a:	f025 0503 	bic.w	r5, r5, #3
 800ef5e:	3508      	adds	r5, #8
 800ef60:	2d0c      	cmp	r5, #12
 800ef62:	bf38      	it	cc
 800ef64:	250c      	movcc	r5, #12
 800ef66:	4629      	mov	r1, r5
 800ef68:	4638      	mov	r0, r7
 800ef6a:	f7ff ffa5 	bl	800eeb8 <sbrk_aligned>
 800ef6e:	3001      	adds	r0, #1
 800ef70:	d02b      	beq.n	800efca <_malloc_r+0xd2>
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	442b      	add	r3, r5
 800ef76:	6023      	str	r3, [r4, #0]
 800ef78:	e00e      	b.n	800ef98 <_malloc_r+0xa0>
 800ef7a:	6822      	ldr	r2, [r4, #0]
 800ef7c:	1b52      	subs	r2, r2, r5
 800ef7e:	d41e      	bmi.n	800efbe <_malloc_r+0xc6>
 800ef80:	2a0b      	cmp	r2, #11
 800ef82:	d916      	bls.n	800efb2 <_malloc_r+0xba>
 800ef84:	1961      	adds	r1, r4, r5
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	6025      	str	r5, [r4, #0]
 800ef8a:	bf18      	it	ne
 800ef8c:	6059      	strne	r1, [r3, #4]
 800ef8e:	6863      	ldr	r3, [r4, #4]
 800ef90:	bf08      	it	eq
 800ef92:	6031      	streq	r1, [r6, #0]
 800ef94:	5162      	str	r2, [r4, r5]
 800ef96:	604b      	str	r3, [r1, #4]
 800ef98:	4638      	mov	r0, r7
 800ef9a:	f104 060b 	add.w	r6, r4, #11
 800ef9e:	f000 f869 	bl	800f074 <__malloc_unlock>
 800efa2:	f026 0607 	bic.w	r6, r6, #7
 800efa6:	1d23      	adds	r3, r4, #4
 800efa8:	1af2      	subs	r2, r6, r3
 800efaa:	d0b6      	beq.n	800ef1a <_malloc_r+0x22>
 800efac:	1b9b      	subs	r3, r3, r6
 800efae:	50a3      	str	r3, [r4, r2]
 800efb0:	e7b3      	b.n	800ef1a <_malloc_r+0x22>
 800efb2:	6862      	ldr	r2, [r4, #4]
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	bf0c      	ite	eq
 800efb8:	6032      	streq	r2, [r6, #0]
 800efba:	605a      	strne	r2, [r3, #4]
 800efbc:	e7ec      	b.n	800ef98 <_malloc_r+0xa0>
 800efbe:	4623      	mov	r3, r4
 800efc0:	6864      	ldr	r4, [r4, #4]
 800efc2:	e7b2      	b.n	800ef2a <_malloc_r+0x32>
 800efc4:	4634      	mov	r4, r6
 800efc6:	6876      	ldr	r6, [r6, #4]
 800efc8:	e7b9      	b.n	800ef3e <_malloc_r+0x46>
 800efca:	230c      	movs	r3, #12
 800efcc:	603b      	str	r3, [r7, #0]
 800efce:	4638      	mov	r0, r7
 800efd0:	f000 f850 	bl	800f074 <__malloc_unlock>
 800efd4:	e7a1      	b.n	800ef1a <_malloc_r+0x22>
 800efd6:	6025      	str	r5, [r4, #0]
 800efd8:	e7de      	b.n	800ef98 <_malloc_r+0xa0>
 800efda:	bf00      	nop
 800efdc:	20006c14 	.word	0x20006c14

0800efe0 <_sbrk_r>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	4d06      	ldr	r5, [pc, #24]	; (800effc <_sbrk_r+0x1c>)
 800efe4:	2300      	movs	r3, #0
 800efe6:	4604      	mov	r4, r0
 800efe8:	4608      	mov	r0, r1
 800efea:	602b      	str	r3, [r5, #0]
 800efec:	f7f3 ff8a 	bl	8002f04 <_sbrk>
 800eff0:	1c43      	adds	r3, r0, #1
 800eff2:	d102      	bne.n	800effa <_sbrk_r+0x1a>
 800eff4:	682b      	ldr	r3, [r5, #0]
 800eff6:	b103      	cbz	r3, 800effa <_sbrk_r+0x1a>
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	bd38      	pop	{r3, r4, r5, pc}
 800effc:	20006c1c 	.word	0x20006c1c

0800f000 <siprintf>:
 800f000:	b40e      	push	{r1, r2, r3}
 800f002:	b500      	push	{lr}
 800f004:	b09c      	sub	sp, #112	; 0x70
 800f006:	ab1d      	add	r3, sp, #116	; 0x74
 800f008:	9002      	str	r0, [sp, #8]
 800f00a:	9006      	str	r0, [sp, #24]
 800f00c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f010:	4809      	ldr	r0, [pc, #36]	; (800f038 <siprintf+0x38>)
 800f012:	9107      	str	r1, [sp, #28]
 800f014:	9104      	str	r1, [sp, #16]
 800f016:	4909      	ldr	r1, [pc, #36]	; (800f03c <siprintf+0x3c>)
 800f018:	f853 2b04 	ldr.w	r2, [r3], #4
 800f01c:	9105      	str	r1, [sp, #20]
 800f01e:	6800      	ldr	r0, [r0, #0]
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	a902      	add	r1, sp, #8
 800f024:	f000 f888 	bl	800f138 <_svfiprintf_r>
 800f028:	9b02      	ldr	r3, [sp, #8]
 800f02a:	2200      	movs	r2, #0
 800f02c:	701a      	strb	r2, [r3, #0]
 800f02e:	b01c      	add	sp, #112	; 0x70
 800f030:	f85d eb04 	ldr.w	lr, [sp], #4
 800f034:	b003      	add	sp, #12
 800f036:	4770      	bx	lr
 800f038:	20000618 	.word	0x20000618
 800f03c:	ffff0208 	.word	0xffff0208

0800f040 <strncpy>:
 800f040:	b510      	push	{r4, lr}
 800f042:	3901      	subs	r1, #1
 800f044:	4603      	mov	r3, r0
 800f046:	b132      	cbz	r2, 800f056 <strncpy+0x16>
 800f048:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f04c:	f803 4b01 	strb.w	r4, [r3], #1
 800f050:	3a01      	subs	r2, #1
 800f052:	2c00      	cmp	r4, #0
 800f054:	d1f7      	bne.n	800f046 <strncpy+0x6>
 800f056:	441a      	add	r2, r3
 800f058:	2100      	movs	r1, #0
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d100      	bne.n	800f060 <strncpy+0x20>
 800f05e:	bd10      	pop	{r4, pc}
 800f060:	f803 1b01 	strb.w	r1, [r3], #1
 800f064:	e7f9      	b.n	800f05a <strncpy+0x1a>
	...

0800f068 <__malloc_lock>:
 800f068:	4801      	ldr	r0, [pc, #4]	; (800f070 <__malloc_lock+0x8>)
 800f06a:	f000 baf9 	b.w	800f660 <__retarget_lock_acquire_recursive>
 800f06e:	bf00      	nop
 800f070:	20006c20 	.word	0x20006c20

0800f074 <__malloc_unlock>:
 800f074:	4801      	ldr	r0, [pc, #4]	; (800f07c <__malloc_unlock+0x8>)
 800f076:	f000 baf4 	b.w	800f662 <__retarget_lock_release_recursive>
 800f07a:	bf00      	nop
 800f07c:	20006c20 	.word	0x20006c20

0800f080 <__ssputs_r>:
 800f080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f084:	688e      	ldr	r6, [r1, #8]
 800f086:	429e      	cmp	r6, r3
 800f088:	4682      	mov	sl, r0
 800f08a:	460c      	mov	r4, r1
 800f08c:	4690      	mov	r8, r2
 800f08e:	461f      	mov	r7, r3
 800f090:	d838      	bhi.n	800f104 <__ssputs_r+0x84>
 800f092:	898a      	ldrh	r2, [r1, #12]
 800f094:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f098:	d032      	beq.n	800f100 <__ssputs_r+0x80>
 800f09a:	6825      	ldr	r5, [r4, #0]
 800f09c:	6909      	ldr	r1, [r1, #16]
 800f09e:	eba5 0901 	sub.w	r9, r5, r1
 800f0a2:	6965      	ldr	r5, [r4, #20]
 800f0a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	444b      	add	r3, r9
 800f0b0:	106d      	asrs	r5, r5, #1
 800f0b2:	429d      	cmp	r5, r3
 800f0b4:	bf38      	it	cc
 800f0b6:	461d      	movcc	r5, r3
 800f0b8:	0553      	lsls	r3, r2, #21
 800f0ba:	d531      	bpl.n	800f120 <__ssputs_r+0xa0>
 800f0bc:	4629      	mov	r1, r5
 800f0be:	f7ff ff1b 	bl	800eef8 <_malloc_r>
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	b950      	cbnz	r0, 800f0dc <__ssputs_r+0x5c>
 800f0c6:	230c      	movs	r3, #12
 800f0c8:	f8ca 3000 	str.w	r3, [sl]
 800f0cc:	89a3      	ldrh	r3, [r4, #12]
 800f0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0d2:	81a3      	strh	r3, [r4, #12]
 800f0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0dc:	6921      	ldr	r1, [r4, #16]
 800f0de:	464a      	mov	r2, r9
 800f0e0:	f7ff fe88 	bl	800edf4 <memcpy>
 800f0e4:	89a3      	ldrh	r3, [r4, #12]
 800f0e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ee:	81a3      	strh	r3, [r4, #12]
 800f0f0:	6126      	str	r6, [r4, #16]
 800f0f2:	6165      	str	r5, [r4, #20]
 800f0f4:	444e      	add	r6, r9
 800f0f6:	eba5 0509 	sub.w	r5, r5, r9
 800f0fa:	6026      	str	r6, [r4, #0]
 800f0fc:	60a5      	str	r5, [r4, #8]
 800f0fe:	463e      	mov	r6, r7
 800f100:	42be      	cmp	r6, r7
 800f102:	d900      	bls.n	800f106 <__ssputs_r+0x86>
 800f104:	463e      	mov	r6, r7
 800f106:	6820      	ldr	r0, [r4, #0]
 800f108:	4632      	mov	r2, r6
 800f10a:	4641      	mov	r1, r8
 800f10c:	f000 faaa 	bl	800f664 <memmove>
 800f110:	68a3      	ldr	r3, [r4, #8]
 800f112:	1b9b      	subs	r3, r3, r6
 800f114:	60a3      	str	r3, [r4, #8]
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	4433      	add	r3, r6
 800f11a:	6023      	str	r3, [r4, #0]
 800f11c:	2000      	movs	r0, #0
 800f11e:	e7db      	b.n	800f0d8 <__ssputs_r+0x58>
 800f120:	462a      	mov	r2, r5
 800f122:	f000 fab9 	bl	800f698 <_realloc_r>
 800f126:	4606      	mov	r6, r0
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1e1      	bne.n	800f0f0 <__ssputs_r+0x70>
 800f12c:	6921      	ldr	r1, [r4, #16]
 800f12e:	4650      	mov	r0, sl
 800f130:	f7ff fe76 	bl	800ee20 <_free_r>
 800f134:	e7c7      	b.n	800f0c6 <__ssputs_r+0x46>
	...

0800f138 <_svfiprintf_r>:
 800f138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13c:	4698      	mov	r8, r3
 800f13e:	898b      	ldrh	r3, [r1, #12]
 800f140:	061b      	lsls	r3, r3, #24
 800f142:	b09d      	sub	sp, #116	; 0x74
 800f144:	4607      	mov	r7, r0
 800f146:	460d      	mov	r5, r1
 800f148:	4614      	mov	r4, r2
 800f14a:	d50e      	bpl.n	800f16a <_svfiprintf_r+0x32>
 800f14c:	690b      	ldr	r3, [r1, #16]
 800f14e:	b963      	cbnz	r3, 800f16a <_svfiprintf_r+0x32>
 800f150:	2140      	movs	r1, #64	; 0x40
 800f152:	f7ff fed1 	bl	800eef8 <_malloc_r>
 800f156:	6028      	str	r0, [r5, #0]
 800f158:	6128      	str	r0, [r5, #16]
 800f15a:	b920      	cbnz	r0, 800f166 <_svfiprintf_r+0x2e>
 800f15c:	230c      	movs	r3, #12
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	e0d1      	b.n	800f30a <_svfiprintf_r+0x1d2>
 800f166:	2340      	movs	r3, #64	; 0x40
 800f168:	616b      	str	r3, [r5, #20]
 800f16a:	2300      	movs	r3, #0
 800f16c:	9309      	str	r3, [sp, #36]	; 0x24
 800f16e:	2320      	movs	r3, #32
 800f170:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f174:	f8cd 800c 	str.w	r8, [sp, #12]
 800f178:	2330      	movs	r3, #48	; 0x30
 800f17a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f324 <_svfiprintf_r+0x1ec>
 800f17e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f182:	f04f 0901 	mov.w	r9, #1
 800f186:	4623      	mov	r3, r4
 800f188:	469a      	mov	sl, r3
 800f18a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f18e:	b10a      	cbz	r2, 800f194 <_svfiprintf_r+0x5c>
 800f190:	2a25      	cmp	r2, #37	; 0x25
 800f192:	d1f9      	bne.n	800f188 <_svfiprintf_r+0x50>
 800f194:	ebba 0b04 	subs.w	fp, sl, r4
 800f198:	d00b      	beq.n	800f1b2 <_svfiprintf_r+0x7a>
 800f19a:	465b      	mov	r3, fp
 800f19c:	4622      	mov	r2, r4
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	f7ff ff6d 	bl	800f080 <__ssputs_r>
 800f1a6:	3001      	adds	r0, #1
 800f1a8:	f000 80aa 	beq.w	800f300 <_svfiprintf_r+0x1c8>
 800f1ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ae:	445a      	add	r2, fp
 800f1b0:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 80a2 	beq.w	800f300 <_svfiprintf_r+0x1c8>
 800f1bc:	2300      	movs	r3, #0
 800f1be:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1c6:	f10a 0a01 	add.w	sl, sl, #1
 800f1ca:	9304      	str	r3, [sp, #16]
 800f1cc:	9307      	str	r3, [sp, #28]
 800f1ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1d2:	931a      	str	r3, [sp, #104]	; 0x68
 800f1d4:	4654      	mov	r4, sl
 800f1d6:	2205      	movs	r2, #5
 800f1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1dc:	4851      	ldr	r0, [pc, #324]	; (800f324 <_svfiprintf_r+0x1ec>)
 800f1de:	f7f1 f807 	bl	80001f0 <memchr>
 800f1e2:	9a04      	ldr	r2, [sp, #16]
 800f1e4:	b9d8      	cbnz	r0, 800f21e <_svfiprintf_r+0xe6>
 800f1e6:	06d0      	lsls	r0, r2, #27
 800f1e8:	bf44      	itt	mi
 800f1ea:	2320      	movmi	r3, #32
 800f1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f0:	0711      	lsls	r1, r2, #28
 800f1f2:	bf44      	itt	mi
 800f1f4:	232b      	movmi	r3, #43	; 0x2b
 800f1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f200:	d015      	beq.n	800f22e <_svfiprintf_r+0xf6>
 800f202:	9a07      	ldr	r2, [sp, #28]
 800f204:	4654      	mov	r4, sl
 800f206:	2000      	movs	r0, #0
 800f208:	f04f 0c0a 	mov.w	ip, #10
 800f20c:	4621      	mov	r1, r4
 800f20e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f212:	3b30      	subs	r3, #48	; 0x30
 800f214:	2b09      	cmp	r3, #9
 800f216:	d94e      	bls.n	800f2b6 <_svfiprintf_r+0x17e>
 800f218:	b1b0      	cbz	r0, 800f248 <_svfiprintf_r+0x110>
 800f21a:	9207      	str	r2, [sp, #28]
 800f21c:	e014      	b.n	800f248 <_svfiprintf_r+0x110>
 800f21e:	eba0 0308 	sub.w	r3, r0, r8
 800f222:	fa09 f303 	lsl.w	r3, r9, r3
 800f226:	4313      	orrs	r3, r2
 800f228:	9304      	str	r3, [sp, #16]
 800f22a:	46a2      	mov	sl, r4
 800f22c:	e7d2      	b.n	800f1d4 <_svfiprintf_r+0x9c>
 800f22e:	9b03      	ldr	r3, [sp, #12]
 800f230:	1d19      	adds	r1, r3, #4
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	9103      	str	r1, [sp, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	bfbb      	ittet	lt
 800f23a:	425b      	neglt	r3, r3
 800f23c:	f042 0202 	orrlt.w	r2, r2, #2
 800f240:	9307      	strge	r3, [sp, #28]
 800f242:	9307      	strlt	r3, [sp, #28]
 800f244:	bfb8      	it	lt
 800f246:	9204      	strlt	r2, [sp, #16]
 800f248:	7823      	ldrb	r3, [r4, #0]
 800f24a:	2b2e      	cmp	r3, #46	; 0x2e
 800f24c:	d10c      	bne.n	800f268 <_svfiprintf_r+0x130>
 800f24e:	7863      	ldrb	r3, [r4, #1]
 800f250:	2b2a      	cmp	r3, #42	; 0x2a
 800f252:	d135      	bne.n	800f2c0 <_svfiprintf_r+0x188>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	1d1a      	adds	r2, r3, #4
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	9203      	str	r2, [sp, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bfb8      	it	lt
 800f260:	f04f 33ff 	movlt.w	r3, #4294967295
 800f264:	3402      	adds	r4, #2
 800f266:	9305      	str	r3, [sp, #20]
 800f268:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f334 <_svfiprintf_r+0x1fc>
 800f26c:	7821      	ldrb	r1, [r4, #0]
 800f26e:	2203      	movs	r2, #3
 800f270:	4650      	mov	r0, sl
 800f272:	f7f0 ffbd 	bl	80001f0 <memchr>
 800f276:	b140      	cbz	r0, 800f28a <_svfiprintf_r+0x152>
 800f278:	2340      	movs	r3, #64	; 0x40
 800f27a:	eba0 000a 	sub.w	r0, r0, sl
 800f27e:	fa03 f000 	lsl.w	r0, r3, r0
 800f282:	9b04      	ldr	r3, [sp, #16]
 800f284:	4303      	orrs	r3, r0
 800f286:	3401      	adds	r4, #1
 800f288:	9304      	str	r3, [sp, #16]
 800f28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f28e:	4826      	ldr	r0, [pc, #152]	; (800f328 <_svfiprintf_r+0x1f0>)
 800f290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f294:	2206      	movs	r2, #6
 800f296:	f7f0 ffab 	bl	80001f0 <memchr>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d038      	beq.n	800f310 <_svfiprintf_r+0x1d8>
 800f29e:	4b23      	ldr	r3, [pc, #140]	; (800f32c <_svfiprintf_r+0x1f4>)
 800f2a0:	bb1b      	cbnz	r3, 800f2ea <_svfiprintf_r+0x1b2>
 800f2a2:	9b03      	ldr	r3, [sp, #12]
 800f2a4:	3307      	adds	r3, #7
 800f2a6:	f023 0307 	bic.w	r3, r3, #7
 800f2aa:	3308      	adds	r3, #8
 800f2ac:	9303      	str	r3, [sp, #12]
 800f2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b0:	4433      	add	r3, r6
 800f2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b4:	e767      	b.n	800f186 <_svfiprintf_r+0x4e>
 800f2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	2001      	movs	r0, #1
 800f2be:	e7a5      	b.n	800f20c <_svfiprintf_r+0xd4>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	3401      	adds	r4, #1
 800f2c4:	9305      	str	r3, [sp, #20]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	f04f 0c0a 	mov.w	ip, #10
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2d2:	3a30      	subs	r2, #48	; 0x30
 800f2d4:	2a09      	cmp	r2, #9
 800f2d6:	d903      	bls.n	800f2e0 <_svfiprintf_r+0x1a8>
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d0c5      	beq.n	800f268 <_svfiprintf_r+0x130>
 800f2dc:	9105      	str	r1, [sp, #20]
 800f2de:	e7c3      	b.n	800f268 <_svfiprintf_r+0x130>
 800f2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e7f0      	b.n	800f2cc <_svfiprintf_r+0x194>
 800f2ea:	ab03      	add	r3, sp, #12
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	462a      	mov	r2, r5
 800f2f0:	4b0f      	ldr	r3, [pc, #60]	; (800f330 <_svfiprintf_r+0x1f8>)
 800f2f2:	a904      	add	r1, sp, #16
 800f2f4:	4638      	mov	r0, r7
 800f2f6:	f3af 8000 	nop.w
 800f2fa:	1c42      	adds	r2, r0, #1
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	d1d6      	bne.n	800f2ae <_svfiprintf_r+0x176>
 800f300:	89ab      	ldrh	r3, [r5, #12]
 800f302:	065b      	lsls	r3, r3, #25
 800f304:	f53f af2c 	bmi.w	800f160 <_svfiprintf_r+0x28>
 800f308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f30a:	b01d      	add	sp, #116	; 0x74
 800f30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f310:	ab03      	add	r3, sp, #12
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	462a      	mov	r2, r5
 800f316:	4b06      	ldr	r3, [pc, #24]	; (800f330 <_svfiprintf_r+0x1f8>)
 800f318:	a904      	add	r1, sp, #16
 800f31a:	4638      	mov	r0, r7
 800f31c:	f000 f87a 	bl	800f414 <_printf_i>
 800f320:	e7eb      	b.n	800f2fa <_svfiprintf_r+0x1c2>
 800f322:	bf00      	nop
 800f324:	0800fd4c 	.word	0x0800fd4c
 800f328:	0800fd56 	.word	0x0800fd56
 800f32c:	00000000 	.word	0x00000000
 800f330:	0800f081 	.word	0x0800f081
 800f334:	0800fd52 	.word	0x0800fd52

0800f338 <_printf_common>:
 800f338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f33c:	4616      	mov	r6, r2
 800f33e:	4699      	mov	r9, r3
 800f340:	688a      	ldr	r2, [r1, #8]
 800f342:	690b      	ldr	r3, [r1, #16]
 800f344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f348:	4293      	cmp	r3, r2
 800f34a:	bfb8      	it	lt
 800f34c:	4613      	movlt	r3, r2
 800f34e:	6033      	str	r3, [r6, #0]
 800f350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f354:	4607      	mov	r7, r0
 800f356:	460c      	mov	r4, r1
 800f358:	b10a      	cbz	r2, 800f35e <_printf_common+0x26>
 800f35a:	3301      	adds	r3, #1
 800f35c:	6033      	str	r3, [r6, #0]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	0699      	lsls	r1, r3, #26
 800f362:	bf42      	ittt	mi
 800f364:	6833      	ldrmi	r3, [r6, #0]
 800f366:	3302      	addmi	r3, #2
 800f368:	6033      	strmi	r3, [r6, #0]
 800f36a:	6825      	ldr	r5, [r4, #0]
 800f36c:	f015 0506 	ands.w	r5, r5, #6
 800f370:	d106      	bne.n	800f380 <_printf_common+0x48>
 800f372:	f104 0a19 	add.w	sl, r4, #25
 800f376:	68e3      	ldr	r3, [r4, #12]
 800f378:	6832      	ldr	r2, [r6, #0]
 800f37a:	1a9b      	subs	r3, r3, r2
 800f37c:	42ab      	cmp	r3, r5
 800f37e:	dc26      	bgt.n	800f3ce <_printf_common+0x96>
 800f380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f384:	1e13      	subs	r3, r2, #0
 800f386:	6822      	ldr	r2, [r4, #0]
 800f388:	bf18      	it	ne
 800f38a:	2301      	movne	r3, #1
 800f38c:	0692      	lsls	r2, r2, #26
 800f38e:	d42b      	bmi.n	800f3e8 <_printf_common+0xb0>
 800f390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f394:	4649      	mov	r1, r9
 800f396:	4638      	mov	r0, r7
 800f398:	47c0      	blx	r8
 800f39a:	3001      	adds	r0, #1
 800f39c:	d01e      	beq.n	800f3dc <_printf_common+0xa4>
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	68e5      	ldr	r5, [r4, #12]
 800f3a2:	6832      	ldr	r2, [r6, #0]
 800f3a4:	f003 0306 	and.w	r3, r3, #6
 800f3a8:	2b04      	cmp	r3, #4
 800f3aa:	bf08      	it	eq
 800f3ac:	1aad      	subeq	r5, r5, r2
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	6922      	ldr	r2, [r4, #16]
 800f3b2:	bf0c      	ite	eq
 800f3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3b8:	2500      	movne	r5, #0
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	bfc4      	itt	gt
 800f3be:	1a9b      	subgt	r3, r3, r2
 800f3c0:	18ed      	addgt	r5, r5, r3
 800f3c2:	2600      	movs	r6, #0
 800f3c4:	341a      	adds	r4, #26
 800f3c6:	42b5      	cmp	r5, r6
 800f3c8:	d11a      	bne.n	800f400 <_printf_common+0xc8>
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	e008      	b.n	800f3e0 <_printf_common+0xa8>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	4652      	mov	r2, sl
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	47c0      	blx	r8
 800f3d8:	3001      	adds	r0, #1
 800f3da:	d103      	bne.n	800f3e4 <_printf_common+0xac>
 800f3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e4:	3501      	adds	r5, #1
 800f3e6:	e7c6      	b.n	800f376 <_printf_common+0x3e>
 800f3e8:	18e1      	adds	r1, r4, r3
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	2030      	movs	r0, #48	; 0x30
 800f3ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3f2:	4422      	add	r2, r4
 800f3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3fc:	3302      	adds	r3, #2
 800f3fe:	e7c7      	b.n	800f390 <_printf_common+0x58>
 800f400:	2301      	movs	r3, #1
 800f402:	4622      	mov	r2, r4
 800f404:	4649      	mov	r1, r9
 800f406:	4638      	mov	r0, r7
 800f408:	47c0      	blx	r8
 800f40a:	3001      	adds	r0, #1
 800f40c:	d0e6      	beq.n	800f3dc <_printf_common+0xa4>
 800f40e:	3601      	adds	r6, #1
 800f410:	e7d9      	b.n	800f3c6 <_printf_common+0x8e>
	...

0800f414 <_printf_i>:
 800f414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	7e0f      	ldrb	r7, [r1, #24]
 800f41a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f41c:	2f78      	cmp	r7, #120	; 0x78
 800f41e:	4691      	mov	r9, r2
 800f420:	4680      	mov	r8, r0
 800f422:	460c      	mov	r4, r1
 800f424:	469a      	mov	sl, r3
 800f426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f42a:	d807      	bhi.n	800f43c <_printf_i+0x28>
 800f42c:	2f62      	cmp	r7, #98	; 0x62
 800f42e:	d80a      	bhi.n	800f446 <_printf_i+0x32>
 800f430:	2f00      	cmp	r7, #0
 800f432:	f000 80d8 	beq.w	800f5e6 <_printf_i+0x1d2>
 800f436:	2f58      	cmp	r7, #88	; 0x58
 800f438:	f000 80a3 	beq.w	800f582 <_printf_i+0x16e>
 800f43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f444:	e03a      	b.n	800f4bc <_printf_i+0xa8>
 800f446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f44a:	2b15      	cmp	r3, #21
 800f44c:	d8f6      	bhi.n	800f43c <_printf_i+0x28>
 800f44e:	a101      	add	r1, pc, #4	; (adr r1, 800f454 <_printf_i+0x40>)
 800f450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f454:	0800f4ad 	.word	0x0800f4ad
 800f458:	0800f4c1 	.word	0x0800f4c1
 800f45c:	0800f43d 	.word	0x0800f43d
 800f460:	0800f43d 	.word	0x0800f43d
 800f464:	0800f43d 	.word	0x0800f43d
 800f468:	0800f43d 	.word	0x0800f43d
 800f46c:	0800f4c1 	.word	0x0800f4c1
 800f470:	0800f43d 	.word	0x0800f43d
 800f474:	0800f43d 	.word	0x0800f43d
 800f478:	0800f43d 	.word	0x0800f43d
 800f47c:	0800f43d 	.word	0x0800f43d
 800f480:	0800f5cd 	.word	0x0800f5cd
 800f484:	0800f4f1 	.word	0x0800f4f1
 800f488:	0800f5af 	.word	0x0800f5af
 800f48c:	0800f43d 	.word	0x0800f43d
 800f490:	0800f43d 	.word	0x0800f43d
 800f494:	0800f5ef 	.word	0x0800f5ef
 800f498:	0800f43d 	.word	0x0800f43d
 800f49c:	0800f4f1 	.word	0x0800f4f1
 800f4a0:	0800f43d 	.word	0x0800f43d
 800f4a4:	0800f43d 	.word	0x0800f43d
 800f4a8:	0800f5b7 	.word	0x0800f5b7
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	1d1a      	adds	r2, r3, #4
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	602a      	str	r2, [r5, #0]
 800f4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e0a3      	b.n	800f608 <_printf_i+0x1f4>
 800f4c0:	6820      	ldr	r0, [r4, #0]
 800f4c2:	6829      	ldr	r1, [r5, #0]
 800f4c4:	0606      	lsls	r6, r0, #24
 800f4c6:	f101 0304 	add.w	r3, r1, #4
 800f4ca:	d50a      	bpl.n	800f4e2 <_printf_i+0xce>
 800f4cc:	680e      	ldr	r6, [r1, #0]
 800f4ce:	602b      	str	r3, [r5, #0]
 800f4d0:	2e00      	cmp	r6, #0
 800f4d2:	da03      	bge.n	800f4dc <_printf_i+0xc8>
 800f4d4:	232d      	movs	r3, #45	; 0x2d
 800f4d6:	4276      	negs	r6, r6
 800f4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4dc:	485e      	ldr	r0, [pc, #376]	; (800f658 <_printf_i+0x244>)
 800f4de:	230a      	movs	r3, #10
 800f4e0:	e019      	b.n	800f516 <_printf_i+0x102>
 800f4e2:	680e      	ldr	r6, [r1, #0]
 800f4e4:	602b      	str	r3, [r5, #0]
 800f4e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4ea:	bf18      	it	ne
 800f4ec:	b236      	sxthne	r6, r6
 800f4ee:	e7ef      	b.n	800f4d0 <_printf_i+0xbc>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	6820      	ldr	r0, [r4, #0]
 800f4f4:	1d19      	adds	r1, r3, #4
 800f4f6:	6029      	str	r1, [r5, #0]
 800f4f8:	0601      	lsls	r1, r0, #24
 800f4fa:	d501      	bpl.n	800f500 <_printf_i+0xec>
 800f4fc:	681e      	ldr	r6, [r3, #0]
 800f4fe:	e002      	b.n	800f506 <_printf_i+0xf2>
 800f500:	0646      	lsls	r6, r0, #25
 800f502:	d5fb      	bpl.n	800f4fc <_printf_i+0xe8>
 800f504:	881e      	ldrh	r6, [r3, #0]
 800f506:	4854      	ldr	r0, [pc, #336]	; (800f658 <_printf_i+0x244>)
 800f508:	2f6f      	cmp	r7, #111	; 0x6f
 800f50a:	bf0c      	ite	eq
 800f50c:	2308      	moveq	r3, #8
 800f50e:	230a      	movne	r3, #10
 800f510:	2100      	movs	r1, #0
 800f512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f516:	6865      	ldr	r5, [r4, #4]
 800f518:	60a5      	str	r5, [r4, #8]
 800f51a:	2d00      	cmp	r5, #0
 800f51c:	bfa2      	ittt	ge
 800f51e:	6821      	ldrge	r1, [r4, #0]
 800f520:	f021 0104 	bicge.w	r1, r1, #4
 800f524:	6021      	strge	r1, [r4, #0]
 800f526:	b90e      	cbnz	r6, 800f52c <_printf_i+0x118>
 800f528:	2d00      	cmp	r5, #0
 800f52a:	d04d      	beq.n	800f5c8 <_printf_i+0x1b4>
 800f52c:	4615      	mov	r5, r2
 800f52e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f532:	fb03 6711 	mls	r7, r3, r1, r6
 800f536:	5dc7      	ldrb	r7, [r0, r7]
 800f538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f53c:	4637      	mov	r7, r6
 800f53e:	42bb      	cmp	r3, r7
 800f540:	460e      	mov	r6, r1
 800f542:	d9f4      	bls.n	800f52e <_printf_i+0x11a>
 800f544:	2b08      	cmp	r3, #8
 800f546:	d10b      	bne.n	800f560 <_printf_i+0x14c>
 800f548:	6823      	ldr	r3, [r4, #0]
 800f54a:	07de      	lsls	r6, r3, #31
 800f54c:	d508      	bpl.n	800f560 <_printf_i+0x14c>
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	6861      	ldr	r1, [r4, #4]
 800f552:	4299      	cmp	r1, r3
 800f554:	bfde      	ittt	le
 800f556:	2330      	movle	r3, #48	; 0x30
 800f558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f55c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f560:	1b52      	subs	r2, r2, r5
 800f562:	6122      	str	r2, [r4, #16]
 800f564:	f8cd a000 	str.w	sl, [sp]
 800f568:	464b      	mov	r3, r9
 800f56a:	aa03      	add	r2, sp, #12
 800f56c:	4621      	mov	r1, r4
 800f56e:	4640      	mov	r0, r8
 800f570:	f7ff fee2 	bl	800f338 <_printf_common>
 800f574:	3001      	adds	r0, #1
 800f576:	d14c      	bne.n	800f612 <_printf_i+0x1fe>
 800f578:	f04f 30ff 	mov.w	r0, #4294967295
 800f57c:	b004      	add	sp, #16
 800f57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f582:	4835      	ldr	r0, [pc, #212]	; (800f658 <_printf_i+0x244>)
 800f584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f588:	6829      	ldr	r1, [r5, #0]
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f590:	6029      	str	r1, [r5, #0]
 800f592:	061d      	lsls	r5, r3, #24
 800f594:	d514      	bpl.n	800f5c0 <_printf_i+0x1ac>
 800f596:	07df      	lsls	r7, r3, #31
 800f598:	bf44      	itt	mi
 800f59a:	f043 0320 	orrmi.w	r3, r3, #32
 800f59e:	6023      	strmi	r3, [r4, #0]
 800f5a0:	b91e      	cbnz	r6, 800f5aa <_printf_i+0x196>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	f023 0320 	bic.w	r3, r3, #32
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	2310      	movs	r3, #16
 800f5ac:	e7b0      	b.n	800f510 <_printf_i+0xfc>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f043 0320 	orr.w	r3, r3, #32
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	2378      	movs	r3, #120	; 0x78
 800f5b8:	4828      	ldr	r0, [pc, #160]	; (800f65c <_printf_i+0x248>)
 800f5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5be:	e7e3      	b.n	800f588 <_printf_i+0x174>
 800f5c0:	0659      	lsls	r1, r3, #25
 800f5c2:	bf48      	it	mi
 800f5c4:	b2b6      	uxthmi	r6, r6
 800f5c6:	e7e6      	b.n	800f596 <_printf_i+0x182>
 800f5c8:	4615      	mov	r5, r2
 800f5ca:	e7bb      	b.n	800f544 <_printf_i+0x130>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	6826      	ldr	r6, [r4, #0]
 800f5d0:	6961      	ldr	r1, [r4, #20]
 800f5d2:	1d18      	adds	r0, r3, #4
 800f5d4:	6028      	str	r0, [r5, #0]
 800f5d6:	0635      	lsls	r5, r6, #24
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	d501      	bpl.n	800f5e0 <_printf_i+0x1cc>
 800f5dc:	6019      	str	r1, [r3, #0]
 800f5de:	e002      	b.n	800f5e6 <_printf_i+0x1d2>
 800f5e0:	0670      	lsls	r0, r6, #25
 800f5e2:	d5fb      	bpl.n	800f5dc <_printf_i+0x1c8>
 800f5e4:	8019      	strh	r1, [r3, #0]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	4615      	mov	r5, r2
 800f5ec:	e7ba      	b.n	800f564 <_printf_i+0x150>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	1d1a      	adds	r2, r3, #4
 800f5f2:	602a      	str	r2, [r5, #0]
 800f5f4:	681d      	ldr	r5, [r3, #0]
 800f5f6:	6862      	ldr	r2, [r4, #4]
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7f0 fdf8 	bl	80001f0 <memchr>
 800f600:	b108      	cbz	r0, 800f606 <_printf_i+0x1f2>
 800f602:	1b40      	subs	r0, r0, r5
 800f604:	6060      	str	r0, [r4, #4]
 800f606:	6863      	ldr	r3, [r4, #4]
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	2300      	movs	r3, #0
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	e7a8      	b.n	800f564 <_printf_i+0x150>
 800f612:	6923      	ldr	r3, [r4, #16]
 800f614:	462a      	mov	r2, r5
 800f616:	4649      	mov	r1, r9
 800f618:	4640      	mov	r0, r8
 800f61a:	47d0      	blx	sl
 800f61c:	3001      	adds	r0, #1
 800f61e:	d0ab      	beq.n	800f578 <_printf_i+0x164>
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	079b      	lsls	r3, r3, #30
 800f624:	d413      	bmi.n	800f64e <_printf_i+0x23a>
 800f626:	68e0      	ldr	r0, [r4, #12]
 800f628:	9b03      	ldr	r3, [sp, #12]
 800f62a:	4298      	cmp	r0, r3
 800f62c:	bfb8      	it	lt
 800f62e:	4618      	movlt	r0, r3
 800f630:	e7a4      	b.n	800f57c <_printf_i+0x168>
 800f632:	2301      	movs	r3, #1
 800f634:	4632      	mov	r2, r6
 800f636:	4649      	mov	r1, r9
 800f638:	4640      	mov	r0, r8
 800f63a:	47d0      	blx	sl
 800f63c:	3001      	adds	r0, #1
 800f63e:	d09b      	beq.n	800f578 <_printf_i+0x164>
 800f640:	3501      	adds	r5, #1
 800f642:	68e3      	ldr	r3, [r4, #12]
 800f644:	9903      	ldr	r1, [sp, #12]
 800f646:	1a5b      	subs	r3, r3, r1
 800f648:	42ab      	cmp	r3, r5
 800f64a:	dcf2      	bgt.n	800f632 <_printf_i+0x21e>
 800f64c:	e7eb      	b.n	800f626 <_printf_i+0x212>
 800f64e:	2500      	movs	r5, #0
 800f650:	f104 0619 	add.w	r6, r4, #25
 800f654:	e7f5      	b.n	800f642 <_printf_i+0x22e>
 800f656:	bf00      	nop
 800f658:	0800fd5d 	.word	0x0800fd5d
 800f65c:	0800fd6e 	.word	0x0800fd6e

0800f660 <__retarget_lock_acquire_recursive>:
 800f660:	4770      	bx	lr

0800f662 <__retarget_lock_release_recursive>:
 800f662:	4770      	bx	lr

0800f664 <memmove>:
 800f664:	4288      	cmp	r0, r1
 800f666:	b510      	push	{r4, lr}
 800f668:	eb01 0402 	add.w	r4, r1, r2
 800f66c:	d902      	bls.n	800f674 <memmove+0x10>
 800f66e:	4284      	cmp	r4, r0
 800f670:	4623      	mov	r3, r4
 800f672:	d807      	bhi.n	800f684 <memmove+0x20>
 800f674:	1e43      	subs	r3, r0, #1
 800f676:	42a1      	cmp	r1, r4
 800f678:	d008      	beq.n	800f68c <memmove+0x28>
 800f67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f67e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f682:	e7f8      	b.n	800f676 <memmove+0x12>
 800f684:	4402      	add	r2, r0
 800f686:	4601      	mov	r1, r0
 800f688:	428a      	cmp	r2, r1
 800f68a:	d100      	bne.n	800f68e <memmove+0x2a>
 800f68c:	bd10      	pop	{r4, pc}
 800f68e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f696:	e7f7      	b.n	800f688 <memmove+0x24>

0800f698 <_realloc_r>:
 800f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69c:	4680      	mov	r8, r0
 800f69e:	4614      	mov	r4, r2
 800f6a0:	460e      	mov	r6, r1
 800f6a2:	b921      	cbnz	r1, 800f6ae <_realloc_r+0x16>
 800f6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a8:	4611      	mov	r1, r2
 800f6aa:	f7ff bc25 	b.w	800eef8 <_malloc_r>
 800f6ae:	b92a      	cbnz	r2, 800f6bc <_realloc_r+0x24>
 800f6b0:	f7ff fbb6 	bl	800ee20 <_free_r>
 800f6b4:	4625      	mov	r5, r4
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6bc:	f000 f81b 	bl	800f6f6 <_malloc_usable_size_r>
 800f6c0:	4284      	cmp	r4, r0
 800f6c2:	4607      	mov	r7, r0
 800f6c4:	d802      	bhi.n	800f6cc <_realloc_r+0x34>
 800f6c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6ca:	d812      	bhi.n	800f6f2 <_realloc_r+0x5a>
 800f6cc:	4621      	mov	r1, r4
 800f6ce:	4640      	mov	r0, r8
 800f6d0:	f7ff fc12 	bl	800eef8 <_malloc_r>
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d0ed      	beq.n	800f6b6 <_realloc_r+0x1e>
 800f6da:	42bc      	cmp	r4, r7
 800f6dc:	4622      	mov	r2, r4
 800f6de:	4631      	mov	r1, r6
 800f6e0:	bf28      	it	cs
 800f6e2:	463a      	movcs	r2, r7
 800f6e4:	f7ff fb86 	bl	800edf4 <memcpy>
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	f7ff fb98 	bl	800ee20 <_free_r>
 800f6f0:	e7e1      	b.n	800f6b6 <_realloc_r+0x1e>
 800f6f2:	4635      	mov	r5, r6
 800f6f4:	e7df      	b.n	800f6b6 <_realloc_r+0x1e>

0800f6f6 <_malloc_usable_size_r>:
 800f6f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6fa:	1f18      	subs	r0, r3, #4
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	bfbc      	itt	lt
 800f700:	580b      	ldrlt	r3, [r1, r0]
 800f702:	18c0      	addlt	r0, r0, r3
 800f704:	4770      	bx	lr
	...

0800f708 <_init>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	bf00      	nop
 800f70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f70e:	bc08      	pop	{r3}
 800f710:	469e      	mov	lr, r3
 800f712:	4770      	bx	lr

0800f714 <_fini>:
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	bf00      	nop
 800f718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f71a:	bc08      	pop	{r3}
 800f71c:	469e      	mov	lr, r3
 800f71e:	4770      	bx	lr
