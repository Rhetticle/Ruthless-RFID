
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  0801087c  0801087c  0002087c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801124c  0801124c  00030700  2**0
                  CONTENTS
  4 .ARM          00000008  0801124c  0801124c  0002124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011254  08011254  00030700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011254  08011254  00021254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011258  08011258  00021258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000700  20000000  0801125c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b68  20000700  0801195c  00030700  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009268  0801195c  00039268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028874  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a3d  00000000  00000000  00058fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002170  00000000  00000000  0005e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f30  00000000  00000000  00060b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8fa  00000000  00000000  00062a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027b31  00000000  00000000  00080382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f105  00000000  00000000  000a7eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146fb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000920c  00000000  00000000  00147008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000700 	.word	0x20000700
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010864 	.word	0x08010864

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000704 	.word	0x20000704
 80001dc:	08010864 	.word	0x08010864

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af04      	add	r7, sp, #16
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2150      	movs	r1, #80	; 0x50
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MFRC_REGW+0x44>)
 8000bcc:	f003 feec 	bl	80049a8 <HAL_I2C_Mem_Write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 8000bd6:	23bb      	movs	r3, #187	; 0xbb
 8000bd8:	e000      	b.n	8000bdc <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 8000bda:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000071c 	.word	0x2000071c

08000be8 <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2150      	movs	r1, #80	; 0x50
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MFRC_REGR+0x3c>)
 8000c0a:	f003 ffc7 	bl	8004b9c <HAL_I2C_Mem_Read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000c14:	23bb      	movs	r3, #187	; 0xbb
 8000c16:	e000      	b.n	8000c1a <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 8000c18:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000071c 	.word	0x2000071c

08000c28 <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e018      	b.n	8000c6c <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	9202      	str	r2, [sp, #8]
 8000c44:	2201      	movs	r2, #1
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2209      	movs	r2, #9
 8000c4e:	2150      	movs	r1, #80	; 0x50
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MFRC_FIFOW+0x58>)
 8000c52:	f003 fea9 	bl	80049a8 <HAL_I2C_Mem_Write>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000c5c:	23bb      	movs	r3, #187	; 0xbb
 8000c5e:	e00a      	b.n	8000c76 <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f003 fa89 	bl	8004178 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbe2      	blt.n	8000c3a <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000c74:	23cc      	movs	r3, #204	; 0xcc
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000071c 	.word	0x2000071c

08000c84 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e018      	b.n	8000cc8 <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2264      	movs	r2, #100	; 0x64
 8000c9e:	9202      	str	r2, [sp, #8]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2209      	movs	r2, #9
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MFRC_FIFOR+0x58>)
 8000cae:	f003 ff75 	bl	8004b9c <HAL_I2C_Mem_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 8000cb8:	23bb      	movs	r3, #187	; 0xbb
 8000cba:	e00a      	b.n	8000cd2 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f003 fa5b 	bl	8004178 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbe2      	blt.n	8000c96 <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 8000cd0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000071c 	.word	0x2000071c

08000ce0 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2014      	movs	r0, #20
 8000cec:	f7ff ff7c 	bl	8000be8 <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d007      	beq.n	8000d0a <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f043 0303 	orr.w	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	2014      	movs	r0, #20
 8000d06:	f7ff ff4b 	bl	8000ba0 <MFRC_REGW>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000d22:	f107 020f 	add.w	r2, r7, #15
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff5c 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	b25a      	sxtb	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff2a 	bl	8000ba0 <MFRC_REGW>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f7ff ffd9 	bl	8000d12 <ClearBitMask>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff13 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff ff0f 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff ff0b 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff4a 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000d94:	2103      	movs	r1, #3
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ff02 	bl	8000ba0 <MFRC_REGW>
	HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f003 f9eb 	bl	8004178 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000da2:	f107 0317 	add.w	r3, r7, #23
 8000da6:	4619      	mov	r1, r3
 8000da8:	2005      	movs	r0, #5
 8000daa:	f7ff ff1d 	bl	8000be8 <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 8000db8:	23ee      	movs	r3, #238	; 0xee
 8000dba:	e00e      	b.n	8000dda <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff feee 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f7ff ff0e 	bl	8000be8 <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2021      	movs	r0, #33	; 0x21
 8000dd4:	f7ff ff08 	bl	8000be8 <MFRC_REGR>
	return(PCD_OK);
 8000dd8:	23cc      	movs	r3, #204	; 0xcc

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 8000de8:	2201      	movs	r2, #1
 8000dea:	2120      	movs	r1, #32
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MFRC_INIT+0x60>)
 8000dee:	f003 fc65 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MFRC_INIT+0x60>)
 8000df8:	f003 fc60 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f003 f9bb 	bl	8004178 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MFRC_INIT+0x60>)
 8000e08:	f003 fc58 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f003 f9b3 	bl	8004178 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f7ff fec3 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f7ff febf 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000e22:	2126      	movs	r1, #38	; 0x26
 8000e24:	2024      	movs	r0, #36	; 0x24
 8000e26:	f7ff febb 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f7ff feb7 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000e32:	213d      	movs	r1, #61	; 0x3d
 8000e34:	2011      	movs	r0, #17
 8000e36:	f7ff feb3 	bl	8000ba0 <MFRC_REGW>
	MFRC_ANTON();
 8000e3a:	f7ff ff51 	bl	8000ce0 <MFRC_ANTON>
	return(PCD_OK);
 8000e3e:	23cc      	movs	r3, #204	; 0xcc



}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020400 	.word	0x40020400

08000e48 <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000e64:	2100      	movs	r1, #0
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fe9a 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000e6c:	217f      	movs	r1, #127	; 0x7f
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff fe96 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff fe92 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff fed1 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 8000e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f7ff fe87 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000e92:	210c      	movs	r1, #12
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fe83 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 8000e9a:	f107 0316 	add.w	r3, r7, #22
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200d      	movs	r0, #13
 8000ea2:	f7ff fea1 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 8000ea6:	7dbb      	ldrb	r3, [r7, #22]
 8000ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	200d      	movs	r0, #13
 8000eb2:	f7ff fe75 	bl	8000ba0 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 8000eb6:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f003 f95d 	bl	8004178 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 8000ebe:	7abb      	ldrb	r3, [r7, #10]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fede 	bl	8000c84 <MFRC_FIFOR>


	return(PCD_OK);
 8000ec8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af02      	add	r7, sp, #8
 8000ed8:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000eda:	2352      	movs	r3, #82	; 0x52
 8000edc:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	f7ff ff16 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000ee6:	f107 000f 	add.w	r0, r7, #15
 8000eea:	2307      	movs	r3, #7
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f7ff ffa8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2bcc      	cmp	r3, #204	; 0xcc
 8000efc:	d001      	beq.n	8000f02 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 8000efe:	23aa      	movs	r3, #170	; 0xaa
 8000f00:	e000      	b.n	8000f04 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000f02:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000f12:	2350      	movs	r3, #80	; 0x50
 8000f14:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000f16:	f107 0208 	add.w	r2, r7, #8
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff1f 	bl	8000d64 <CALC_CRC>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2bcc      	cmp	r3, #204	; 0xcc
 8000f2a:	d001      	beq.n	8000f30 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000f2c:	23ee      	movs	r3, #238	; 0xee
 8000f2e:	e013      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	3302      	adds	r3, #2
 8000f36:	893a      	ldrh	r2, [r7, #8]
 8000f38:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	f107 000c 	add.w	r0, r7, #12
 8000f40:	2300      	movs	r3, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2104      	movs	r1, #4
 8000f48:	f7ff ff7e 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2bcc      	cmp	r3, #204	; 0xcc
 8000f50:	d001      	beq.n	8000f56 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000f52:	23aa      	movs	r3, #170	; 0xaa
 8000f54:	e000      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000f56:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000f68:	f242 0393 	movw	r3, #8339	; 0x2093
 8000f6c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	200e      	movs	r0, #14
 8000f72:	f7ff fece 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000f76:	f107 000c 	add.w	r0, r7, #12
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2305      	movs	r3, #5
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2102      	movs	r1, #2
 8000f84:	f7ff ff60 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2bcc      	cmp	r3, #204	; 0xcc
 8000f8c:	d001      	beq.n	8000f92 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000f8e:	23aa      	movs	r3, #170	; 0xaa
 8000f90:	e000      	b.n	8000f94 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000f92:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000fa6:	f247 0393 	movw	r3, #28819	; 0x7093
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	3302      	adds	r3, #2
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00e ffb7 	bl	800ff34 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2107      	movs	r1, #7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fec7 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3307      	adds	r3, #7
 8000fdc:	893a      	ldrh	r2, [r7, #8]
 8000fde:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2303      	movs	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	2109      	movs	r1, #9
 8000fee:	f7ff ff2b 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2bcc      	cmp	r3, #204	; 0xcc
 8000ff6:	d001      	beq.n	8000ffc <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000ff8:	23aa      	movs	r3, #170	; 0xaa
 8000ffa:	e000      	b.n	8000ffe <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000ffc:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af02      	add	r7, sp, #8
 800100c:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 800100e:	f242 0395 	movw	r3, #8341	; 0x2095
 8001012:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	200e      	movs	r0, #14
 8001018:	f7ff fe7b 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2305      	movs	r3, #5
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	2102      	movs	r1, #2
 800102a:	f7ff ff0d 	bl	8000e48 <MFRC_TRANSCEIVE>
 800102e:	4603      	mov	r3, r0
 8001030:	2bcc      	cmp	r3, #204	; 0xcc
 8001032:	d001      	beq.n	8001038 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8001034:	23aa      	movs	r3, #170	; 0xaa
 8001036:	e000      	b.n	800103a <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8001038:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8001042:	b580      	push	{r7, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	af02      	add	r7, sp, #8
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 800104c:	f247 0395 	movw	r3, #28821	; 0x7095
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	3302      	adds	r3, #2
 8001062:	2205      	movs	r2, #5
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f00e ff64 	bl	800ff34 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2107      	movs	r1, #7
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe74 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	3307      	adds	r3, #7
 8001082:	893a      	ldrh	r2, [r7, #8]
 8001084:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	2300      	movs	r3, #0
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2303      	movs	r3, #3
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	2109      	movs	r1, #9
 8001094:	f7ff fed8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001098:	4603      	mov	r3, r0
 800109a:	2bcc      	cmp	r3, #204	; 0xcc
 800109c:	d001      	beq.n	80010a2 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 800109e:	23aa      	movs	r3, #170	; 0xaa
 80010a0:	e000      	b.n	80010a4 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 80010a2:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 80010b2:	f000 f839 	bl	8001128 <PICC_CHECK>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2bcc      	cmp	r3, #204	; 0xcc
 80010ba:	d001      	beq.n	80010c0 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 80010bc:	23aa      	movs	r3, #170	; 0xaa
 80010be:	e02f      	b.n	8001120 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff05 	bl	8000ed2 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff47 	bl	8000f60 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 80010d2:	7e3b      	ldrb	r3, [r7, #24]
 80010d4:	2b88      	cmp	r3, #136	; 0x88
 80010d6:	d001      	beq.n	80010dc <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 80010d8:	23aa      	movs	r3, #170	; 0xaa
 80010da:	e021      	b.n	8001120 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f003 f84b 	bl	8004178 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 80010e2:	f107 0214 	add.w	r2, r7, #20
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff55 	bl	8000f9c <MFRC_SEL1>
	  HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f003 f840 	bl	8004178 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff82 	bl	8001006 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f003 f838 	bl	8004178 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff95 	bl	8001042 <MFRC_SEL2>
	  HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f003 f82d 	bl	8004178 <HAL_Delay>
	  return(PCD_OK);
 800111e:	23cc      	movs	r3, #204	; 0xcc
}
 8001120:	4618      	mov	r0, r3
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fece 	bl	8000ed2 <MFRC_WUPA>
 8001136:	4603      	mov	r3, r0
 8001138:	2bcc      	cmp	r3, #204	; 0xcc
 800113a:	d001      	beq.n	8001140 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 800113c:	23aa      	movs	r3, #170	; 0xaa
 800113e:	e00a      	b.n	8001156 <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	2b44      	cmp	r3, #68	; 0x44
 8001144:	d102      	bne.n	800114c <PICC_CHECK+0x24>
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 800114c:	23aa      	movs	r3, #170	; 0xaa
 800114e:	e002      	b.n	8001156 <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8001150:	f7ff fedc 	bl	8000f0c <MFRC_HALTA>
			return(PCD_OK);
 8001154:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af02      	add	r7, sp, #8
 8001164:	4603      	mov	r3, r0
 8001166:	6039      	str	r1, [r7, #0]
 8001168:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2330      	movs	r3, #48	; 0x30
 8001170:	733b      	strb	r3, [r7, #12]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdef 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	3302      	adds	r3, #2
 800118c:	893a      	ldrh	r2, [r7, #8]
 800118e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8001190:	f107 000c 	add.w	r0, r7, #12
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2310      	movs	r3, #16
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	2104      	movs	r1, #4
 800119e:	f7ff fe53 	bl	8000e48 <MFRC_TRANSCEIVE>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2bcc      	cmp	r3, #204	; 0xcc
 80011a6:	d001      	beq.n	80011ac <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 80011a8:	23aa      	movs	r3, #170	; 0xaa
 80011aa:	e000      	b.n	80011ae <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 80011ac:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b088      	sub	sp, #32
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	23a2      	movs	r3, #162	; 0xa2
 80011ce:	743b      	strb	r3, [r7, #16]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d801      	bhi.n	80011de <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 80011da:	2302      	movs	r3, #2
 80011dc:	e022      	b.n	8001224 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	3302      	adds	r3, #2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdb5 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	3306      	adds	r3, #6
 8001200:	89ba      	ldrh	r2, [r7, #12]
 8001202:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8001204:	f107 020f 	add.w	r2, r7, #15
 8001208:	f107 0010 	add.w	r0, r7, #16
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2108      	movs	r1, #8
 8001214:	f7ff fe18 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001218:	4603      	mov	r3, r0
 800121a:	2bcc      	cmp	r3, #204	; 0xcc
 800121c:	d001      	beq.n	8001222 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 800121e:	23aa      	movs	r3, #170	; 0xaa
 8001220:	e000      	b.n	8001224 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8001222:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff8f 	bl	800115e <UL_READ>
 8001240:	4603      	mov	r3, r0
 8001242:	2bcc      	cmp	r3, #204	; 0xcc
 8001244:	d001      	beq.n	800124a <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8001246:	23aa      	movs	r3, #170	; 0xaa
 8001248:	e007      	b.n	800125a <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2207      	movs	r2, #7
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00e fe6e 	bl	800ff34 <memcpy>
	return PCD_OK;
 8001258:	23cc      	movs	r3, #204	; 0xcc
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e010      	b.n	8001292 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff71 	bl	800115e <UL_READ>
 800127c:	4603      	mov	r3, r0
 800127e:	2bcc      	cmp	r3, #204	; 0xcc
 8001280:	d001      	beq.n	8001286 <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8001282:	23aa      	movs	r3, #170	; 0xaa
 8001284:	e009      	b.n	800129a <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3310      	adds	r3, #16
 800128a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3304      	adds	r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b0e      	cmp	r3, #14
 8001296:	ddeb      	ble.n	8001270 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8001298:	23cc      	movs	r3, #204	; 0xcc
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <UL_readcard>:
 * !!Name of card is set by user after being read!!
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <UL_readcard+0x5c>)
 80012b0:	60da      	str	r2, [r3, #12]
	result->uidsize = UL_UIDSIZE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2207      	movs	r2, #7
 80012b6:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 80012c4:	f7ff fef2 	bl	80010ac <PICC_Select>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2bcc      	cmp	r3, #204	; 0xcc
 80012cc:	d001      	beq.n	80012d2 <UL_readcard+0x2e>
		return PCD_NO_PICC;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e012      	b.n	80012f8 <UL_readcard+0x54>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffa8 	bl	800122c <UL_getuid>
 80012dc:	4603      	mov	r3, r0
 80012de:	2bcc      	cmp	r3, #204	; 0xcc
 80012e0:	d107      	bne.n	80012f2 <UL_readcard+0x4e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffbb 	bl	8001262 <UL_getalldata>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2bcc      	cmp	r3, #204	; 0xcc
 80012f0:	d001      	beq.n	80012f6 <UL_readcard+0x52>
		return PCD_COMM_ERR;
 80012f2:	23aa      	movs	r3, #170	; 0xaa
 80012f4:	e000      	b.n	80012f8 <UL_readcard+0x54>
	}
	return PCD_OK;
 80012f6:	23cc      	movs	r3, #204	; 0xcc
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	080108dc 	.word	0x080108dc

08001304 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 800130c:	2030      	movs	r0, #48	; 0x30
 800130e:	f00e fe01 	bl	800ff14 <malloc>
 8001312:	4603      	mov	r3, r0
 8001314:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	3310      	adds	r3, #16
 800131c:	2230      	movs	r2, #48	; 0x30
 800131e:	4619      	mov	r1, r3
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f00e fe07 	bl	800ff34 <memcpy>

	if (PICC_Select() != PCD_OK) {
 8001326:	f7ff fec1 	bl	80010ac <PICC_Select>
 800132a:	4603      	mov	r3, r0
 800132c:	2bcc      	cmp	r3, #204	; 0xcc
 800132e:	d004      	beq.n	800133a <UL_writecard+0x36>
		free(data_to_write);
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f00e fdf7 	bl	800ff24 <free>
		return PCD_NO_PICC;
 8001336:	2301      	movs	r3, #1
 8001338:	e020      	b.n	800137c <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 800133a:	2304      	movs	r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e016      	b.n	800136e <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3b04      	subs	r3, #4
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4619      	mov	r1, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	440b      	add	r3, r1
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff ff2f 	bl	80011b6 <UL_WRITE>
 8001358:	4603      	mov	r3, r0
 800135a:	2bcc      	cmp	r3, #204	; 0xcc
 800135c:	d004      	beq.n	8001368 <UL_writecard+0x64>
			free(data_to_write);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f00e fde0 	bl	800ff24 <free>
			return PCD_COMM_ERR;
 8001364:	23aa      	movs	r3, #170	; 0xaa
 8001366:	e009      	b.n	800137c <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	dde5      	ble.n	8001340 <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f00e fdd5 	bl	800ff24 <free>
	return PCD_OK;
 800137a:	23cc      	movs	r3, #204	; 0xcc
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	3301      	adds	r3, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f00e fdbc 	bl	800ff14 <malloc>
 800139c:	4603      	mov	r3, r0
 800139e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e023      	b.n	80013ee <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d80d      	bhi.n	80013ce <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1898      	adds	r0, r3, r2
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4912      	ldr	r1, [pc, #72]	; (8001410 <uid_tostring+0x8c>)
 80013c8:	f00e fec2 	bl	8010150 <siprintf>
 80013cc:	e00c      	b.n	80013e8 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	461a      	mov	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1898      	adds	r0, r3, r2
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	490c      	ldr	r1, [pc, #48]	; (8001414 <uid_tostring+0x90>)
 80013e4:	f00e feb4 	bl	8010150 <siprintf>
	for (int i = 0; i < size; i++) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3301      	adds	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dbd7      	blt.n	80013a6 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	461a      	mov	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
	return result;
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	080108f0 	.word	0x080108f0
 8001414:	080108f4 	.word	0x080108f4

08001418 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 8001420:	201c      	movs	r0, #28
 8001422:	f00e fd77 	bl	800ff14 <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 800142a:	2040      	movs	r0, #64	; 0x40
 800142c:	f00e fd72 	bl	800ff14 <malloc>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8001438:	2007      	movs	r0, #7
 800143a:	f00e fd6b 	bl	800ff14 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f7ff ff2c 	bl	80012a4 <UL_readcard>
 800144c:	4603      	mov	r3, r0
 800144e:	2bcc      	cmp	r3, #204	; 0xcc
 8001450:	d001      	beq.n	8001456 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 8001452:	23aa      	movs	r3, #170	; 0xaa
 8001454:	e031      	b.n	80014ba <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e01d      	b.n	8001498 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6959      	ldr	r1, [r3, #20]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	440b      	add	r3, r1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d00e      	beq.n	8001492 <UL_verify+0x7a>
			free(read->contents);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	4618      	mov	r0, r3
 800147a:	f00e fd53 	bl	800ff24 <free>
			free(read->uid);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f00e fd4e 	bl	800ff24 <free>
			free(read);
 8001488:	68b8      	ldr	r0, [r7, #8]
 800148a:	f00e fd4b 	bl	800ff24 <free>
			return PCD_VERIFY_ERR;
 800148e:	2303      	movs	r3, #3
 8001490:	e013      	b.n	80014ba <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3301      	adds	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b3f      	cmp	r3, #63	; 0x3f
 800149c:	ddde      	ble.n	800145c <UL_verify+0x44>
		}
	}
	free(read->contents);
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00e fd3e 	bl	800ff24 <free>
	free(read->uid);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00e fd39 	bl	800ff24 <free>
	free(read);
 80014b2:	68b8      	ldr	r0, [r7, #8]
 80014b4:	f00e fd36 	bl	800ff24 <free>
	return PCD_OK;
 80014b8:	23cc      	movs	r3, #204	; 0xcc
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 80014c2:	b580      	push	{r7, lr}
 80014c4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80014c8:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 80014ca:	463b      	mov	r3, r7
 80014cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00e fd3c 	bl	800ff50 <memset>
	OLED_FLUSH(zeros);
 80014d8:	463b      	mov	r3, r7
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f87c 	bl	80015d8 <OLED_FLUSH>

}
 80014e0:	bf00      	nop
 80014e2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2110      	movs	r1, #16
 80014fe:	4815      	ldr	r0, [pc, #84]	; (8001554 <OLED_cmd+0x68>)
 8001500:	f003 f8dc 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2102      	movs	r1, #2
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <OLED_cmd+0x6c>)
 800150a:	f003 f8d7 	bl	80046bc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 800150e:	f107 010f 	add.w	r1, r7, #15
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	2201      	movs	r2, #1
 8001518:	4810      	ldr	r0, [pc, #64]	; (800155c <OLED_cmd+0x70>)
 800151a:	f006 f87a 	bl	8007612 <HAL_SPI_Transmit>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <OLED_cmd+0x68>)
 800152a:	f003 f8c7 	bl	80046bc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f002 fe22 	bl	8004178 <HAL_Delay>
		return(HAL_ERROR);
 8001534:	2301      	movs	r3, #1
 8001536:	e008      	b.n	800154a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2110      	movs	r1, #16
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <OLED_cmd+0x68>)
 800153e:	f003 f8bd 	bl	80046bc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f002 fe18 	bl	8004178 <HAL_Delay>
		return(HAL_OK);
 8001548:	2300      	movs	r3, #0
	}

}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	20000770 	.word	0x20000770

08001560 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2110      	movs	r1, #16
 8001570:	4816      	ldr	r0, [pc, #88]	; (80015cc <OLED_data+0x6c>)
 8001572:	f003 f8a3 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8001576:	2201      	movs	r2, #1
 8001578:	2102      	movs	r1, #2
 800157a:	4815      	ldr	r0, [pc, #84]	; (80015d0 <OLED_data+0x70>)
 800157c:	f003 f89e 	bl	80046bc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	b29a      	uxth	r2, r3
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <OLED_data+0x74>)
 800158c:	f006 f841 	bl	8007612 <HAL_SPI_Transmit>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2102      	movs	r1, #2
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <OLED_data+0x70>)
 800159c:	f003 f88e 	bl	80046bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2110      	movs	r1, #16
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <OLED_data+0x6c>)
 80015a6:	f003 f889 	bl	80046bc <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00a      	b.n	80015c4 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2102      	movs	r1, #2
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <OLED_data+0x70>)
 80015b4:	f003 f882 	bl	80046bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2110      	movs	r1, #16
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <OLED_data+0x6c>)
 80015be:	f003 f87d 	bl	80046bc <HAL_GPIO_WritePin>
		return(HAL_OK);
 80015c2:	2300      	movs	r3, #0
	}



}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	20000770 	.word	0x20000770

080015d8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e023      	b.n	800162e <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	3b50      	subs	r3, #80	; 0x50
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff7c 	bl	80014ec <OLED_cmd>
		OLED_cmd(LOWER_COL);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff ff79 	bl	80014ec <OLED_cmd>
		OLED_cmd(UPPER_COL);
 80015fa:	2010      	movs	r0, #16
 80015fc:	f7ff ff76 	bl	80014ec <OLED_cmd>
		for(int i=0;i<128;i++){
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e00d      	b.n	8001622 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	01da      	lsls	r2, r3, #7
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffa2 	bl	8001560 <OLED_data>
		for(int i=0;i<128;i++){
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3301      	adds	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b7f      	cmp	r3, #127	; 0x7f
 8001626:	ddee      	ble.n	8001606 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b07      	cmp	r3, #7
 8001632:	ddd8      	ble.n	80015e6 <OLED_FLUSH+0xe>
		}


	}
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001646:	2201      	movs	r2, #1
 8001648:	2110      	movs	r1, #16
 800164a:	482f      	ldr	r0, [pc, #188]	; (8001708 <OLED_INIT+0xc8>)
 800164c:	f003 f836 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	2108      	movs	r1, #8
 8001654:	482c      	ldr	r0, [pc, #176]	; (8001708 <OLED_INIT+0xc8>)
 8001656:	f003 f831 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2102      	movs	r1, #2
 800165e:	482b      	ldr	r0, [pc, #172]	; (800170c <OLED_INIT+0xcc>)
 8001660:	f003 f82c 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001664:	2064      	movs	r0, #100	; 0x64
 8001666:	f002 fd87 	bl	8004178 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2108      	movs	r1, #8
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <OLED_INIT+0xc8>)
 8001670:	f003 f824 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001674:	2064      	movs	r0, #100	; 0x64
 8001676:	f002 fd7f 	bl	8004178 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2108      	movs	r1, #8
 800167e:	4822      	ldr	r0, [pc, #136]	; (8001708 <OLED_INIT+0xc8>)
 8001680:	f003 f81c 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001684:	2064      	movs	r0, #100	; 0x64
 8001686:	f002 fd77 	bl	8004178 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <OLED_INIT+0xd0>)
 800168c:	463c      	mov	r4, r7
 800168e:	461d      	mov	r5, r3
 8001690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001698:	c403      	stmia	r4!, {r0, r1}
 800169a:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	e00c      	b.n	80016bc <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80016a2:	463a      	mov	r2, r7
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff1e 	bl	80014ec <OLED_cmd>
		HAL_Delay(1);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f002 fd61 	bl	8004178 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b18      	cmp	r3, #24
 80016c0:	ddef      	ble.n	80016a2 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80016c2:	20a7      	movs	r0, #167	; 0xa7
 80016c4:	f7ff ff12 	bl	80014ec <OLED_cmd>
	OLED_FLUSH(HVE);
 80016c8:	4812      	ldr	r0, [pc, #72]	; (8001714 <OLED_INIT+0xd4>)
 80016ca:	f7ff ff85 	bl	80015d8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80016ce:	20af      	movs	r0, #175	; 0xaf
 80016d0:	f7ff ff0c 	bl	80014ec <OLED_cmd>
	HAL_Delay(1000);
 80016d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d8:	f002 fd4e 	bl	8004178 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80016dc:	20ae      	movs	r0, #174	; 0xae
 80016de:	f7ff ff05 	bl	80014ec <OLED_cmd>
	HAL_Delay(10);
 80016e2:	200a      	movs	r0, #10
 80016e4:	f002 fd48 	bl	8004178 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80016e8:	20a6      	movs	r0, #166	; 0xa6
 80016ea:	f7ff feff 	bl	80014ec <OLED_cmd>
	HAL_Delay(10);
 80016ee:	200a      	movs	r0, #10
 80016f0:	f002 fd42 	bl	8004178 <HAL_Delay>
	OLED_cmd(DISP_ON);
 80016f4:	20af      	movs	r0, #175	; 0xaf
 80016f6:	f7ff fef9 	bl	80014ec <OLED_cmd>
	OLED_Clear();
 80016fa:	f7ff fee2 	bl	80014c2 <OLED_Clear>
	return HAL_OK;
 80016fe:	2300      	movs	r3, #0

}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bdb0      	pop	{r4, r5, r7, pc}
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	080108f8 	.word	0x080108f8
 8001714:	20000000 	.word	0x20000000

08001718 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e015      	b.n	8001756 <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f1a3 0220 	sub.w	r2, r3, #32
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <OLED_InvChar+0x60>)
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	18ca      	adds	r2, r1, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	43db      	mvns	r3, r3
 8001742:	b2d9      	uxtb	r1, r3
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	4413      	add	r3, r2
 800174c:	460a      	mov	r2, r1
 800174e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b05      	cmp	r3, #5
 800175a:	dde6      	ble.n	800172a <OLED_InvChar+0x12>
	}
	memcpy(result,temp,OLED_CHARSIZE);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	6010      	str	r0, [r2, #0]
 8001768:	791b      	ldrb	r3, [r3, #4]
 800176a:	7113      	strb	r3, [r2, #4]
}
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	08010cf0 	.word	0x08010cf0

0800177c <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	4604      	mov	r4, r0
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	4603      	mov	r3, r0
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	717b      	strb	r3, [r7, #5]
 8001796:	4613      	mov	r3, r2
 8001798:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3b50      	subs	r3, #80	; 0x50
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fea3 	bl	80014ec <OLED_cmd>
	OLED_cmd(col&0x0F);
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fe9c 	bl	80014ec <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe93 	bl	80014ec <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 80017c6:	793b      	ldrb	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d110      	bne.n	80017ee <OLED_drawChar+0x72>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	f1a3 0220 	sub.w	r2, r3, #32
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <OLED_drawChar+0x9c>)
 80017da:	1899      	adds	r1, r3, r2
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	2205      	movs	r2, #5
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00e fba6 	bl	800ff34 <memcpy>
		data[5]=0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]
 80017ec:	e009      	b.n	8001802 <OLED_drawChar+0x86>
	}
	else{
		data[0]=0xFF;
 80017ee:	23ff      	movs	r3, #255	; 0xff
 80017f0:	723b      	strb	r3, [r7, #8]
		OLED_InvChar(character,data + 1);
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	3301      	adds	r3, #1
 80017f8:	797a      	ldrb	r2, [r7, #5]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7ff ff8b 	bl	8001718 <OLED_InvChar>

	}

	OLED_data(data, 6);
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	2106      	movs	r1, #6
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fea9 	bl	8001560 <OLED_data>

	}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	bf00      	nop
 8001818:	08010cf0 	.word	0x08010cf0

0800181c <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	603a      	str	r2, [r7, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	460b      	mov	r3, r1
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	4613      	mov	r3, r2
 8001830:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e014      	b.n	8001862 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	0052      	lsls	r2, r2, #1
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	4413      	add	r3, r2
 800184a:	b2d9      	uxtb	r1, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	4413      	add	r3, r2
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	79f8      	ldrb	r0, [r7, #7]
 8001858:	f7ff ff90 	bl	800177c <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7fe fcbc 	bl	80001e0 <strlen>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8e3      	bhi.n	8001838 <OLED_Printlin+0x1c>
	}
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	6039      	str	r1, [r7, #0]
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	4613      	mov	r3, r2
 8001888:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 800188a:	6838      	ldr	r0, [r7, #0]
 800188c:	f7fe fca8 	bl	80001e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	0fda      	lsrs	r2, r3, #31
 8001898:	4413      	add	r3, r2
 800189a:	105b      	asrs	r3, r3, #1
 800189c:	425b      	negs	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	3340      	adds	r3, #64	; 0x40
 80018aa:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	79f8      	ldrb	r0, [r7, #7]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	f7ff ffb1 	bl	800181c <OLED_Printlin>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b094      	sub	sp, #80	; 0x50
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80018ca:	2320      	movs	r3, #32
 80018cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80018d8:	2300      	movs	r3, #0
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80018e0:	2300      	movs	r3, #0
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
 80018e4:	e018      	b.n	8001918 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80018e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ea:	4413      	add	r3, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	d10b      	bne.n	8001910 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80018f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fa:	b2d9      	uxtb	r1, r3
 80018fc:	f107 020c 	add.w	r2, r7, #12
 8001900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001902:	4413      	add	r3, r2
 8001904:	460a      	mov	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
	                i++;
 8001908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800190a:	3301      	adds	r3, #1
 800190c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190e:	e000      	b.n	8001912 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001910:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001914:	3301      	adds	r3, #1
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
 8001918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191a:	2b15      	cmp	r3, #21
 800191c:	dde3      	ble.n	80018e6 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b20      	cmp	r3, #32
 8001928:	d102      	bne.n	8001930 <OLED_Print+0x6e>
	            last_ind++;
 800192a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192c:	3301      	adds	r3, #1
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fc52 	bl	80001e0 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	2b15      	cmp	r3, #21
 8001940:	d828      	bhi.n	8001994 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc49 	bl	80001e0 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	18d1      	adds	r1, r2, r3
 8001958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	4618      	mov	r0, r3
 8001960:	f00e fc1e 	bl	80101a0 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001966:	f107 0220 	add.w	r2, r7, #32
 800196a:	18d0      	adds	r0, r2, r3
 800196c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001972:	f1c3 0315 	rsb	r3, r3, #21
 8001976:	461a      	mov	r2, r3
 8001978:	f00e faea 	bl	800ff50 <memset>
	            thisline[21]=' ';
 800197c:	2320      	movs	r3, #32
 800197e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001984:	b2d8      	uxtb	r0, r3
 8001986:	f107 0220 	add.w	r2, r7, #32
 800198a:	2300      	movs	r3, #0
 800198c:	2102      	movs	r1, #2
 800198e:	f7ff ff45 	bl	800181c <OLED_Printlin>




	    }
}
 8001992:	e05e      	b.n	8001a52 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001996:	3314      	adds	r3, #20
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d03a      	beq.n	8001a18 <OLED_Print+0x156>
 80019a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019a4:	3315      	adds	r3, #21
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d033      	beq.n	8001a18 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80019b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	18d1      	adds	r1, r2, r3
 80019b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b8:	3b01      	subs	r3, #1
 80019ba:	3350      	adds	r3, #80	; 0x50
 80019bc:	443b      	add	r3, r7
 80019be:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00e fbe9 	bl	80101a0 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80019ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d0:	3b01      	subs	r3, #1
 80019d2:	3350      	adds	r3, #80	; 0x50
 80019d4:	443b      	add	r3, r7
 80019d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019da:	461a      	mov	r2, r3
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	1898      	adds	r0, r3, r2
 80019e2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80019e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e8:	3b01      	subs	r3, #1
 80019ea:	3350      	adds	r3, #80	; 0x50
 80019ec:	443b      	add	r3, r7
 80019ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019f2:	f1c3 0315 	rsb	r3, r3, #21
 80019f6:	461a      	mov	r2, r3
 80019f8:	f00e faaa 	bl	800ff50 <memset>
	            thisline[21]=' ';
 80019fc:	2320      	movs	r3, #32
 80019fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a04:	3b01      	subs	r3, #1
 8001a06:	3350      	adds	r3, #80	; 0x50
 8001a08:	443b      	add	r3, r7
 8001a0a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a12:	4413      	add	r3, r2
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a16:	e00e      	b.n	8001a36 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	18d1      	adds	r1, r2, r3
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	2215      	movs	r2, #21
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00e fbbb 	bl	80101a0 <strncpy>
	            thisline[21]=' ';
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a32:	3315      	adds	r3, #21
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a3c:	b2d8      	uxtb	r0, r3
 8001a3e:	f107 0220 	add.w	r2, r7, #32
 8001a42:	2300      	movs	r3, #0
 8001a44:	2102      	movs	r1, #2
 8001a46:	f7ff fee9 	bl	800181c <OLED_Printlin>
	        line++;
 8001a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001a50:	e746      	b.n	80018e0 <OLED_Print+0x1e>
}
 8001a52:	3750      	adds	r7, #80	; 0x50
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001a64:	f7ff fd2d 	bl	80014c2 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4619      	mov	r1, r3
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff ff01 	bl	800187a <OLED_PrintCent>

	for(int i = 0; i < screen->datsize - 1; i++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e01a      	b.n	8001ab4 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	7818      	ldrb	r0, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	7859      	ldrb	r1, [r3, #1]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f7ff feb7 	bl	800181c <OLED_Printlin>
	for(int i = 0; i < screen->datsize - 1; i++) {
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbde      	blt.n	8001a7e <OLED_SCREEN+0x26>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fb7b 	bl	80001e0 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	785b      	ldrb	r3, [r3, #1]
 8001afa:	4619      	mov	r1, r3
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	7818      	ldrb	r0, [r3, #0]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	b2d9      	uxtb	r1, r3
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	f7ff fe7d 	bl	800181c <OLED_Printlin>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	460b      	mov	r3, r1
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001b3a:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <OLED_SELECT+0xe4>)
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4611      	mov	r1, r2
 8001b44:	8019      	strh	r1, [r3, #0]
 8001b46:	3302      	adds	r3, #2
 8001b48:	0c12      	lsrs	r2, r2, #16
 8001b4a:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	if(selopt == 0){
 8001b4c:	7afb      	ldrb	r3, [r7, #11]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <OLED_SELECT+0x32>
	    index = screen->selsize - 1;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	77fb      	strb	r3, [r7, #31]
 8001b5c:	e002      	b.n	8001b64 <OLED_SELECT+0x38>
	} else {
		index = selopt - 1;
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
	}

	prevpage=screen->seldata[index][0];
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	75fb      	strb	r3, [r7, #23]
	prevcol=screen->seldata[index][1];
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	75bb      	strb	r3, [r7, #22]
	thispage=screen->seldata[selopt][0];
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	757b      	strb	r3, [r7, #21]
	thiscol=screen->seldata[selopt][1];
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	753b      	strb	r3, [r7, #20]

	if(restore == OLED_RESTORE){
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d122      	bne.n	8001be8 <OLED_SELECT+0xbc>
	    if (selopt == 0) {
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d110      	bne.n	8001bca <OLED_SELECT+0x9e>
	    	rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689c      	ldr	r4, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f933 	bl	8001e24 <find_restore_string>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4423      	add	r3, r4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e010      	b.n	8001bec <OLED_SELECT+0xc0>
	    } else {
	    	rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	689c      	ldr	r4, [r3, #8]
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f924 	bl	8001e24 <find_restore_string>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4423      	add	r3, r4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	e001      	b.n	8001bec <OLED_SELECT+0xc0>
	    }
	} else {
	    rest = "  ";
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <OLED_SELECT+0xe8>)
 8001bea:	61bb      	str	r3, [r7, #24]
	}

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001bec:	7db9      	ldrb	r1, [r7, #22]
 8001bee:	7df8      	ldrb	r0, [r7, #23]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	f7ff fe12 	bl	800181c <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001bf8:	f107 0210 	add.w	r2, r7, #16
 8001bfc:	7d39      	ldrb	r1, [r7, #20]
 8001bfe:	7d78      	ldrb	r0, [r7, #21]
 8001c00:	2300      	movs	r3, #0
 8001c02:	f7ff fe0b 	bl	800181c <OLED_Printlin>

}
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08010918 	.word	0x08010918
 8001c14:	08010914 	.word	0x08010914

08001c18 <OLED_select_inv>:
/**
 * Select option by inverting the character which is selected
 * @param screen - Screen currently displayed
 * @param selopt - Selected select option
 * */
void OLED_select_inv(const Screen* screen, uint8_t selopt) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
	uint8_t index, prevpage, prevcol, thispage, thiscol;
	char* restore;

	if(selopt == 0){
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <OLED_select_inv+0x1e>
		index = screen->selsize - 1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
 8001c34:	e002      	b.n	8001c3c <OLED_select_inv+0x24>
	} else {
		index = selopt - 1;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]
	}

	prevpage=screen->seldata[index][0];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	73fb      	strb	r3, [r7, #15]
	prevcol=screen->seldata[index][1];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	73bb      	strb	r3, [r7, #14]
	thispage=screen->seldata[selopt][0];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	737b      	strb	r3, [r7, #13]
	thiscol=screen->seldata[selopt][1];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	733b      	strb	r3, [r7, #12]

	if (selopt == 0) {
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d110      	bne.n	8001c9c <OLED_select_inv+0x84>
		restore=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689c      	ldr	r4, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8ca 	bl	8001e24 <find_restore_string>
 8001c90:	4603      	mov	r3, r0
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4423      	add	r3, r4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e00d      	b.n	8001cb8 <OLED_select_inv+0xa0>
	} else {
		restore=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689c      	ldr	r4, [r3, #8]
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8bb 	bl	8001e24 <find_restore_string>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4423      	add	r3, r4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
	}

	OLED_Printlin(prevpage, prevcol, restore, NORMAL);
 8001cb8:	7bb9      	ldrb	r1, [r7, #14]
 8001cba:	7bf8      	ldrb	r0, [r7, #15]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	f7ff fdac 	bl	800181c <OLED_Printlin>
	OLED_Printlin(thispage, thiscol, screen->data[selopt + 1], INVERT);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	7b39      	ldrb	r1, [r7, #12]
 8001cd4:	7b78      	ldrb	r0, [r7, #13]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f7ff fda0 	bl	800181c <OLED_Printlin>
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}

08001ce4 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
	if (get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN) == 0) {
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	0052      	lsls	r2, r2, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 fe46 	bl	8003990 <get_number_files_section>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <OLED_display_files+0x2a>
		return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e066      	b.n	8001ddc <OLED_display_files+0xf8>
	}
	uint32_t file_count = get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN);
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	0052      	lsls	r2, r2, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fe37 	bl	8003990 <get_number_files_section>
 8001d22:	61f8      	str	r0, [r7, #28]

	char** file_names = malloc(file_count * sizeof(char*));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00e f8f3 	bl	800ff14 <malloc>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]
	char used[5];
	char free[5];
	uint32_t file_index = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t location_index = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]

	get_free_size_str(free);
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 ff46 	bl	8003bd0 <get_free_size_str>
	get_used_size_str(used);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 ff2f 	bl	8003bac <get_used_size_str>

	OLED_SCRNREF(&SCRN_ShowFiles, 4, free);
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	461a      	mov	r2, r3
 8001d54:	2104      	movs	r1, #4
 8001d56:	4823      	ldr	r0, [pc, #140]	; (8001de4 <OLED_display_files+0x100>)
 8001d58:	f7ff feb7 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_ShowFiles, 5, used);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	461a      	mov	r2, r3
 8001d62:	2105      	movs	r1, #5
 8001d64:	481f      	ldr	r0, [pc, #124]	; (8001de4 <OLED_display_files+0x100>)
 8001d66:	f7ff feb0 	bl	8001aca <OLED_SCRNREF>

	if (get_files_section(file_names, FILES_PERSCREEN * page, FILES_PERSCREEN) != RFS_OK) {
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	0052      	lsls	r2, r2, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2203      	movs	r2, #3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	69b8      	ldr	r0, [r7, #24]
 8001d7c:	f001 fe36 	bl	80039ec <get_files_section>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d021      	beq.n	8001dca <OLED_display_files+0xe6>
		free_filenames(file_names, file_count);
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	69b8      	ldr	r0, [r7, #24]
 8001d8c:	f000 f82c 	bl	8001de8 <free_filenames>
		return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e023      	b.n	8001ddc <OLED_display_files+0xf8>
	}

	while(location_index < FILES_PERSCREEN) {
		if (entry_present(location_index) == RFS_OK) {
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fe85 	bl	8003aa8 <entry_present>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10f      	bne.n	8001dc4 <OLED_display_files+0xe0>
			OLED_SCRNREF(&SCRN_ShowFiles, location_index + 1, file_names[file_index]);
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2d9      	uxtb	r1, r3
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4413      	add	r3, r2
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	480a      	ldr	r0, [pc, #40]	; (8001de4 <OLED_display_files+0x100>)
 8001dba:	f7ff fe86 	bl	8001aca <OLED_SCRNREF>
			file_index++;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
		}
		location_index++;
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	623b      	str	r3, [r7, #32]
	while(location_index < FILES_PERSCREEN) {
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d9e1      	bls.n	8001d94 <OLED_display_files+0xb0>
	}

	free_filenames(file_names, file_count);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	69b8      	ldr	r0, [r7, #24]
 8001dd6:	f000 f807 	bl	8001de8 <free_filenames>
	return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	080111b0 	.word	0x080111b0

08001de8 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e00a      	b.n	8001e0e <free_filenames+0x26>
		free(file_names[i]);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00e f88e 	bl	800ff24 <free>
	for (int i = 0; i < size; i++) {
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dbf0      	blt.n	8001df8 <free_filenames+0x10>
	}
	free(file_names);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f00e f884 	bl	800ff24 <free>
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001e30:	2301      	movs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	e021      	b.n	8001e7a <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6919      	ldr	r1, [r3, #16]
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	440b      	add	r3, r1
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d110      	bne.n	8001e74 <find_restore_string+0x50>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	785a      	ldrb	r2, [r3, #1]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d102      	bne.n	8001e74 <find_restore_string+0x50>
			index_of_string = i;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	73fb      	strb	r3, [r7, #15]
			break;
 8001e72:	e007      	b.n	8001e84 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbd8      	blt.n	8001e36 <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fe01 	bl	8003aa8 <entry_present>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d12d      	bne.n	8001f08 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fc15 	bl	80036de <read_card_entry>
 8001eb4:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4815      	ldr	r0, [pc, #84]	; (8001f10 <oled_show_file+0x7c>)
 8001eba:	f7ff fdcd 	bl	8001a58 <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4812      	ldr	r0, [pc, #72]	; (8001f10 <oled_show_file+0x7c>)
 8001ec8:	f7ff fdff 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	480e      	ldr	r0, [pc, #56]	; (8001f10 <oled_show_file+0x7c>)
 8001ed6:	f7ff fdf8 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	791b      	ldrb	r3, [r3, #4]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f7ff fa4d 	bl	8001384 <uid_tostring>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <oled_show_file+0x7c>)
 8001ef2:	f7ff fdea 	bl	8001aca <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <oled_show_file+0x7c>)
 8001efc:	f7ff fe16 	bl	8001b2c <OLED_SELECT>

	free(work);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f00e f80f 	bl	800ff24 <free>
 8001f06:	e000      	b.n	8001f0a <oled_show_file+0x76>
		return; //No card entry present
 8001f08:	bf00      	nop
}
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	080111c4 	.word	0x080111c4

08001f14 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	429a      	cmp	r2, r3
 8001f34:	db03      	blt.n	8001f3e <oled_move_selection+0x2a>
		*arrow_index = 0;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e005      	b.n	8001f4a <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	79fa      	ldrb	r2, [r7, #7]
 8001f50:	4619      	mov	r1, r3
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7ff fdea 	bl	8001b2c <OLED_SELECT>
}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <oled_move_selection_inv>:
/**
 * Select by inverting the text on the screen
 * @param screen - Screen to modify
 * @param select_index - Pointer to variable that keeps track of selection index
 * */
void oled_move_selection_inv(const Screen* screen, uint8_t* select_index) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	uint8_t max_index = screen->selsize;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]

	if (*select_index >= max_index - 1) {
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	db03      	blt.n	8001f86 <oled_move_selection_inv+0x26>
		*select_index = 0;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e005      	b.n	8001f92 <oled_move_selection_inv+0x32>
	} else {
		*select_index += 1;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	701a      	strb	r2, [r3, #0]
	}

	OLED_select_inv(screen, *select_index);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe3d 	bl	8001c18 <OLED_select_inv>
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <oled_keyboard_insertChar>:
 * Update string displayed displayed in keyboard task as it's being written
 * @param char_index - Index of selected character on keyboard
 * @param curr_name - Pointer to pointer that stores the current name which has been created by the user.
 * 					  This name will grow as the user continues to write characters
 * */
void oled_keyboard_insertChar (uint8_t char_index, char** curr_name) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
	uint8_t length;

	if (*curr_name == NULL) {
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <oled_keyboard_insertChar+0x1a>
		length = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e006      	b.n	8001fd0 <oled_keyboard_insertChar+0x28>
	} else {
		length = strlen(*curr_name);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe f90a 	bl	80001e0 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]
	}

	*curr_name = realloc(*curr_name, (length + 2) * sizeof(char)); //Increment by 2 since we want to store a new character as well as null
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f00e f8a0 	bl	8010120 <realloc>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
	(*curr_name)[length] = KEYBOARD_LUT[char_index];
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	440b      	add	r3, r1
 8001ff0:	490a      	ldr	r1, [pc, #40]	; (800201c <oled_keyboard_insertChar+0x74>)
 8001ff2:	5c8a      	ldrb	r2, [r1, r2]
 8001ff4:	701a      	strb	r2, [r3, #0]
	(*curr_name)[length + 1] = '\0';
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	2100      	movs	r1, #0
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <oled_keyboard_insertChar+0x78>)
 800200e:	f7ff fd5c 	bl	8001aca <OLED_SCRNREF>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	08010cd4 	.word	0x08010cd4
 8002020:	080111ec 	.word	0x080111ec

08002024 <oled_keyboard_removeChar>:

/**
 * Remove character from user inputted string
 * @param curr_name - Current state of user string
 * */
void oled_keyboard_removeChar (char** curr_name) {
 8002024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	466b      	mov	r3, sp
 8002030:	461e      	mov	r6, r3
	uint8_t length;

	if (*curr_name == NULL) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <oled_keyboard_removeChar+0x1a>
 800203a:	46b5      	mov	sp, r6
 800203c:	e055      	b.n	80020ea <oled_keyboard_removeChar+0xc6>
		return; //No name, don't do anything
	}

	length = strlen(*curr_name);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe f8cc 	bl	80001e0 <strlen>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]

	*curr_name = realloc(*curr_name, length * sizeof(char));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	7dfa      	ldrb	r2, [r7, #23]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f00e f863 	bl	8010120 <realloc>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	601a      	str	r2, [r3, #0]
	(*curr_name)[length - 1] = '\0';
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	3b01      	subs	r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]

	char clear[length + 1];
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	1c59      	adds	r1, r3, #1
 8002072:	1e4b      	subs	r3, r1, #1
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	460a      	mov	r2, r1
 8002078:	2300      	movs	r3, #0
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002092:	460a      	mov	r2, r1
 8002094:	2300      	movs	r3, #0
 8002096:	4614      	mov	r4, r2
 8002098:	461d      	mov	r5, r3
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	00eb      	lsls	r3, r5, #3
 80020a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	460b      	mov	r3, r1
 80020ac:	3307      	adds	r3, #7
 80020ae:	08db      	lsrs	r3, r3, #3
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	ebad 0d03 	sub.w	sp, sp, r3
 80020b6:	466b      	mov	r3, sp
 80020b8:	3300      	adds	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
	memset(clear, ' ', length);
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	461a      	mov	r2, r3
 80020c0:	2120      	movs	r1, #32
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f00d ff44 	bl	800ff50 <memset>
	clear[length] = '\0';
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	2100      	movs	r1, #0
 80020ce:	54d1      	strb	r1, [r2, r3]

	OLED_SCRNREF(&SCRN_Keyboard, 0 ,clear);
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	2100      	movs	r1, #0
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <oled_keyboard_removeChar+0xd0>)
 80020d6:	f7ff fcf8 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	2100      	movs	r1, #0
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <oled_keyboard_removeChar+0xd0>)
 80020e4:	f7ff fcf1 	bl	8001aca <OLED_SCRNREF>
 80020e8:	46b5      	mov	sp, r6
}
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020f2:	bf00      	nop
 80020f4:	080111ec 	.word	0x080111ec

080020f8 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8002102:	230f      	movs	r3, #15
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	2300      	movs	r3, #0
 800210c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <STAT_READ+0x54>)
 8002116:	f002 fad1 	bl	80046bc <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800211a:	bf00      	nop
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 010c 	add.w	r1, r7, #12
 8002124:	2364      	movs	r3, #100	; 0x64
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2303      	movs	r3, #3
 800212a:	4809      	ldr	r0, [pc, #36]	; (8002150 <STAT_READ+0x58>)
 800212c:	f005 fbad 	bl	800788a <HAL_SPI_TransmitReceive>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002136:	2201      	movs	r2, #1
 8002138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <STAT_READ+0x54>)
 800213e:	f002 fabd 	bl	80046bc <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 8002142:	7abb      	ldrb	r3, [r7, #10]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020000 	.word	0x40020000
 8002150:	200007c8 	.word	0x200007c8

08002154 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	460a      	mov	r2, r1
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	4613      	mov	r3, r2
 8002162:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8002164:	231f      	movs	r3, #31
 8002166:	733b      	strb	r3, [r7, #12]
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	737b      	strb	r3, [r7, #13]
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002176:	480a      	ldr	r0, [pc, #40]	; (80021a0 <STAT_WRITE+0x4c>)
 8002178:	f002 faa0 	bl	80046bc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 800217c:	f107 010c 	add.w	r1, r7, #12
 8002180:	2364      	movs	r3, #100	; 0x64
 8002182:	2203      	movs	r2, #3
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <STAT_WRITE+0x50>)
 8002186:	f005 fa44 	bl	8007612 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <STAT_WRITE+0x4c>)
 8002192:	f002 fa93 	bl	80046bc <HAL_GPIO_WritePin>

	return(HAL_OK);
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020000 	.word	0x40020000
 80021a4:	200007c8 	.word	0x200007c8

080021a8 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80021ae:	2306      	movs	r3, #6
 80021b0:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80021b2:	f000 f825 	bl	8002200 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80021b6:	e011      	b.n	80021dc <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021be:	480e      	ldr	r0, [pc, #56]	; (80021f8 <WRIT_EN+0x50>)
 80021c0:	f002 fa7c 	bl	80046bc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 80021c4:	1df9      	adds	r1, r7, #7
 80021c6:	2364      	movs	r3, #100	; 0x64
 80021c8:	2201      	movs	r2, #1
 80021ca:	480c      	ldr	r0, [pc, #48]	; (80021fc <WRIT_EN+0x54>)
 80021cc:	f005 fa21 	bl	8007612 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <WRIT_EN+0x50>)
 80021d8:	f002 fa70 	bl	80046bc <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80021dc:	20c0      	movs	r0, #192	; 0xc0
 80021de:	f7ff ff8b 	bl	80020f8 <STAT_READ>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d1e5      	bne.n	80021b8 <WRIT_EN+0x10>
	}


}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40020000 	.word	0x40020000
 80021fc:	200007c8 	.word	0x200007c8

08002200 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8002206:	2304      	movs	r3, #4
 8002208:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800220a:	e011      	b.n	8002230 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002212:	480e      	ldr	r0, [pc, #56]	; (800224c <WRITE_DIS+0x4c>)
 8002214:	f002 fa52 	bl	80046bc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8002218:	1df9      	adds	r1, r7, #7
 800221a:	2364      	movs	r3, #100	; 0x64
 800221c:	2201      	movs	r2, #1
 800221e:	480c      	ldr	r0, [pc, #48]	; (8002250 <WRITE_DIS+0x50>)
 8002220:	f005 f9f7 	bl	8007612 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002224:	2201      	movs	r2, #1
 8002226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222a:	4808      	ldr	r0, [pc, #32]	; (800224c <WRITE_DIS+0x4c>)
 800222c:	f002 fa46 	bl	80046bc <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8002230:	20c0      	movs	r0, #192	; 0xc0
 8002232:	f7ff ff61 	bl	80020f8 <STAT_READ>
 8002236:	4603      	mov	r3, r0
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b02      	cmp	r3, #2
 800223e:	d0e5      	beq.n	800220c <WRITE_DIS+0xc>
		}
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40020000 	.word	0x40020000
 8002250:	200007c8 	.word	0x200007c8

08002254 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 8002264:	23d8      	movs	r3, #216	; 0xd8
 8002266:	723b      	strb	r3, [r7, #8]
 8002268:	2300      	movs	r3, #0
 800226a:	727b      	strb	r3, [r7, #9]
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	72bb      	strb	r3, [r7, #10]
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 800227c:	f7ff ff94 	bl	80021a8 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002286:	480f      	ldr	r0, [pc, #60]	; (80022c4 <block_erase+0x70>)
 8002288:	f002 fa18 	bl	80046bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 800228c:	f107 0108 	add.w	r1, r7, #8
 8002290:	2364      	movs	r3, #100	; 0x64
 8002292:	2204      	movs	r2, #4
 8002294:	480c      	ldr	r0, [pc, #48]	; (80022c8 <block_erase+0x74>)
 8002296:	f005 f9bc 	bl	8007612 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a0:	4808      	ldr	r0, [pc, #32]	; (80022c4 <block_erase+0x70>)
 80022a2:	f002 fa0b 	bl	80046bc <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80022a6:	bf00      	nop
 80022a8:	20c0      	movs	r0, #192	; 0xc0
 80022aa:	f7ff ff25 	bl	80020f8 <STAT_READ>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d0f7      	beq.n	80022a8 <block_erase+0x54>
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40020000 	.word	0x40020000
 80022c8:	200007c8 	.word	0x200007c8

080022cc <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d6:	480a      	ldr	r0, [pc, #40]	; (8002300 <MEM_INIT+0x34>)
 80022d8:	f002 f9f0 	bl	80046bc <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 80022dc:	2100      	movs	r1, #0
 80022de:	20a0      	movs	r0, #160	; 0xa0
 80022e0:	f7ff ff38 	bl	8002154 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 80022e4:	20a0      	movs	r0, #160	; 0xa0
 80022e6:	f7ff ff07 	bl	80020f8 <STAT_READ>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MEM_INIT+0x28>
		return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e002      	b.n	80022fa <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 80022f4:	f7ff ff84 	bl	8002200 <WRITE_DIS>
	return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40020000 	.word	0x40020000

08002304 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60ba      	str	r2, [r7, #8]
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	4603      	mov	r3, r0
 8002310:	81fb      	strh	r3, [r7, #14]
 8002312:	460b      	mov	r3, r1
 8002314:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3303      	adds	r3, #3
 800231a:	4618      	mov	r0, r3
 800231c:	f00d fdfa 	bl	800ff14 <malloc>
 8002320:	4603      	mov	r3, r0
 8002322:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8002324:	2310      	movs	r3, #16
 8002326:	743b      	strb	r3, [r7, #16]
 8002328:	2300      	movs	r3, #0
 800232a:	747b      	strb	r3, [r7, #17]
 800232c:	89fb      	ldrh	r3, [r7, #14]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	74bb      	strb	r3, [r7, #18]
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2202      	movs	r2, #2
 8002340:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 8002342:	89bb      	ldrh	r3, [r7, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	b29a      	uxth	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3302      	adds	r3, #2
 8002354:	89ba      	ldrh	r2, [r7, #12]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3303      	adds	r3, #3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	4618      	mov	r0, r3
 8002364:	f00d fde6 	bl	800ff34 <memcpy>

	WRIT_EN();
 8002368:	f7ff ff1e 	bl	80021a8 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002372:	482d      	ldr	r0, [pc, #180]	; (8002428 <MEM_WRITE+0x124>)
 8002374:	f002 f9a2 	bl	80046bc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	b29b      	uxth	r3, r3
 800237c:	3303      	adds	r3, #3
 800237e:	b29a      	uxth	r2, r3
 8002380:	2364      	movs	r3, #100	; 0x64
 8002382:	6979      	ldr	r1, [r7, #20]
 8002384:	4829      	ldr	r0, [pc, #164]	; (800242c <MEM_WRITE+0x128>)
 8002386:	f005 f944 	bl	8007612 <HAL_SPI_Transmit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002396:	4824      	ldr	r0, [pc, #144]	; (8002428 <MEM_WRITE+0x124>)
 8002398:	f002 f990 	bl	80046bc <HAL_GPIO_WritePin>
		free(setup);
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f00d fdc1 	bl	800ff24 <free>
		return(HAL_ERROR);
 80023a2:	2301      	movs	r3, #1
 80023a4:	e03c      	b.n	8002420 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ac:	481e      	ldr	r0, [pc, #120]	; (8002428 <MEM_WRITE+0x124>)
 80023ae:	f002 f985 	bl	80046bc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 80023b2:	bf00      	nop
 80023b4:	20c0      	movs	r0, #192	; 0xc0
 80023b6:	f7ff fe9f 	bl	80020f8 <STAT_READ>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d0f7      	beq.n	80023b4 <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ca:	4817      	ldr	r0, [pc, #92]	; (8002428 <MEM_WRITE+0x124>)
 80023cc:	f002 f976 	bl	80046bc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 80023d0:	f107 0110 	add.w	r1, r7, #16
 80023d4:	2364      	movs	r3, #100	; 0x64
 80023d6:	2204      	movs	r2, #4
 80023d8:	4814      	ldr	r0, [pc, #80]	; (800242c <MEM_WRITE+0x128>)
 80023da:	f005 f91a 	bl	8007612 <HAL_SPI_Transmit>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	480f      	ldr	r0, [pc, #60]	; (8002428 <MEM_WRITE+0x124>)
 80023ec:	f002 f966 	bl	80046bc <HAL_GPIO_WritePin>
		free(setup);
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	f00d fd97 	bl	800ff24 <free>
		return(HAL_ERROR);
 80023f6:	2301      	movs	r3, #1
 80023f8:	e012      	b.n	8002420 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	4809      	ldr	r0, [pc, #36]	; (8002428 <MEM_WRITE+0x124>)
 8002402:	f002 f95b 	bl	80046bc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002406:	bf00      	nop
 8002408:	20c0      	movs	r0, #192	; 0xc0
 800240a:	f7ff fe75 	bl	80020f8 <STAT_READ>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d0f7      	beq.n	8002408 <MEM_WRITE+0x104>
	free(setup);
 8002418:	6978      	ldr	r0, [r7, #20]
 800241a:	f00d fd83 	bl	800ff24 <free>
	return(HAL_OK);
 800241e:	2300      	movs	r3, #0

}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40020000 	.word	0x40020000
 800242c:	200007c8 	.word	0x200007c8

08002430 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	; 0x30
 8002434:	af02      	add	r7, sp, #8
 8002436:	60ba      	str	r2, [r7, #8]
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4603      	mov	r3, r0
 800243c:	81fb      	strh	r3, [r7, #14]
 800243e:	460b      	mov	r3, r1
 8002440:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 8002442:	2313      	movs	r3, #19
 8002444:	753b      	strb	r3, [r7, #20]
 8002446:	2300      	movs	r3, #0
 8002448:	757b      	strb	r3, [r7, #21]
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	b29b      	uxth	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	75bb      	strb	r3, [r7, #22]
 8002454:	89fb      	ldrh	r3, [r7, #14]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 800245a:	2304      	movs	r3, #4
 800245c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8002460:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f00d fd53 	bl	800ff14 <malloc>
 800246e:	4603      	mov	r3, r0
 8002470:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 8002472:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f00d fd4a 	bl	800ff14 <malloc>
 8002480:	4603      	mov	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8002484:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	461a      	mov	r2, r3
 800248e:	2100      	movs	r1, #0
 8002490:	69f8      	ldr	r0, [r7, #28]
 8002492:	f00d fd5d 	bl	800ff50 <memset>
	read_command[0]=READ_BUF;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2203      	movs	r2, #3
 800249a:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 800249c:	89bb      	ldrh	r3, [r7, #12]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3302      	adds	r3, #2
 80024ae:	89ba      	ldrh	r2, [r7, #12]
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3303      	adds	r3, #3
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c2:	4842      	ldr	r0, [pc, #264]	; (80025cc <MEM_READPAGE+0x19c>)
 80024c4:	f002 f8fa 	bl	80046bc <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 80024c8:	f107 0114 	add.w	r1, r7, #20
 80024cc:	2364      	movs	r3, #100	; 0x64
 80024ce:	2204      	movs	r2, #4
 80024d0:	483f      	ldr	r0, [pc, #252]	; (80025d0 <MEM_READPAGE+0x1a0>)
 80024d2:	f005 f89e 	bl	8007612 <HAL_SPI_Transmit>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e2:	483a      	ldr	r0, [pc, #232]	; (80025cc <MEM_READPAGE+0x19c>)
 80024e4:	f002 f8ea 	bl	80046bc <HAL_GPIO_WritePin>
		free(read_command);
 80024e8:	69f8      	ldr	r0, [r7, #28]
 80024ea:	f00d fd1b 	bl	800ff24 <free>
		free(rec_data);
 80024ee:	69b8      	ldr	r0, [r7, #24]
 80024f0:	f00d fd18 	bl	800ff24 <free>
		return(HAL_ERROR);
 80024f4:	2301      	movs	r3, #1
 80024f6:	e064      	b.n	80025c2 <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024fe:	4833      	ldr	r0, [pc, #204]	; (80025cc <MEM_READPAGE+0x19c>)
 8002500:	f002 f8dc 	bl	80046bc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8002504:	bf00      	nop
 8002506:	20c0      	movs	r0, #192	; 0xc0
 8002508:	f7ff fdf6 	bl	80020f8 <STAT_READ>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d0f7      	beq.n	8002506 <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251c:	482b      	ldr	r0, [pc, #172]	; (80025cc <MEM_READPAGE+0x19c>)
 800251e:	f002 f8cd 	bl	80046bc <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 8002522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4413      	add	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2264      	movs	r2, #100	; 0x64
 8002532:	9200      	str	r2, [sp, #0]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	69f9      	ldr	r1, [r7, #28]
 8002538:	4825      	ldr	r0, [pc, #148]	; (80025d0 <MEM_READPAGE+0x1a0>)
 800253a:	f005 f9a6 	bl	800788a <HAL_SPI_TransmitReceive>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002544:	2201      	movs	r2, #1
 8002546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800254a:	4820      	ldr	r0, [pc, #128]	; (80025cc <MEM_READPAGE+0x19c>)
 800254c:	f002 f8b6 	bl	80046bc <HAL_GPIO_WritePin>
		free(read_command);
 8002550:	69f8      	ldr	r0, [r7, #28]
 8002552:	f00d fce7 	bl	800ff24 <free>
		free(rec_data);
 8002556:	69b8      	ldr	r0, [r7, #24]
 8002558:	f00d fce4 	bl	800ff24 <free>
		return(HAL_ERROR);
 800255c:	2301      	movs	r3, #1
 800255e:	e030      	b.n	80025c2 <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002566:	4819      	ldr	r0, [pc, #100]	; (80025cc <MEM_READPAGE+0x19c>)
 8002568:	f002 f8a8 	bl	80046bc <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 800256c:	bf00      	nop
 800256e:	20c0      	movs	r0, #192	; 0xc0
 8002570:	f7ff fdc2 	bl	80020f8 <STAT_READ>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d0f7      	beq.n	800256e <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d104      	bne.n	800258e <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	791a      	ldrb	r2, [r3, #4]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	e012      	b.n	80025b4 <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	e00b      	b.n	80025ac <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	3304      	adds	r3, #4
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	441a      	add	r2, r3
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	440b      	add	r3, r1
 80025a2:	7812      	ldrb	r2, [r2, #0]
 80025a4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8ef      	bhi.n	8002594 <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 80025b4:	69f8      	ldr	r0, [r7, #28]
 80025b6:	f00d fcb5 	bl	800ff24 <free>
	free(rec_data);
 80025ba:	69b8      	ldr	r0, [r7, #24]
 80025bc:	f00d fcb2 	bl	800ff24 <free>
	return(HAL_OK);
 80025c0:	2300      	movs	r3, #0

}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40020000 	.word	0x40020000
 80025d0:	200007c8 	.word	0x200007c8

080025d4 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	e016      	b.n	800260e <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	019b      	lsls	r3, r3, #6
 80025e6:	b298      	uxth	r0, r3
 80025e8:	1cfa      	adds	r2, r7, #3
 80025ea:	2301      	movs	r3, #1
 80025ec:	2100      	movs	r1, #0
 80025ee:	f7ff ff1f 	bl	8002430 <MEM_READPAGE>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <mem_find_free_block+0x2a>
			return -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	e00d      	b.n	800261a <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	2bff      	cmp	r3, #255	; 0xff
 8002602:	d101      	bne.n	8002608 <mem_find_free_block+0x34>
			return i;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	e008      	b.n	800261a <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3301      	adds	r3, #1
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002614:	dbe4      	blt.n	80025e0 <mem_find_free_block+0xc>
		}
	}
	return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002628:	2300      	movs	r3, #0
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	e007      	b.n	800263e <memory_reset+0x1c>
		block_erase(i);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe0e 	bl	8002254 <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3301      	adds	r3, #1
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002644:	dbf3      	blt.n	800262e <memory_reset+0xc>
	}
}
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x78>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 8002662:	2300      	movs	r3, #0
 8002664:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 8002666:	2102      	movs	r1, #2
 8002668:	4818      	ldr	r0, [pc, #96]	; (80026cc <HAL_GPIO_EXTI_Callback+0x7c>)
 800266a:	f002 f80f 	bl	800468c <HAL_GPIO_ReadPin>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d11b      	bne.n	80026ac <HAL_GPIO_EXTI_Callback+0x5c>
 8002674:	89fb      	ldrh	r3, [r7, #14]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d018      	beq.n	80026ac <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 800267a:	4813      	ldr	r0, [pc, #76]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x78>)
 800267c:	f005 fc1c 	bl	8007eb8 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x78>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268e:	d902      	bls.n	8002696 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 8002690:	2301      	movs	r3, #1
 8002692:	737b      	strb	r3, [r7, #13]
 8002694:	e001      	b.n	800269a <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 8002696:	2302      	movs	r3, #2
 8002698:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_GPIO_EXTI_Callback+0x80>)
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	f107 010d 	add.w	r1, r7, #13
 80026a2:	2300      	movs	r3, #0
 80026a4:	2200      	movs	r2, #0
 80026a6:	f00a fcab 	bl	800d000 <xQueueGenericSendFromISR>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
		HAL_TIM_Base_Start(&htim3);
	}
}
 80026aa:	e009      	b.n	80026c0 <HAL_GPIO_EXTI_Callback+0x70>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 80026ac:	2102      	movs	r1, #2
 80026ae:	4807      	ldr	r0, [pc, #28]	; (80026cc <HAL_GPIO_EXTI_Callback+0x7c>)
 80026b0:	f001 ffec 	bl	800468c <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_GPIO_EXTI_Callback+0x70>
		HAL_TIM_Base_Start(&htim3);
 80026ba:	4803      	ldr	r0, [pc, #12]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x78>)
 80026bc:	f005 fba2 	bl	8007e04 <HAL_TIM_Base_Start>
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000868 	.word	0x20000868
 80026cc:	40020000 	.word	0x40020000
 80026d0:	200008d8 	.word	0x200008d8

080026d4 <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80026d8:	2108      	movs	r1, #8
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <BUZZ+0x20>)
 80026dc:	f005 fcd0 	bl	8008080 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80026e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e4:	f001 fd48 	bl	8004178 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80026e8:	2108      	movs	r1, #8
 80026ea:	4802      	ldr	r0, [pc, #8]	; (80026f4 <BUZZ+0x20>)
 80026ec:	f005 fd78 	bl	80081e0 <HAL_TIM_PWM_Stop>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000820 	.word	0x20000820

080026f8 <write_card>:

void write_card(Card* towrite) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 8002700:	f7fe fedf 	bl	80014c2 <OLED_Clear>
	MFRC_ANTON();
 8002704:	f7fe faec 	bl	8000ce0 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 8002708:	2200      	movs	r2, #0
 800270a:	4926      	ldr	r1, [pc, #152]	; (80027a4 <write_card+0xac>)
 800270c:	2002      	movs	r0, #2
 800270e:	f7ff f8b4 	bl	800187a <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fdf6 	bl	8001304 <UL_writecard>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d118      	bne.n	8002750 <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 800271e:	2200      	movs	r2, #0
 8002720:	4921      	ldr	r1, [pc, #132]	; (80027a8 <write_card+0xb0>)
 8002722:	2004      	movs	r0, #4
 8002724:	f7ff f8a9 	bl	800187a <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 8002728:	2200      	movs	r2, #0
 800272a:	4920      	ldr	r1, [pc, #128]	; (80027ac <write_card+0xb4>)
 800272c:	2006      	movs	r0, #6
 800272e:	f7ff f8a4 	bl	800187a <OLED_PrintCent>
		MFRC_ANTOFF();
 8002732:	f7fe fb0f 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(2000);
 8002736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800273a:	f00a f8ae 	bl	800c89a <osDelay>
		vTaskResume(HomeHandle);
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <write_card+0xb8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f00b f9c4 	bl	800dad0 <vTaskResume>
		vTaskSuspend(NULL);
 8002748:	2000      	movs	r0, #0
 800274a:	f00b f919 	bl	800d980 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 800274e:	e025      	b.n	800279c <write_card+0xa4>
		MFRC_HALTA(); //Deselect card
 8002750:	f7fe fbdc 	bl	8000f0c <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 8002754:	2200      	movs	r2, #0
 8002756:	4917      	ldr	r1, [pc, #92]	; (80027b4 <write_card+0xbc>)
 8002758:	2004      	movs	r0, #4
 800275a:	f7ff f88e 	bl	800187a <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fe5a 	bl	8001418 <UL_verify>
 8002764:	4603      	mov	r3, r0
 8002766:	2bcc      	cmp	r3, #204	; 0xcc
 8002768:	d105      	bne.n	8002776 <write_card+0x7e>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 800276a:	2200      	movs	r2, #0
 800276c:	4912      	ldr	r1, [pc, #72]	; (80027b8 <write_card+0xc0>)
 800276e:	2006      	movs	r0, #6
 8002770:	f7ff f883 	bl	800187a <OLED_PrintCent>
 8002774:	e004      	b.n	8002780 <write_card+0x88>
			OLED_PrintCent(6, "COULDN'T VERIFY", NORMAL);
 8002776:	2200      	movs	r2, #0
 8002778:	4910      	ldr	r1, [pc, #64]	; (80027bc <write_card+0xc4>)
 800277a:	2006      	movs	r0, #6
 800277c:	f7ff f87d 	bl	800187a <OLED_PrintCent>
		MFRC_ANTOFF();
 8002780:	f7fe fae8 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(1000);
 8002784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002788:	f00a f887 	bl	800c89a <osDelay>
		vTaskResume(HomeHandle);
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <write_card+0xb8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f00b f99d 	bl	800dad0 <vTaskResume>
		vTaskSuspend(NULL);
 8002796:	2000      	movs	r0, #0
 8002798:	f00b f8f2 	bl	800d980 <vTaskSuspend>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	080109b4 	.word	0x080109b4
 80027a8:	080109c0 	.word	0x080109c0
 80027ac:	080109d8 	.word	0x080109d8
 80027b0:	200008bc 	.word	0x200008bc
 80027b4:	080109e0 	.word	0x080109e0
 80027b8:	080109f0 	.word	0x080109f0
 80027bc:	08010a04 	.word	0x08010a04

080027c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c4:	f001 fc96 	bl	80040f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c8:	f000 f8c0 	bl	800294c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027cc:	f000 fa88 	bl	8002ce0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80027d0:	f000 f926 	bl	8002a20 <MX_I2C1_Init>
  MX_SPI1_Init();
 80027d4:	f000 f952 	bl	8002a7c <MX_SPI1_Init>
  MX_SPI2_Init();
 80027d8:	f000 f988 	bl	8002aec <MX_SPI2_Init>
  MX_TIM2_Init();
 80027dc:	f000 f9bc 	bl	8002b58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027e0:	f000 fa30 	bl	8002c44 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80027e4:	f009 ff7c 	bl	800c6e0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 80027e8:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <main+0x100>)
 80027ea:	2104      	movs	r1, #4
 80027ec:	2001      	movs	r0, #1
 80027ee:	f00a f86f 	bl	800c8d0 <osMessageQueueNew>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4a33      	ldr	r2, [pc, #204]	; (80028c4 <main+0x104>)
 80027f6:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 80027f8:	4a33      	ldr	r2, [pc, #204]	; (80028c8 <main+0x108>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2001      	movs	r0, #1
 80027fe:	f00a f867 	bl	800c8d0 <osMessageQueueNew>
 8002802:	4603      	mov	r3, r0
 8002804:	4a31      	ldr	r2, [pc, #196]	; (80028cc <main+0x10c>)
 8002806:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <main+0x110>)
 800280a:	2102      	movs	r1, #2
 800280c:	2001      	movs	r0, #1
 800280e:	f00a f85f 	bl	800c8d0 <osMessageQueueNew>
 8002812:	4603      	mov	r3, r0
 8002814:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <main+0x114>)
 8002816:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardOut */
  KeyboardOutHandle = osMessageQueueNew (1, sizeof(char*), &KeyboardOut_attributes);
 8002818:	4a2f      	ldr	r2, [pc, #188]	; (80028d8 <main+0x118>)
 800281a:	2104      	movs	r1, #4
 800281c:	2001      	movs	r0, #1
 800281e:	f00a f857 	bl	800c8d0 <osMessageQueueNew>
 8002822:	4603      	mov	r3, r0
 8002824:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <main+0x11c>)
 8002826:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8002828:	4a2d      	ldr	r2, [pc, #180]	; (80028e0 <main+0x120>)
 800282a:	2100      	movs	r1, #0
 800282c:	482d      	ldr	r0, [pc, #180]	; (80028e4 <main+0x124>)
 800282e:	f009 ffa1 	bl	800c774 <osThreadNew>
 8002832:	4603      	mov	r3, r0
 8002834:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <main+0x128>)
 8002836:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8002838:	4a2c      	ldr	r2, [pc, #176]	; (80028ec <main+0x12c>)
 800283a:	2100      	movs	r1, #0
 800283c:	482c      	ldr	r0, [pc, #176]	; (80028f0 <main+0x130>)
 800283e:	f009 ff99 	bl	800c774 <osThreadNew>
 8002842:	4603      	mov	r3, r0
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <main+0x134>)
 8002846:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8002848:	4a2b      	ldr	r2, [pc, #172]	; (80028f8 <main+0x138>)
 800284a:	2100      	movs	r1, #0
 800284c:	482b      	ldr	r0, [pc, #172]	; (80028fc <main+0x13c>)
 800284e:	f009 ff91 	bl	800c774 <osThreadNew>
 8002852:	4603      	mov	r3, r0
 8002854:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <main+0x140>)
 8002856:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8002858:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <main+0x144>)
 800285a:	2100      	movs	r1, #0
 800285c:	482a      	ldr	r0, [pc, #168]	; (8002908 <main+0x148>)
 800285e:	f009 ff89 	bl	800c774 <osThreadNew>
 8002862:	4603      	mov	r3, r0
 8002864:	4a29      	ldr	r2, [pc, #164]	; (800290c <main+0x14c>)
 8002866:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <main+0x150>)
 800286a:	2100      	movs	r1, #0
 800286c:	4829      	ldr	r0, [pc, #164]	; (8002914 <main+0x154>)
 800286e:	f009 ff81 	bl	800c774 <osThreadNew>
 8002872:	4603      	mov	r3, r0
 8002874:	4a28      	ldr	r2, [pc, #160]	; (8002918 <main+0x158>)
 8002876:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8002878:	4a28      	ldr	r2, [pc, #160]	; (800291c <main+0x15c>)
 800287a:	2100      	movs	r1, #0
 800287c:	4828      	ldr	r0, [pc, #160]	; (8002920 <main+0x160>)
 800287e:	f009 ff79 	bl	800c774 <osThreadNew>
 8002882:	4603      	mov	r3, r0
 8002884:	4a27      	ldr	r2, [pc, #156]	; (8002924 <main+0x164>)
 8002886:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 8002888:	4a27      	ldr	r2, [pc, #156]	; (8002928 <main+0x168>)
 800288a:	2100      	movs	r1, #0
 800288c:	4827      	ldr	r0, [pc, #156]	; (800292c <main+0x16c>)
 800288e:	f009 ff71 	bl	800c774 <osThreadNew>
 8002892:	4603      	mov	r3, r0
 8002894:	4a26      	ldr	r2, [pc, #152]	; (8002930 <main+0x170>)
 8002896:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <main+0x174>)
 800289a:	2100      	movs	r1, #0
 800289c:	4826      	ldr	r0, [pc, #152]	; (8002938 <main+0x178>)
 800289e:	f009 ff69 	bl	800c774 <osThreadNew>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4a25      	ldr	r2, [pc, #148]	; (800293c <main+0x17c>)
 80028a6:	6013      	str	r3, [r2, #0]

  /* creation of Keyboard */
  KeyboardHandle = osThreadNew(StartKeyboard, NULL, &Keyboard_attributes);
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <main+0x180>)
 80028aa:	2100      	movs	r1, #0
 80028ac:	4825      	ldr	r0, [pc, #148]	; (8002944 <main+0x184>)
 80028ae:	f009 ff61 	bl	800c774 <osThreadNew>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a24      	ldr	r2, [pc, #144]	; (8002948 <main+0x188>)
 80028b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80028b8:	f009 ff36 	bl	800c728 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <main+0xfc>
 80028be:	bf00      	nop
 80028c0:	08011014 	.word	0x08011014
 80028c4:	200008d4 	.word	0x200008d4
 80028c8:	0801102c 	.word	0x0801102c
 80028cc:	200008d8 	.word	0x200008d8
 80028d0:	08011044 	.word	0x08011044
 80028d4:	200008dc 	.word	0x200008dc
 80028d8:	0801105c 	.word	0x0801105c
 80028dc:	200008e0 	.word	0x200008e0
 80028e0:	08010ed0 	.word	0x08010ed0
 80028e4:	08002dd9 	.word	0x08002dd9
 80028e8:	200008b0 	.word	0x200008b0
 80028ec:	08010ef4 	.word	0x08010ef4
 80028f0:	08002f31 	.word	0x08002f31
 80028f4:	200008b4 	.word	0x200008b4
 80028f8:	08010f18 	.word	0x08010f18
 80028fc:	08002fc1 	.word	0x08002fc1
 8002900:	200008b8 	.word	0x200008b8
 8002904:	08010f3c 	.word	0x08010f3c
 8002908:	08003061 	.word	0x08003061
 800290c:	200008bc 	.word	0x200008bc
 8002910:	08010f60 	.word	0x08010f60
 8002914:	08003135 	.word	0x08003135
 8002918:	200008c0 	.word	0x200008c0
 800291c:	08010f84 	.word	0x08010f84
 8002920:	0800325d 	.word	0x0800325d
 8002924:	200008c4 	.word	0x200008c4
 8002928:	08010fa8 	.word	0x08010fa8
 800292c:	08003335 	.word	0x08003335
 8002930:	200008c8 	.word	0x200008c8
 8002934:	08010fcc 	.word	0x08010fcc
 8002938:	080033d9 	.word	0x080033d9
 800293c:	200008cc 	.word	0x200008cc
 8002940:	08010ff0 	.word	0x08010ff0
 8002944:	08003481 	.word	0x08003481
 8002948:	200008d0 	.word	0x200008d0

0800294c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b094      	sub	sp, #80	; 0x50
 8002950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002952:	f107 0320 	add.w	r3, r7, #32
 8002956:	2230      	movs	r2, #48	; 0x30
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f00d faf8 	bl	800ff50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <SystemClock_Config+0xcc>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <SystemClock_Config+0xcc>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <SystemClock_Config+0xcc>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <SystemClock_Config+0xd0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002998:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <SystemClock_Config+0xd0>)
 800299a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <SystemClock_Config+0xd0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b6:	2302      	movs	r3, #2
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029c0:	2308      	movs	r3, #8
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029c4:	23a8      	movs	r3, #168	; 0xa8
 80029c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80029c8:	2304      	movs	r3, #4
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029cc:	2307      	movs	r3, #7
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d0:	f107 0320 	add.w	r3, r7, #32
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 f8df 	bl	8006b98 <HAL_RCC_OscConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80029e0:	f000 fdc0 	bl	8003564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e4:	230f      	movs	r3, #15
 80029e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e8:	2302      	movs	r3, #2
 80029ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 fb41 	bl	8007088 <HAL_RCC_ClockConfig>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002a0c:	f000 fdaa 	bl	8003564 <Error_Handler>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3750      	adds	r7, #80	; 0x50
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40007000 	.word	0x40007000

08002a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <MX_I2C1_Init+0x54>)
 8002a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <MX_I2C1_Init+0x58>)
 8002a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <MX_I2C1_Init+0x50>)
 8002a5e:	f001 fe5f 	bl	8004720 <HAL_I2C_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a68:	f000 fd7c 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000071c 	.word	0x2000071c
 8002a74:	40005400 	.word	0x40005400
 8002a78:	000186a0 	.word	0x000186a0

08002a7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <MX_SPI1_Init+0x6c>)
 8002a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002a90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a94:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002ab2:	2218      	movs	r2, #24
 8002ab4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002aca:	220a      	movs	r2, #10
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_SPI1_Init+0x68>)
 8002ad0:	f004 fd16 	bl	8007500 <HAL_SPI_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002ada:	f000 fd43 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000770 	.word	0x20000770
 8002ae8:	40013000 	.word	0x40013000

08002aec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002af2:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <MX_SPI2_Init+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002afc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b38:	220a      	movs	r2, #10
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b3c:	4804      	ldr	r0, [pc, #16]	; (8002b50 <MX_SPI2_Init+0x64>)
 8002b3e:	f004 fcdf 	bl	8007500 <HAL_SPI_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b48:	f000 fd0c 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200007c8 	.word	0x200007c8
 8002b54:	40003800 	.word	0x40003800

08002b58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08e      	sub	sp, #56	; 0x38
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	f107 0320 	add.w	r3, r7, #32
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	615a      	str	r2, [r3, #20]
 8002b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b88:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002b92:	f240 12a3 	movw	r2, #419	; 0x1a3
 8002b96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002ba0:	2231      	movs	r2, #49	; 0x31
 8002ba2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bb0:	4823      	ldr	r0, [pc, #140]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002bb2:	f005 f8d7 	bl	8007d64 <HAL_TIM_Base_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002bbc:	f000 fcd2 	bl	8003564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bca:	4619      	mov	r1, r3
 8002bcc:	481c      	ldr	r0, [pc, #112]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002bce:	f005 fd35 	bl	800863c <HAL_TIM_ConfigClockSource>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002bd8:	f000 fcc4 	bl	8003564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bdc:	4818      	ldr	r0, [pc, #96]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002bde:	f005 f9f5 	bl	8007fcc <HAL_TIM_PWM_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002be8:	f000 fcbc 	bl	8003564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bf4:	f107 0320 	add.w	r3, r7, #32
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4811      	ldr	r0, [pc, #68]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002bfc:	f006 f8da 	bl	8008db4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002c06:	f000 fcad 	bl	8003564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c0a:	2360      	movs	r3, #96	; 0x60
 8002c0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8002c0e:	2318      	movs	r3, #24
 8002c10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4807      	ldr	r0, [pc, #28]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002c22:	f005 fc49 	bl	80084b8 <HAL_TIM_PWM_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c2c:	f000 fc9a 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <MX_TIM2_Init+0xe8>)
 8002c32:	f001 f907 	bl	8003e44 <HAL_TIM_MspPostInit>

}
 8002c36:	bf00      	nop
 8002c38:	3738      	adds	r7, #56	; 0x38
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000820 	.word	0x20000820

08002c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c62:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <MX_TIM3_Init+0x98>)
 8002c64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c68:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002c6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c76:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002c7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c88:	4813      	ldr	r0, [pc, #76]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002c8a:	f005 f86b 	bl	8007d64 <HAL_TIM_Base_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002c94:	f000 fc66 	bl	8003564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480c      	ldr	r0, [pc, #48]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002ca6:	f005 fcc9 	bl	800863c <HAL_TIM_ConfigClockSource>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002cb0:	f000 fc58 	bl	8003564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <MX_TIM3_Init+0x94>)
 8002cc2:	f006 f877 	bl	8008db4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002ccc:	f000 fc4a 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000868 	.word	0x20000868
 8002cdc:	40000400 	.word	0x40000400

08002ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a33      	ldr	r2, [pc, #204]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <MX_GPIO_Init+0xec>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002d50:	481f      	ldr	r0, [pc, #124]	; (8002dd0 <MX_GPIO_Init+0xf0>)
 8002d52:	f001 fcb3 	bl	80046bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2122      	movs	r1, #34	; 0x22
 8002d5a:	481e      	ldr	r0, [pc, #120]	; (8002dd4 <MX_GPIO_Init+0xf4>)
 8002d5c:	f001 fcae 	bl	80046bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002d60:	2302      	movs	r3, #2
 8002d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002d64:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	4619      	mov	r1, r3
 8002d74:	4816      	ldr	r0, [pc, #88]	; (8002dd0 <MX_GPIO_Init+0xf0>)
 8002d76:	f001 fb05 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002d7a:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d80:	2301      	movs	r3, #1
 8002d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4619      	mov	r1, r3
 8002d92:	480f      	ldr	r0, [pc, #60]	; (8002dd0 <MX_GPIO_Init+0xf0>)
 8002d94:	f001 faf6 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002d98:	2322      	movs	r3, #34	; 0x22
 8002d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4619      	mov	r1, r3
 8002dae:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <MX_GPIO_Init+0xf4>)
 8002db0:	f001 fae8 	bl	8004384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	2105      	movs	r1, #5
 8002db8:	2007      	movs	r0, #7
 8002dba:	f001 fab9 	bl	8004330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002dbe:	2007      	movs	r0, #7
 8002dc0:	f001 fad2 	bl	8004368 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dc4:	bf00      	nop
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400

08002dd8 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b09c      	sub	sp, #112	; 0x70
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002de0:	f00c fb84 	bl	800f4ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8002de4:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <Start_Init+0x11c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f00a fdc9 	bl	800d980 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002dee:	4b42      	ldr	r3, [pc, #264]	; (8002ef8 <Start_Init+0x120>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f00a fdc4 	bl	800d980 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <Start_Init+0x124>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f00a fdbf 	bl	800d980 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <Start_Init+0x128>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f00a fdba 	bl	800d980 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <Start_Init+0x12c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00a fdb5 	bl	800d980 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <Start_Init+0x130>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f00a fdb0 	bl	800d980 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 8002e20:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <Start_Init+0x134>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f00a fdab 	bl	800d980 <vTaskSuspend>
    vTaskSuspend(KeyboardHandle);
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <Start_Init+0x138>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f00a fda6 	bl	800d980 <vTaskSuspend>

    MFRC_INIT();
 8002e34:	f7fd ffd6 	bl	8000de4 <MFRC_INIT>
    MFRC_ANTOFF();
 8002e38:	f7fd ff8c 	bl	8000d54 <MFRC_ANTOFF>
    OLED_INIT();
 8002e3c:	f7fe fc00 	bl	8001640 <OLED_INIT>
    OLED_Print(TC);
 8002e40:	4834      	ldr	r0, [pc, #208]	; (8002f14 <Start_Init+0x13c>)
 8002e42:	f7fe fd3e 	bl	80018c2 <OLED_Print>
    MEM_INIT();
 8002e46:	f7ff fa41 	bl	80022cc <MEM_INIT>
    memory_reset();
 8002e4a:	f7ff fbea 	bl	8002622 <memory_reset>

    uint8_t fake_contents[64] = {0x04, 0x41, 0xBF, 0x72,
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <Start_Init+0x140>)
 8002e50:	f107 0408 	add.w	r4, r7, #8
 8002e54:	461d      	mov	r5, r3
 8002e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x63};
    uint8_t uid[7] = {0x04, 0x41, 0xBF, 0x72, 0x1A, 0x06, 0x6C};
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <Start_Init+0x144>)
 8002e6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e74:	6018      	str	r0, [r3, #0]
 8002e76:	3304      	adds	r3, #4
 8002e78:	8019      	strh	r1, [r3, #0]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	0c0a      	lsrs	r2, r1, #16
 8002e7e:	701a      	strb	r2, [r3, #0]

    Card fake_card = {
 8002e80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e86:	2307      	movs	r3, #7
 8002e88:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <Start_Init+0x148>)
 8002e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <Start_Init+0x14c>)
 8002e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea0:	2340      	movs	r3, #64	; 0x40
 8002ea2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    	.uidsize = 7,
		.name = "fake",
		.type = "MIFARE Ultralight",
		.read_protected = 0
    };
    enter_card(&fake_card, 0, "fake");
 8002ea6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <Start_Init+0x148>)
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fb5d 	bl	800356e <enter_card>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002eb4:	bf00      	nop
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	481b      	ldr	r0, [pc, #108]	; (8002f28 <Start_Init+0x150>)
 8002eba:	f001 fbe7 	bl	800468c <HAL_GPIO_ReadPin>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f8      	bne.n	8002eb6 <Start_Init+0xde>
    osDelay(10);
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f009 fce8 	bl	800c89a <osDelay>
    uint8_t clear = NO_PRESS;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    xQueueSend(UserInputHandle, &clear, 0);
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <Start_Init+0x154>)
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2200      	movs	r2, #0
 8002edc:	f009 ff92 	bl	800ce04 <xQueueGenericSend>
    vTaskResume(HomeHandle);
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <Start_Init+0x124>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f00a fdf3 	bl	800dad0 <vTaskResume>
    vTaskSuspend(NULL);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f00a fd48 	bl	800d980 <vTaskSuspend>
  {
 8002ef0:	e778      	b.n	8002de4 <Start_Init+0xc>
 8002ef2:	bf00      	nop
 8002ef4:	200008b4 	.word	0x200008b4
 8002ef8:	200008b8 	.word	0x200008b8
 8002efc:	200008bc 	.word	0x200008bc
 8002f00:	200008c0 	.word	0x200008c0
 8002f04:	200008c4 	.word	0x200008c4
 8002f08:	200008c8 	.word	0x200008c8
 8002f0c:	200008cc 	.word	0x200008cc
 8002f10:	200008d0 	.word	0x200008d0
 8002f14:	20000400 	.word	0x20000400
 8002f18:	08010a30 	.word	0x08010a30
 8002f1c:	08010a70 	.word	0x08010a70
 8002f20:	08010a14 	.word	0x08010a14
 8002f24:	08010a1c 	.word	0x08010a1c
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	200008d8 	.word	0x200008d8

08002f30 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002f38:	201c      	movs	r0, #28
 8002f3a:	f00c ffeb 	bl	800ff14 <malloc>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8002f42:	68bc      	ldr	r4, [r7, #8]
 8002f44:	2040      	movs	r0, #64	; 0x40
 8002f46:	f00c ffe5 	bl	800ff14 <malloc>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8002f4e:	68bc      	ldr	r4, [r7, #8]
 8002f50:	2007      	movs	r0, #7
 8002f52:	f00c ffdf 	bl	800ff14 <malloc>
 8002f56:	4603      	mov	r3, r0
 8002f58:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 8002f5e:	f7fd febf 	bl	8000ce0 <MFRC_ANTON>
	if (ranonce == 0){
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4812      	ldr	r0, [pc, #72]	; (8002fb4 <StartReadCard+0x84>)
 8002f6c:	f7fe fd74 	bl	8001a58 <OLED_SCREEN>
		ranonce++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3301      	adds	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe f993 	bl	80012a4 <UL_readcard>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2bcc      	cmp	r3, #204	; 0xcc
 8002f82:	d1ec      	bne.n	8002f5e <StartReadCard+0x2e>
			BUZZ();
 8002f84:	f7ff fba6 	bl	80026d4 <BUZZ>
			MFRC_ANTOFF();
 8002f88:	f7fd fee4 	bl	8000d54 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <StartReadCard+0x88>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	f107 0108 	add.w	r1, r7, #8
 8002f94:	2300      	movs	r3, #0
 8002f96:	2200      	movs	r2, #0
 8002f98:	f009 ff34 	bl	800ce04 <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <StartReadCard+0x8c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f00a fd95 	bl	800dad0 <vTaskResume>
			ranonce = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f00a fce8 	bl	800d980 <vTaskSuspend>
	MFRC_ANTON();
 8002fb0:	e7d5      	b.n	8002f5e <StartReadCard+0x2e>
 8002fb2:	bf00      	nop
 8002fb4:	08011174 	.word	0x08011174
 8002fb8:	200008d4 	.word	0x200008d4
 8002fbc:	200008c0 	.word	0x200008c0

08002fc0 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	481e      	ldr	r0, [pc, #120]	; (8003058 <StartWriteCard+0x98>)
 8002fde:	f7fe fd3b 	bl	8001a58 <OLED_SCREEN>
	  	ranonce++;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <StartWriteCard+0x9c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f107 010f 	add.w	r1, r7, #15
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f00a f8a0 	bl	800d138 <xQueueReceive>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d1ea      	bne.n	8002fd4 <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11c      	bne.n	800303e <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	b29b      	uxth	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fd4d 	bl	8003aa8 <entry_present>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1df      	bne.n	8002fd4 <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	b29b      	uxth	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fb60 	bl	80036de <read_card_entry>
 800301e:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	b29b      	uxth	r3, r3
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fd5c 	bl	8003ae2 <get_file_name>
 800302a:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	2102      	movs	r1, #2
 8003030:	4809      	ldr	r0, [pc, #36]	; (8003058 <StartWriteCard+0x98>)
 8003032:	f7fe fd4a 	bl	8001aca <OLED_SCRNREF>
				  free(file_name);
 8003036:	6938      	ldr	r0, [r7, #16]
 8003038:	f00c ff74 	bl	800ff24 <free>
 800303c:	e7ca      	b.n	8002fd4 <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d1c7      	bne.n	8002fd4 <StartWriteCard+0x14>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0c4      	beq.n	8002fd4 <StartWriteCard+0x14>
			  	ranonce= 0;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
			  	write_card(towrite);
 800304e:	69b8      	ldr	r0, [r7, #24]
 8003050:	f7ff fb52 	bl	80026f8 <write_card>
	  if (ranonce == 0){
 8003054:	e7be      	b.n	8002fd4 <StartWriteCard+0x14>
 8003056:	bf00      	nop
 8003058:	0801119c 	.word	0x0801119c
 800305c:	200008d8 	.word	0x200008d8

08003060 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10c      	bne.n	8003090 <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8003076:	2100      	movs	r1, #0
 8003078:	4828      	ldr	r0, [pc, #160]	; (800311c <StartHome+0xbc>)
 800307a:	f7fe fced 	bl	8001a58 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	2201      	movs	r2, #1
 8003082:	4619      	mov	r1, r3
 8003084:	4825      	ldr	r0, [pc, #148]	; (800311c <StartHome+0xbc>)
 8003086:	f7fe fd51 	bl	8001b2c <OLED_SELECT>
		  ranonce++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3301      	adds	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003090:	4b23      	ldr	r3, [pc, #140]	; (8003120 <StartHome+0xc0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f107 010a 	add.w	r1, r7, #10
 8003098:	2200      	movs	r2, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f00a f84c 	bl	800d138 <xQueueReceive>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d1e4      	bne.n	8003070 <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 80030a6:	7abb      	ldrb	r3, [r7, #10]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d107      	bne.n	80030bc <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 80030ac:	f107 030b 	add.w	r3, r7, #11
 80030b0:	2201      	movs	r2, #1
 80030b2:	4619      	mov	r1, r3
 80030b4:	4819      	ldr	r0, [pc, #100]	; (800311c <StartHome+0xbc>)
 80030b6:	f7fe ff2d 	bl	8001f14 <oled_move_selection>
 80030ba:	e7d9      	b.n	8003070 <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 80030bc:	7abb      	ldrb	r3, [r7, #10]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d1d6      	bne.n	8003070 <StartHome+0x10>
			  switch(select_index) {
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d823      	bhi.n	8003110 <StartHome+0xb0>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <StartHome+0x70>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030ed 	.word	0x080030ed
 80030d8:	080030f9 	.word	0x080030f9
 80030dc:	08003105 	.word	0x08003105
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <StartHome+0xc4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00a fcf3 	bl	800dad0 <vTaskResume>
			  		  break;
 80030ea:	e011      	b.n	8003110 <StartHome+0xb0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <StartHome+0xc8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00a fced 	bl	800dad0 <vTaskResume>
			  		  break;
 80030f6:	e00b      	b.n	8003110 <StartHome+0xb0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <StartHome+0xcc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f00a fce7 	bl	800dad0 <vTaskResume>
			  		  break;
 8003102:	e005      	b.n	8003110 <StartHome+0xb0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <StartHome+0xd0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f00a fce1 	bl	800dad0 <vTaskResume>
			  		  break;
 800310e:	bf00      	nop
			  }
			  ranonce = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 8003114:	2000      	movs	r0, #0
 8003116:	f00a fc33 	bl	800d980 <vTaskSuspend>
	  if (ranonce == 0) {
 800311a:	e7a9      	b.n	8003070 <StartHome+0x10>
 800311c:	08011160 	.word	0x08011160
 8003120:	200008d8 	.word	0x200008d8
 8003124:	200008b4 	.word	0x200008b4
 8003128:	200008b8 	.word	0x200008b8
 800312c:	200008c4 	.word	0x200008c4
 8003130:	200008cc 	.word	0x200008cc

08003134 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* read_card;
	char* card_name = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d130      	bne.n	80031b0 <CardFoundStart+0x7c>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 800314e:	bf00      	nop
 8003150:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <CardFoundStart+0x110>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f107 0110 	add.w	r1, r7, #16
 8003158:	2200      	movs	r2, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f009 ffec 	bl	800d138 <xQueueReceive>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d1f4      	bne.n	8003150 <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	791b      	ldrb	r3, [r3, #4]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7fe f907 	bl	8001384 <uid_tostring>
 8003176:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8003178:	2100      	movs	r1, #0
 800317a:	4833      	ldr	r0, [pc, #204]	; (8003248 <CardFoundStart+0x114>)
 800317c:	f7fe fc6c 	bl	8001a58 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	2101      	movs	r1, #1
 8003184:	4830      	ldr	r0, [pc, #192]	; (8003248 <CardFoundStart+0x114>)
 8003186:	f7fe fca0 	bl	8001aca <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	461a      	mov	r2, r3
 8003190:	2102      	movs	r1, #2
 8003192:	482d      	ldr	r0, [pc, #180]	; (8003248 <CardFoundStart+0x114>)
 8003194:	f7fe fc99 	bl	8001aca <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2200      	movs	r2, #0
 800319c:	4619      	mov	r1, r3
 800319e:	482a      	ldr	r0, [pc, #168]	; (8003248 <CardFoundStart+0x114>)
 80031a0:	f7fe fcc4 	bl	8001b2c <OLED_SELECT>
		ranonce++;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3301      	adds	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 80031aa:	69b8      	ldr	r0, [r7, #24]
 80031ac:	f00c feba 	bl	800ff24 <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <CardFoundStart+0x118>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f107 0116 	add.w	r1, r7, #22
 80031b8:	2200      	movs	r2, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f009 ffbc 	bl	800d138 <xQueueReceive>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d1c0      	bne.n	8003148 <CardFoundStart+0x14>
 		if (button_state == SHORT_PRESS) {
 80031c6:	7dbb      	ldrb	r3, [r7, #22]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d107      	bne.n	80031dc <CardFoundStart+0xa8>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 80031cc:	f107 0317 	add.w	r3, r7, #23
 80031d0:	2200      	movs	r2, #0
 80031d2:	4619      	mov	r1, r3
 80031d4:	481c      	ldr	r0, [pc, #112]	; (8003248 <CardFoundStart+0x114>)
 80031d6:	f7fe fe9d 	bl	8001f14 <oled_move_selection>
 80031da:	e7b5      	b.n	8003148 <CardFoundStart+0x14>
 		} else if (button_state == LONG_PRESS) {
 80031dc:	7dbb      	ldrb	r3, [r7, #22]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d1b2      	bne.n	8003148 <CardFoundStart+0x14>
 			if (select_index == 0) {
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d121      	bne.n	800322c <CardFoundStart+0xf8>

 				vTaskResume(KeyboardHandle);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <CardFoundStart+0x11c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f00a fc6f 	bl	800dad0 <vTaskResume>

 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 80031f2:	e002      	b.n	80031fa <CardFoundStart+0xc6>
 					osDelay(1); //wait until keyboard is finished
 80031f4:	2001      	movs	r0, #1
 80031f6:	f009 fb50 	bl	800c89a <osDelay>
 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <CardFoundStart+0x120>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f107 010c 	add.w	r1, r7, #12
 8003202:	2200      	movs	r2, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f009 ff97 	bl	800d138 <xQueueReceive>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d1f1      	bne.n	80031f4 <CardFoundStart+0xc0>
 				}
 				enter_card(read_card, mem_find_free_block(), card_name);
 8003210:	693c      	ldr	r4, [r7, #16]
 8003212:	f7ff f9df 	bl	80025d4 <mem_find_free_block>
 8003216:	4603      	mov	r3, r0
 8003218:	b29b      	uxth	r3, r3
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4619      	mov	r1, r3
 800321e:	4620      	mov	r0, r4
 8003220:	f000 f9a5 	bl	800356e <enter_card>
 				free(card_name);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4618      	mov	r0, r3
 8003228:	f00c fe7c 	bl	800ff24 <free>
 			}
 			vTaskResume(HomeHandle);
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <CardFoundStart+0x124>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f00a fc4d 	bl	800dad0 <vTaskResume>
 			ranonce = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 			vTaskSuspend(NULL);
 800323a:	2000      	movs	r0, #0
 800323c:	f00a fba0 	bl	800d980 <vTaskSuspend>
	if (ranonce == 0) {
 8003240:	e782      	b.n	8003148 <CardFoundStart+0x14>
 8003242:	bf00      	nop
 8003244:	200008d4 	.word	0x200008d4
 8003248:	08011188 	.word	0x08011188
 800324c:	200008d8 	.word	0x200008d8
 8003250:	200008d0 	.word	0x200008d0
 8003254:	200008e0 	.word	0x200008e0
 8003258:	200008bc 	.word	0x200008bc

0800325c <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d110      	bne.n	8003294 <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 8003272:	2100      	movs	r1, #0
 8003274:	482a      	ldr	r0, [pc, #168]	; (8003320 <StartShowFiles+0xc4>)
 8003276:	f7fe fbef 	bl	8001a58 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 800327a:	7afb      	ldrb	r3, [r7, #11]
 800327c:	2201      	movs	r2, #1
 800327e:	4619      	mov	r1, r3
 8003280:	4827      	ldr	r0, [pc, #156]	; (8003320 <StartShowFiles+0xc4>)
 8003282:	f7fe fc53 	bl	8001b2c <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 8003286:	2100      	movs	r1, #0
 8003288:	4825      	ldr	r0, [pc, #148]	; (8003320 <StartShowFiles+0xc4>)
 800328a:	f7fe fd2b 	bl	8001ce4 <OLED_display_files>
		  ranonce++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	3301      	adds	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <StartShowFiles+0xc8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f107 010a 	add.w	r1, r7, #10
 800329c:	2200      	movs	r2, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f009 ff4a 	bl	800d138 <xQueueReceive>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d1e0      	bne.n	800326c <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 80032aa:	7abb      	ldrb	r3, [r7, #10]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d107      	bne.n	80032c0 <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 80032b0:	f107 030b 	add.w	r3, r7, #11
 80032b4:	2201      	movs	r2, #1
 80032b6:	4619      	mov	r1, r3
 80032b8:	4819      	ldr	r0, [pc, #100]	; (8003320 <StartShowFiles+0xc4>)
 80032ba:	f7fe fe2b 	bl	8001f14 <oled_move_selection>
 80032be:	e7d5      	b.n	800326c <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 80032c0:	7abb      	ldrb	r3, [r7, #10]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d1d2      	bne.n	800326c <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 80032c6:	7afb      	ldrb	r3, [r7, #11]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d10a      	bne.n	80032e2 <StartShowFiles+0x86>
				  vTaskResume(HomeHandle);
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <StartShowFiles+0xcc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00a fbfd 	bl	800dad0 <vTaskResume>
				  ranonce = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 80032da:	2000      	movs	r0, #0
 80032dc:	f00a fb50 	bl	800d980 <vTaskSuspend>
 80032e0:	e7c4      	b.n	800326c <StartShowFiles+0x10>

			  } else if ((entry_present(select_index) == RFS_OK)) {
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fbde 	bl	8003aa8 <entry_present>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1bc      	bne.n	800326c <StartShowFiles+0x10>
				  uint16_t entry = select_index;
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <StartShowFiles+0xd0>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	f107 0108 	add.w	r1, r7, #8
 8003300:	2300      	movs	r3, #0
 8003302:	2200      	movs	r2, #0
 8003304:	f009 fd7e 	bl	800ce04 <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <StartShowFiles+0xd4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f00a fbdf 	bl	800dad0 <vTaskResume>
				  ranonce = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 8003316:	2000      	movs	r0, #0
 8003318:	f00a fb32 	bl	800d980 <vTaskSuspend>
	  if (ranonce == 0) {
 800331c:	e7a6      	b.n	800326c <StartShowFiles+0x10>
 800331e:	bf00      	nop
 8003320:	080111b0 	.word	0x080111b0
 8003324:	200008d8 	.word	0x200008d8
 8003328:	200008bc 	.word	0x200008bc
 800332c:	200008dc 	.word	0x200008dc
 8003330:	200008c8 	.word	0x200008c8

08003334 <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d112      	bne.n	8003370 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 800334a:	bf00      	nop
 800334c:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <StartShowFileData+0x94>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f107 0108 	add.w	r1, r7, #8
 8003354:	2200      	movs	r2, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f009 feee 	bl	800d138 <xQueueReceive>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d1f4      	bne.n	800334c <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fd95 	bl	8001e94 <oled_show_file>
    	ranonce++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <StartShowFileData+0x98>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f107 010a 	add.w	r1, r7, #10
 8003378:	2200      	movs	r2, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f009 fedc 	bl	800d138 <xQueueReceive>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d1de      	bne.n	8003344 <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 8003386:	7abb      	ldrb	r3, [r7, #10]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d107      	bne.n	800339c <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 800338c:	f107 030b 	add.w	r3, r7, #11
 8003390:	2200      	movs	r2, #0
 8003392:	4619      	mov	r1, r3
 8003394:	480e      	ldr	r0, [pc, #56]	; (80033d0 <StartShowFileData+0x9c>)
 8003396:	f7fe fdbd 	bl	8001f14 <oled_move_selection>
 800339a:	e7d3      	b.n	8003344 <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 800339c:	7abb      	ldrb	r3, [r7, #10]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d1d0      	bne.n	8003344 <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 80033a2:	7afb      	ldrb	r3, [r7, #11]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d103      	bne.n	80033b0 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fbc6 	bl	8003b3c <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <StartShowFileData+0xa0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f00a fb8b 	bl	800dad0 <vTaskResume>
    		ranonce = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 80033be:	2000      	movs	r0, #0
 80033c0:	f00a fade 	bl	800d980 <vTaskSuspend>
    if (ranonce == 0) {
 80033c4:	e7be      	b.n	8003344 <StartShowFileData+0x10>
 80033c6:	bf00      	nop
 80033c8:	200008dc 	.word	0x200008dc
 80033cc:	200008d8 	.word	0x200008d8
 80033d0:	080111c4 	.word	0x080111c4
 80033d4:	200008c4 	.word	0x200008c4

080033d8 <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 80033e4:	201c      	movs	r0, #28
 80033e6:	f00c fd95 	bl	800ff14 <malloc>
 80033ea:	4603      	mov	r3, r0
 80033ec:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 80033ee:	2040      	movs	r0, #64	; 0x40
 80033f0:	f00c fd90 	bl	800ff14 <malloc>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 80033fc:	2007      	movs	r0, #7
 80033fe:	f00c fd89 	bl	800ff14 <malloc>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 800340a:	f7fd fc69 	bl	8000ce0 <MFRC_ANTON>
    if (ranonce == 0) {
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 8003414:	2100      	movs	r1, #0
 8003416:	4817      	ldr	r0, [pc, #92]	; (8003474 <StartClone+0x9c>)
 8003418:	f7fe fb1e 	bl	8001a58 <OLED_SCREEN>
    	ranonce++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3301      	adds	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f7fd ff3e 	bl	80012a4 <UL_readcard>
 8003428:	4603      	mov	r3, r0
 800342a:	2bcc      	cmp	r3, #204	; 0xcc
 800342c:	d1ed      	bne.n	800340a <StartClone+0x32>
    	MFRC_HALTA(); //De-select card
 800342e:	f7fd fd6d 	bl	8000f0c <MFRC_HALTA>
    	BUZZ();
 8003432:	f7ff f94f 	bl	80026d4 <BUZZ>
    	OLED_Clear();
 8003436:	f7fe f844 	bl	80014c2 <OLED_Clear>
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 800343a:	2200      	movs	r2, #0
 800343c:	490e      	ldr	r1, [pc, #56]	; (8003478 <StartClone+0xa0>)
 800343e:	2002      	movs	r0, #2
 8003440:	f7fe fa1b 	bl	800187a <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 8003444:	2200      	movs	r2, #0
 8003446:	490d      	ldr	r1, [pc, #52]	; (800347c <StartClone+0xa4>)
 8003448:	2004      	movs	r0, #4
 800344a:	f7fe fa16 	bl	800187a <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 800344e:	bf00      	nop
 8003450:	f7fd fe6a 	bl	8001128 <PICC_CHECK>
 8003454:	4603      	mov	r3, r0
 8003456:	2bcc      	cmp	r3, #204	; 0xcc
 8003458:	d0fa      	beq.n	8003450 <StartClone+0x78>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 800345a:	bf00      	nop
 800345c:	f7fd fe64 	bl	8001128 <PICC_CHECK>
 8003460:	4603      	mov	r3, r0
 8003462:	2bcc      	cmp	r3, #204	; 0xcc
 8003464:	d1fa      	bne.n	800345c <StartClone+0x84>
    	ranonce = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 800346a:	68b8      	ldr	r0, [r7, #8]
 800346c:	f7ff f944 	bl	80026f8 <write_card>
	MFRC_ANTON();
 8003470:	e7cb      	b.n	800340a <StartClone+0x32>
 8003472:	bf00      	nop
 8003474:	080111d8 	.word	0x080111d8
 8003478:	08010a78 	.word	0x08010a78
 800347c:	08010a8c 	.word	0x08010a8c

08003480 <StartKeyboard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboard */
void StartKeyboard(void *argument)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyboard */
	uint8_t select_index = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	74fb      	strb	r3, [r7, #19]
	int ranonce = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state;
	char* input = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <StartKeyboard+0x36>
    	OLED_Clear();
 800349a:	f7fe f812 	bl	80014c2 <OLED_Clear>
    	OLED_SCREEN(&SCRN_Keyboard, NORMAL);
 800349e:	2100      	movs	r1, #0
 80034a0:	4824      	ldr	r0, [pc, #144]	; (8003534 <StartKeyboard+0xb4>)
 80034a2:	f7fe fad9 	bl	8001a58 <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Keyboard, select_index);
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	4619      	mov	r1, r3
 80034aa:	4822      	ldr	r0, [pc, #136]	; (8003534 <StartKeyboard+0xb4>)
 80034ac:	f7fe fbb4 	bl	8001c18 <OLED_select_inv>
    	ranonce++;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3301      	adds	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80034b6:	4b20      	ldr	r3, [pc, #128]	; (8003538 <StartKeyboard+0xb8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f107 0112 	add.w	r1, r7, #18
 80034be:	2200      	movs	r2, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f009 fe39 	bl	800d138 <xQueueReceive>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d1e3      	bne.n	8003494 <StartKeyboard+0x14>
    	if (button_state == SHORT_PRESS) {
 80034cc:	7cbb      	ldrb	r3, [r7, #18]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d106      	bne.n	80034e0 <StartKeyboard+0x60>
    		oled_move_selection_inv(&SCRN_Keyboard, &select_index);
 80034d2:	f107 0313 	add.w	r3, r7, #19
 80034d6:	4619      	mov	r1, r3
 80034d8:	4816      	ldr	r0, [pc, #88]	; (8003534 <StartKeyboard+0xb4>)
 80034da:	f7fe fd41 	bl	8001f60 <oled_move_selection_inv>
 80034de:	e7d9      	b.n	8003494 <StartKeyboard+0x14>
    	} else if (button_state == LONG_PRESS) {
 80034e0:	7cbb      	ldrb	r3, [r7, #18]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d1d6      	bne.n	8003494 <StartKeyboard+0x14>
    		if ((select_index <= 25) && (select_index >= 0)) {
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b19      	cmp	r3, #25
 80034ea:	d807      	bhi.n	80034fc <StartKeyboard+0x7c>
    			oled_keyboard_insertChar(select_index, &input);
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	f107 020c 	add.w	r2, r7, #12
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fd57 	bl	8001fa8 <oled_keyboard_insertChar>
 80034fa:	e7cb      	b.n	8003494 <StartKeyboard+0x14>
    		} else if (select_index == 26) {
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	2b1a      	cmp	r3, #26
 8003500:	d105      	bne.n	800350e <StartKeyboard+0x8e>
    			oled_keyboard_removeChar(&input);
 8003502:	f107 030c 	add.w	r3, r7, #12
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fd8c 	bl	8002024 <oled_keyboard_removeChar>
 800350c:	e7c2      	b.n	8003494 <StartKeyboard+0x14>
    		} else if (select_index == 27) {
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b1b      	cmp	r3, #27
 8003512:	d1bf      	bne.n	8003494 <StartKeyboard+0x14>
    			xQueueSend(KeyboardOutHandle, &input, 0); //See the name user has inputted to queue for other tasks to use
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <StartKeyboard+0xbc>)
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	f107 010c 	add.w	r1, r7, #12
 800351c:	2300      	movs	r3, #0
 800351e:	2200      	movs	r2, #0
 8003520:	f009 fc70 	bl	800ce04 <xQueueGenericSend>
    			ranonce = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
    			input = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
    			vTaskSuspend(NULL); //exit task
 800352c:	2000      	movs	r0, #0
 800352e:	f00a fa27 	bl	800d980 <vTaskSuspend>
    if (ranonce == 0) {
 8003532:	e7af      	b.n	8003494 <StartKeyboard+0x14>
 8003534:	080111ec 	.word	0x080111ec
 8003538:	200008d8 	.word	0x200008d8
 800353c:	200008e0 	.word	0x200008e0

08003540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003552:	f000 fdf1 	bl	8004138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40000c00 	.word	0x40000c00

08003564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003568:	b672      	cpsid	i
}
 800356a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800356c:	e7fe      	b.n	800356c <Error_Handler+0x8>

0800356e <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry, char* name) {
 800356e:	b5b0      	push	{r4, r5, r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	460b      	mov	r3, r1
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	817b      	strh	r3, [r7, #10]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	019b      	lsls	r3, r3, #6
 8003580:	82fb      	strh	r3, [r7, #22]
	block_erase(entry); //Erase entire block ready for new data
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fe65 	bl	8002254 <block_erase>
	enter_metadata(card, entry);
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	4619      	mov	r1, r3
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f842 	bl	8003618 <enter_metadata>
	card->name = name;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 800359a:	8afb      	ldrh	r3, [r7, #22]
 800359c:	3301      	adds	r3, #1
 800359e:	b29c      	uxth	r4, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689d      	ldr	r5, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc fe19 	bl	80001e0 <strlen>
 80035ae:	4603      	mov	r3, r0
 80035b0:	462a      	mov	r2, r5
 80035b2:	2100      	movs	r1, #0
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7fe fea5 	bl	8002304 <MEM_WRITE>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <enter_card+0x56>
		return RFS_WRITE_ERROR;
 80035c0:	2304      	movs	r3, #4
 80035c2:	e025      	b.n	8003610 <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80035c4:	8afb      	ldrh	r3, [r7, #22]
 80035c6:	3301      	adds	r3, #1
 80035c8:	b29c      	uxth	r4, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc fe06 	bl	80001e0 <strlen>
 80035d4:	4603      	mov	r3, r0
 80035d6:	b299      	uxth	r1, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	791b      	ldrb	r3, [r3, #4]
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7fe fe8f 	bl	8002304 <MEM_WRITE>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <enter_card+0x82>
		return RFS_WRITE_ERROR;
 80035ec:	2304      	movs	r3, #4
 80035ee:	e00f      	b.n	8003610 <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 80035f0:	8afb      	ldrh	r3, [r7, #22]
 80035f2:	3302      	adds	r3, #2
 80035f4:	b298      	uxth	r0, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8b1b      	ldrh	r3, [r3, #24]
 80035fe:	2100      	movs	r1, #0
 8003600:	f7fe fe80 	bl	8002304 <MEM_WRITE>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <enter_card+0xa0>
		return RFS_WRITE_ERROR;
 800360a:	2304      	movs	r3, #4
 800360c:	e000      	b.n	8003610 <enter_card+0xa2>
	}

	return RFS_OK;
 800360e:	2300      	movs	r3, #0

}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bdb0      	pop	{r4, r5, r7, pc}

08003618 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8b1b      	ldrh	r3, [r3, #24]
 8003628:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7c1b      	ldrb	r3, [r3, #16]
 800362e:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	791b      	ldrb	r3, [r3, #4]
 8003634:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc fdd0 	bl	80001e0 <strlen>
 8003640:	4603      	mov	r3, r0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3303      	adds	r3, #3
 8003646:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8003648:	7b3b      	ldrb	r3, [r7, #12]
 800364a:	4618      	mov	r0, r3
 800364c:	f00c fc62 	bl	800ff14 <malloc>
 8003650:	4603      	mov	r3, r0
 8003652:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68dc      	ldr	r4, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc fdbf 	bl	80001e0 <strlen>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	4621      	mov	r1, r4
 8003668:	68b8      	ldr	r0, [r7, #8]
 800366a:	f00c fc63 	bl	800ff34 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc fdb4 	bl	80001e0 <strlen>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4413      	add	r3, r2
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fdaa 	bl	80001e0 <strlen>
 800368c:	4603      	mov	r3, r0
 800368e:	3301      	adds	r3, #1
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	4413      	add	r3, r2
 8003694:	7b7a      	ldrb	r2, [r7, #13]
 8003696:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc fd9f 	bl	80001e0 <strlen>
 80036a2:	4603      	mov	r3, r0
 80036a4:	3302      	adds	r3, #2
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4413      	add	r3, r2
 80036aa:	7bba      	ldrb	r2, [r7, #14]
 80036ac:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	b298      	uxth	r0, r3
 80036b4:	7b3b      	ldrb	r3, [r7, #12]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	2100      	movs	r1, #0
 80036ba:	f7fe fe23 	bl	8002304 <MEM_WRITE>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <enter_metadata+0xb6>
		free(metadata);
 80036c4:	68b8      	ldr	r0, [r7, #8]
 80036c6:	f00c fc2d 	bl	800ff24 <free>
		return RFS_WRITE_ERROR;
 80036ca:	2304      	movs	r3, #4
 80036cc:	e003      	b.n	80036d6 <enter_metadata+0xbe>
	}
	free(metadata);
 80036ce:	68b8      	ldr	r0, [r7, #8]
 80036d0:	f00c fc28 	bl	800ff24 <free>
	return RFS_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}

080036de <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 80036e8:	201c      	movs	r0, #28
 80036ea:	f00c fc13 	bl	800ff14 <malloc>
 80036ee:	4603      	mov	r3, r0
 80036f0:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	4619      	mov	r1, r3
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f81e 	bl	8003738 <read_metadata>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <read_card_entry+0x28>
		return NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	e014      	b.n	8003730 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	4619      	mov	r1, r3
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f881 	bl	8003812 <read_nameuid>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <read_card_entry+0x3c>
		return NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	e00a      	b.n	8003730 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	4619      	mov	r1, r3
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8e2 	bl	80038e8 <read_cardcontents>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <read_card_entry+0x50>
		return NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <read_card_entry+0x52>
	}

	return result;
 800372e:	68fb      	ldr	r3, [r7, #12]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f8f5 	bl	8003938 <get_datasize>
 800374e:	4603      	mov	r3, r0
 8003750:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8003752:	8afb      	ldrh	r3, [r7, #22]
 8003754:	4618      	mov	r0, r3
 8003756:	f00c fbdd 	bl	800ff14 <malloc>
 800375a:	4603      	mov	r3, r0
 800375c:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 800375e:	8afb      	ldrh	r3, [r7, #22]
 8003760:	3b02      	subs	r3, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f00c fbd6 	bl	800ff14 <malloc>
 8003768:	4603      	mov	r3, r0
 800376a:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	019b      	lsls	r3, r3, #6
 8003770:	b298      	uxth	r0, r3
 8003772:	8afb      	ldrh	r3, [r7, #22]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	2100      	movs	r1, #0
 8003778:	f7fe fe5a 	bl	8002430 <MEM_READPAGE>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <read_metadata+0x54>
		free(metadata);
 8003782:	6938      	ldr	r0, [r7, #16]
 8003784:	f00c fbce 	bl	800ff24 <free>
		return RFS_READ_ERROR;
 8003788:	2305      	movs	r3, #5
 800378a:	e03e      	b.n	800380a <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2bff      	cmp	r3, #255	; 0xff
 8003792:	d104      	bne.n	800379e <read_metadata+0x66>
		free(metadata);
 8003794:	6938      	ldr	r0, [r7, #16]
 8003796:	f00c fbc5 	bl	800ff24 <free>
		return RFS_NO_CARD;
 800379a:	2301      	movs	r3, #1
 800379c:	e035      	b.n	800380a <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 800379e:	8afb      	ldrh	r3, [r7, #22]
 80037a0:	3b03      	subs	r3, #3
 80037a2:	461a      	mov	r2, r3
 80037a4:	6939      	ldr	r1, [r7, #16]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f00c fbc4 	bl	800ff34 <memcpy>
	type[metadata_size - 3] = '\0';
 80037ac:	8afb      	ldrh	r3, [r7, #22]
 80037ae:	3b03      	subs	r3, #3
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80037be:	8afb      	ldrh	r3, [r7, #22]
 80037c0:	3b03      	subs	r3, #3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80037ce:	8afb      	ldrh	r3, [r7, #22]
 80037d0:	3b02      	subs	r3, #2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 80037dc:	8afb      	ldrh	r3, [r7, #22]
 80037de:	3b01      	subs	r3, #1
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d104      	bne.n	80037f4 <read_metadata+0xbc>
		free(metadata);
 80037ea:	6938      	ldr	r0, [r7, #16]
 80037ec:	f00c fb9a 	bl	800ff24 <free>
		return RFS_CARD_PROTECTED;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e00a      	b.n	800380a <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 80037f4:	8afb      	ldrh	r3, [r7, #22]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8003802:	6938      	ldr	r0, [r7, #16]
 8003804:	f00c fb8e 	bl	800ff24 <free>

	return RFS_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f888 	bl	8003938 <get_datasize>
 8003828:	4603      	mov	r3, r0
 800382a:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 800382c:	8afb      	ldrh	r3, [r7, #22]
 800382e:	4618      	mov	r0, r3
 8003830:	f00c fb70 	bl	800ff14 <malloc>
 8003834:	4603      	mov	r3, r0
 8003836:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8003838:	8afb      	ldrh	r3, [r7, #22]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	7912      	ldrb	r2, [r2, #4]
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	3301      	adds	r3, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f00c fb66 	bl	800ff14 <malloc>
 8003848:	4603      	mov	r3, r0
 800384a:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	791b      	ldrb	r3, [r3, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	f00c fb5f 	bl	800ff14 <malloc>
 8003856:	4603      	mov	r3, r0
 8003858:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	b29b      	uxth	r3, r3
 8003860:	3301      	adds	r3, #1
 8003862:	b298      	uxth	r0, r3
 8003864:	8afb      	ldrh	r3, [r7, #22]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	2100      	movs	r1, #0
 800386a:	f7fe fde1 	bl	8002430 <MEM_READPAGE>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <read_nameuid+0x6c>
		free(raw_data);
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	f00c fb55 	bl	800ff24 <free>
		return RFS_READ_ERROR;
 800387a:	2305      	movs	r3, #5
 800387c:	e030      	b.n	80038e0 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2bff      	cmp	r3, #255	; 0xff
 8003884:	d104      	bne.n	8003890 <read_nameuid+0x7e>
		free(raw_data);
 8003886:	6938      	ldr	r0, [r7, #16]
 8003888:	f00c fb4c 	bl	800ff24 <free>
		return RFS_NO_CARD;
 800388c:	2301      	movs	r3, #1
 800388e:	e027      	b.n	80038e0 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8003890:	8afb      	ldrh	r3, [r7, #22]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	7912      	ldrb	r2, [r2, #4]
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	461a      	mov	r2, r3
 800389a:	6939      	ldr	r1, [r7, #16]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f00c fb49 	bl	800ff34 <memcpy>
	name[datasize - result->uidsize] = '\0';
 80038a2:	8afb      	ldrh	r3, [r7, #22]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	7912      	ldrb	r2, [r2, #4]
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7fc fc90 	bl	80001e0 <strlen>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1899      	adds	r1, r3, r2
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	791b      	ldrb	r3, [r3, #4]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68b8      	ldr	r0, [r7, #8]
 80038ce:	f00c fb31 	bl	800ff34 <memcpy>
	result->uid = uid;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	601a      	str	r2, [r3, #0]
	free(raw_data);
 80038d8:	6938      	ldr	r0, [r7, #16]
 80038da:	f00c fb23 	bl	800ff24 <free>

	return RFS_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8b1b      	ldrh	r3, [r3, #24]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00c fb0b 	bl	800ff14 <malloc>
 80038fe:	4603      	mov	r3, r0
 8003900:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8003902:	887b      	ldrh	r3, [r7, #2]
 8003904:	019b      	lsls	r3, r3, #6
 8003906:	b29b      	uxth	r3, r3
 8003908:	3302      	adds	r3, #2
 800390a:	b298      	uxth	r0, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8b1b      	ldrh	r3, [r3, #24]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	2100      	movs	r1, #0
 8003914:	f7fe fd8c 	bl	8002430 <MEM_READPAGE>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <read_cardcontents+0x40>
		free(contents);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f00c fb00 	bl	800ff24 <free>
		return RFS_READ_ERROR;
 8003924:	2305      	movs	r3, #5
 8003926:	e003      	b.n	8003930 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	460a      	mov	r2, r1
 8003942:	80fb      	strh	r3, [r7, #6]
 8003944:	4613      	mov	r3, r2
 8003946:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 800394c:	2300      	movs	r3, #0
 800394e:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8003950:	e014      	b.n	800397c <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	b29a      	uxth	r2, r3
 8003958:	797b      	ldrb	r3, [r7, #5]
 800395a:	b29b      	uxth	r3, r3
 800395c:	4413      	add	r3, r2
 800395e:	b298      	uxth	r0, r3
 8003960:	f107 020d 	add.w	r2, r7, #13
 8003964:	89f9      	ldrh	r1, [r7, #14]
 8003966:	2301      	movs	r3, #1
 8003968:	f7fe fd62 	bl	8002430 <MEM_READPAGE>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8003972:	2300      	movs	r3, #0
 8003974:	e008      	b.n	8003988 <get_datasize+0x50>
		}
		size++;
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	3301      	adds	r3, #1
 800397a:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 800397c:	7b7b      	ldrb	r3, [r7, #13]
 800397e:	2bff      	cmp	r3, #255	; 0xff
 8003980:	d1e7      	bne.n	8003952 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8003982:	89fb      	ldrh	r3, [r7, #14]
 8003984:	3b01      	subs	r3, #1
 8003986:	b29b      	uxth	r3, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <get_number_files_section>:
 * Get number of files in given section of memory
 * @param start - Start block
 * @param count - Number of block to check ahead of start
 * @return number of files present in section
 * */
uint32_t get_number_files_section (uint16_t start, uint32_t count) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	80fb      	strh	r3, [r7, #6]
	int file_count = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]

	for (int i = start; i < start + count; i++) {
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	e00d      	b.n	80039c2 <get_number_files_section+0x32>
		if (entry_present(i) == RFS_OK) {
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f87c 	bl	8003aa8 <entry_present>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <get_number_files_section+0x2c>
			file_count++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
	for (int i = start; i < start + count; i++) {
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3301      	adds	r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	441a      	add	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d8eb      	bhi.n	80039a6 <get_number_files_section+0x16>
		}
	}

	return file_count;
 80039ce:	68fb      	ldr	r3, [r7, #12]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <get_number_files_all>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
uint32_t get_number_files_all(void) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	return get_number_files_section(0, BLOCK_COUNT);
 80039dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039e0:	2000      	movs	r0, #0
 80039e2:	f7ff ffd5 	bl	8003990 <get_number_files_section>
 80039e6:	4603      	mov	r3, r0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}

080039ec <get_files_section>:
 * @param start - Start block number
 * @param count - Number of files to read
 * @param result - Array to store file names
 * @return RFS_OK if files were successfully read
 * */
RFS_StatusTypeDef get_files_section (char** result, uint16_t start, uint32_t count) {
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	460b      	mov	r3, r1
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	817b      	strh	r3, [r7, #10]
	Card* work;
	uint32_t file_index = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]

	for (int i = start; i < start + count; i++) {
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e043      	b.n	8003a8c <get_files_section+0xa0>
		if (entry_present(i) == RFS_OK) {
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f84d 	bl	8003aa8 <entry_present>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d138      	bne.n	8003a86 <get_files_section+0x9a>
			work = read_card_entry(i);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fe60 	bl	80036de <read_card_entry>
 8003a1e:	61f8      	str	r0, [r7, #28]
			result[file_index] = malloc(strlen(work->name) + 1);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fc fbdb 	bl	80001e0 <strlen>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	1c59      	adds	r1, r3, #1
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	18d4      	adds	r4, r2, r3
 8003a36:	4608      	mov	r0, r1
 8003a38:	f00c fa6c 	bl	800ff14 <malloc>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	6023      	str	r3, [r4, #0]
			memcpy(result[file_index], work->name, strlen(work->name));
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	681c      	ldr	r4, [r3, #0]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	689d      	ldr	r5, [r3, #8]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fc fbc4 	bl	80001e0 <strlen>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f00c fa68 	bl	800ff34 <memcpy>
			result[file_index][strlen(work->name)] = '\0';
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	681c      	ldr	r4, [r3, #0]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fbb4 	bl	80001e0 <strlen>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4423      	add	r3, r4
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
			file_index++;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
	for (int i = start; i < start + count; i++) {
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	897a      	ldrh	r2, [r7, #10]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	441a      	add	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d8b5      	bhi.n	8003a04 <get_files_section+0x18>
		}
	}

	free(work);
 8003a98:	69f8      	ldr	r0, [r7, #28]
 8003a9a:	f00c fa43 	bl	800ff24 <free>
	return RFS_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bdb0      	pop	{r4, r5, r7, pc}

08003aa8 <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	b298      	uxth	r0, r3
 8003ab8:	f107 020f 	add.w	r2, r7, #15
 8003abc:	2301      	movs	r3, #1
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f7fe fcb6 	bl	8002430 <MEM_READPAGE>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <entry_present+0x26>
		return RFS_READ_ERROR;
 8003aca:	2305      	movs	r3, #5
 8003acc:	e005      	b.n	8003ada <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2bff      	cmp	r3, #255	; 0xff
 8003ad2:	d101      	bne.n	8003ad8 <entry_present+0x30>
		return RFS_NO_CARD;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <entry_present+0x32>
	}

	return RFS_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ffda 	bl	8003aa8 <entry_present>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <get_file_name+0x1c>
		return NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e01a      	b.n	8003b34 <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fdec 	bl	80036de <read_card_entry>
 8003b06:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fb67 	bl	80001e0 <strlen>
 8003b12:	4603      	mov	r3, r0
 8003b14:	3301      	adds	r3, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00c f9fc 	bl	800ff14 <malloc>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4619      	mov	r1, r3
 8003b26:	68b8      	ldr	r0, [r7, #8]
 8003b28:	f00c fb32 	bl	8010190 <strcpy>
	free(work);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f00c f9f9 	bl	800ff24 <free>

	return name;
 8003b32:	68bb      	ldr	r3, [r7, #8]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe fb83 	bl	8002254 <block_erase>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <get_used_size>:

/**
 * Calculate the used size of memory in MiB
 * @return size of memory used in MiB
 * */
uint32_t get_used_size(void) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
	int file_count = get_number_files_all();
 8003b5e:	f7ff ff3b 	bl	80039d8 <get_number_files_all>
 8003b62:	4603      	mov	r3, r0
 8003b64:	607b      	str	r3, [r7, #4]

	return (BLOCK_SIZE * file_count);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fc fe0e 	bl	8000788 <__aeabi_i2d>
 8003b6c:	a308      	add	r3, pc, #32	; (adr r3, 8003b90 <get_used_size+0x38>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fb8d 	bl	8000290 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f7fc fe6d 	bl	800085c <__aeabi_d2uiz>
 8003b82:	4603      	mov	r3, r0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	f3af 8000 	nop.w
 8003b90:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b94:	3fc0624d 	.word	0x3fc0624d

08003b98 <get_free_size>:

/**
 * Get size of memory that is free
 * @return size of memory that is free in MiB
 * */
uint32_t get_free_size(void) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
	return MEM_SIZE - get_used_size();
 8003b9c:	f7ff ffdc 	bl	8003b58 <get_used_size>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <get_used_size_str>:

/**
 * Get used size as a string (Useful for printing to OLED)
 * @param result - Pointer to string to write to
 * */
void get_used_size_str(char* result) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	uint32_t used = get_used_size();
 8003bb4:	f7ff ffd0 	bl	8003b58 <get_used_size>
 8003bb8:	60f8      	str	r0, [r7, #12]
	sprintf(result,"%i", used);
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4903      	ldr	r1, [pc, #12]	; (8003bcc <get_used_size_str+0x20>)
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f00c fac6 	bl	8010150 <siprintf>
}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	08010ad0 	.word	0x08010ad0

08003bd0 <get_free_size_str>:

/**
 * Get free size as a string
 * @param result - Pointer to string to write to
 * */
void get_free_size_str(char* result) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	uint32_t free = get_free_size();
 8003bd8:	f7ff ffde 	bl	8003b98 <get_free_size>
 8003bdc:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", free);
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <get_free_size_str+0x20>)
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f00c fab4 	bl	8010150 <siprintf>
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08010ad0 	.word	0x08010ad0

08003bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_MspInit+0x54>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_MspInit+0x54>)
 8003c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_MspInit+0x54>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_MspInit+0x54>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <HAL_MspInit+0x54>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <HAL_MspInit+0x54>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c32:	2200      	movs	r2, #0
 8003c34:	210f      	movs	r1, #15
 8003c36:	f06f 0001 	mvn.w	r0, #1
 8003c3a:	f000 fb79 	bl	8004330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <HAL_I2C_MspInit+0x84>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d12b      	bne.n	8003cc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <HAL_I2C_MspInit+0x88>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_I2C_MspInit+0x88>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_I2C_MspInit+0x88>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c8a:	23c0      	movs	r3, #192	; 0xc0
 8003c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c8e:	2312      	movs	r3, #18
 8003c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c96:	2303      	movs	r3, #3
 8003c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	480c      	ldr	r0, [pc, #48]	; (8003cd8 <HAL_I2C_MspInit+0x8c>)
 8003ca6:	f000 fb6d 	bl	8004384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_I2C_MspInit+0x88>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <HAL_I2C_MspInit+0x88>)
 8003cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_I2C_MspInit+0x88>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cc6:	bf00      	nop
 8003cc8:	3728      	adds	r7, #40	; 0x28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40005400 	.word	0x40005400
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40020400 	.word	0x40020400

08003cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a32      	ldr	r2, [pc, #200]	; (8003dc4 <HAL_SPI_MspInit+0xe8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d12c      	bne.n	8003d58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d0e:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003d36:	23a0      	movs	r3, #160	; 0xa0
 8003d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d42:	2303      	movs	r3, #3
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d46:	2305      	movs	r3, #5
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4a:	f107 031c 	add.w	r3, r7, #28
 8003d4e:	4619      	mov	r1, r3
 8003d50:	481e      	ldr	r0, [pc, #120]	; (8003dcc <HAL_SPI_MspInit+0xf0>)
 8003d52:	f000 fb17 	bl	8004384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d56:	e031      	b.n	8003dbc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_SPI_MspInit+0xf4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d12c      	bne.n	8003dbc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d70:	6413      	str	r3, [r2, #64]	; 0x40
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_SPI_MspInit+0xec>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003d9a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da0:	2302      	movs	r3, #2
 8003da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da8:	2303      	movs	r3, #3
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dac:	2305      	movs	r3, #5
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	4619      	mov	r1, r3
 8003db6:	4807      	ldr	r0, [pc, #28]	; (8003dd4 <HAL_SPI_MspInit+0xf8>)
 8003db8:	f000 fae4 	bl	8004384 <HAL_GPIO_Init>
}
 8003dbc:	bf00      	nop
 8003dbe:	3730      	adds	r7, #48	; 0x30
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40013000 	.word	0x40013000
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40020000 	.word	0x40020000
 8003dd0:	40003800 	.word	0x40003800
 8003dd4:	40020400 	.word	0x40020400

08003dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_TIM_Base_MspInit+0x64>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <HAL_TIM_Base_MspInit+0x64>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_TIM_Base_MspInit+0x64>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e06:	e012      	b.n	8003e2e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <HAL_TIM_Base_MspInit+0x68>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10d      	bne.n	8003e2e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_TIM_Base_MspInit+0x64>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <HAL_TIM_Base_MspInit+0x64>)
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_TIM_Base_MspInit+0x64>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40000400 	.word	0x40000400

08003e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d11d      	bne.n	8003ea2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_TIM_MspPostInit+0x68>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a0f      	ldr	r2, [pc, #60]	; (8003eac <HAL_TIM_MspPostInit+0x68>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_TIM_MspPostInit+0x68>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e82:	2304      	movs	r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <HAL_TIM_MspPostInit+0x6c>)
 8003e9e:	f000 fa71 	bl	8004384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003ea2:	bf00      	nop
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020000 	.word	0x40020000

08003eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08e      	sub	sp, #56	; 0x38
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_InitTick+0xe4>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <HAL_InitTick+0xe4>)
 8003ece:	f043 0308 	orr.w	r3, r3, #8
 8003ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed4:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_InitTick+0xe4>)
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ee0:	f107 0210 	add.w	r2, r7, #16
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 fad6 	bl	800749c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003efa:	f003 fabb 	bl	8007474 <HAL_RCC_GetPCLK1Freq>
 8003efe:	6378      	str	r0, [r7, #52]	; 0x34
 8003f00:	e004      	b.n	8003f0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f02:	f003 fab7 	bl	8007474 <HAL_RCC_GetPCLK1Freq>
 8003f06:	4603      	mov	r3, r0
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <HAL_InitTick+0xe8>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	0c9b      	lsrs	r3, r3, #18
 8003f16:	3b01      	subs	r3, #1
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f1c:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <HAL_InitTick+0xf0>)
 8003f1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003f20:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f26:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003f28:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003f40:	4817      	ldr	r0, [pc, #92]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f42:	f003 ff0f 	bl	8007d64 <HAL_TIM_Base_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d11b      	bne.n	8003f8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003f54:	4812      	ldr	r0, [pc, #72]	; (8003fa0 <HAL_InitTick+0xec>)
 8003f56:	f003 ffd7 	bl	8007f08 <HAL_TIM_Base_Start_IT>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003f60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d111      	bne.n	8003f8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003f68:	2032      	movs	r0, #50	; 0x32
 8003f6a:	f000 f9fd 	bl	8004368 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	d808      	bhi.n	8003f86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003f74:	2200      	movs	r2, #0
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	2032      	movs	r0, #50	; 0x32
 8003f7a:	f000 f9d9 	bl	8004330 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <HAL_InitTick+0xf4>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	e002      	b.n	8003f8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3738      	adds	r7, #56	; 0x38
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	431bde83 	.word	0x431bde83
 8003fa0:	200008e4 	.word	0x200008e4
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	200005a0 	.word	0x200005a0

08003fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fb0:	e7fe      	b.n	8003fb0 <NMI_Handler+0x4>

08003fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fb6:	e7fe      	b.n	8003fb6 <HardFault_Handler+0x4>

08003fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fbc:	e7fe      	b.n	8003fbc <MemManage_Handler+0x4>

08003fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fc2:	e7fe      	b.n	8003fc2 <BusFault_Handler+0x4>

08003fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <UsageFault_Handler+0x4>

08003fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f000 fb87 	bl	80046f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003fec:	4802      	ldr	r0, [pc, #8]	; (8003ff8 <TIM5_IRQHandler+0x10>)
 8003fee:	f004 f95b 	bl	80082a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200008e4 	.word	0x200008e4

08003ffc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004000:	4802      	ldr	r0, [pc, #8]	; (800400c <OTG_FS_IRQHandler+0x10>)
 8004002:	f001 fc9c 	bl	800593e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20008b2c 	.word	0x20008b2c

08004010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <_sbrk+0x5c>)
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <_sbrk+0x60>)
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <_sbrk+0x64>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <_sbrk+0x64>)
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <_sbrk+0x68>)
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <_sbrk+0x64>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d207      	bcs.n	8004050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004040:	f00b ff3e 	bl	800fec0 <__errno>
 8004044:	4603      	mov	r3, r0
 8004046:	220c      	movs	r2, #12
 8004048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	e009      	b.n	8004064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <_sbrk+0x64>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <_sbrk+0x64>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	4a05      	ldr	r2, [pc, #20]	; (8004074 <_sbrk+0x64>)
 8004060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20010000 	.word	0x20010000
 8004070:	00000400 	.word	0x00000400
 8004074:	2000092c 	.word	0x2000092c
 8004078:	20009268 	.word	0x20009268

0800407c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <SystemInit+0x20>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <SystemInit+0x20>)
 8004088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800408c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80040a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040a4:	480d      	ldr	r0, [pc, #52]	; (80040dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040a6:	490e      	ldr	r1, [pc, #56]	; (80040e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040a8:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040ac:	e002      	b.n	80040b4 <LoopCopyDataInit>

080040ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040b2:	3304      	adds	r3, #4

080040b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b8:	d3f9      	bcc.n	80040ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ba:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040bc:	4c0b      	ldr	r4, [pc, #44]	; (80040ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c0:	e001      	b.n	80040c6 <LoopFillZerobss>

080040c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c4:	3204      	adds	r2, #4

080040c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c8:	d3fb      	bcc.n	80040c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040ca:	f7ff ffd7 	bl	800407c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ce:	f00b fefd 	bl	800fecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040d2:	f7fe fb75 	bl	80027c0 <main>
  bx  lr    
 80040d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80040dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e0:	20000700 	.word	0x20000700
  ldr r2, =_sidata
 80040e4:	0801125c 	.word	0x0801125c
  ldr r2, =_sbss
 80040e8:	20000700 	.word	0x20000700
  ldr r4, =_ebss
 80040ec:	20009268 	.word	0x20009268

080040f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040f0:	e7fe      	b.n	80040f0 <ADC_IRQHandler>
	...

080040f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040f8:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <HAL_Init+0x40>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0d      	ldr	r2, [pc, #52]	; (8004134 <HAL_Init+0x40>)
 80040fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_Init+0x40>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <HAL_Init+0x40>)
 800410a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <HAL_Init+0x40>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a07      	ldr	r2, [pc, #28]	; (8004134 <HAL_Init+0x40>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800411c:	2003      	movs	r0, #3
 800411e:	f000 f8fc 	bl	800431a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004122:	200f      	movs	r0, #15
 8004124:	f7ff fec6 	bl	8003eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004128:	f7ff fd64 	bl	8003bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023c00 	.word	0x40023c00

08004138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_IncTick+0x20>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_IncTick+0x24>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4413      	add	r3, r2
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <HAL_IncTick+0x24>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	200005a4 	.word	0x200005a4
 800415c:	20000930 	.word	0x20000930

08004160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return uwTick;
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <HAL_GetTick+0x14>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000930 	.word	0x20000930

08004178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004180:	f7ff ffee 	bl	8004160 <HAL_GetTick>
 8004184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d005      	beq.n	800419e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_Delay+0x44>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800419e:	bf00      	nop
 80041a0:	f7ff ffde 	bl	8004160 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d8f7      	bhi.n	80041a0 <HAL_Delay+0x28>
  {
  }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200005a4 	.word	0x200005a4

080041c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <__NVIC_SetPriorityGrouping+0x44>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041dc:	4013      	ands	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041f2:	4a04      	ldr	r2, [pc, #16]	; (8004204 <__NVIC_SetPriorityGrouping+0x44>)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	60d3      	str	r3, [r2, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <__NVIC_GetPriorityGrouping+0x18>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	f003 0307 	and.w	r3, r3, #7
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db0b      	blt.n	800424e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4907      	ldr	r1, [pc, #28]	; (800425c <__NVIC_EnableIRQ+0x38>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2001      	movs	r0, #1
 8004246:	fa00 f202 	lsl.w	r2, r0, r2
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000e100 	.word	0xe000e100

08004260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	db0a      	blt.n	800428a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	490c      	ldr	r1, [pc, #48]	; (80042ac <__NVIC_SetPriority+0x4c>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	440b      	add	r3, r1
 8004284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004288:	e00a      	b.n	80042a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4908      	ldr	r1, [pc, #32]	; (80042b0 <__NVIC_SetPriority+0x50>)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3b04      	subs	r3, #4
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	440b      	add	r3, r1
 800429e:	761a      	strb	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000e100 	.word	0xe000e100
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f1c3 0307 	rsb	r3, r3, #7
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	bf28      	it	cs
 80042d2:	2304      	movcs	r3, #4
 80042d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3304      	adds	r3, #4
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d902      	bls.n	80042e4 <NVIC_EncodePriority+0x30>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3b03      	subs	r3, #3
 80042e2:	e000      	b.n	80042e6 <NVIC_EncodePriority+0x32>
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	401a      	ands	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43d9      	mvns	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800430c:	4313      	orrs	r3, r2
         );
}
 800430e:	4618      	mov	r0, r3
 8004310:	3724      	adds	r7, #36	; 0x24
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ff4c 	bl	80041c0 <__NVIC_SetPriorityGrouping>
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004342:	f7ff ff61 	bl	8004208 <__NVIC_GetPriorityGrouping>
 8004346:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	6978      	ldr	r0, [r7, #20]
 800434e:	f7ff ffb1 	bl	80042b4 <NVIC_EncodePriority>
 8004352:	4602      	mov	r2, r0
 8004354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff80 	bl	8004260 <__NVIC_SetPriority>
}
 8004360:	bf00      	nop
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff54 	bl	8004224 <__NVIC_EnableIRQ>
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	; 0x24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e159      	b.n	8004654 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	f040 8148 	bne.w	800464e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d005      	beq.n	80043d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d130      	bne.n	8004438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	2203      	movs	r2, #3
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800440c:	2201      	movs	r2, #1
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 0201 	and.w	r2, r3, #1
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b03      	cmp	r3, #3
 8004442:	d017      	beq.n	8004474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d123      	bne.n	80044c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	08da      	lsrs	r2, r3, #3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3208      	adds	r2, #8
 8004488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	220f      	movs	r2, #15
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	08da      	lsrs	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3208      	adds	r2, #8
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0203 	and.w	r2, r3, #3
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80a2 	beq.w	800464e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <HAL_GPIO_Init+0x2e8>)
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	4a56      	ldr	r2, [pc, #344]	; (800466c <HAL_GPIO_Init+0x2e8>)
 8004514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004518:	6453      	str	r3, [r2, #68]	; 0x44
 800451a:	4b54      	ldr	r3, [pc, #336]	; (800466c <HAL_GPIO_Init+0x2e8>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004526:	4a52      	ldr	r2, [pc, #328]	; (8004670 <HAL_GPIO_Init+0x2ec>)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	089b      	lsrs	r3, r3, #2
 800452c:	3302      	adds	r3, #2
 800452e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	220f      	movs	r2, #15
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a49      	ldr	r2, [pc, #292]	; (8004674 <HAL_GPIO_Init+0x2f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d019      	beq.n	8004586 <HAL_GPIO_Init+0x202>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a48      	ldr	r2, [pc, #288]	; (8004678 <HAL_GPIO_Init+0x2f4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_GPIO_Init+0x1fe>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a47      	ldr	r2, [pc, #284]	; (800467c <HAL_GPIO_Init+0x2f8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00d      	beq.n	800457e <HAL_GPIO_Init+0x1fa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a46      	ldr	r2, [pc, #280]	; (8004680 <HAL_GPIO_Init+0x2fc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <HAL_GPIO_Init+0x1f6>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a45      	ldr	r2, [pc, #276]	; (8004684 <HAL_GPIO_Init+0x300>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_GPIO_Init+0x1f2>
 8004572:	2304      	movs	r3, #4
 8004574:	e008      	b.n	8004588 <HAL_GPIO_Init+0x204>
 8004576:	2307      	movs	r3, #7
 8004578:	e006      	b.n	8004588 <HAL_GPIO_Init+0x204>
 800457a:	2303      	movs	r3, #3
 800457c:	e004      	b.n	8004588 <HAL_GPIO_Init+0x204>
 800457e:	2302      	movs	r3, #2
 8004580:	e002      	b.n	8004588 <HAL_GPIO_Init+0x204>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_GPIO_Init+0x204>
 8004586:	2300      	movs	r3, #0
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	f002 0203 	and.w	r2, r2, #3
 800458e:	0092      	lsls	r2, r2, #2
 8004590:	4093      	lsls	r3, r2
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004598:	4935      	ldr	r1, [pc, #212]	; (8004670 <HAL_GPIO_Init+0x2ec>)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	3302      	adds	r3, #2
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a6:	4b38      	ldr	r3, [pc, #224]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d0:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f4:	4a24      	ldr	r2, [pc, #144]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045fa:	4b23      	ldr	r3, [pc, #140]	; (8004688 <HAL_GPIO_Init+0x304>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_GPIO_Init+0x304>)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004624:	4b18      	ldr	r3, [pc, #96]	; (8004688 <HAL_GPIO_Init+0x304>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004648:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <HAL_GPIO_Init+0x304>)
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	f67f aea2 	bls.w	80043a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	3724      	adds	r7, #36	; 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	40013800 	.word	0x40013800
 8004674:	40020000 	.word	0x40020000
 8004678:	40020400 	.word	0x40020400
 800467c:	40020800 	.word	0x40020800
 8004680:	40020c00 	.word	0x40020c00
 8004684:	40021000 	.word	0x40021000
 8004688:	40013c00 	.word	0x40013c00

0800468c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	887b      	ldrh	r3, [r7, #2]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e001      	b.n	80046ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	807b      	strh	r3, [r7, #2]
 80046c8:	4613      	mov	r3, r2
 80046ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046cc:	787b      	ldrb	r3, [r7, #1]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046d2:	887a      	ldrh	r2, [r7, #2]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046d8:	e003      	b.n	80046e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	041a      	lsls	r2, r3, #16
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	619a      	str	r2, [r3, #24]
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d006      	beq.n	8004714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004706:	4a05      	ldr	r2, [pc, #20]	; (800471c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd ff9e 	bl	8002650 <HAL_GPIO_EXTI_Callback>
  }
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40013c00 	.word	0x40013c00

08004720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e12b      	b.n	800498a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fa80 	bl	8003c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004784:	f002 fe76 	bl	8007474 <HAL_RCC_GetPCLK1Freq>
 8004788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4a81      	ldr	r2, [pc, #516]	; (8004994 <HAL_I2C_Init+0x274>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d807      	bhi.n	80047a4 <HAL_I2C_Init+0x84>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a80      	ldr	r2, [pc, #512]	; (8004998 <HAL_I2C_Init+0x278>)
 8004798:	4293      	cmp	r3, r2
 800479a:	bf94      	ite	ls
 800479c:	2301      	movls	r3, #1
 800479e:	2300      	movhi	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e006      	b.n	80047b2 <HAL_I2C_Init+0x92>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a7d      	ldr	r2, [pc, #500]	; (800499c <HAL_I2C_Init+0x27c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bf94      	ite	ls
 80047ac:	2301      	movls	r3, #1
 80047ae:	2300      	movhi	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0e7      	b.n	800498a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a78      	ldr	r2, [pc, #480]	; (80049a0 <HAL_I2C_Init+0x280>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0c9b      	lsrs	r3, r3, #18
 80047c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a6a      	ldr	r2, [pc, #424]	; (8004994 <HAL_I2C_Init+0x274>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d802      	bhi.n	80047f4 <HAL_I2C_Init+0xd4>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	e009      	b.n	8004808 <HAL_I2C_Init+0xe8>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	4a69      	ldr	r2, [pc, #420]	; (80049a4 <HAL_I2C_Init+0x284>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	3301      	adds	r3, #1
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	430b      	orrs	r3, r1
 800480e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800481a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	495c      	ldr	r1, [pc, #368]	; (8004994 <HAL_I2C_Init+0x274>)
 8004824:	428b      	cmp	r3, r1
 8004826:	d819      	bhi.n	800485c <HAL_I2C_Init+0x13c>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e59      	subs	r1, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fbb1 f3f3 	udiv	r3, r1, r3
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	f640 73fc 	movw	r3, #4092	; 0xffc
 800483c:	400b      	ands	r3, r1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_I2C_Init+0x138>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1e59      	subs	r1, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004850:	3301      	adds	r3, #1
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004856:	e051      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 8004858:	2304      	movs	r3, #4
 800485a:	e04f      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d111      	bne.n	8004888 <HAL_I2C_Init+0x168>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e012      	b.n	80048ae <HAL_I2C_Init+0x18e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Init+0x196>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e022      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10e      	bne.n	80048dc <HAL_I2C_Init+0x1bc>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1e58      	subs	r0, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d0:	3301      	adds	r3, #1
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048da:	e00f      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1e58      	subs	r0, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	0099      	lsls	r1, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	6809      	ldr	r1, [r1, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800492a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6911      	ldr	r1, [r2, #16]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	430b      	orrs	r3, r1
 800493e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	000186a0 	.word	0x000186a0
 8004998:	001e847f 	.word	0x001e847f
 800499c:	003d08ff 	.word	0x003d08ff
 80049a0:	431bde83 	.word	0x431bde83
 80049a4:	10624dd3 	.word	0x10624dd3

080049a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	4608      	mov	r0, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	817b      	strh	r3, [r7, #10]
 80049ba:	460b      	mov	r3, r1
 80049bc:	813b      	strh	r3, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049c2:	f7ff fbcd 	bl	8004160 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	f040 80d9 	bne.w	8004b88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2319      	movs	r3, #25
 80049dc:	2201      	movs	r2, #1
 80049de:	496d      	ldr	r1, [pc, #436]	; (8004b94 <HAL_I2C_Mem_Write+0x1ec>)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fc7f 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
 80049ee:	e0cc      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Mem_Write+0x56>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0c5      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d007      	beq.n	8004a24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2221      	movs	r2, #33	; 0x21
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a4d      	ldr	r2, [pc, #308]	; (8004b98 <HAL_I2C_Mem_Write+0x1f0>)
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a66:	88f8      	ldrh	r0, [r7, #6]
 8004a68:	893a      	ldrh	r2, [r7, #8]
 8004a6a:	8979      	ldrh	r1, [r7, #10]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4603      	mov	r3, r0
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fab6 	bl	8004fe8 <I2C_RequestMemoryWrite>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d052      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e081      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fd00 	bl	8005490 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d107      	bne.n	8004aae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e06b      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d11b      	bne.n	8004b28 <HAL_I2C_Mem_Write+0x180>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d017      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1aa      	bne.n	8004a86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fcec 	bl	8005512 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d107      	bne.n	8004b58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e016      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	00100002 	.word	0x00100002
 8004b98:	ffff0000 	.word	0xffff0000

08004b9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	817b      	strh	r3, [r7, #10]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	813b      	strh	r3, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bb6:	f7ff fad3 	bl	8004160 <HAL_GetTick>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	f040 8208 	bne.w	8004fda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2319      	movs	r3, #25
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	497b      	ldr	r1, [pc, #492]	; (8004dc0 <HAL_I2C_Mem_Read+0x224>)
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fb85 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	e1fb      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_I2C_Mem_Read+0x56>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e1f4      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d007      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2222      	movs	r2, #34	; 0x22
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a5b      	ldr	r2, [pc, #364]	; (8004dc4 <HAL_I2C_Mem_Read+0x228>)
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c5a:	88f8      	ldrh	r0, [r7, #6]
 8004c5c:	893a      	ldrh	r2, [r7, #8]
 8004c5e:	8979      	ldrh	r1, [r7, #10]
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4603      	mov	r3, r0
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fa52 	bl	8005114 <I2C_RequestMemoryRead>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1b0      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d113      	bne.n	8004caa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e184      	b.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d11b      	bne.n	8004cea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e164      	b.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d11b      	bne.n	8004d2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	e144      	b.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d40:	e138      	b.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	f200 80f1 	bhi.w	8004f2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d123      	bne.n	8004d9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fc1b 	bl	8005594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e139      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d9a:	e10b      	b.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d14e      	bne.n	8004e42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	2200      	movs	r2, #0
 8004dac:	4906      	ldr	r1, [pc, #24]	; (8004dc8 <HAL_I2C_Mem_Read+0x22c>)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fa98 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e10e      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
 8004dbe:	bf00      	nop
 8004dc0:	00100002 	.word	0x00100002
 8004dc4:	ffff0000 	.word	0xffff0000
 8004dc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e40:	e0b8      	b.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4966      	ldr	r1, [pc, #408]	; (8004fe4 <HAL_I2C_Mem_Read+0x448>)
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 fa49 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0bf      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	494f      	ldr	r1, [pc, #316]	; (8004fe4 <HAL_I2C_Mem_Read+0x448>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fa1b 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e091      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f2c:	e042      	b.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fb2e 	bl	8005594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e04c      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d118      	bne.n	8004fb4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f47f aec2 	bne.w	8004d42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004fda:	2302      	movs	r3, #2
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3728      	adds	r7, #40	; 0x28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	00010004 	.word	0x00010004

08004fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	817b      	strh	r3, [r7, #10]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	813b      	strh	r3, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	2200      	movs	r2, #0
 800501a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f960 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005038:	d103      	bne.n	8005042 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e05f      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	492d      	ldr	r1, [pc, #180]	; (8005110 <I2C_RequestMemoryWrite+0x128>)
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f998 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e04c      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	6a39      	ldr	r1, [r7, #32]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa02 	bl	8005490 <I2C_WaitOnTXEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b04      	cmp	r3, #4
 8005098:	d107      	bne.n	80050aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e02b      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d105      	bne.n	80050c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050b4:	893b      	ldrh	r3, [r7, #8]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]
 80050be:	e021      	b.n	8005104 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	6a39      	ldr	r1, [r7, #32]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f9dc 	bl	8005490 <I2C_WaitOnTXEFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d107      	bne.n	80050f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e005      	b.n	8005106 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050fa:	893b      	ldrh	r3, [r7, #8]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	00010002 	.word	0x00010002

08005114 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	461a      	mov	r2, r3
 8005122:	4603      	mov	r3, r0
 8005124:	817b      	strh	r3, [r7, #10]
 8005126:	460b      	mov	r3, r1
 8005128:	813b      	strh	r3, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800513c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	2200      	movs	r2, #0
 8005156:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f8c2 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005174:	d103      	bne.n	800517e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e0aa      	b.n	80052d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	4952      	ldr	r1, [pc, #328]	; (80052e0 <I2C_RequestMemoryRead+0x1cc>)
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f8fa 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e097      	b.n	80052d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	6a39      	ldr	r1, [r7, #32]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f964 	bl	8005490 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d107      	bne.n	80051e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e076      	b.n	80052d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051f0:	893b      	ldrh	r3, [r7, #8]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	611a      	str	r2, [r3, #16]
 80051fa:	e021      	b.n	8005240 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051fc:	893b      	ldrh	r3, [r7, #8]
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	b29b      	uxth	r3, r3
 8005202:	b2da      	uxtb	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f93e 	bl	8005490 <I2C_WaitOnTXEFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b04      	cmp	r3, #4
 8005220:	d107      	bne.n	8005232 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e050      	b.n	80052d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005236:	893b      	ldrh	r3, [r7, #8]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f923 	bl	8005490 <I2C_WaitOnTXEFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2b04      	cmp	r3, #4
 8005256:	d107      	bne.n	8005268 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005266:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e035      	b.n	80052d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	2200      	movs	r2, #0
 8005284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f82b 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a2:	d103      	bne.n	80052ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e013      	b.n	80052d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	6a3a      	ldr	r2, [r7, #32]
 80052c4:	4906      	ldr	r1, [pc, #24]	; (80052e0 <I2C_RequestMemoryRead+0x1cc>)
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f863 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	00010002 	.word	0x00010002

080052e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f4:	e025      	b.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d021      	beq.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fe ff2f 	bl	8004160 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e023      	b.n	800538a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10d      	bne.n	8005368 <I2C_WaitOnFlagUntilTimeout+0x84>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	e00c      	b.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	43da      	mvns	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d0b6      	beq.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a0:	e051      	b.n	8005446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b0:	d123      	bne.n	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f043 0204 	orr.w	r2, r3, #4
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e046      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d021      	beq.n	8005446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005402:	f7fe fead 	bl	8004160 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e020      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10c      	bne.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	43da      	mvns	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e00b      	b.n	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	43da      	mvns	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d18d      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800549c:	e02d      	b.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f8ce 	bl	8005640 <I2C_IsAcknowledgeFailed>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e02d      	b.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d021      	beq.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b6:	f7fe fe53 	bl	8004160 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d302      	bcc.n	80054cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d116      	bne.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e007      	b.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d1ca      	bne.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800551e:	e02d      	b.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f88d 	bl	8005640 <I2C_IsAcknowledgeFailed>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e02d      	b.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d021      	beq.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005538:	f7fe fe12 	bl	8004160 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d116      	bne.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e007      	b.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b04      	cmp	r3, #4
 8005588:	d1ca      	bne.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a0:	e042      	b.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d119      	bne.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0210 	mvn.w	r2, #16
 80055b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e029      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e4:	f7fe fdbc 	bl	8004160 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e007      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d1b5      	bne.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d11b      	bne.n	8005690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0204 	orr.w	r2, r3, #4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800569e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a0:	b08f      	sub	sp, #60	; 0x3c
 80056a2:	af0a      	add	r7, sp, #40	; 0x28
 80056a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e10f      	b.n	80058d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f00a f8ee 	bl	800f8ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2203      	movs	r2, #3
 80056d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f003 fcf7 	bl	80090e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	687e      	ldr	r6, [r7, #4]
 80056fc:	466d      	mov	r5, sp
 80056fe:	f106 0410 	add.w	r4, r6, #16
 8005702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800570a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800570e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005712:	1d33      	adds	r3, r6, #4
 8005714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005716:	6838      	ldr	r0, [r7, #0]
 8005718:	f003 fbce 	bl	8008eb8 <USB_CoreInit>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0d0      	b.n	80058d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f003 fce5 	bl	8009104 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
 800573e:	e04a      	b.n	80057d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	333d      	adds	r3, #61	; 0x3d
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	333c      	adds	r3, #60	; 0x3c
 8005764:	7bfa      	ldrb	r2, [r7, #15]
 8005766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	b298      	uxth	r0, r3
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	3344      	adds	r3, #68	; 0x44
 800577c:	4602      	mov	r2, r0
 800577e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005780:	7bfa      	ldrb	r2, [r7, #15]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	3340      	adds	r3, #64	; 0x40
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	3348      	adds	r3, #72	; 0x48
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	334c      	adds	r3, #76	; 0x4c
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	3354      	adds	r3, #84	; 0x54
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	3301      	adds	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d3af      	bcc.n	8005740 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	e044      	b.n	8005870 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057e6:	7bfa      	ldrb	r2, [r7, #15]
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057fc:	7bfa      	ldrb	r2, [r7, #15]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005828:	7bfa      	ldrb	r2, [r7, #15]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	3301      	adds	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d3b5      	bcc.n	80057e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	687e      	ldr	r6, [r7, #4]
 8005882:	466d      	mov	r5, sp
 8005884:	f106 0410 	add.w	r4, r6, #16
 8005888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800588a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800588c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800588e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005890:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005894:	e885 0003 	stmia.w	r5, {r0, r1}
 8005898:	1d33      	adds	r3, r6, #4
 800589a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800589c:	6838      	ldr	r0, [r7, #0]
 800589e:	f003 fc7d 	bl	800919c <USB_DevInit>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e00d      	b.n	80058d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f004 fdcc 	bl	800a466 <USB_DevDisconnect>

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_PCD_Start+0x1c>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e020      	b.n	8005936 <HAL_PCD_Start+0x5e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	2b01      	cmp	r3, #1
 8005902:	d109      	bne.n	8005918 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005908:	2b01      	cmp	r3, #1
 800590a:	d005      	beq.n	8005918 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f003 fbcf 	bl	80090c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f004 fd7c 	bl	800a424 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800593e:	b590      	push	{r4, r7, lr}
 8005940:	b08d      	sub	sp, #52	; 0x34
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f004 fe3a 	bl	800a5ce <USB_GetMode>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 848a 	bne.w	8006276 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f004 fd9e 	bl	800a4a8 <USB_ReadInterrupts>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8480 	beq.w	8006274 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f004 fd8b 	bl	800a4a8 <USB_ReadInterrupts>
 8005992:	4603      	mov	r3, r0
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	d107      	bne.n	80059ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f002 0202 	and.w	r2, r2, #2
 80059aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f004 fd79 	bl	800a4a8 <USB_ReadInterrupts>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d161      	bne.n	8005a84 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0210 	bic.w	r2, r2, #16
 80059ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	4413      	add	r3, r2
 80059ec:	3304      	adds	r3, #4
 80059ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	0c5b      	lsrs	r3, r3, #17
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d124      	bne.n	8005a46 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d035      	beq.n	8005a74 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6a38      	ldr	r0, [r7, #32]
 8005a1c:	f004 fbb0 	bl	800a180 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a2c:	441a      	add	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a3e:	441a      	add	r2, r3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	621a      	str	r2, [r3, #32]
 8005a44:	e016      	b.n	8005a74 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	0c5b      	lsrs	r3, r3, #17
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d110      	bne.n	8005a74 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a58:	2208      	movs	r2, #8
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6a38      	ldr	r0, [r7, #32]
 8005a5e:	f004 fb8f 	bl	800a180 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a6e:	441a      	add	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0210 	orr.w	r2, r2, #16
 8005a82:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f004 fd0d 	bl	800a4a8 <USB_ReadInterrupts>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a98:	f040 80a7 	bne.w	8005bea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f004 fd12 	bl	800a4ce <USB_ReadDevAllOutEpInterrupt>
 8005aaa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005aac:	e099      	b.n	8005be2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 808e 	beq.w	8005bd6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f004 fd36 	bl	800a536 <USB_ReadDevOutEPInterrupt>
 8005aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00c      	beq.n	8005af0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fec2 	bl	8006874 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	461a      	mov	r2, r3
 8005b08:	2308      	movs	r3, #8
 8005b0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 ff98 	bl	8006a44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d030      	beq.n	8005b9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	d109      	bne.n	8005b5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	78db      	ldrb	r3, [r3, #3]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d108      	bne.n	8005b8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f009 ff8d 	bl	800faa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	461a      	mov	r2, r3
 8005b98:	2302      	movs	r3, #2
 8005b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2320      	movs	r3, #32
 8005bb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	3301      	adds	r3, #1
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f47f af62 	bne.w	8005aae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f004 fc5a 	bl	800a4a8 <USB_ReadInterrupts>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bfe:	f040 80db 	bne.w	8005db8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f004 fc7b 	bl	800a502 <USB_ReadDevAllInEpInterrupt>
 8005c0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005c12:	e0cd      	b.n	8005db0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80c2 	beq.w	8005da4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 fca1 	bl	800a572 <USB_ReadDevInEPInterrupt>
 8005c30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d057      	beq.n	8005cec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	2201      	movs	r2, #1
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69f9      	ldr	r1, [r7, #28]
 8005c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2301      	movs	r3, #1
 8005c70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d132      	bne.n	8005ce0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	334c      	adds	r3, #76	; 0x4c
 8005c8a:	6819      	ldr	r1, [r3, #0]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c90:	4613      	mov	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4403      	add	r3, r0
 8005c9a:	3348      	adds	r3, #72	; 0x48
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4419      	add	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4403      	add	r3, r0
 8005cae:	334c      	adds	r3, #76	; 0x4c
 8005cb0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <HAL_PCD_IRQHandler+0x3a2>
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	3354      	adds	r3, #84	; 0x54
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2101      	movs	r1, #1
 8005cdc:	f004 fca8 	bl	800a630 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f009 fe61 	bl	800f9ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d008      	beq.n	8005d08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	461a      	mov	r2, r3
 8005d04:	2308      	movs	r3, #8
 8005d06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2310      	movs	r3, #16
 8005d22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d023      	beq.n	8005d92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d4c:	6a38      	ldr	r0, [r7, #32]
 8005d4e:	f003 fb89 	bl	8009464 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d54:	4613      	mov	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	3338      	adds	r3, #56	; 0x38
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	3304      	adds	r3, #4
 8005d64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	78db      	ldrb	r3, [r3, #3]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d108      	bne.n	8005d80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2200      	movs	r2, #0
 8005d72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f009 fea4 	bl	800fac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2302      	movs	r3, #2
 8005d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fcdb 	bl	800675a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	3301      	adds	r3, #1
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f47f af2e 	bne.w	8005c14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f004 fb73 	bl	800a4a8 <USB_ReadInterrupts>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dcc:	d122      	bne.n	8005e14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d108      	bne.n	8005dfe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005df4:	2100      	movs	r1, #0
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fec2 	bl	8006b80 <HAL_PCDEx_LPM_Callback>
 8005dfc:	e002      	b.n	8005e04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f009 fe42 	bl	800fa88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f004 fb45 	bl	800a4a8 <USB_ReadInterrupts>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e28:	d112      	bne.n	8005e50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d102      	bne.n	8005e40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f009 fdfe 	bl	800fa3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e4e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f004 fb27 	bl	800a4a8 <USB_ReadInterrupts>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e64:	f040 80b7 	bne.w	8005fd6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e76:	f023 0301 	bic.w	r3, r3, #1
 8005e7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2110      	movs	r1, #16
 8005e82:	4618      	mov	r0, r3
 8005e84:	f003 faee 	bl	8009464 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8c:	e046      	b.n	8005f1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ea0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ec0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ed4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ef4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	3301      	adds	r3, #1
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d3b3      	bcc.n	8005e8e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d016      	beq.n	8005f70 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f52:	f043 030b 	orr.w	r3, r3, #11
 8005f56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f68:	f043 030b 	orr.w	r3, r3, #11
 8005f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f6e:	e015      	b.n	8005f9c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005f86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f96:	f043 030b 	orr.w	r3, r3, #11
 8005f9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005faa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f004 fb35 	bl	800a630 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f004 fa64 	bl	800a4a8 <USB_ReadInterrupts>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fea:	d124      	bne.n	8006036 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f004 fafa 	bl	800a5ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f003 faaf 	bl	800955e <USB_GetDevSpeed>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681c      	ldr	r4, [r3, #0]
 800600c:	f001 fa26 	bl	800745c <HAL_RCC_GetHCLKFreq>
 8006010:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006016:	b2db      	uxtb	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	4620      	mov	r0, r4
 800601c:	f002 ffae 	bl	8008f7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f009 fcec 	bl	800f9fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006034:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f004 fa34 	bl	800a4a8 <USB_ReadInterrupts>
 8006040:	4603      	mov	r3, r0
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b08      	cmp	r3, #8
 8006048:	d10a      	bne.n	8006060 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f009 fcc9 	bl	800f9e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f002 0208 	and.w	r2, r2, #8
 800605e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f004 fa1f 	bl	800a4a8 <USB_ReadInterrupts>
 800606a:	4603      	mov	r3, r0
 800606c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006070:	2b80      	cmp	r3, #128	; 0x80
 8006072:	d122      	bne.n	80060ba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006080:	2301      	movs	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
 8006084:	e014      	b.n	80060b0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d105      	bne.n	80060aa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fb27 	bl	80066f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	3301      	adds	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d3e5      	bcc.n	8006086 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f004 f9f2 	bl	800a4a8 <USB_ReadInterrupts>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ce:	d13b      	bne.n	8006148 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060d0:	2301      	movs	r3, #1
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
 80060d4:	e02b      	b.n	800612e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3340      	adds	r3, #64	; 0x40
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d115      	bne.n	8006128 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da12      	bge.n	8006128 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006106:	4613      	mov	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	333f      	adds	r3, #63	; 0x3f
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800611e:	b2db      	uxtb	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fae8 	bl	80066f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	3301      	adds	r3, #1
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006134:	429a      	cmp	r2, r3
 8006136:	d3ce      	bcc.n	80060d6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f004 f9ab 	bl	800a4a8 <USB_ReadInterrupts>
 8006152:	4603      	mov	r3, r0
 8006154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800615c:	d155      	bne.n	800620a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800615e:	2301      	movs	r3, #1
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
 8006162:	e045      	b.n	80061f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d12e      	bne.n	80061ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800618c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800618e:	2b00      	cmp	r3, #0
 8006190:	da2b      	bge.n	80061ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800619e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d121      	bne.n	80061ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	4613      	mov	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80061b8:	2201      	movs	r2, #1
 80061ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061e6:	6053      	str	r3, [r2, #4]
            break;
 80061e8:	e007      	b.n	80061fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d3b4      	bcc.n	8006164 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f004 f94a 	bl	800a4a8 <USB_ReadInterrupts>
 8006214:	4603      	mov	r3, r0
 8006216:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d10a      	bne.n	8006236 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f009 fc63 	bl	800faec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f004 f934 	bl	800a4a8 <USB_ReadInterrupts>
 8006240:	4603      	mov	r3, r0
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d115      	bne.n	8006276 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f009 fc53 	bl	800fb08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
 8006272:	e000      	b.n	8006276 <HAL_PCD_IRQHandler+0x938>
      return;
 8006274:	bf00      	nop
    }
  }
}
 8006276:	3734      	adds	r7, #52	; 0x34
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}

0800627c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_PCD_SetAddress+0x1a>
 8006292:	2302      	movs	r3, #2
 8006294:	e013      	b.n	80062be <HAL_PCD_SetAddress+0x42>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	78fa      	ldrb	r2, [r7, #3]
 80062a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f004 f892 	bl	800a3d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	461a      	mov	r2, r3
 80062d4:	4603      	mov	r3, r0
 80062d6:	70fb      	strb	r3, [r7, #3]
 80062d8:	460b      	mov	r3, r1
 80062da:	803b      	strh	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	da0f      	bge.n	800630c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	f003 020f 	and.w	r2, r3, #15
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	3338      	adds	r3, #56	; 0x38
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	4413      	add	r3, r2
 8006300:	3304      	adds	r3, #4
 8006302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	705a      	strb	r2, [r3, #1]
 800630a:	e00f      	b.n	800632c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	3304      	adds	r3, #4
 8006324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006338:	883a      	ldrh	r2, [r7, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	78ba      	ldrb	r2, [r7, #2]
 8006342:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006356:	78bb      	ldrb	r3, [r7, #2]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d102      	bne.n	8006362 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_PCD_EP_Open+0xaa>
 800636c:	2302      	movs	r3, #2
 800636e:	e00e      	b.n	800638e <HAL_PCD_EP_Open+0xc8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68f9      	ldr	r1, [r7, #12]
 800637e:	4618      	mov	r0, r3
 8006380:	f003 f912 	bl	80095a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800638c:	7afb      	ldrb	r3, [r7, #11]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da0f      	bge.n	80063ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	f003 020f 	and.w	r2, r3, #15
 80063b0:	4613      	mov	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	3338      	adds	r3, #56	; 0x38
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	3304      	adds	r3, #4
 80063c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	705a      	strb	r2, [r3, #1]
 80063c8:	e00f      	b.n	80063ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	f003 020f 	and.w	r2, r3, #15
 80063d0:	4613      	mov	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	4413      	add	r3, r2
 80063e0:	3304      	adds	r3, #4
 80063e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_PCD_EP_Close+0x6e>
 8006400:	2302      	movs	r3, #2
 8006402:	e00e      	b.n	8006422 <HAL_PCD_EP_Close+0x8c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	4618      	mov	r0, r3
 8006414:	f003 f950 	bl	80096b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b086      	sub	sp, #24
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	460b      	mov	r3, r1
 8006438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	f003 020f 	and.w	r2, r3, #15
 8006440:	4613      	mov	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	3304      	adds	r3, #4
 8006452:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2200      	movs	r2, #0
 8006464:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	b2da      	uxtb	r2, r3
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d102      	bne.n	8006486 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	6979      	ldr	r1, [r7, #20]
 800649e:	f003 fc2f 	bl	8009d00 <USB_EP0StartXfer>
 80064a2:	e008      	b.n	80064b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	6979      	ldr	r1, [r7, #20]
 80064b2:	f003 f9dd 	bl	8009870 <USB_EPStartXfer>
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80064e2:	681b      	ldr	r3, [r3, #0]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	460b      	mov	r3, r1
 80064fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006500:	7afb      	ldrb	r3, [r7, #11]
 8006502:	f003 020f 	and.w	r2, r3, #15
 8006506:	4613      	mov	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	3338      	adds	r3, #56	; 0x38
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	3304      	adds	r3, #4
 8006516:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2200      	movs	r2, #0
 8006528:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2201      	movs	r2, #1
 800652e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006530:	7afb      	ldrb	r3, [r7, #11]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	b2da      	uxtb	r2, r3
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d102      	bne.n	800654a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800654a:	7afb      	ldrb	r3, [r7, #11]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	6979      	ldr	r1, [r7, #20]
 8006562:	f003 fbcd 	bl	8009d00 <USB_EP0StartXfer>
 8006566:	e008      	b.n	800657a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	6979      	ldr	r1, [r7, #20]
 8006576:	f003 f97b 	bl	8009870 <USB_EPStartXfer>
  }

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	429a      	cmp	r2, r3
 800659c:	d901      	bls.n	80065a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e050      	b.n	8006644 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da0f      	bge.n	80065ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	f003 020f 	and.w	r2, r3, #15
 80065b0:	4613      	mov	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	3338      	adds	r3, #56	; 0x38
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	3304      	adds	r3, #4
 80065c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	705a      	strb	r2, [r3, #1]
 80065c8:	e00d      	b.n	80065e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	4613      	mov	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4413      	add	r3, r2
 80065dc:	3304      	adds	r3, #4
 80065de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_PCD_EP_SetStall+0x82>
 8006602:	2302      	movs	r3, #2
 8006604:	e01e      	b.n	8006644 <HAL_PCD_EP_SetStall+0xc0>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	4618      	mov	r0, r3
 8006616:	f003 fe0b 	bl	800a230 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	b2d9      	uxtb	r1, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006634:	461a      	mov	r2, r3
 8006636:	f003 fffb 	bl	800a630 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	f003 020f 	and.w	r2, r3, #15
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d901      	bls.n	800666a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e042      	b.n	80066f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800666a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800666e:	2b00      	cmp	r3, #0
 8006670:	da0f      	bge.n	8006692 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	4613      	mov	r3, r2
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	3338      	adds	r3, #56	; 0x38
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4413      	add	r3, r2
 8006686:	3304      	adds	r3, #4
 8006688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	705a      	strb	r2, [r3, #1]
 8006690:	e00f      	b.n	80066b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	4613      	mov	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4413      	add	r3, r2
 80066a8:	3304      	adds	r3, #4
 80066aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_PCD_EP_ClrStall+0x86>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e00e      	b.n	80066f0 <HAL_PCD_EP_ClrStall+0xa4>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f003 fe13 	bl	800a30c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006708:	2b00      	cmp	r3, #0
 800670a:	da0c      	bge.n	8006726 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	f003 020f 	and.w	r2, r3, #15
 8006712:	4613      	mov	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	3338      	adds	r3, #56	; 0x38
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4413      	add	r3, r2
 8006720:	3304      	adds	r3, #4
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e00c      	b.n	8006740 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4413      	add	r3, r2
 800673c:	3304      	adds	r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	4618      	mov	r0, r3
 8006748:	f003 fc32 	bl	8009fb0 <USB_EPStopXfer>
 800674c:	4603      	mov	r3, r0
 800674e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006750:	7afb      	ldrb	r3, [r7, #11]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b08a      	sub	sp, #40	; 0x28
 800675e:	af02      	add	r7, sp, #8
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	3338      	adds	r3, #56	; 0x38
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	3304      	adds	r3, #4
 8006780:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	429a      	cmp	r2, r3
 800678c:	d901      	bls.n	8006792 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e06c      	b.n	800686c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d902      	bls.n	80067ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3303      	adds	r3, #3
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067b6:	e02b      	b.n	8006810 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d902      	bls.n	80067d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	3303      	adds	r3, #3
 80067d8:	089b      	lsrs	r3, r3, #2
 80067da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6919      	ldr	r1, [r3, #16]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4603      	mov	r3, r0
 80067f2:	6978      	ldr	r0, [r7, #20]
 80067f4:	f003 fc86 	bl	800a104 <USB_WritePacket>

    ep->xfer_buff  += len;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	441a      	add	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1a      	ldr	r2, [r3, #32]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	441a      	add	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	b29b      	uxth	r3, r3
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	429a      	cmp	r2, r3
 8006824:	d809      	bhi.n	800683a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a1a      	ldr	r2, [r3, #32]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800682e:	429a      	cmp	r2, r3
 8006830:	d203      	bcs.n	800683a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1be      	bne.n	80067b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	429a      	cmp	r2, r3
 8006844:	d811      	bhi.n	800686a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	2201      	movs	r2, #1
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	43db      	mvns	r3, r3
 8006860:	6939      	ldr	r1, [r7, #16]
 8006862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006866:	4013      	ands	r3, r2
 8006868:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	333c      	adds	r3, #60	; 0x3c
 800688c:	3304      	adds	r3, #4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d17b      	bne.n	80069a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d015      	beq.n	80068e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	4a61      	ldr	r2, [pc, #388]	; (8006a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f240 80b9 	bls.w	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80b3 	beq.w	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	461a      	mov	r2, r3
 80068d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068dc:	6093      	str	r3, [r2, #8]
 80068de:	e0a7      	b.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f6:	461a      	mov	r2, r3
 80068f8:	2320      	movs	r3, #32
 80068fa:	6093      	str	r3, [r2, #8]
 80068fc:	e098      	b.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 8093 	bne.w	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4a4b      	ldr	r2, [pc, #300]	; (8006a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d90f      	bls.n	8006932 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	461a      	mov	r2, r3
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	6093      	str	r3, [r2, #8]
 8006930:	e07e      	b.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	0159      	lsls	r1, r3, #5
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	440b      	add	r3, r1
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d114      	bne.n	8006994 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800697c:	461a      	mov	r2, r3
 800697e:	2101      	movs	r1, #1
 8006980:	f003 fe56 	bl	800a630 <USB_EP0_OutStart>
 8006984:	e006      	b.n	8006994 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	441a      	add	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f008 ffec 	bl	800f978 <HAL_PCD_DataOutStageCallback>
 80069a0:	e046      	b.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d124      	bne.n	80069f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c0:	461a      	mov	r2, r3
 80069c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c6:	6093      	str	r3, [r2, #8]
 80069c8:	e032      	b.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	461a      	mov	r2, r3
 80069e2:	2320      	movs	r3, #32
 80069e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f008 ffc3 	bl	800f978 <HAL_PCD_DataOutStageCallback>
 80069f2:	e01d      	b.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d114      	bne.n	8006a24 <PCD_EP_OutXfrComplete_int+0x1b0>
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	4613      	mov	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d108      	bne.n	8006a24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2100      	movs	r1, #0
 8006a20:	f003 fe06 	bl	800a630 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f008 ffa4 	bl	800f978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3720      	adds	r7, #32
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	4f54300a 	.word	0x4f54300a
 8006a40:	4f54310a 	.word	0x4f54310a

08006a44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	333c      	adds	r3, #60	; 0x3c
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a15      	ldr	r2, [pc, #84]	; (8006acc <PCD_EP_OutSetupPacket_int+0x88>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d90e      	bls.n	8006a98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d009      	beq.n	8006a98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f008 ff5b 	bl	800f954 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <PCD_EP_OutSetupPacket_int+0x88>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d90c      	bls.n	8006ac0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d108      	bne.n	8006ac0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2101      	movs	r1, #1
 8006abc:	f003 fdb8 	bl	800a630 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	4f54300a 	.word	0x4f54300a

08006ad0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
 8006adc:	4613      	mov	r3, r2
 8006ade:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d107      	bne.n	8006afe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006aee:	883b      	ldrh	r3, [r7, #0]
 8006af0:	0419      	lsls	r1, r3, #16
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28
 8006afc:	e028      	b.n	8006b50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	0c1b      	lsrs	r3, r3, #16
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	4413      	add	r3, r2
 8006b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]
 8006b10:	e00d      	b.n	8006b2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	3340      	adds	r3, #64	; 0x40
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
 8006b2e:	7bfa      	ldrb	r2, [r7, #15]
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d3ec      	bcc.n	8006b12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b38:	883b      	ldrh	r3, [r7, #0]
 8006b3a:	0418      	lsls	r0, r3, #16
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	4302      	orrs	r2, r0
 8006b48:	3340      	adds	r3, #64	; 0x40
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	887a      	ldrh	r2, [r7, #2]
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e267      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d075      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bb6:	4b88      	ldr	r3, [pc, #544]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 030c 	and.w	r3, r3, #12
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d00c      	beq.n	8006bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bc2:	4b85      	ldr	r3, [pc, #532]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d112      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bce:	4b82      	ldr	r3, [pc, #520]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bda:	d10b      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bdc:	4b7e      	ldr	r3, [pc, #504]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d05b      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x108>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d157      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e242      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCC_OscConfig+0x74>
 8006bfe:	4b76      	ldr	r3, [pc, #472]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a75      	ldr	r2, [pc, #468]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e01d      	b.n	8006c48 <HAL_RCC_OscConfig+0xb0>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c14:	d10c      	bne.n	8006c30 <HAL_RCC_OscConfig+0x98>
 8006c16:	4b70      	ldr	r3, [pc, #448]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a6f      	ldr	r2, [pc, #444]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b6d      	ldr	r3, [pc, #436]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a6c      	ldr	r2, [pc, #432]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e00b      	b.n	8006c48 <HAL_RCC_OscConfig+0xb0>
 8006c30:	4b69      	ldr	r3, [pc, #420]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a68      	ldr	r2, [pc, #416]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	4b66      	ldr	r3, [pc, #408]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a65      	ldr	r2, [pc, #404]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d013      	beq.n	8006c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fd fa86 	bl	8004160 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c58:	f7fd fa82 	bl	8004160 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b64      	cmp	r3, #100	; 0x64
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e207      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c6a:	4b5b      	ldr	r3, [pc, #364]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0xc0>
 8006c76:	e014      	b.n	8006ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c78:	f7fd fa72 	bl	8004160 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c80:	f7fd fa6e 	bl	8004160 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b64      	cmp	r3, #100	; 0x64
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e1f3      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c92:	4b51      	ldr	r3, [pc, #324]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0xe8>
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d063      	beq.n	8006d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cae:	4b4a      	ldr	r3, [pc, #296]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 030c 	and.w	r3, r3, #12
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cba:	4b47      	ldr	r3, [pc, #284]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d11c      	bne.n	8006d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc6:	4b44      	ldr	r3, [pc, #272]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d116      	bne.n	8006d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cd2:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_RCC_OscConfig+0x152>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d001      	beq.n	8006cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e1c7      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cea:	4b3b      	ldr	r3, [pc, #236]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	4937      	ldr	r1, [pc, #220]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cfe:	e03a      	b.n	8006d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d020      	beq.n	8006d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d08:	4b34      	ldr	r3, [pc, #208]	; (8006ddc <HAL_RCC_OscConfig+0x244>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0e:	f7fd fa27 	bl	8004160 <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d14:	e008      	b.n	8006d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d16:	f7fd fa23 	bl	8004160 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e1a8      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d28:	4b2b      	ldr	r3, [pc, #172]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0f0      	beq.n	8006d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d34:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4925      	ldr	r1, [pc, #148]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	600b      	str	r3, [r1, #0]
 8006d48:	e015      	b.n	8006d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <HAL_RCC_OscConfig+0x244>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fd fa06 	bl	8004160 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d58:	f7fd fa02 	bl	8004160 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e187      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d6a:	4b1b      	ldr	r3, [pc, #108]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d036      	beq.n	8006df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d016      	beq.n	8006db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d8a:	4b15      	ldr	r3, [pc, #84]	; (8006de0 <HAL_RCC_OscConfig+0x248>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d90:	f7fd f9e6 	bl	8004160 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d98:	f7fd f9e2 	bl	8004160 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e167      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006daa:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <HAL_RCC_OscConfig+0x240>)
 8006dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCC_OscConfig+0x200>
 8006db6:	e01b      	b.n	8006df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db8:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_RCC_OscConfig+0x248>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dbe:	f7fd f9cf 	bl	8004160 <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc4:	e00e      	b.n	8006de4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dc6:	f7fd f9cb 	bl	8004160 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d907      	bls.n	8006de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e150      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	42470000 	.word	0x42470000
 8006de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006de4:	4b88      	ldr	r3, [pc, #544]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1ea      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8097 	beq.w	8006f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e02:	4b81      	ldr	r3, [pc, #516]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10f      	bne.n	8006e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	4b7d      	ldr	r3, [pc, #500]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	4a7c      	ldr	r2, [pc, #496]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1e:	4b7a      	ldr	r3, [pc, #488]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e2e:	4b77      	ldr	r3, [pc, #476]	; (800700c <HAL_RCC_OscConfig+0x474>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d118      	bne.n	8006e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e3a:	4b74      	ldr	r3, [pc, #464]	; (800700c <HAL_RCC_OscConfig+0x474>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a73      	ldr	r2, [pc, #460]	; (800700c <HAL_RCC_OscConfig+0x474>)
 8006e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e46:	f7fd f98b 	bl	8004160 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4e:	f7fd f987 	bl	8004160 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e10c      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e60:	4b6a      	ldr	r3, [pc, #424]	; (800700c <HAL_RCC_OscConfig+0x474>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0f0      	beq.n	8006e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d106      	bne.n	8006e82 <HAL_RCC_OscConfig+0x2ea>
 8006e74:	4b64      	ldr	r3, [pc, #400]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	4a63      	ldr	r2, [pc, #396]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e7a:	f043 0301 	orr.w	r3, r3, #1
 8006e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e80:	e01c      	b.n	8006ebc <HAL_RCC_OscConfig+0x324>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d10c      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x30c>
 8006e8a:	4b5f      	ldr	r3, [pc, #380]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	4a5e      	ldr	r2, [pc, #376]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e90:	f043 0304 	orr.w	r3, r3, #4
 8006e94:	6713      	str	r3, [r2, #112]	; 0x70
 8006e96:	4b5c      	ldr	r3, [pc, #368]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	4a5b      	ldr	r2, [pc, #364]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea2:	e00b      	b.n	8006ebc <HAL_RCC_OscConfig+0x324>
 8006ea4:	4b58      	ldr	r3, [pc, #352]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	4a57      	ldr	r2, [pc, #348]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb0:	4b55      	ldr	r3, [pc, #340]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	4a54      	ldr	r2, [pc, #336]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006eb6:	f023 0304 	bic.w	r3, r3, #4
 8006eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d015      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec4:	f7fd f94c 	bl	8004160 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ecc:	f7fd f948 	bl	8004160 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e0cb      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee2:	4b49      	ldr	r3, [pc, #292]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0ee      	beq.n	8006ecc <HAL_RCC_OscConfig+0x334>
 8006eee:	e014      	b.n	8006f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef0:	f7fd f936 	bl	8004160 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef6:	e00a      	b.n	8006f0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef8:	f7fd f932 	bl	8004160 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e0b5      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f0e:	4b3e      	ldr	r3, [pc, #248]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1ee      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d105      	bne.n	8006f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f20:	4b39      	ldr	r3, [pc, #228]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	4a38      	ldr	r2, [pc, #224]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80a1 	beq.w	8007078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f36:	4b34      	ldr	r3, [pc, #208]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 030c 	and.w	r3, r3, #12
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d05c      	beq.n	8006ffc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d141      	bne.n	8006fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <HAL_RCC_OscConfig+0x478>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f50:	f7fd f906 	bl	8004160 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f58:	f7fd f902 	bl	8004160 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e087      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f6a:	4b27      	ldr	r3, [pc, #156]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f0      	bne.n	8006f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69da      	ldr	r2, [r3, #28]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	019b      	lsls	r3, r3, #6
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	041b      	lsls	r3, r3, #16
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	061b      	lsls	r3, r3, #24
 8006f9a:	491b      	ldr	r1, [pc, #108]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa0:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <HAL_RCC_OscConfig+0x478>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa6:	f7fd f8db 	bl	8004160 <HAL_GetTick>
 8006faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fac:	e008      	b.n	8006fc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fae:	f7fd f8d7 	bl	8004160 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e05c      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc0:	4b11      	ldr	r3, [pc, #68]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0f0      	beq.n	8006fae <HAL_RCC_OscConfig+0x416>
 8006fcc:	e054      	b.n	8007078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fce:	4b10      	ldr	r3, [pc, #64]	; (8007010 <HAL_RCC_OscConfig+0x478>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd4:	f7fd f8c4 	bl	8004160 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fdc:	f7fd f8c0 	bl	8004160 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e045      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <HAL_RCC_OscConfig+0x470>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f0      	bne.n	8006fdc <HAL_RCC_OscConfig+0x444>
 8006ffa:	e03d      	b.n	8007078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d107      	bne.n	8007014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e038      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
 8007008:	40023800 	.word	0x40023800
 800700c:	40007000 	.word	0x40007000
 8007010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007014:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <HAL_RCC_OscConfig+0x4ec>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d028      	beq.n	8007074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800702c:	429a      	cmp	r2, r3
 800702e:	d121      	bne.n	8007074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800703a:	429a      	cmp	r2, r3
 800703c:	d11a      	bne.n	8007074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007044:	4013      	ands	r3, r2
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800704a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800704c:	4293      	cmp	r3, r2
 800704e:	d111      	bne.n	8007074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	3b01      	subs	r3, #1
 800705e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007060:	429a      	cmp	r2, r3
 8007062:	d107      	bne.n	8007074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007070:	429a      	cmp	r2, r3
 8007072:	d001      	beq.n	8007078 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	40023800 	.word	0x40023800

08007088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e0cc      	b.n	8007236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800709c:	4b68      	ldr	r3, [pc, #416]	; (8007240 <HAL_RCC_ClockConfig+0x1b8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d90c      	bls.n	80070c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070aa:	4b65      	ldr	r3, [pc, #404]	; (8007240 <HAL_RCC_ClockConfig+0x1b8>)
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b2:	4b63      	ldr	r3, [pc, #396]	; (8007240 <HAL_RCC_ClockConfig+0x1b8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d001      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0b8      	b.n	8007236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d020      	beq.n	8007112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070dc:	4b59      	ldr	r3, [pc, #356]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	4a58      	ldr	r2, [pc, #352]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070f4:	4b53      	ldr	r3, [pc, #332]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	4a52      	ldr	r2, [pc, #328]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007100:	4b50      	ldr	r3, [pc, #320]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	494d      	ldr	r1, [pc, #308]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	4313      	orrs	r3, r2
 8007110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d044      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d107      	bne.n	8007136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007126:	4b47      	ldr	r3, [pc, #284]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d119      	bne.n	8007166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e07f      	b.n	8007236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d003      	beq.n	8007146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007142:	2b03      	cmp	r3, #3
 8007144:	d107      	bne.n	8007156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007146:	4b3f      	ldr	r3, [pc, #252]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e06f      	b.n	8007236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007156:	4b3b      	ldr	r3, [pc, #236]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e067      	b.n	8007236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007166:	4b37      	ldr	r3, [pc, #220]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f023 0203 	bic.w	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	4934      	ldr	r1, [pc, #208]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007174:	4313      	orrs	r3, r2
 8007176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007178:	f7fc fff2 	bl	8004160 <HAL_GetTick>
 800717c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800717e:	e00a      	b.n	8007196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007180:	f7fc ffee 	bl	8004160 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f241 3288 	movw	r2, #5000	; 0x1388
 800718e:	4293      	cmp	r3, r2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e04f      	b.n	8007236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007196:	4b2b      	ldr	r3, [pc, #172]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 020c 	and.w	r2, r3, #12
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d1eb      	bne.n	8007180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071a8:	4b25      	ldr	r3, [pc, #148]	; (8007240 <HAL_RCC_ClockConfig+0x1b8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d20c      	bcs.n	80071d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b6:	4b22      	ldr	r3, [pc, #136]	; (8007240 <HAL_RCC_ClockConfig+0x1b8>)
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071be:	4b20      	ldr	r3, [pc, #128]	; (8007240 <HAL_RCC_ClockConfig+0x1b8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d001      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e032      	b.n	8007236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	4916      	ldr	r1, [pc, #88]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071fa:	4b12      	ldr	r3, [pc, #72]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	490e      	ldr	r1, [pc, #56]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 800720a:	4313      	orrs	r3, r2
 800720c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800720e:	f000 f821 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 8007212:	4602      	mov	r2, r0
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	091b      	lsrs	r3, r3, #4
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	490a      	ldr	r1, [pc, #40]	; (8007248 <HAL_RCC_ClockConfig+0x1c0>)
 8007220:	5ccb      	ldrb	r3, [r1, r3]
 8007222:	fa22 f303 	lsr.w	r3, r2, r3
 8007226:	4a09      	ldr	r2, [pc, #36]	; (800724c <HAL_RCC_ClockConfig+0x1c4>)
 8007228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800722a:	4b09      	ldr	r3, [pc, #36]	; (8007250 <HAL_RCC_ClockConfig+0x1c8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7fc fe40 	bl	8003eb4 <HAL_InitTick>

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40023c00 	.word	0x40023c00
 8007244:	40023800 	.word	0x40023800
 8007248:	08011200 	.word	0x08011200
 800724c:	2000059c 	.word	0x2000059c
 8007250:	200005a0 	.word	0x200005a0

08007254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007258:	b094      	sub	sp, #80	; 0x50
 800725a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	647b      	str	r3, [r7, #68]	; 0x44
 8007260:	2300      	movs	r3, #0
 8007262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007264:	2300      	movs	r3, #0
 8007266:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800726c:	4b79      	ldr	r3, [pc, #484]	; (8007454 <HAL_RCC_GetSysClockFreq+0x200>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 030c 	and.w	r3, r3, #12
 8007274:	2b08      	cmp	r3, #8
 8007276:	d00d      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x40>
 8007278:	2b08      	cmp	r3, #8
 800727a:	f200 80e1 	bhi.w	8007440 <HAL_RCC_GetSysClockFreq+0x1ec>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_RCC_GetSysClockFreq+0x34>
 8007282:	2b04      	cmp	r3, #4
 8007284:	d003      	beq.n	800728e <HAL_RCC_GetSysClockFreq+0x3a>
 8007286:	e0db      	b.n	8007440 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007288:	4b73      	ldr	r3, [pc, #460]	; (8007458 <HAL_RCC_GetSysClockFreq+0x204>)
 800728a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800728c:	e0db      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800728e:	4b72      	ldr	r3, [pc, #456]	; (8007458 <HAL_RCC_GetSysClockFreq+0x204>)
 8007290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007292:	e0d8      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007294:	4b6f      	ldr	r3, [pc, #444]	; (8007454 <HAL_RCC_GetSysClockFreq+0x200>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800729c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800729e:	4b6d      	ldr	r3, [pc, #436]	; (8007454 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d063      	beq.n	8007372 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072aa:	4b6a      	ldr	r3, [pc, #424]	; (8007454 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	099b      	lsrs	r3, r3, #6
 80072b0:	2200      	movs	r2, #0
 80072b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80072b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072bc:	633b      	str	r3, [r7, #48]	; 0x30
 80072be:	2300      	movs	r3, #0
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
 80072c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80072c6:	4622      	mov	r2, r4
 80072c8:	462b      	mov	r3, r5
 80072ca:	f04f 0000 	mov.w	r0, #0
 80072ce:	f04f 0100 	mov.w	r1, #0
 80072d2:	0159      	lsls	r1, r3, #5
 80072d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072d8:	0150      	lsls	r0, r2, #5
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4621      	mov	r1, r4
 80072e0:	1a51      	subs	r1, r2, r1
 80072e2:	6139      	str	r1, [r7, #16]
 80072e4:	4629      	mov	r1, r5
 80072e6:	eb63 0301 	sbc.w	r3, r3, r1
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072f8:	4659      	mov	r1, fp
 80072fa:	018b      	lsls	r3, r1, #6
 80072fc:	4651      	mov	r1, sl
 80072fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007302:	4651      	mov	r1, sl
 8007304:	018a      	lsls	r2, r1, #6
 8007306:	4651      	mov	r1, sl
 8007308:	ebb2 0801 	subs.w	r8, r2, r1
 800730c:	4659      	mov	r1, fp
 800730e:	eb63 0901 	sbc.w	r9, r3, r1
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800731e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007326:	4690      	mov	r8, r2
 8007328:	4699      	mov	r9, r3
 800732a:	4623      	mov	r3, r4
 800732c:	eb18 0303 	adds.w	r3, r8, r3
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	462b      	mov	r3, r5
 8007334:	eb49 0303 	adc.w	r3, r9, r3
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007346:	4629      	mov	r1, r5
 8007348:	028b      	lsls	r3, r1, #10
 800734a:	4621      	mov	r1, r4
 800734c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007350:	4621      	mov	r1, r4
 8007352:	028a      	lsls	r2, r1, #10
 8007354:	4610      	mov	r0, r2
 8007356:	4619      	mov	r1, r3
 8007358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735a:	2200      	movs	r2, #0
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
 800735e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007364:	f7f9 fa9a 	bl	800089c <__aeabi_uldivmod>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4613      	mov	r3, r2
 800736e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007370:	e058      	b.n	8007424 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007372:	4b38      	ldr	r3, [pc, #224]	; (8007454 <HAL_RCC_GetSysClockFreq+0x200>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	2200      	movs	r2, #0
 800737a:	4618      	mov	r0, r3
 800737c:	4611      	mov	r1, r2
 800737e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007382:	623b      	str	r3, [r7, #32]
 8007384:	2300      	movs	r3, #0
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800738c:	4642      	mov	r2, r8
 800738e:	464b      	mov	r3, r9
 8007390:	f04f 0000 	mov.w	r0, #0
 8007394:	f04f 0100 	mov.w	r1, #0
 8007398:	0159      	lsls	r1, r3, #5
 800739a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800739e:	0150      	lsls	r0, r2, #5
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4641      	mov	r1, r8
 80073a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80073aa:	4649      	mov	r1, r9
 80073ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80073b0:	f04f 0200 	mov.w	r2, #0
 80073b4:	f04f 0300 	mov.w	r3, #0
 80073b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073c4:	ebb2 040a 	subs.w	r4, r2, sl
 80073c8:	eb63 050b 	sbc.w	r5, r3, fp
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	00eb      	lsls	r3, r5, #3
 80073d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073da:	00e2      	lsls	r2, r4, #3
 80073dc:	4614      	mov	r4, r2
 80073de:	461d      	mov	r5, r3
 80073e0:	4643      	mov	r3, r8
 80073e2:	18e3      	adds	r3, r4, r3
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	464b      	mov	r3, r9
 80073e8:	eb45 0303 	adc.w	r3, r5, r3
 80073ec:	607b      	str	r3, [r7, #4]
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073fa:	4629      	mov	r1, r5
 80073fc:	028b      	lsls	r3, r1, #10
 80073fe:	4621      	mov	r1, r4
 8007400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007404:	4621      	mov	r1, r4
 8007406:	028a      	lsls	r2, r1, #10
 8007408:	4610      	mov	r0, r2
 800740a:	4619      	mov	r1, r3
 800740c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800740e:	2200      	movs	r2, #0
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	61fa      	str	r2, [r7, #28]
 8007414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007418:	f7f9 fa40 	bl	800089c <__aeabi_uldivmod>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4613      	mov	r3, r2
 8007422:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007424:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <HAL_RCC_GetSysClockFreq+0x200>)
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	0c1b      	lsrs	r3, r3, #16
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	3301      	adds	r3, #1
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007438:	fbb2 f3f3 	udiv	r3, r2, r3
 800743c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800743e:	e002      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <HAL_RCC_GetSysClockFreq+0x204>)
 8007442:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007448:	4618      	mov	r0, r3
 800744a:	3750      	adds	r7, #80	; 0x50
 800744c:	46bd      	mov	sp, r7
 800744e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800
 8007458:	00f42400 	.word	0x00f42400

0800745c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007460:	4b03      	ldr	r3, [pc, #12]	; (8007470 <HAL_RCC_GetHCLKFreq+0x14>)
 8007462:	681b      	ldr	r3, [r3, #0]
}
 8007464:	4618      	mov	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	2000059c 	.word	0x2000059c

08007474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007478:	f7ff fff0 	bl	800745c <HAL_RCC_GetHCLKFreq>
 800747c:	4602      	mov	r2, r0
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	0a9b      	lsrs	r3, r3, #10
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	4903      	ldr	r1, [pc, #12]	; (8007498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800748a:	5ccb      	ldrb	r3, [r1, r3]
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40023800 	.word	0x40023800
 8007498:	08011210 	.word	0x08011210

0800749c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220f      	movs	r2, #15
 80074aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074ac:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <HAL_RCC_GetClockConfig+0x5c>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0203 	and.w	r2, r3, #3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <HAL_RCC_GetClockConfig+0x5c>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074c4:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <HAL_RCC_GetClockConfig+0x5c>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074d0:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <HAL_RCC_GetClockConfig+0x5c>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	08db      	lsrs	r3, r3, #3
 80074d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074de:	4b07      	ldr	r3, [pc, #28]	; (80074fc <HAL_RCC_GetClockConfig+0x60>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0207 	and.w	r2, r3, #7
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	601a      	str	r2, [r3, #0]
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40023800 	.word	0x40023800
 80074fc:	40023c00 	.word	0x40023c00

08007500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e07b      	b.n	800760a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007522:	d009      	beq.n	8007538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	61da      	str	r2, [r3, #28]
 800752a:	e005      	b.n	8007538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fc fbc2 	bl	8003cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800756e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075bc:	ea42 0103 	orr.w	r1, r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	f003 0104 	and.w	r1, r3, #4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	f003 0210 	and.w	r2, r3, #16
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b088      	sub	sp, #32
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	603b      	str	r3, [r7, #0]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_SPI_Transmit+0x22>
 8007630:	2302      	movs	r3, #2
 8007632:	e126      	b.n	8007882 <HAL_SPI_Transmit+0x270>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800763c:	f7fc fd90 	bl	8004160 <HAL_GetTick>
 8007640:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007642:	88fb      	ldrh	r3, [r7, #6]
 8007644:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d002      	beq.n	8007658 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007652:	2302      	movs	r3, #2
 8007654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007656:	e10b      	b.n	8007870 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_SPI_Transmit+0x52>
 800765e:	88fb      	ldrh	r3, [r7, #6]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007668:	e102      	b.n	8007870 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2203      	movs	r2, #3
 800766e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	88fa      	ldrh	r2, [r7, #6]
 8007682:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b0:	d10f      	bne.n	80076d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d007      	beq.n	80076f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076f8:	d14b      	bne.n	8007792 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <HAL_SPI_Transmit+0xf6>
 8007702:	8afb      	ldrh	r3, [r7, #22]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d13e      	bne.n	8007786 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800772c:	e02b      	b.n	8007786 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b02      	cmp	r3, #2
 800773a:	d112      	bne.n	8007762 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	881a      	ldrh	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	1c9a      	adds	r2, r3, #2
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007756:	b29b      	uxth	r3, r3
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007760:	e011      	b.n	8007786 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007762:	f7fc fcfd 	bl	8004160 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d803      	bhi.n	800777a <HAL_SPI_Transmit+0x168>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d102      	bne.n	8007780 <HAL_SPI_Transmit+0x16e>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007784:	e074      	b.n	8007870 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1ce      	bne.n	800772e <HAL_SPI_Transmit+0x11c>
 8007790:	e04c      	b.n	800782c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_SPI_Transmit+0x18e>
 800779a:	8afb      	ldrh	r3, [r7, #22]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d140      	bne.n	8007822 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	7812      	ldrb	r2, [r2, #0]
 80077ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077c6:	e02c      	b.n	8007822 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d113      	bne.n	80077fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	330c      	adds	r3, #12
 80077e0:	7812      	ldrb	r2, [r2, #0]
 80077e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80077fc:	e011      	b.n	8007822 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077fe:	f7fc fcaf 	bl	8004160 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d803      	bhi.n	8007816 <HAL_SPI_Transmit+0x204>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d102      	bne.n	800781c <HAL_SPI_Transmit+0x20a>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007820:	e026      	b.n	8007870 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1cd      	bne.n	80077c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 fa55 	bl	8007ce0 <SPI_EndRxTxTransaction>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2220      	movs	r2, #32
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800784a:	2300      	movs	r3, #0
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e000      	b.n	8007870 <HAL_SPI_Transmit+0x25e>
  }

error:
 800786e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007880:	7ffb      	ldrb	r3, [r7, #31]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3720      	adds	r7, #32
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b08c      	sub	sp, #48	; 0x30
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007898:	2301      	movs	r3, #1
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x26>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e18a      	b.n	8007bc6 <HAL_SPI_TransmitReceive+0x33c>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b8:	f7fc fc52 	bl	8004160 <HAL_GetTick>
 80078bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078ce:	887b      	ldrh	r3, [r7, #2]
 80078d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d00f      	beq.n	80078fa <HAL_SPI_TransmitReceive+0x70>
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e0:	d107      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x68>
 80078ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d003      	beq.n	80078fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
 80078f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078f8:	e15b      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_SPI_TransmitReceive+0x82>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_SPI_TransmitReceive+0x82>
 8007906:	887b      	ldrh	r3, [r7, #2]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007912:	e14e      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b04      	cmp	r3, #4
 800791e:	d003      	beq.n	8007928 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2205      	movs	r2, #5
 8007924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	887a      	ldrh	r2, [r7, #2]
 8007938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	887a      	ldrh	r2, [r7, #2]
 800793e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	887a      	ldrh	r2, [r7, #2]
 800794a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	887a      	ldrh	r2, [r7, #2]
 8007950:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d007      	beq.n	800797c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800797a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007984:	d178      	bne.n	8007a78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_SPI_TransmitReceive+0x10a>
 800798e:	8b7b      	ldrh	r3, [r7, #26]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d166      	bne.n	8007a62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	881a      	ldrh	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	1c9a      	adds	r2, r3, #2
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079b8:	e053      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d11b      	bne.n	8007a00 <HAL_SPI_TransmitReceive+0x176>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d016      	beq.n	8007a00 <HAL_SPI_TransmitReceive+0x176>
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d113      	bne.n	8007a00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079dc:	881a      	ldrh	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	1c9a      	adds	r2, r3, #2
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d119      	bne.n	8007a42 <HAL_SPI_TransmitReceive+0x1b8>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d014      	beq.n	8007a42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	b292      	uxth	r2, r2
 8007a24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	1c9a      	adds	r2, r3, #2
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a42:	f7fc fb8d 	bl	8004160 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d807      	bhi.n	8007a62 <HAL_SPI_TransmitReceive+0x1d8>
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a58:	d003      	beq.n	8007a62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a60:	e0a7      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1a6      	bne.n	80079ba <HAL_SPI_TransmitReceive+0x130>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1a1      	bne.n	80079ba <HAL_SPI_TransmitReceive+0x130>
 8007a76:	e07c      	b.n	8007b72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <HAL_SPI_TransmitReceive+0x1fc>
 8007a80:	8b7b      	ldrh	r3, [r7, #26]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d16b      	bne.n	8007b5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aac:	e057      	b.n	8007b5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d11c      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x26c>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d017      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x26c>
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d114      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	7812      	ldrb	r2, [r2, #0]
 8007ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d119      	bne.n	8007b38 <HAL_SPI_TransmitReceive+0x2ae>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d014      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b34:	2301      	movs	r3, #1
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b38:	f7fc fb12 	bl	8004160 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d803      	bhi.n	8007b50 <HAL_SPI_TransmitReceive+0x2c6>
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d102      	bne.n	8007b56 <HAL_SPI_TransmitReceive+0x2cc>
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b5c:	e029      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1a2      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x224>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d19d      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f8b2 	bl	8007ce0 <SPI_EndRxTxTransaction>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b8e:	e010      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10b      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	e000      	b.n	8007bb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3730      	adds	r7, #48	; 0x30
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007be0:	f7fc fabe 	bl	8004160 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bf0:	f7fc fab6 	bl	8004160 <HAL_GetTick>
 8007bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	015b      	lsls	r3, r3, #5
 8007bfc:	0d1b      	lsrs	r3, r3, #20
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	fb02 f303 	mul.w	r3, r2, r3
 8007c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c06:	e054      	b.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d050      	beq.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c10:	f7fc faa6 	bl	8004160 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d902      	bls.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d13d      	bne.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3e:	d111      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c48:	d004      	beq.n	8007c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c52:	d107      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6c:	d10f      	bne.n	8007c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e017      	b.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d19b      	bne.n	8007c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	2000059c 	.word	0x2000059c

08007ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cec:	4b1b      	ldr	r3, [pc, #108]	; (8007d5c <SPI_EndRxTxTransaction+0x7c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1b      	ldr	r2, [pc, #108]	; (8007d60 <SPI_EndRxTxTransaction+0x80>)
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf6:	0d5b      	lsrs	r3, r3, #21
 8007cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d0a:	d112      	bne.n	8007d32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2200      	movs	r2, #0
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff ff5a 	bl	8007bd0 <SPI_WaitFlagStateUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d016      	beq.n	8007d50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e00f      	b.n	8007d52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d48:	2b80      	cmp	r3, #128	; 0x80
 8007d4a:	d0f2      	beq.n	8007d32 <SPI_EndRxTxTransaction+0x52>
 8007d4c:	e000      	b.n	8007d50 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d4e:	bf00      	nop
  }

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	2000059c 	.word	0x2000059c
 8007d60:	165e9f81 	.word	0x165e9f81

08007d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e041      	b.n	8007dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fc f824 	bl	8003dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f000 fd3a 	bl	800881c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d001      	beq.n	8007e1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e03c      	b.n	8007e96 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <HAL_TIM_Base_Start+0xa0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d018      	beq.n	8007e60 <HAL_TIM_Base_Start+0x5c>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e36:	d013      	beq.n	8007e60 <HAL_TIM_Base_Start+0x5c>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ea8 <HAL_TIM_Base_Start+0xa4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00e      	beq.n	8007e60 <HAL_TIM_Base_Start+0x5c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a19      	ldr	r2, [pc, #100]	; (8007eac <HAL_TIM_Base_Start+0xa8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d009      	beq.n	8007e60 <HAL_TIM_Base_Start+0x5c>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a17      	ldr	r2, [pc, #92]	; (8007eb0 <HAL_TIM_Base_Start+0xac>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <HAL_TIM_Base_Start+0x5c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a16      	ldr	r2, [pc, #88]	; (8007eb4 <HAL_TIM_Base_Start+0xb0>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d111      	bne.n	8007e84 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b06      	cmp	r3, #6
 8007e70:	d010      	beq.n	8007e94 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e82:	e007      	b.n	8007e94 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	40000800 	.word	0x40000800
 8007eb0:	40000c00 	.word	0x40000c00
 8007eb4:	40014000 	.word	0x40014000

08007eb8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6a1a      	ldr	r2, [r3, #32]
 8007ec6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10f      	bne.n	8007ef0 <HAL_TIM_Base_Stop+0x38>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a1a      	ldr	r2, [r3, #32]
 8007ed6:	f240 4344 	movw	r3, #1092	; 0x444
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d107      	bne.n	8007ef0 <HAL_TIM_Base_Stop+0x38>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d001      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e044      	b.n	8007faa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1e      	ldr	r2, [pc, #120]	; (8007fb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d018      	beq.n	8007f74 <HAL_TIM_Base_Start_IT+0x6c>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4a:	d013      	beq.n	8007f74 <HAL_TIM_Base_Start_IT+0x6c>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1a      	ldr	r2, [pc, #104]	; (8007fbc <HAL_TIM_Base_Start_IT+0xb4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00e      	beq.n	8007f74 <HAL_TIM_Base_Start_IT+0x6c>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d009      	beq.n	8007f74 <HAL_TIM_Base_Start_IT+0x6c>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a17      	ldr	r2, [pc, #92]	; (8007fc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d004      	beq.n	8007f74 <HAL_TIM_Base_Start_IT+0x6c>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a16      	ldr	r2, [pc, #88]	; (8007fc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d111      	bne.n	8007f98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b06      	cmp	r3, #6
 8007f84:	d010      	beq.n	8007fa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0201 	orr.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	e007      	b.n	8007fa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010000 	.word	0x40010000
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800
 8007fc4:	40000c00 	.word	0x40000c00
 8007fc8:	40014000 	.word	0x40014000

08007fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e041      	b.n	8008062 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f839 	bl	800806a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	4619      	mov	r1, r3
 800800a:	4610      	mov	r0, r2
 800800c:	f000 fc06 	bl	800881c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <HAL_TIM_PWM_Start+0x24>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b01      	cmp	r3, #1
 800809a:	bf14      	ite	ne
 800809c:	2301      	movne	r3, #1
 800809e:	2300      	moveq	r3, #0
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	e022      	b.n	80080ea <HAL_TIM_PWM_Start+0x6a>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d109      	bne.n	80080be <HAL_TIM_PWM_Start+0x3e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	bf14      	ite	ne
 80080b6:	2301      	movne	r3, #1
 80080b8:	2300      	moveq	r3, #0
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	e015      	b.n	80080ea <HAL_TIM_PWM_Start+0x6a>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d109      	bne.n	80080d8 <HAL_TIM_PWM_Start+0x58>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	bf14      	ite	ne
 80080d0:	2301      	movne	r3, #1
 80080d2:	2300      	moveq	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	e008      	b.n	80080ea <HAL_TIM_PWM_Start+0x6a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	bf14      	ite	ne
 80080e4:	2301      	movne	r3, #1
 80080e6:	2300      	moveq	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e068      	b.n	80081c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_PWM_Start+0x82>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008100:	e013      	b.n	800812a <HAL_TIM_PWM_Start+0xaa>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b04      	cmp	r3, #4
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Start+0x92>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008110:	e00b      	b.n	800812a <HAL_TIM_PWM_Start+0xaa>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b08      	cmp	r3, #8
 8008116:	d104      	bne.n	8008122 <HAL_TIM_PWM_Start+0xa2>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008120:	e003      	b.n	800812a <HAL_TIM_PWM_Start+0xaa>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2202      	movs	r2, #2
 8008126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2201      	movs	r2, #1
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fe18 	bl	8008d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a23      	ldr	r2, [pc, #140]	; (80081cc <HAL_TIM_PWM_Start+0x14c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d107      	bne.n	8008152 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1d      	ldr	r2, [pc, #116]	; (80081cc <HAL_TIM_PWM_Start+0x14c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d018      	beq.n	800818e <HAL_TIM_PWM_Start+0x10e>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008164:	d013      	beq.n	800818e <HAL_TIM_PWM_Start+0x10e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a19      	ldr	r2, [pc, #100]	; (80081d0 <HAL_TIM_PWM_Start+0x150>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00e      	beq.n	800818e <HAL_TIM_PWM_Start+0x10e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a17      	ldr	r2, [pc, #92]	; (80081d4 <HAL_TIM_PWM_Start+0x154>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d009      	beq.n	800818e <HAL_TIM_PWM_Start+0x10e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a16      	ldr	r2, [pc, #88]	; (80081d8 <HAL_TIM_PWM_Start+0x158>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d004      	beq.n	800818e <HAL_TIM_PWM_Start+0x10e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a14      	ldr	r2, [pc, #80]	; (80081dc <HAL_TIM_PWM_Start+0x15c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d111      	bne.n	80081b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b06      	cmp	r3, #6
 800819e:	d010      	beq.n	80081c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b0:	e007      	b.n	80081c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40010000 	.word	0x40010000
 80081d0:	40000400 	.word	0x40000400
 80081d4:	40000800 	.word	0x40000800
 80081d8:	40000c00 	.word	0x40000c00
 80081dc:	40014000 	.word	0x40014000

080081e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2200      	movs	r2, #0
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fdb8 	bl	8008d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a29      	ldr	r2, [pc, #164]	; (80082a4 <HAL_TIM_PWM_Stop+0xc4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d117      	bne.n	8008232 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a1a      	ldr	r2, [r3, #32]
 8008208:	f241 1311 	movw	r3, #4369	; 0x1111
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10f      	bne.n	8008232 <HAL_TIM_PWM_Stop+0x52>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6a1a      	ldr	r2, [r3, #32]
 8008218:	f240 4344 	movw	r3, #1092	; 0x444
 800821c:	4013      	ands	r3, r2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d107      	bne.n	8008232 <HAL_TIM_PWM_Stop+0x52>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6a1a      	ldr	r2, [r3, #32]
 8008238:	f241 1311 	movw	r3, #4369	; 0x1111
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10f      	bne.n	8008262 <HAL_TIM_PWM_Stop+0x82>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a1a      	ldr	r2, [r3, #32]
 8008248:	f240 4344 	movw	r3, #1092	; 0x444
 800824c:	4013      	ands	r3, r2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d107      	bne.n	8008262 <HAL_TIM_PWM_Stop+0x82>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <HAL_TIM_PWM_Stop+0x92>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008270:	e013      	b.n	800829a <HAL_TIM_PWM_Stop+0xba>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b04      	cmp	r3, #4
 8008276:	d104      	bne.n	8008282 <HAL_TIM_PWM_Stop+0xa2>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008280:	e00b      	b.n	800829a <HAL_TIM_PWM_Stop+0xba>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b08      	cmp	r3, #8
 8008286:	d104      	bne.n	8008292 <HAL_TIM_PWM_Stop+0xb2>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008290:	e003      	b.n	800829a <HAL_TIM_PWM_Stop+0xba>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40010000 	.word	0x40010000

080082a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d122      	bne.n	8008304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d11b      	bne.n	8008304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0202 	mvn.w	r2, #2
 80082d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa77 	bl	80087de <HAL_TIM_IC_CaptureCallback>
 80082f0:	e005      	b.n	80082fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa69 	bl	80087ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fa7a 	bl	80087f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b04      	cmp	r3, #4
 8008310:	d122      	bne.n	8008358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b04      	cmp	r3, #4
 800831e:	d11b      	bne.n	8008358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f06f 0204 	mvn.w	r2, #4
 8008328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa4d 	bl	80087de <HAL_TIM_IC_CaptureCallback>
 8008344:	e005      	b.n	8008352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa3f 	bl	80087ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa50 	bl	80087f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b08      	cmp	r3, #8
 8008364:	d122      	bne.n	80083ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b08      	cmp	r3, #8
 8008372:	d11b      	bne.n	80083ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f06f 0208 	mvn.w	r2, #8
 800837c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2204      	movs	r2, #4
 8008382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa23 	bl	80087de <HAL_TIM_IC_CaptureCallback>
 8008398:	e005      	b.n	80083a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa15 	bl	80087ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fa26 	bl	80087f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	2b10      	cmp	r3, #16
 80083b8:	d122      	bne.n	8008400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d11b      	bne.n	8008400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f06f 0210 	mvn.w	r2, #16
 80083d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2208      	movs	r2, #8
 80083d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f9f9 	bl	80087de <HAL_TIM_IC_CaptureCallback>
 80083ec:	e005      	b.n	80083fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9eb 	bl	80087ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f9fc 	bl	80087f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b01      	cmp	r3, #1
 800840c:	d10e      	bne.n	800842c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d107      	bne.n	800842c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0201 	mvn.w	r2, #1
 8008424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fb f88a 	bl	8003540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008436:	2b80      	cmp	r3, #128	; 0x80
 8008438:	d10e      	bne.n	8008458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d107      	bne.n	8008458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fd26 	bl	8008ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d10e      	bne.n	8008484 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d107      	bne.n	8008484 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800847c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9c1 	bl	8008806 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b20      	cmp	r3, #32
 8008490:	d10e      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b20      	cmp	r3, #32
 800849e:	d107      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f06f 0220 	mvn.w	r2, #32
 80084a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fcf0 	bl	8008e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084d2:	2302      	movs	r3, #2
 80084d4:	e0ae      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b0c      	cmp	r3, #12
 80084e2:	f200 809f 	bhi.w	8008624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008521 	.word	0x08008521
 80084f0:	08008625 	.word	0x08008625
 80084f4:	08008625 	.word	0x08008625
 80084f8:	08008625 	.word	0x08008625
 80084fc:	08008561 	.word	0x08008561
 8008500:	08008625 	.word	0x08008625
 8008504:	08008625 	.word	0x08008625
 8008508:	08008625 	.word	0x08008625
 800850c:	080085a3 	.word	0x080085a3
 8008510:	08008625 	.word	0x08008625
 8008514:	08008625 	.word	0x08008625
 8008518:	08008625 	.word	0x08008625
 800851c:	080085e3 	.word	0x080085e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f9f8 	bl	800891c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0208 	orr.w	r2, r2, #8
 800853a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699a      	ldr	r2, [r3, #24]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0204 	bic.w	r2, r2, #4
 800854a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6999      	ldr	r1, [r3, #24]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	619a      	str	r2, [r3, #24]
      break;
 800855e:	e064      	b.n	800862a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fa3e 	bl	80089e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6999      	ldr	r1, [r3, #24]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	021a      	lsls	r2, r3, #8
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	619a      	str	r2, [r3, #24]
      break;
 80085a0:	e043      	b.n	800862a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68b9      	ldr	r1, [r7, #8]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fa89 	bl	8008ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	69da      	ldr	r2, [r3, #28]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 0208 	orr.w	r2, r2, #8
 80085bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69da      	ldr	r2, [r3, #28]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0204 	bic.w	r2, r2, #4
 80085cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69d9      	ldr	r1, [r3, #28]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	61da      	str	r2, [r3, #28]
      break;
 80085e0:	e023      	b.n	800862a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fad3 	bl	8008b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69da      	ldr	r2, [r3, #28]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800860c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69d9      	ldr	r1, [r3, #28]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	021a      	lsls	r2, r3, #8
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	61da      	str	r2, [r3, #28]
      break;
 8008622:	e002      	b.n	800862a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	75fb      	strb	r3, [r7, #23]
      break;
 8008628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <HAL_TIM_ConfigClockSource+0x1c>
 8008654:	2302      	movs	r3, #2
 8008656:	e0b4      	b.n	80087c2 <HAL_TIM_ConfigClockSource+0x186>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800867e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008690:	d03e      	beq.n	8008710 <HAL_TIM_ConfigClockSource+0xd4>
 8008692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008696:	f200 8087 	bhi.w	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 800869a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869e:	f000 8086 	beq.w	80087ae <HAL_TIM_ConfigClockSource+0x172>
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a6:	d87f      	bhi.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 80086a8:	2b70      	cmp	r3, #112	; 0x70
 80086aa:	d01a      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0xa6>
 80086ac:	2b70      	cmp	r3, #112	; 0x70
 80086ae:	d87b      	bhi.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 80086b0:	2b60      	cmp	r3, #96	; 0x60
 80086b2:	d050      	beq.n	8008756 <HAL_TIM_ConfigClockSource+0x11a>
 80086b4:	2b60      	cmp	r3, #96	; 0x60
 80086b6:	d877      	bhi.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 80086b8:	2b50      	cmp	r3, #80	; 0x50
 80086ba:	d03c      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0xfa>
 80086bc:	2b50      	cmp	r3, #80	; 0x50
 80086be:	d873      	bhi.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 80086c0:	2b40      	cmp	r3, #64	; 0x40
 80086c2:	d058      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0x13a>
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d86f      	bhi.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 80086c8:	2b30      	cmp	r3, #48	; 0x30
 80086ca:	d064      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x15a>
 80086cc:	2b30      	cmp	r3, #48	; 0x30
 80086ce:	d86b      	bhi.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d060      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x15a>
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d867      	bhi.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d05c      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x15a>
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d05a      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0x15a>
 80086e0:	e062      	b.n	80087a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6899      	ldr	r1, [r3, #8]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f000 fb19 	bl	8008d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	609a      	str	r2, [r3, #8]
      break;
 800870e:	e04f      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	6899      	ldr	r1, [r3, #8]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f000 fb02 	bl	8008d28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008732:	609a      	str	r2, [r3, #8]
      break;
 8008734:	e03c      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6859      	ldr	r1, [r3, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	461a      	mov	r2, r3
 8008744:	f000 fa76 	bl	8008c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2150      	movs	r1, #80	; 0x50
 800874e:	4618      	mov	r0, r3
 8008750:	f000 facf 	bl	8008cf2 <TIM_ITRx_SetConfig>
      break;
 8008754:	e02c      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	6859      	ldr	r1, [r3, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	461a      	mov	r2, r3
 8008764:	f000 fa95 	bl	8008c92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2160      	movs	r1, #96	; 0x60
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fabf 	bl	8008cf2 <TIM_ITRx_SetConfig>
      break;
 8008774:	e01c      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	6859      	ldr	r1, [r3, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	461a      	mov	r2, r3
 8008784:	f000 fa56 	bl	8008c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2140      	movs	r1, #64	; 0x40
 800878e:	4618      	mov	r0, r3
 8008790:	f000 faaf 	bl	8008cf2 <TIM_ITRx_SetConfig>
      break;
 8008794:	e00c      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f000 faa6 	bl	8008cf2 <TIM_ITRx_SetConfig>
      break;
 80087a6:	e003      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
      break;
 80087ac:	e000      	b.n	80087b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
	...

0800881c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a34      	ldr	r2, [pc, #208]	; (8008900 <TIM_Base_SetConfig+0xe4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d00f      	beq.n	8008854 <TIM_Base_SetConfig+0x38>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883a:	d00b      	beq.n	8008854 <TIM_Base_SetConfig+0x38>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a31      	ldr	r2, [pc, #196]	; (8008904 <TIM_Base_SetConfig+0xe8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d007      	beq.n	8008854 <TIM_Base_SetConfig+0x38>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a30      	ldr	r2, [pc, #192]	; (8008908 <TIM_Base_SetConfig+0xec>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d003      	beq.n	8008854 <TIM_Base_SetConfig+0x38>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a2f      	ldr	r2, [pc, #188]	; (800890c <TIM_Base_SetConfig+0xf0>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d108      	bne.n	8008866 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a25      	ldr	r2, [pc, #148]	; (8008900 <TIM_Base_SetConfig+0xe4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d01b      	beq.n	80088a6 <TIM_Base_SetConfig+0x8a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008874:	d017      	beq.n	80088a6 <TIM_Base_SetConfig+0x8a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a22      	ldr	r2, [pc, #136]	; (8008904 <TIM_Base_SetConfig+0xe8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d013      	beq.n	80088a6 <TIM_Base_SetConfig+0x8a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a21      	ldr	r2, [pc, #132]	; (8008908 <TIM_Base_SetConfig+0xec>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00f      	beq.n	80088a6 <TIM_Base_SetConfig+0x8a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a20      	ldr	r2, [pc, #128]	; (800890c <TIM_Base_SetConfig+0xf0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00b      	beq.n	80088a6 <TIM_Base_SetConfig+0x8a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a1f      	ldr	r2, [pc, #124]	; (8008910 <TIM_Base_SetConfig+0xf4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d007      	beq.n	80088a6 <TIM_Base_SetConfig+0x8a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a1e      	ldr	r2, [pc, #120]	; (8008914 <TIM_Base_SetConfig+0xf8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d003      	beq.n	80088a6 <TIM_Base_SetConfig+0x8a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a1d      	ldr	r2, [pc, #116]	; (8008918 <TIM_Base_SetConfig+0xfc>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d108      	bne.n	80088b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a08      	ldr	r2, [pc, #32]	; (8008900 <TIM_Base_SetConfig+0xe4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d103      	bne.n	80088ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	615a      	str	r2, [r3, #20]
}
 80088f2:	bf00      	nop
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40010000 	.word	0x40010000
 8008904:	40000400 	.word	0x40000400
 8008908:	40000800 	.word	0x40000800
 800890c:	40000c00 	.word	0x40000c00
 8008910:	40014000 	.word	0x40014000
 8008914:	40014400 	.word	0x40014400
 8008918:	40014800 	.word	0x40014800

0800891c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f023 0201 	bic.w	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0303 	bic.w	r3, r3, #3
 8008952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f023 0302 	bic.w	r3, r3, #2
 8008964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a1c      	ldr	r2, [pc, #112]	; (80089e4 <TIM_OC1_SetConfig+0xc8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d10c      	bne.n	8008992 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f023 0308 	bic.w	r3, r3, #8
 800897e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	4313      	orrs	r3, r2
 8008988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f023 0304 	bic.w	r3, r3, #4
 8008990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a13      	ldr	r2, [pc, #76]	; (80089e4 <TIM_OC1_SetConfig+0xc8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d111      	bne.n	80089be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	621a      	str	r2, [r3, #32]
}
 80089d8:	bf00      	nop
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40010000 	.word	0x40010000

080089e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0210 	bic.w	r2, r3, #16
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	021b      	lsls	r3, r3, #8
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f023 0320 	bic.w	r3, r3, #32
 8008a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a1e      	ldr	r2, [pc, #120]	; (8008abc <TIM_OC2_SetConfig+0xd4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d10d      	bne.n	8008a64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a15      	ldr	r2, [pc, #84]	; (8008abc <TIM_OC2_SetConfig+0xd4>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d113      	bne.n	8008a94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	621a      	str	r2, [r3, #32]
}
 8008aae:	bf00      	nop
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40010000 	.word	0x40010000

08008ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0303 	bic.w	r3, r3, #3
 8008af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a1d      	ldr	r2, [pc, #116]	; (8008b90 <TIM_OC3_SetConfig+0xd0>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d10d      	bne.n	8008b3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a14      	ldr	r2, [pc, #80]	; (8008b90 <TIM_OC3_SetConfig+0xd0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d113      	bne.n	8008b6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	621a      	str	r2, [r3, #32]
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	40010000 	.word	0x40010000

08008b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	031b      	lsls	r3, r3, #12
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a10      	ldr	r2, [pc, #64]	; (8008c30 <TIM_OC4_SetConfig+0x9c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d109      	bne.n	8008c08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	019b      	lsls	r3, r3, #6
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	621a      	str	r2, [r3, #32]
}
 8008c22:	bf00      	nop
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	40010000 	.word	0x40010000

08008c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f023 0201 	bic.w	r2, r3, #1
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f023 030a 	bic.w	r3, r3, #10
 8008c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	621a      	str	r2, [r3, #32]
}
 8008c86:	bf00      	nop
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b087      	sub	sp, #28
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	f023 0210 	bic.w	r2, r3, #16
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	031b      	lsls	r3, r3, #12
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	621a      	str	r2, [r3, #32]
}
 8008ce6:	bf00      	nop
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	f043 0307 	orr.w	r3, r3, #7
 8008d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	609a      	str	r2, [r3, #8]
}
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	021a      	lsls	r2, r3, #8
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	609a      	str	r2, [r3, #8]
}
 8008d5c:	bf00      	nop
 8008d5e:	371c      	adds	r7, #28
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f003 031f 	and.w	r3, r3, #31
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a1a      	ldr	r2, [r3, #32]
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	43db      	mvns	r3, r3
 8008d8a:	401a      	ands	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a1a      	ldr	r2, [r3, #32]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 031f 	and.w	r3, r3, #31
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008da0:	431a      	orrs	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	621a      	str	r2, [r3, #32]
}
 8008da6:	bf00      	nop
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
	...

08008db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e050      	b.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1c      	ldr	r2, [pc, #112]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d018      	beq.n	8008e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e18:	d013      	beq.n	8008e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00e      	beq.n	8008e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a16      	ldr	r2, [pc, #88]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d009      	beq.n	8008e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d004      	beq.n	8008e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d10c      	bne.n	8008e5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	40010000 	.word	0x40010000
 8008e80:	40000400 	.word	0x40000400
 8008e84:	40000800 	.word	0x40000800
 8008e88:	40000c00 	.word	0x40000c00
 8008e8c:	40014000 	.word	0x40014000

08008e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb8:	b084      	sub	sp, #16
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	f107 001c 	add.w	r0, r7, #28
 8008ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d122      	bne.n	8008f16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d105      	bne.n	8008f0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fbee 	bl	800a6ec <USB_CoreReset>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	e01a      	b.n	8008f4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fbe2 	bl	800a6ec <USB_CoreReset>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d106      	bne.n	8008f40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f3e:	e005      	b.n	8008f4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d10b      	bne.n	8008f6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f043 0206 	orr.w	r2, r3, #6
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f043 0220 	orr.w	r2, r3, #32
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f76:	b004      	add	sp, #16
 8008f78:	4770      	bx	lr
	...

08008f7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d165      	bne.n	800905c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4a41      	ldr	r2, [pc, #260]	; (8009098 <USB_SetTurnaroundTime+0x11c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d906      	bls.n	8008fa6 <USB_SetTurnaroundTime+0x2a>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	4a40      	ldr	r2, [pc, #256]	; (800909c <USB_SetTurnaroundTime+0x120>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d202      	bcs.n	8008fa6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008fa0:	230f      	movs	r3, #15
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	e062      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	4a3c      	ldr	r2, [pc, #240]	; (800909c <USB_SetTurnaroundTime+0x120>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d306      	bcc.n	8008fbc <USB_SetTurnaroundTime+0x40>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	4a3b      	ldr	r2, [pc, #236]	; (80090a0 <USB_SetTurnaroundTime+0x124>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d202      	bcs.n	8008fbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008fb6:	230e      	movs	r3, #14
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e057      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	4a38      	ldr	r2, [pc, #224]	; (80090a0 <USB_SetTurnaroundTime+0x124>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d306      	bcc.n	8008fd2 <USB_SetTurnaroundTime+0x56>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	4a37      	ldr	r2, [pc, #220]	; (80090a4 <USB_SetTurnaroundTime+0x128>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d202      	bcs.n	8008fd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008fcc:	230d      	movs	r3, #13
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e04c      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4a33      	ldr	r2, [pc, #204]	; (80090a4 <USB_SetTurnaroundTime+0x128>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d306      	bcc.n	8008fe8 <USB_SetTurnaroundTime+0x6c>
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	4a32      	ldr	r2, [pc, #200]	; (80090a8 <USB_SetTurnaroundTime+0x12c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d802      	bhi.n	8008fe8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e041      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	4a2f      	ldr	r2, [pc, #188]	; (80090a8 <USB_SetTurnaroundTime+0x12c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d906      	bls.n	8008ffe <USB_SetTurnaroundTime+0x82>
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	4a2e      	ldr	r2, [pc, #184]	; (80090ac <USB_SetTurnaroundTime+0x130>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d802      	bhi.n	8008ffe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ff8:	230b      	movs	r3, #11
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e036      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	4a2a      	ldr	r2, [pc, #168]	; (80090ac <USB_SetTurnaroundTime+0x130>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d906      	bls.n	8009014 <USB_SetTurnaroundTime+0x98>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	4a29      	ldr	r2, [pc, #164]	; (80090b0 <USB_SetTurnaroundTime+0x134>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d802      	bhi.n	8009014 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800900e:	230a      	movs	r3, #10
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	e02b      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	4a26      	ldr	r2, [pc, #152]	; (80090b0 <USB_SetTurnaroundTime+0x134>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d906      	bls.n	800902a <USB_SetTurnaroundTime+0xae>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	4a25      	ldr	r2, [pc, #148]	; (80090b4 <USB_SetTurnaroundTime+0x138>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d202      	bcs.n	800902a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009024:	2309      	movs	r3, #9
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	e020      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4a21      	ldr	r2, [pc, #132]	; (80090b4 <USB_SetTurnaroundTime+0x138>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d306      	bcc.n	8009040 <USB_SetTurnaroundTime+0xc4>
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4a20      	ldr	r2, [pc, #128]	; (80090b8 <USB_SetTurnaroundTime+0x13c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d802      	bhi.n	8009040 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800903a:	2308      	movs	r3, #8
 800903c:	617b      	str	r3, [r7, #20]
 800903e:	e015      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	4a1d      	ldr	r2, [pc, #116]	; (80090b8 <USB_SetTurnaroundTime+0x13c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d906      	bls.n	8009056 <USB_SetTurnaroundTime+0xda>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4a1c      	ldr	r2, [pc, #112]	; (80090bc <USB_SetTurnaroundTime+0x140>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d202      	bcs.n	8009056 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009050:	2307      	movs	r3, #7
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e00a      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009056:	2306      	movs	r3, #6
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	e007      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009062:	2309      	movs	r3, #9
 8009064:	617b      	str	r3, [r7, #20]
 8009066:	e001      	b.n	800906c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009068:	2309      	movs	r3, #9
 800906a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	029b      	lsls	r3, r3, #10
 8009080:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009084:	431a      	orrs	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	00d8acbf 	.word	0x00d8acbf
 800909c:	00e4e1c0 	.word	0x00e4e1c0
 80090a0:	00f42400 	.word	0x00f42400
 80090a4:	01067380 	.word	0x01067380
 80090a8:	011a499f 	.word	0x011a499f
 80090ac:	01312cff 	.word	0x01312cff
 80090b0:	014ca43f 	.word	0x014ca43f
 80090b4:	016e3600 	.word	0x016e3600
 80090b8:	01a6ab1f 	.word	0x01a6ab1f
 80090bc:	01e84800 	.word	0x01e84800

080090c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f043 0201 	orr.w	r2, r3, #1
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f023 0201 	bic.w	r2, r3, #1
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d115      	bne.n	8009152 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009132:	2001      	movs	r0, #1
 8009134:	f7fb f820 	bl	8004178 <HAL_Delay>
      ms++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 fa45 	bl	800a5ce <USB_GetMode>
 8009144:	4603      	mov	r3, r0
 8009146:	2b01      	cmp	r3, #1
 8009148:	d01e      	beq.n	8009188 <USB_SetCurrentMode+0x84>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2b31      	cmp	r3, #49	; 0x31
 800914e:	d9f0      	bls.n	8009132 <USB_SetCurrentMode+0x2e>
 8009150:	e01a      	b.n	8009188 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d115      	bne.n	8009184 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009164:	2001      	movs	r0, #1
 8009166:	f7fb f807 	bl	8004178 <HAL_Delay>
      ms++;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3301      	adds	r3, #1
 800916e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f001 fa2c 	bl	800a5ce <USB_GetMode>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <USB_SetCurrentMode+0x84>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b31      	cmp	r3, #49	; 0x31
 8009180:	d9f0      	bls.n	8009164 <USB_SetCurrentMode+0x60>
 8009182:	e001      	b.n	8009188 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e005      	b.n	8009194 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b32      	cmp	r3, #50	; 0x32
 800918c:	d101      	bne.n	8009192 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e000      	b.n	8009194 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800919c:	b084      	sub	sp, #16
 800919e:	b580      	push	{r7, lr}
 80091a0:	b086      	sub	sp, #24
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80091aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091b6:	2300      	movs	r3, #0
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	e009      	b.n	80091d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	3340      	adds	r3, #64	; 0x40
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	3301      	adds	r3, #1
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b0e      	cmp	r3, #14
 80091d4:	d9f2      	bls.n	80091bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d11c      	bne.n	8009216 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ea:	f043 0302 	orr.w	r3, r3, #2
 80091ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009200:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	639a      	str	r2, [r3, #56]	; 0x38
 8009214:	e00b      	b.n	800922e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009226:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009234:	461a      	mov	r2, r3
 8009236:	2300      	movs	r3, #0
 8009238:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009240:	4619      	mov	r1, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009248:	461a      	mov	r2, r3
 800924a:	680b      	ldr	r3, [r1, #0]
 800924c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	2b01      	cmp	r3, #1
 8009252:	d10c      	bne.n	800926e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800925a:	2100      	movs	r1, #0
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f965 	bl	800952c <USB_SetDevSpeed>
 8009262:	e008      	b.n	8009276 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009264:	2101      	movs	r1, #1
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f960 	bl	800952c <USB_SetDevSpeed>
 800926c:	e003      	b.n	8009276 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800926e:	2103      	movs	r1, #3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f95b 	bl	800952c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009276:	2110      	movs	r1, #16
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f8f3 	bl	8009464 <USB_FlushTxFifo>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f91f 	bl	80094cc <USB_FlushRxFifo>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929e:	461a      	mov	r2, r3
 80092a0:	2300      	movs	r3, #0
 80092a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	461a      	mov	r2, r3
 80092ac:	2300      	movs	r3, #0
 80092ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b6:	461a      	mov	r2, r3
 80092b8:	2300      	movs	r3, #0
 80092ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	e043      	b.n	800934a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d8:	d118      	bne.n	800930c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ec:	461a      	mov	r2, r3
 80092ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	e013      	b.n	800931e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009302:	461a      	mov	r2, r3
 8009304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e008      	b.n	800931e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	461a      	mov	r2, r3
 800931a:	2300      	movs	r3, #0
 800931c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932a:	461a      	mov	r2, r3
 800932c:	2300      	movs	r3, #0
 800932e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933c:	461a      	mov	r2, r3
 800933e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3301      	adds	r3, #1
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d3b7      	bcc.n	80092c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009352:	2300      	movs	r3, #0
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	e043      	b.n	80093e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800936a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800936e:	d118      	bne.n	80093a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	461a      	mov	r2, r3
 8009384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	e013      	b.n	80093b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	461a      	mov	r2, r3
 800939a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	e008      	b.n	80093b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ae:	461a      	mov	r2, r3
 80093b0:	2300      	movs	r3, #0
 80093b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c0:	461a      	mov	r2, r3
 80093c2:	2300      	movs	r3, #0
 80093c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d2:	461a      	mov	r2, r3
 80093d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	3301      	adds	r3, #1
 80093de:	613b      	str	r3, [r7, #16]
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d3b7      	bcc.n	8009358 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009408:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	2b00      	cmp	r3, #0
 800940e:	d105      	bne.n	800941c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	f043 0210 	orr.w	r2, r3, #16
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699a      	ldr	r2, [r3, #24]
 8009420:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <USB_DevInit+0x2c4>)
 8009422:	4313      	orrs	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	f043 0208 	orr.w	r2, r3, #8
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800943a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800943c:	2b01      	cmp	r3, #1
 800943e:	d107      	bne.n	8009450 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009448:	f043 0304 	orr.w	r3, r3, #4
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800945c:	b004      	add	sp, #16
 800945e:	4770      	bx	lr
 8009460:	803c3800 	.word	0x803c3800

08009464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3301      	adds	r3, #1
 8009476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4a13      	ldr	r2, [pc, #76]	; (80094c8 <USB_FlushTxFifo+0x64>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d901      	bls.n	8009484 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e01b      	b.n	80094bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	daf2      	bge.n	8009472 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	019b      	lsls	r3, r3, #6
 8009494:	f043 0220 	orr.w	r2, r3, #32
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3301      	adds	r3, #1
 80094a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	4a08      	ldr	r2, [pc, #32]	; (80094c8 <USB_FlushTxFifo+0x64>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d901      	bls.n	80094ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e006      	b.n	80094bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f003 0320 	and.w	r3, r3, #32
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d0f0      	beq.n	800949c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	00030d40 	.word	0x00030d40

080094cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4a11      	ldr	r2, [pc, #68]	; (8009528 <USB_FlushRxFifo+0x5c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e018      	b.n	800951c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	daf2      	bge.n	80094d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2210      	movs	r2, #16
 80094fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3301      	adds	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4a08      	ldr	r2, [pc, #32]	; (8009528 <USB_FlushRxFifo+0x5c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d901      	bls.n	800950e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e006      	b.n	800951c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0310 	and.w	r3, r3, #16
 8009516:	2b10      	cmp	r3, #16
 8009518:	d0f0      	beq.n	80094fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	00030d40 	.word	0x00030d40

0800952c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	68f9      	ldr	r1, [r7, #12]
 8009548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800954c:	4313      	orrs	r3, r2
 800954e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800955e:	b480      	push	{r7}
 8009560:	b087      	sub	sp, #28
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f003 0306 	and.w	r3, r3, #6
 8009576:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800957e:	2300      	movs	r3, #0
 8009580:	75fb      	strb	r3, [r7, #23]
 8009582:	e00a      	b.n	800959a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d002      	beq.n	8009590 <USB_GetDevSpeed+0x32>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b06      	cmp	r3, #6
 800958e:	d102      	bne.n	8009596 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009590:	2302      	movs	r3, #2
 8009592:	75fb      	strb	r3, [r7, #23]
 8009594:	e001      	b.n	800959a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009596:	230f      	movs	r3, #15
 8009598:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
}
 800959c:	4618      	mov	r0, r3
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d13a      	bne.n	800963a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	f003 030f 	and.w	r3, r3, #15
 80095d4:	2101      	movs	r1, #1
 80095d6:	fa01 f303 	lsl.w	r3, r1, r3
 80095da:	b29b      	uxth	r3, r3
 80095dc:	68f9      	ldr	r1, [r7, #12]
 80095de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e2:	4313      	orrs	r3, r2
 80095e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d155      	bne.n	80096a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	791b      	ldrb	r3, [r3, #4]
 8009616:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009618:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	059b      	lsls	r3, r3, #22
 800961e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009620:	4313      	orrs	r3, r2
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	0151      	lsls	r1, r2, #5
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	440a      	add	r2, r1
 800962a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	e036      	b.n	80096a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009640:	69da      	ldr	r2, [r3, #28]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	f003 030f 	and.w	r3, r3, #15
 800964a:	2101      	movs	r1, #1
 800964c:	fa01 f303 	lsl.w	r3, r1, r3
 8009650:	041b      	lsls	r3, r3, #16
 8009652:	68f9      	ldr	r1, [r7, #12]
 8009654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009658:	4313      	orrs	r3, r2
 800965a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d11a      	bne.n	80096a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	791b      	ldrb	r3, [r3, #4]
 800968c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800968e:	430b      	orrs	r3, r1
 8009690:	4313      	orrs	r3, r2
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	0151      	lsls	r1, r2, #5
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	440a      	add	r2, r1
 800969a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800969e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
	...

080096b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d161      	bne.n	8009798 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096ea:	d11f      	bne.n	800972c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	0151      	lsls	r1, r2, #5
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	440a      	add	r2, r1
 8009702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009706:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800970a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	0151      	lsls	r1, r2, #5
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	440a      	add	r2, r1
 8009722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800972a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	f003 030f 	and.w	r3, r3, #15
 800973c:	2101      	movs	r1, #1
 800973e:	fa01 f303 	lsl.w	r3, r1, r3
 8009742:	b29b      	uxth	r3, r3
 8009744:	43db      	mvns	r3, r3
 8009746:	68f9      	ldr	r1, [r7, #12]
 8009748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800974c:	4013      	ands	r3, r2
 800974e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009756:	69da      	ldr	r2, [r3, #28]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	2101      	movs	r1, #1
 8009762:	fa01 f303 	lsl.w	r3, r1, r3
 8009766:	b29b      	uxth	r3, r3
 8009768:	43db      	mvns	r3, r3
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009770:	4013      	ands	r3, r2
 8009772:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	0159      	lsls	r1, r3, #5
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	440b      	add	r3, r1
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	4619      	mov	r1, r3
 8009790:	4b35      	ldr	r3, [pc, #212]	; (8009868 <USB_DeactivateEndpoint+0x1b0>)
 8009792:	4013      	ands	r3, r2
 8009794:	600b      	str	r3, [r1, #0]
 8009796:	e060      	b.n	800985a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ae:	d11f      	bne.n	80097f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	0151      	lsls	r1, r2, #5
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	440a      	add	r2, r1
 80097e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	2101      	movs	r1, #1
 8009802:	fa01 f303 	lsl.w	r3, r1, r3
 8009806:	041b      	lsls	r3, r3, #16
 8009808:	43db      	mvns	r3, r3
 800980a:	68f9      	ldr	r1, [r7, #12]
 800980c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009810:	4013      	ands	r3, r2
 8009812:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981a:	69da      	ldr	r2, [r3, #28]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	2101      	movs	r1, #1
 8009826:	fa01 f303 	lsl.w	r3, r1, r3
 800982a:	041b      	lsls	r3, r3, #16
 800982c:	43db      	mvns	r3, r3
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009834:	4013      	ands	r3, r2
 8009836:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	0159      	lsls	r1, r3, #5
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	440b      	add	r3, r1
 800984e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009852:	4619      	mov	r1, r3
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <USB_DeactivateEndpoint+0x1b4>)
 8009856:	4013      	ands	r3, r2
 8009858:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	ec337800 	.word	0xec337800
 800986c:	eff37800 	.word	0xeff37800

08009870 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08a      	sub	sp, #40	; 0x28
 8009874:	af02      	add	r7, sp, #8
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	2b01      	cmp	r3, #1
 800988e:	f040 815c 	bne.w	8009b4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d132      	bne.n	8009900 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	0151      	lsls	r1, r2, #5
 80098d0:	69fa      	ldr	r2, [r7, #28]
 80098d2:	440a      	add	r2, r1
 80098d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	0151      	lsls	r1, r2, #5
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	440a      	add	r2, r1
 80098f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f8:	0cdb      	lsrs	r3, r3, #19
 80098fa:	04db      	lsls	r3, r3, #19
 80098fc:	6113      	str	r3, [r2, #16]
 80098fe:	e074      	b.n	80099ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	0151      	lsls	r1, r2, #5
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	440a      	add	r2, r1
 8009916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800991a:	0cdb      	lsrs	r3, r3, #19
 800991c:	04db      	lsls	r3, r3, #19
 800991e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	0151      	lsls	r1, r2, #5
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	440a      	add	r2, r1
 8009936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800993a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800993e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009950:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	6999      	ldr	r1, [r3, #24]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	440b      	add	r3, r1
 800995c:	1e59      	subs	r1, r3, #1
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	fbb1 f3f3 	udiv	r3, r1, r3
 8009966:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009968:	4b9d      	ldr	r3, [pc, #628]	; (8009be0 <USB_EPStartXfer+0x370>)
 800996a:	400b      	ands	r3, r1
 800996c:	69b9      	ldr	r1, [r7, #24]
 800996e:	0148      	lsls	r0, r1, #5
 8009970:	69f9      	ldr	r1, [r7, #28]
 8009972:	4401      	add	r1, r0
 8009974:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009978:	4313      	orrs	r3, r2
 800997a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009992:	69b9      	ldr	r1, [r7, #24]
 8009994:	0148      	lsls	r0, r1, #5
 8009996:	69f9      	ldr	r1, [r7, #28]
 8009998:	4401      	add	r1, r0
 800999a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800999e:	4313      	orrs	r3, r2
 80099a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	791b      	ldrb	r3, [r3, #4]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d11f      	bne.n	80099ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	0151      	lsls	r1, r2, #5
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	440a      	add	r2, r1
 80099c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80099c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	015a      	lsls	r2, r3, #5
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	4413      	add	r3, r2
 80099d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	0151      	lsls	r1, r2, #5
 80099dc:	69fa      	ldr	r2, [r7, #28]
 80099de:	440a      	add	r2, r1
 80099e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d14b      	bne.n	8009a88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d009      	beq.n	8009a0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a04:	461a      	mov	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	791b      	ldrb	r3, [r3, #4]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d128      	bne.n	8009a66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d110      	bne.n	8009a46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	0151      	lsls	r1, r2, #5
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	440a      	add	r2, r1
 8009a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	e00f      	b.n	8009a66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	0151      	lsls	r1, r2, #5
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	440a      	add	r2, r1
 8009a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	e133      	b.n	8009cf0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	0151      	lsls	r1, r2, #5
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	440a      	add	r2, r1
 8009a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009aa6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	791b      	ldrb	r3, [r3, #4]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d015      	beq.n	8009adc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 811b 	beq.w	8009cf0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	f003 030f 	and.w	r3, r3, #15
 8009aca:	2101      	movs	r1, #1
 8009acc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad0:	69f9      	ldr	r1, [r7, #28]
 8009ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	634b      	str	r3, [r1, #52]	; 0x34
 8009ada:	e109      	b.n	8009cf0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d110      	bne.n	8009b0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	0151      	lsls	r1, r2, #5
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	440a      	add	r2, r1
 8009b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	e00f      	b.n	8009b2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	0151      	lsls	r1, r2, #5
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	440a      	add	r2, r1
 8009b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6919      	ldr	r1, [r3, #16]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	781a      	ldrb	r2, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	b298      	uxth	r0, r3
 8009b3c:	79fb      	ldrb	r3, [r7, #7]
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	4603      	mov	r3, r0
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 fade 	bl	800a104 <USB_WritePacket>
 8009b48:	e0d2      	b.n	8009cf0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	0151      	lsls	r1, r2, #5
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	440a      	add	r2, r1
 8009b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b64:	0cdb      	lsrs	r3, r3, #19
 8009b66:	04db      	lsls	r3, r3, #19
 8009b68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d126      	bne.n	8009be4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bac:	69b9      	ldr	r1, [r7, #24]
 8009bae:	0148      	lsls	r0, r1, #5
 8009bb0:	69f9      	ldr	r1, [r7, #28]
 8009bb2:	4401      	add	r1, r0
 8009bb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	0151      	lsls	r1, r2, #5
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	440a      	add	r2, r1
 8009bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bda:	6113      	str	r3, [r2, #16]
 8009bdc:	e03a      	b.n	8009c54 <USB_EPStartXfer+0x3e4>
 8009bde:	bf00      	nop
 8009be0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	699a      	ldr	r2, [r3, #24]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	4413      	add	r3, r2
 8009bee:	1e5a      	subs	r2, r3, #1
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	8afa      	ldrh	r2, [r7, #22]
 8009c00:	fb03 f202 	mul.w	r2, r3, r2
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c14:	691a      	ldr	r2, [r3, #16]
 8009c16:	8afb      	ldrh	r3, [r7, #22]
 8009c18:	04d9      	lsls	r1, r3, #19
 8009c1a:	4b38      	ldr	r3, [pc, #224]	; (8009cfc <USB_EPStartXfer+0x48c>)
 8009c1c:	400b      	ands	r3, r1
 8009c1e:	69b9      	ldr	r1, [r7, #24]
 8009c20:	0148      	lsls	r0, r1, #5
 8009c22:	69f9      	ldr	r1, [r7, #28]
 8009c24:	4401      	add	r1, r0
 8009c26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c44:	69b9      	ldr	r1, [r7, #24]
 8009c46:	0148      	lsls	r0, r1, #5
 8009c48:	69f9      	ldr	r1, [r7, #28]
 8009c4a:	4401      	add	r1, r0
 8009c4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c50:	4313      	orrs	r3, r2
 8009c52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d10d      	bne.n	8009c76 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6919      	ldr	r1, [r3, #16]
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c72:	460a      	mov	r2, r1
 8009c74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	791b      	ldrb	r3, [r3, #4]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d128      	bne.n	8009cd0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d110      	bne.n	8009cb0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	0151      	lsls	r1, r2, #5
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	440a      	add	r2, r1
 8009ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cac:	6013      	str	r3, [r2, #0]
 8009cae:	e00f      	b.n	8009cd0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3720      	adds	r7, #32
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	1ff80000 	.word	0x1ff80000

08009d00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	f040 80ce 	bne.w	8009ebe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d132      	bne.n	8009d90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	0151      	lsls	r1, r2, #5
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	440a      	add	r2, r1
 8009d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	0151      	lsls	r1, r2, #5
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	440a      	add	r2, r1
 8009d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	0151      	lsls	r1, r2, #5
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	440a      	add	r2, r1
 8009d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d88:	0cdb      	lsrs	r3, r3, #19
 8009d8a:	04db      	lsls	r3, r3, #19
 8009d8c:	6113      	str	r3, [r2, #16]
 8009d8e:	e04e      	b.n	8009e2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	0151      	lsls	r1, r2, #5
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	440a      	add	r2, r1
 8009da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009daa:	0cdb      	lsrs	r3, r3, #19
 8009dac:	04db      	lsls	r3, r3, #19
 8009dae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dd2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	699a      	ldr	r2, [r3, #24]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d903      	bls.n	8009de8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	691a      	ldr	r2, [r3, #16]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e1e:	6939      	ldr	r1, [r7, #16]
 8009e20:	0148      	lsls	r0, r1, #5
 8009e22:	6979      	ldr	r1, [r7, #20]
 8009e24:	4401      	add	r1, r0
 8009e26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009e2e:	79fb      	ldrb	r3, [r7, #7]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d11e      	bne.n	8009e72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	0151      	lsls	r1, r2, #5
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	440a      	add	r2, r1
 8009e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	e097      	b.n	8009fa2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	0151      	lsls	r1, r2, #5
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	440a      	add	r2, r1
 8009e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f000 8083 	beq.w	8009fa2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	2101      	movs	r1, #1
 8009eae:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb2:	6979      	ldr	r1, [r7, #20]
 8009eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	634b      	str	r3, [r1, #52]	; 0x34
 8009ebc:	e071      	b.n	8009fa2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	0151      	lsls	r1, r2, #5
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	440a      	add	r2, r1
 8009ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ed8:	0cdb      	lsrs	r3, r3, #19
 8009eda:	04db      	lsls	r3, r3, #19
 8009edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	0151      	lsls	r1, r2, #5
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	440a      	add	r2, r1
 8009ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009efc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	0151      	lsls	r1, r2, #5
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	440a      	add	r2, r1
 8009f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f50:	6939      	ldr	r1, [r7, #16]
 8009f52:	0148      	lsls	r0, r1, #5
 8009f54:	6979      	ldr	r1, [r7, #20]
 8009f56:	4401      	add	r1, r0
 8009f58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d10d      	bne.n	8009f82 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d009      	beq.n	8009f82 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	6919      	ldr	r1, [r3, #16]
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7e:	460a      	mov	r2, r1
 8009f80:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	0151      	lsls	r1, r2, #5
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	440a      	add	r2, r1
 8009f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	371c      	adds	r7, #28
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d14a      	bne.n	800a064 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe6:	f040 8086 	bne.w	800a0f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	7812      	ldrb	r2, [r2, #0]
 8009ffe:	0151      	lsls	r1, r2, #5
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	440a      	add	r2, r1
 800a004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a008:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a00c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	7812      	ldrb	r2, [r2, #0]
 800a022:	0151      	lsls	r1, r2, #5
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	440a      	add	r2, r1
 800a028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a02c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a030:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3301      	adds	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a03e:	4293      	cmp	r3, r2
 800a040:	d902      	bls.n	800a048 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
          break;
 800a046:	e056      	b.n	800a0f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a05c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a060:	d0e7      	beq.n	800a032 <USB_EPStopXfer+0x82>
 800a062:	e048      	b.n	800a0f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a07c:	d13b      	bne.n	800a0f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	7812      	ldrb	r2, [r2, #0]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a09c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	0151      	lsls	r1, r2, #5
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	440a      	add	r2, r1
 800a0bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d902      	bls.n	800a0dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0da:	e00c      	b.n	800a0f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0f4:	d0e7      	beq.n	800a0c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	371c      	adds	r7, #28
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a104:	b480      	push	{r7}
 800a106:	b089      	sub	sp, #36	; 0x24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4611      	mov	r1, r2
 800a110:	461a      	mov	r2, r3
 800a112:	460b      	mov	r3, r1
 800a114:	71fb      	strb	r3, [r7, #7]
 800a116:	4613      	mov	r3, r2
 800a118:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a126:	2b00      	cmp	r3, #0
 800a128:	d123      	bne.n	800a172 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a12a:	88bb      	ldrh	r3, [r7, #4]
 800a12c:	3303      	adds	r3, #3
 800a12e:	089b      	lsrs	r3, r3, #2
 800a130:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a132:	2300      	movs	r3, #0
 800a134:	61bb      	str	r3, [r7, #24]
 800a136:	e018      	b.n	800a16a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a138:	79fb      	ldrb	r3, [r7, #7]
 800a13a:	031a      	lsls	r2, r3, #12
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a144:	461a      	mov	r2, r3
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	3301      	adds	r3, #1
 800a150:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	3301      	adds	r3, #1
 800a156:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	3301      	adds	r3, #1
 800a15c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	3301      	adds	r3, #1
 800a162:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	3301      	adds	r3, #1
 800a168:	61bb      	str	r3, [r7, #24]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d3e2      	bcc.n	800a138 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3724      	adds	r7, #36	; 0x24
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a180:	b480      	push	{r7}
 800a182:	b08b      	sub	sp, #44	; 0x2c
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	4613      	mov	r3, r2
 800a18c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	089b      	lsrs	r3, r3, #2
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	f003 0303 	and.w	r3, r3, #3
 800a1a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	623b      	str	r3, [r7, #32]
 800a1aa:	e014      	b.n	800a1d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	623b      	str	r3, [r7, #32]
 800a1d6:	6a3a      	ldr	r2, [r7, #32]
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d3e6      	bcc.n	800a1ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a1de:	8bfb      	ldrh	r3, [r7, #30]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d01e      	beq.n	800a222 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f107 0310 	add.w	r3, r7, #16
 800a1f4:	6812      	ldr	r2, [r2, #0]
 800a1f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
 800a204:	b2da      	uxtb	r2, r3
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	701a      	strb	r2, [r3, #0]
      i++;
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	3301      	adds	r3, #1
 800a20e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	3301      	adds	r3, #1
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a216:	8bfb      	ldrh	r3, [r7, #30]
 800a218:	3b01      	subs	r3, #1
 800a21a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a21c:	8bfb      	ldrh	r3, [r7, #30]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1ea      	bne.n	800a1f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a224:	4618      	mov	r0, r3
 800a226:	372c      	adds	r7, #44	; 0x2c
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d12c      	bne.n	800a2a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	015a      	lsls	r2, r3, #5
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4413      	add	r3, r2
 800a254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	db12      	blt.n	800a284 <USB_EPSetStall+0x54>
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00f      	beq.n	800a284 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	0151      	lsls	r1, r2, #5
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	440a      	add	r2, r1
 800a27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a282:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	0151      	lsls	r1, r2, #5
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	440a      	add	r2, r1
 800a29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	e02b      	b.n	800a2fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	db12      	blt.n	800a2de <USB_EPSetStall+0xae>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00f      	beq.n	800a2de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a2dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d128      	bne.n	800a37a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a346:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	791b      	ldrb	r3, [r3, #4]
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d003      	beq.n	800a358 <USB_EPClearStall+0x4c>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	791b      	ldrb	r3, [r3, #4]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d138      	bne.n	800a3ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	0151      	lsls	r1, r2, #5
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	440a      	add	r2, r1
 800a36e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	e027      	b.n	800a3ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a394:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a398:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	791b      	ldrb	r3, [r3, #4]
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d003      	beq.n	800a3aa <USB_EPClearStall+0x9e>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	791b      	ldrb	r3, [r3, #4]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d10f      	bne.n	800a3ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	0151      	lsls	r1, r2, #5
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	440a      	add	r2, r1
 800a3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a3fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a40c:	68f9      	ldr	r1, [r7, #12]
 800a40e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a412:	4313      	orrs	r3, r2
 800a414:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a43e:	f023 0303 	bic.w	r3, r3, #3
 800a442:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a452:	f023 0302 	bic.w	r3, r3, #2
 800a456:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a466:	b480      	push	{r7}
 800a468:	b085      	sub	sp, #20
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a480:	f023 0303 	bic.w	r3, r3, #3
 800a484:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a494:	f043 0302 	orr.w	r3, r3, #2
 800a498:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4013      	ands	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	0c1b      	lsrs	r3, r3, #16
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	4013      	ands	r3, r2
 800a524:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	b29b      	uxth	r3, r3
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	015a      	lsls	r2, r3, #5
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	4013      	ands	r3, r2
 800a562:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a564:	68bb      	ldr	r3, [r7, #8]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a572:	b480      	push	{r7}
 800a574:	b087      	sub	sp, #28
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a594:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	f003 030f 	and.w	r3, r3, #15
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a2:	01db      	lsls	r3, r3, #7
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a5ac:	78fb      	ldrb	r3, [r7, #3]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	4013      	ands	r3, r2
 800a5be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	f003 0301 	and.w	r3, r3, #1
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b085      	sub	sp, #20
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a604:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a608:	f023 0307 	bic.w	r3, r3, #7
 800a60c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a61c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a620:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	460b      	mov	r3, r1
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	333c      	adds	r3, #60	; 0x3c
 800a646:	3304      	adds	r3, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	4a26      	ldr	r2, [pc, #152]	; (800a6e8 <USB_EP0_OutStart+0xb8>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d90a      	bls.n	800a66a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a664:	d101      	bne.n	800a66a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	e037      	b.n	800a6da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a670:	461a      	mov	r2, r3
 800a672:	2300      	movs	r3, #0
 800a674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a698:	f043 0318 	orr.w	r3, r3, #24
 800a69c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a6b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a6b2:	7afb      	ldrb	r3, [r7, #11]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d10f      	bne.n	800a6d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6be:	461a      	mov	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a6d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	4f54300a 	.word	0x4f54300a

0800a6ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4a13      	ldr	r2, [pc, #76]	; (800a750 <USB_CoreReset+0x64>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d901      	bls.n	800a70a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e01b      	b.n	800a742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	daf2      	bge.n	800a6f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	f043 0201 	orr.w	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	3301      	adds	r3, #1
 800a726:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4a09      	ldr	r2, [pc, #36]	; (800a750 <USB_CoreReset+0x64>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d901      	bls.n	800a734 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e006      	b.n	800a742 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d0f0      	beq.n	800a722 <USB_CoreReset+0x36>

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	00030d40 	.word	0x00030d40

0800a754 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	460b      	mov	r3, r1
 800a75e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a760:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a764:	f005 fb68 	bl	800fe38 <USBD_static_malloc>
 800a768:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d109      	bne.n	800a784 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	32b0      	adds	r2, #176	; 0xb0
 800a77a:	2100      	movs	r1, #0
 800a77c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a780:	2302      	movs	r3, #2
 800a782:	e0d4      	b.n	800a92e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a784:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a788:	2100      	movs	r1, #0
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f005 fbe0 	bl	800ff50 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	32b0      	adds	r2, #176	; 0xb0
 800a79a:	68f9      	ldr	r1, [r7, #12]
 800a79c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	32b0      	adds	r2, #176	; 0xb0
 800a7aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	7c1b      	ldrb	r3, [r3, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d138      	bne.n	800a82e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7bc:	4b5e      	ldr	r3, [pc, #376]	; (800a938 <USBD_CDC_Init+0x1e4>)
 800a7be:	7819      	ldrb	r1, [r3, #0]
 800a7c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f005 fa13 	bl	800fbf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7cc:	4b5a      	ldr	r3, [pc, #360]	; (800a938 <USBD_CDC_Init+0x1e4>)
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	f003 020f 	and.w	r2, r3, #15
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	440b      	add	r3, r1
 800a7e0:	3324      	adds	r3, #36	; 0x24
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7e6:	4b55      	ldr	r3, [pc, #340]	; (800a93c <USBD_CDC_Init+0x1e8>)
 800a7e8:	7819      	ldrb	r1, [r3, #0]
 800a7ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f005 f9fe 	bl	800fbf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7f6:	4b51      	ldr	r3, [pc, #324]	; (800a93c <USBD_CDC_Init+0x1e8>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	f003 020f 	and.w	r2, r3, #15
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	4613      	mov	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	440b      	add	r3, r1
 800a80a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a80e:	2201      	movs	r2, #1
 800a810:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a812:	4b4b      	ldr	r3, [pc, #300]	; (800a940 <USBD_CDC_Init+0x1ec>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	f003 020f 	and.w	r2, r3, #15
 800a81a:	6879      	ldr	r1, [r7, #4]
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	440b      	add	r3, r1
 800a826:	3326      	adds	r3, #38	; 0x26
 800a828:	2210      	movs	r2, #16
 800a82a:	801a      	strh	r2, [r3, #0]
 800a82c:	e035      	b.n	800a89a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a82e:	4b42      	ldr	r3, [pc, #264]	; (800a938 <USBD_CDC_Init+0x1e4>)
 800a830:	7819      	ldrb	r1, [r3, #0]
 800a832:	2340      	movs	r3, #64	; 0x40
 800a834:	2202      	movs	r2, #2
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f005 f9db 	bl	800fbf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a83c:	4b3e      	ldr	r3, [pc, #248]	; (800a938 <USBD_CDC_Init+0x1e4>)
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	f003 020f 	and.w	r2, r3, #15
 800a844:	6879      	ldr	r1, [r7, #4]
 800a846:	4613      	mov	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	440b      	add	r3, r1
 800a850:	3324      	adds	r3, #36	; 0x24
 800a852:	2201      	movs	r2, #1
 800a854:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a856:	4b39      	ldr	r3, [pc, #228]	; (800a93c <USBD_CDC_Init+0x1e8>)
 800a858:	7819      	ldrb	r1, [r3, #0]
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	2202      	movs	r2, #2
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f005 f9c7 	bl	800fbf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a864:	4b35      	ldr	r3, [pc, #212]	; (800a93c <USBD_CDC_Init+0x1e8>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f003 020f 	and.w	r2, r3, #15
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	440b      	add	r3, r1
 800a878:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a87c:	2201      	movs	r2, #1
 800a87e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a880:	4b2f      	ldr	r3, [pc, #188]	; (800a940 <USBD_CDC_Init+0x1ec>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	4613      	mov	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	440b      	add	r3, r1
 800a894:	3326      	adds	r3, #38	; 0x26
 800a896:	2210      	movs	r2, #16
 800a898:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a89a:	4b29      	ldr	r3, [pc, #164]	; (800a940 <USBD_CDC_Init+0x1ec>)
 800a89c:	7819      	ldrb	r1, [r3, #0]
 800a89e:	2308      	movs	r3, #8
 800a8a0:	2203      	movs	r2, #3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f005 f9a5 	bl	800fbf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a8a8:	4b25      	ldr	r3, [pc, #148]	; (800a940 <USBD_CDC_Init+0x1ec>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	f003 020f 	and.w	r2, r3, #15
 800a8b0:	6879      	ldr	r1, [r7, #4]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	440b      	add	r3, r1
 800a8bc:	3324      	adds	r3, #36	; 0x24
 800a8be:	2201      	movs	r2, #1
 800a8c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	33b0      	adds	r3, #176	; 0xb0
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	e018      	b.n	800a92e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	7c1b      	ldrb	r3, [r3, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a904:	4b0d      	ldr	r3, [pc, #52]	; (800a93c <USBD_CDC_Init+0x1e8>)
 800a906:	7819      	ldrb	r1, [r3, #0]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a90e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f005 fa5c 	bl	800fdd0 <USBD_LL_PrepareReceive>
 800a918:	e008      	b.n	800a92c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a91a:	4b08      	ldr	r3, [pc, #32]	; (800a93c <USBD_CDC_Init+0x1e8>)
 800a91c:	7819      	ldrb	r1, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a924:	2340      	movs	r3, #64	; 0x40
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f005 fa52 	bl	800fdd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	2000062f 	.word	0x2000062f
 800a93c:	20000630 	.word	0x20000630
 800a940:	20000631 	.word	0x20000631

0800a944 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	460b      	mov	r3, r1
 800a94e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a950:	4b3a      	ldr	r3, [pc, #232]	; (800aa3c <USBD_CDC_DeInit+0xf8>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f005 f971 	bl	800fc3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a95c:	4b37      	ldr	r3, [pc, #220]	; (800aa3c <USBD_CDC_DeInit+0xf8>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 020f 	and.w	r2, r3, #15
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	4613      	mov	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	440b      	add	r3, r1
 800a970:	3324      	adds	r3, #36	; 0x24
 800a972:	2200      	movs	r2, #0
 800a974:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a976:	4b32      	ldr	r3, [pc, #200]	; (800aa40 <USBD_CDC_DeInit+0xfc>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f005 f95e 	bl	800fc3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <USBD_CDC_DeInit+0xfc>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 020f 	and.w	r2, r3, #15
 800a98a:	6879      	ldr	r1, [r7, #4]
 800a98c:	4613      	mov	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	440b      	add	r3, r1
 800a996:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a99a:	2200      	movs	r2, #0
 800a99c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a99e:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <USBD_CDC_DeInit+0x100>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f005 f94a 	bl	800fc3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a9aa:	4b26      	ldr	r3, [pc, #152]	; (800aa44 <USBD_CDC_DeInit+0x100>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	f003 020f 	and.w	r2, r3, #15
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	440b      	add	r3, r1
 800a9be:	3324      	adds	r3, #36	; 0x24
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a9c4:	4b1f      	ldr	r3, [pc, #124]	; (800aa44 <USBD_CDC_DeInit+0x100>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 020f 	and.w	r2, r3, #15
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	440b      	add	r3, r1
 800a9d8:	3326      	adds	r3, #38	; 0x26
 800a9da:	2200      	movs	r2, #0
 800a9dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	32b0      	adds	r2, #176	; 0xb0
 800a9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d01f      	beq.n	800aa30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	33b0      	adds	r3, #176	; 0xb0
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4413      	add	r3, r2
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	32b0      	adds	r2, #176	; 0xb0
 800aa0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f005 fa1e 	bl	800fe54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32b0      	adds	r2, #176	; 0xb0
 800aa22:	2100      	movs	r1, #0
 800aa24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	2000062f 	.word	0x2000062f
 800aa40:	20000630 	.word	0x20000630
 800aa44:	20000631 	.word	0x20000631

0800aa48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	32b0      	adds	r2, #176	; 0xb0
 800aa5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e0bf      	b.n	800abf8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d050      	beq.n	800ab26 <USBD_CDC_Setup+0xde>
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	f040 80af 	bne.w	800abe8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	88db      	ldrh	r3, [r3, #6]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d03a      	beq.n	800ab08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	b25b      	sxtb	r3, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	da1b      	bge.n	800aad4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	33b0      	adds	r3, #176	; 0xb0
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aab2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	88d2      	ldrh	r2, [r2, #6]
 800aab8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	88db      	ldrh	r3, [r3, #6]
 800aabe:	2b07      	cmp	r3, #7
 800aac0:	bf28      	it	cs
 800aac2:	2307      	movcs	r3, #7
 800aac4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	89fa      	ldrh	r2, [r7, #14]
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 fd43 	bl	800c558 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aad2:	e090      	b.n	800abf6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	785a      	ldrb	r2, [r3, #1]
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	88db      	ldrh	r3, [r3, #6]
 800aae2:	2b3f      	cmp	r3, #63	; 0x3f
 800aae4:	d803      	bhi.n	800aaee <USBD_CDC_Setup+0xa6>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	88db      	ldrh	r3, [r3, #6]
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	e000      	b.n	800aaf0 <USBD_CDC_Setup+0xa8>
 800aaee:	2240      	movs	r2, #64	; 0x40
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aaf6:	6939      	ldr	r1, [r7, #16]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aafe:	461a      	mov	r2, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f001 fd55 	bl	800c5b0 <USBD_CtlPrepareRx>
      break;
 800ab06:	e076      	b.n	800abf6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	33b0      	adds	r3, #176	; 0xb0
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	7850      	ldrb	r0, [r2, #1]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	4798      	blx	r3
      break;
 800ab24:	e067      	b.n	800abf6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	785b      	ldrb	r3, [r3, #1]
 800ab2a:	2b0b      	cmp	r3, #11
 800ab2c:	d851      	bhi.n	800abd2 <USBD_CDC_Setup+0x18a>
 800ab2e:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <USBD_CDC_Setup+0xec>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800ab65 	.word	0x0800ab65
 800ab38:	0800abe1 	.word	0x0800abe1
 800ab3c:	0800abd3 	.word	0x0800abd3
 800ab40:	0800abd3 	.word	0x0800abd3
 800ab44:	0800abd3 	.word	0x0800abd3
 800ab48:	0800abd3 	.word	0x0800abd3
 800ab4c:	0800abd3 	.word	0x0800abd3
 800ab50:	0800abd3 	.word	0x0800abd3
 800ab54:	0800abd3 	.word	0x0800abd3
 800ab58:	0800abd3 	.word	0x0800abd3
 800ab5c:	0800ab8f 	.word	0x0800ab8f
 800ab60:	0800abb9 	.word	0x0800abb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d107      	bne.n	800ab80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab70:	f107 030a 	add.w	r3, r7, #10
 800ab74:	2202      	movs	r2, #2
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f001 fced 	bl	800c558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab7e:	e032      	b.n	800abe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fc77 	bl	800c476 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab8c:	e02b      	b.n	800abe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d107      	bne.n	800abaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab9a:	f107 030d 	add.w	r3, r7, #13
 800ab9e:	2201      	movs	r2, #1
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f001 fcd8 	bl	800c558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aba8:	e01d      	b.n	800abe6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f001 fc62 	bl	800c476 <USBD_CtlError>
            ret = USBD_FAIL;
 800abb2:	2303      	movs	r3, #3
 800abb4:	75fb      	strb	r3, [r7, #23]
          break;
 800abb6:	e016      	b.n	800abe6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d00f      	beq.n	800abe4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f001 fc55 	bl	800c476 <USBD_CtlError>
            ret = USBD_FAIL;
 800abcc:	2303      	movs	r3, #3
 800abce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800abd0:	e008      	b.n	800abe4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f001 fc4e 	bl	800c476 <USBD_CtlError>
          ret = USBD_FAIL;
 800abda:	2303      	movs	r3, #3
 800abdc:	75fb      	strb	r3, [r7, #23]
          break;
 800abde:	e002      	b.n	800abe6 <USBD_CDC_Setup+0x19e>
          break;
 800abe0:	bf00      	nop
 800abe2:	e008      	b.n	800abf6 <USBD_CDC_Setup+0x1ae>
          break;
 800abe4:	bf00      	nop
      }
      break;
 800abe6:	e006      	b.n	800abf6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f001 fc43 	bl	800c476 <USBD_CtlError>
      ret = USBD_FAIL;
 800abf0:	2303      	movs	r3, #3
 800abf2:	75fb      	strb	r3, [r7, #23]
      break;
 800abf4:	bf00      	nop
  }

  return (uint8_t)ret;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	32b0      	adds	r2, #176	; 0xb0
 800ac1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e065      	b.n	800acf6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	32b0      	adds	r2, #176	; 0xb0
 800ac34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	f003 020f 	and.w	r2, r3, #15
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3318      	adds	r3, #24
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d02f      	beq.n	800acb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	f003 020f 	and.w	r2, r3, #15
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	440b      	add	r3, r1
 800ac66:	3318      	adds	r3, #24
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	f003 010f 	and.w	r1, r3, #15
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	460b      	mov	r3, r1
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	440b      	add	r3, r1
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4403      	add	r3, r0
 800ac7c:	3348      	adds	r3, #72	; 0x48
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac84:	fb01 f303 	mul.w	r3, r1, r3
 800ac88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d112      	bne.n	800acb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ac8e:	78fb      	ldrb	r3, [r7, #3]
 800ac90:	f003 020f 	and.w	r2, r3, #15
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	440b      	add	r3, r1
 800aca0:	3318      	adds	r3, #24
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aca6:	78f9      	ldrb	r1, [r7, #3]
 800aca8:	2300      	movs	r3, #0
 800acaa:	2200      	movs	r2, #0
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f005 f86e 	bl	800fd8e <USBD_LL_Transmit>
 800acb2:	e01f      	b.n	800acf4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	33b0      	adds	r3, #176	; 0xb0
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d010      	beq.n	800acf4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	33b0      	adds	r3, #176	; 0xb0
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800acf0:	78fa      	ldrb	r2, [r7, #3]
 800acf2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	32b0      	adds	r2, #176	; 0xb0
 800ad14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	32b0      	adds	r2, #176	; 0xb0
 800ad24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	e01a      	b.n	800ad66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f005 f86c 	bl	800fe12 <USBD_LL_GetRxDataSize>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	33b0      	adds	r3, #176	; 0xb0
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ad60:	4611      	mov	r1, r2
 800ad62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	32b0      	adds	r2, #176	; 0xb0
 800ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e025      	b.n	800addc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	33b0      	adds	r3, #176	; 0xb0
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d01a      	beq.n	800adda <USBD_CDC_EP0_RxReady+0x6c>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800adaa:	2bff      	cmp	r3, #255	; 0xff
 800adac:	d015      	beq.n	800adda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	33b0      	adds	r3, #176	; 0xb0
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800adc6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800adce:	b292      	uxth	r2, r2
 800add0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	22ff      	movs	r2, #255	; 0xff
 800add6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adec:	2182      	movs	r1, #130	; 0x82
 800adee:	4818      	ldr	r0, [pc, #96]	; (800ae50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800adf0:	f000 fd09 	bl	800b806 <USBD_GetEpDesc>
 800adf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adf6:	2101      	movs	r1, #1
 800adf8:	4815      	ldr	r0, [pc, #84]	; (800ae50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800adfa:	f000 fd04 	bl	800b806 <USBD_GetEpDesc>
 800adfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae00:	2181      	movs	r1, #129	; 0x81
 800ae02:	4813      	ldr	r0, [pc, #76]	; (800ae50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae04:	f000 fcff 	bl	800b806 <USBD_GetEpDesc>
 800ae08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2210      	movs	r2, #16
 800ae14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d006      	beq.n	800ae2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae24:	711a      	strb	r2, [r3, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d006      	beq.n	800ae3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae38:	711a      	strb	r2, [r3, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2243      	movs	r2, #67	; 0x43
 800ae42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae44:	4b02      	ldr	r3, [pc, #8]	; (800ae50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3718      	adds	r7, #24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	200005ec 	.word	0x200005ec

0800ae54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae5c:	2182      	movs	r1, #130	; 0x82
 800ae5e:	4818      	ldr	r0, [pc, #96]	; (800aec0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae60:	f000 fcd1 	bl	800b806 <USBD_GetEpDesc>
 800ae64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae66:	2101      	movs	r1, #1
 800ae68:	4815      	ldr	r0, [pc, #84]	; (800aec0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae6a:	f000 fccc 	bl	800b806 <USBD_GetEpDesc>
 800ae6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae70:	2181      	movs	r1, #129	; 0x81
 800ae72:	4813      	ldr	r0, [pc, #76]	; (800aec0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae74:	f000 fcc7 	bl	800b806 <USBD_GetEpDesc>
 800ae78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	2210      	movs	r2, #16
 800ae84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d006      	beq.n	800ae9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	711a      	strb	r2, [r3, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f042 0202 	orr.w	r2, r2, #2
 800ae98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d006      	beq.n	800aeae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	711a      	strb	r2, [r3, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f042 0202 	orr.w	r2, r2, #2
 800aeac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2243      	movs	r2, #67	; 0x43
 800aeb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aeb4:	4b02      	ldr	r3, [pc, #8]	; (800aec0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200005ec 	.word	0x200005ec

0800aec4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aecc:	2182      	movs	r1, #130	; 0x82
 800aece:	4818      	ldr	r0, [pc, #96]	; (800af30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aed0:	f000 fc99 	bl	800b806 <USBD_GetEpDesc>
 800aed4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aed6:	2101      	movs	r1, #1
 800aed8:	4815      	ldr	r0, [pc, #84]	; (800af30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aeda:	f000 fc94 	bl	800b806 <USBD_GetEpDesc>
 800aede:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aee0:	2181      	movs	r1, #129	; 0x81
 800aee2:	4813      	ldr	r0, [pc, #76]	; (800af30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aee4:	f000 fc8f 	bl	800b806 <USBD_GetEpDesc>
 800aee8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2210      	movs	r2, #16
 800aef4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d006      	beq.n	800af0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	2200      	movs	r2, #0
 800af00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af04:	711a      	strb	r2, [r3, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d006      	beq.n	800af1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af18:	711a      	strb	r2, [r3, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2243      	movs	r2, #67	; 0x43
 800af22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af24:	4b02      	ldr	r3, [pc, #8]	; (800af30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800af26:	4618      	mov	r0, r3
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	200005ec 	.word	0x200005ec

0800af34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	220a      	movs	r2, #10
 800af40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800af42:	4b03      	ldr	r3, [pc, #12]	; (800af50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	200005a8 	.word	0x200005a8

0800af54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800af64:	2303      	movs	r3, #3
 800af66:	e009      	b.n	800af7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	33b0      	adds	r3, #176	; 0xb0
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	32b0      	adds	r2, #176	; 0xb0
 800af9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800afaa:	2303      	movs	r3, #3
 800afac:	e008      	b.n	800afc0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	371c      	adds	r7, #28
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	32b0      	adds	r2, #176	; 0xb0
 800afe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	e004      	b.n	800affa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
	...

0800b008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	32b0      	adds	r2, #176	; 0xb0
 800b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	32b0      	adds	r2, #176	; 0xb0
 800b02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b032:	2303      	movs	r3, #3
 800b034:	e018      	b.n	800b068 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7c1b      	ldrb	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b03e:	4b0c      	ldr	r3, [pc, #48]	; (800b070 <USBD_CDC_ReceivePacket+0x68>)
 800b040:	7819      	ldrb	r1, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f004 febf 	bl	800fdd0 <USBD_LL_PrepareReceive>
 800b052:	e008      	b.n	800b066 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <USBD_CDC_ReceivePacket+0x68>)
 800b056:	7819      	ldrb	r1, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b05e:	2340      	movs	r3, #64	; 0x40
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f004 feb5 	bl	800fdd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20000630 	.word	0x20000630

0800b074 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b088:	2303      	movs	r3, #3
 800b08a:	e01f      	b.n	800b0cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	79fa      	ldrb	r2, [r7, #7]
 800b0be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f004 fd2f 	bl	800fb24 <USBD_LL_Init>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e025      	b.n	800b138 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	32ae      	adds	r2, #174	; 0xae
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00f      	beq.n	800b128 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	32ae      	adds	r2, #174	; 0xae
 800b112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	f107 020e 	add.w	r2, r7, #14
 800b11c:	4610      	mov	r0, r2
 800b11e:	4798      	blx	r3
 800b120:	4602      	mov	r2, r0
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f004 fd37 	bl	800fbbc <USBD_LL_Start>
 800b14e:	4603      	mov	r3, r0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b160:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b162:	4618      	mov	r0, r3
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	460b      	mov	r3, r1
 800b178:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	78fa      	ldrb	r2, [r7, #3]
 800b192:	4611      	mov	r1, r2
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	4798      	blx	r3
 800b198:	4603      	mov	r3, r0
 800b19a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	78fa      	ldrb	r2, [r7, #3]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	4798      	blx	r3
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 f908 	bl	800c402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b200:	461a      	mov	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b20e:	f003 031f 	and.w	r3, r3, #31
 800b212:	2b02      	cmp	r3, #2
 800b214:	d01a      	beq.n	800b24c <USBD_LL_SetupStage+0x72>
 800b216:	2b02      	cmp	r3, #2
 800b218:	d822      	bhi.n	800b260 <USBD_LL_SetupStage+0x86>
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <USBD_LL_SetupStage+0x4a>
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d00a      	beq.n	800b238 <USBD_LL_SetupStage+0x5e>
 800b222:	e01d      	b.n	800b260 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fb5f 	bl	800b8f0 <USBD_StdDevReq>
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]
      break;
 800b236:	e020      	b.n	800b27a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fbc7 	bl	800b9d4 <USBD_StdItfReq>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
      break;
 800b24a:	e016      	b.n	800b27a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fc29 	bl	800baac <USBD_StdEPReq>
 800b25a:	4603      	mov	r3, r0
 800b25c:	73fb      	strb	r3, [r7, #15]
      break;
 800b25e:	e00c      	b.n	800b27a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f004 fd04 	bl	800fc7c <USBD_LL_StallEP>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
      break;
 800b278:	bf00      	nop
  }

  return ret;
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	460b      	mov	r3, r1
 800b28e:	607a      	str	r2, [r7, #4]
 800b290:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b296:	7afb      	ldrb	r3, [r7, #11]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d16e      	bne.n	800b37a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	f040 8098 	bne.w	800b3e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d913      	bls.n	800b2e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	1ad2      	subs	r2, r2, r3
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	68da      	ldr	r2, [r3, #12]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	bf28      	it	cs
 800b2d6:	4613      	movcs	r3, r2
 800b2d8:	461a      	mov	r2, r3
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f001 f984 	bl	800c5ea <USBD_CtlContinueRx>
 800b2e2:	e07d      	b.n	800b3e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2ea:	f003 031f 	and.w	r3, r3, #31
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d014      	beq.n	800b31c <USBD_LL_DataOutStage+0x98>
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d81d      	bhi.n	800b332 <USBD_LL_DataOutStage+0xae>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <USBD_LL_DataOutStage+0x7c>
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d003      	beq.n	800b306 <USBD_LL_DataOutStage+0x82>
 800b2fe:	e018      	b.n	800b332 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b300:	2300      	movs	r3, #0
 800b302:	75bb      	strb	r3, [r7, #22]
            break;
 800b304:	e018      	b.n	800b338 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	4619      	mov	r1, r3
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 fa5e 	bl	800b7d2 <USBD_CoreFindIF>
 800b316:	4603      	mov	r3, r0
 800b318:	75bb      	strb	r3, [r7, #22]
            break;
 800b31a:	e00d      	b.n	800b338 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b322:	b2db      	uxtb	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 fa60 	bl	800b7ec <USBD_CoreFindEP>
 800b32c:	4603      	mov	r3, r0
 800b32e:	75bb      	strb	r3, [r7, #22]
            break;
 800b330:	e002      	b.n	800b338 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b332:	2300      	movs	r3, #0
 800b334:	75bb      	strb	r3, [r7, #22]
            break;
 800b336:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b338:	7dbb      	ldrb	r3, [r7, #22]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d119      	bne.n	800b372 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b03      	cmp	r3, #3
 800b348:	d113      	bne.n	800b372 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b34a:	7dba      	ldrb	r2, [r7, #22]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	32ae      	adds	r2, #174	; 0xae
 800b350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00b      	beq.n	800b372 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b35a:	7dba      	ldrb	r2, [r7, #22]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b362:	7dba      	ldrb	r2, [r7, #22]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	32ae      	adds	r2, #174	; 0xae
 800b368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f001 f94a 	bl	800c60c <USBD_CtlSendStatus>
 800b378:	e032      	b.n	800b3e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b37a:	7afb      	ldrb	r3, [r7, #11]
 800b37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b380:	b2db      	uxtb	r3, r3
 800b382:	4619      	mov	r1, r3
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 fa31 	bl	800b7ec <USBD_CoreFindEP>
 800b38a:	4603      	mov	r3, r0
 800b38c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b38e:	7dbb      	ldrb	r3, [r7, #22]
 800b390:	2bff      	cmp	r3, #255	; 0xff
 800b392:	d025      	beq.n	800b3e0 <USBD_LL_DataOutStage+0x15c>
 800b394:	7dbb      	ldrb	r3, [r7, #22]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d122      	bne.n	800b3e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d117      	bne.n	800b3d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b3a6:	7dba      	ldrb	r2, [r7, #22]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	32ae      	adds	r2, #174	; 0xae
 800b3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00f      	beq.n	800b3d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b3b6:	7dba      	ldrb	r2, [r7, #22]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b3be:	7dba      	ldrb	r2, [r7, #22]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	32ae      	adds	r2, #174	; 0xae
 800b3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	7afa      	ldrb	r2, [r7, #11]
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	4798      	blx	r3
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	e000      	b.n	800b3e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b086      	sub	sp, #24
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d16f      	bne.n	800b4de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3314      	adds	r3, #20
 800b402:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d15a      	bne.n	800b4c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	429a      	cmp	r2, r3
 800b418:	d914      	bls.n	800b444 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	689a      	ldr	r2, [r3, #8]
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	1ad2      	subs	r2, r2, r3
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	461a      	mov	r2, r3
 800b42e:	6879      	ldr	r1, [r7, #4]
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f001 f8ac 	bl	800c58e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b436:	2300      	movs	r3, #0
 800b438:	2200      	movs	r2, #0
 800b43a:	2100      	movs	r1, #0
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f004 fcc7 	bl	800fdd0 <USBD_LL_PrepareReceive>
 800b442:	e03f      	b.n	800b4c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	68da      	ldr	r2, [r3, #12]
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d11c      	bne.n	800b48a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	685a      	ldr	r2, [r3, #4]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b458:	429a      	cmp	r2, r3
 800b45a:	d316      	bcc.n	800b48a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b466:	429a      	cmp	r2, r3
 800b468:	d20f      	bcs.n	800b48a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b46a:	2200      	movs	r2, #0
 800b46c:	2100      	movs	r1, #0
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f001 f88d 	bl	800c58e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b47c:	2300      	movs	r3, #0
 800b47e:	2200      	movs	r2, #0
 800b480:	2100      	movs	r1, #0
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f004 fca4 	bl	800fdd0 <USBD_LL_PrepareReceive>
 800b488:	e01c      	b.n	800b4c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b03      	cmp	r3, #3
 800b494:	d10f      	bne.n	800b4b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d009      	beq.n	800b4b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4b6:	2180      	movs	r1, #128	; 0x80
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f004 fbdf 	bl	800fc7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f001 f8b7 	bl	800c632 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d03a      	beq.n	800b544 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f7ff fe42 	bl	800b158 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4dc:	e032      	b.n	800b544 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f97f 	bl	800b7ec <USBD_CoreFindEP>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	2bff      	cmp	r3, #255	; 0xff
 800b4f6:	d025      	beq.n	800b544 <USBD_LL_DataInStage+0x15a>
 800b4f8:	7dfb      	ldrb	r3, [r7, #23]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d122      	bne.n	800b544 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d11c      	bne.n	800b544 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b50a:	7dfa      	ldrb	r2, [r7, #23]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	32ae      	adds	r2, #174	; 0xae
 800b510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d014      	beq.n	800b544 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b51a:	7dfa      	ldrb	r2, [r7, #23]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b522:	7dfa      	ldrb	r2, [r7, #23]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	32ae      	adds	r2, #174	; 0xae
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	7afa      	ldrb	r2, [r7, #11]
 800b530:	4611      	mov	r1, r2
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b53a:	7dbb      	ldrb	r3, [r7, #22]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b540:	7dbb      	ldrb	r3, [r7, #22]
 800b542:	e000      	b.n	800b546 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b084      	sub	sp, #16
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2201      	movs	r2, #1
 800b55e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b586:	2b00      	cmp	r3, #0
 800b588:	d014      	beq.n	800b5b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00e      	beq.n	800b5b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	6852      	ldr	r2, [r2, #4]
 800b5a2:	b2d2      	uxtb	r2, r2
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	4798      	blx	r3
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5b4:	2340      	movs	r3, #64	; 0x40
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f004 fb19 	bl	800fbf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2240      	movs	r2, #64	; 0x40
 800b5cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5d0:	2340      	movs	r3, #64	; 0x40
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2180      	movs	r1, #128	; 0x80
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f004 fb0b 	bl	800fbf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2240      	movs	r2, #64	; 0x40
 800b5e6:	621a      	str	r2, [r3, #32]

  return ret;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b083      	sub	sp, #12
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	78fa      	ldrb	r2, [r7, #3]
 800b602:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b620:	b2da      	uxtb	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2204      	movs	r2, #4
 800b62c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b63e:	b480      	push	{r7}
 800b640:	b083      	sub	sp, #12
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b04      	cmp	r3, #4
 800b650:	d106      	bne.n	800b660 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d110      	bne.n	800b6a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00b      	beq.n	800b6a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b692:	69db      	ldr	r3, [r3, #28]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d005      	beq.n	800b6a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b69e:	69db      	ldr	r3, [r3, #28]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	32ae      	adds	r2, #174	; 0xae
 800b6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e01c      	b.n	800b70a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d115      	bne.n	800b708 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	32ae      	adds	r2, #174	; 0xae
 800b6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00b      	beq.n	800b708 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	32ae      	adds	r2, #174	; 0xae
 800b6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	4611      	mov	r1, r2
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	32ae      	adds	r2, #174	; 0xae
 800b728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b730:	2303      	movs	r3, #3
 800b732:	e01c      	b.n	800b76e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d115      	bne.n	800b76c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	32ae      	adds	r2, #174	; 0xae
 800b74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00b      	beq.n	800b76c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	32ae      	adds	r2, #174	; 0xae
 800b75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	78fa      	ldrb	r2, [r7, #3]
 800b766:	4611      	mov	r1, r2
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00e      	beq.n	800b7c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	6852      	ldr	r2, [r2, #4]
 800b7b6:	b2d2      	uxtb	r2, r2
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	4798      	blx	r3
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b083      	sub	sp, #12
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	460b      	mov	r3, r1
 800b7dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b7de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b7f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b086      	sub	sp, #24
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b81a:	2300      	movs	r3, #0
 800b81c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	885b      	ldrh	r3, [r3, #2]
 800b822:	b29a      	uxth	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	b29b      	uxth	r3, r3
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d920      	bls.n	800b870 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	b29b      	uxth	r3, r3
 800b834:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b836:	e013      	b.n	800b860 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b838:	f107 030a 	add.w	r3, r7, #10
 800b83c:	4619      	mov	r1, r3
 800b83e:	6978      	ldr	r0, [r7, #20]
 800b840:	f000 f81b 	bl	800b87a <USBD_GetNextDesc>
 800b844:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	785b      	ldrb	r3, [r3, #1]
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	d108      	bne.n	800b860 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	789b      	ldrb	r3, [r3, #2]
 800b856:	78fa      	ldrb	r2, [r7, #3]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d008      	beq.n	800b86e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b85c:	2300      	movs	r3, #0
 800b85e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	885b      	ldrh	r3, [r3, #2]
 800b864:	b29a      	uxth	r2, r3
 800b866:	897b      	ldrh	r3, [r7, #10]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d8e5      	bhi.n	800b838 <USBD_GetEpDesc+0x32>
 800b86c:	e000      	b.n	800b870 <USBD_GetEpDesc+0x6a>
          break;
 800b86e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b870:	693b      	ldr	r3, [r7, #16]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3718      	adds	r7, #24
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b87a:	b480      	push	{r7}
 800b87c:	b085      	sub	sp, #20
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	881a      	ldrh	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	b29b      	uxth	r3, r3
 800b892:	4413      	add	r3, r2
 800b894:	b29a      	uxth	r2, r3
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8d2:	8a3b      	ldrh	r3, [r7, #16]
 800b8d4:	021b      	lsls	r3, r3, #8
 800b8d6:	b21a      	sxth	r2, r3
 800b8d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	b21b      	sxth	r3, r3
 800b8e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b8e2:	89fb      	ldrh	r3, [r7, #14]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	371c      	adds	r7, #28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b906:	2b40      	cmp	r3, #64	; 0x40
 800b908:	d005      	beq.n	800b916 <USBD_StdDevReq+0x26>
 800b90a:	2b40      	cmp	r3, #64	; 0x40
 800b90c:	d857      	bhi.n	800b9be <USBD_StdDevReq+0xce>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00f      	beq.n	800b932 <USBD_StdDevReq+0x42>
 800b912:	2b20      	cmp	r3, #32
 800b914:	d153      	bne.n	800b9be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	32ae      	adds	r2, #174	; 0xae
 800b920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4798      	blx	r3
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]
      break;
 800b930:	e04a      	b.n	800b9c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	2b09      	cmp	r3, #9
 800b938:	d83b      	bhi.n	800b9b2 <USBD_StdDevReq+0xc2>
 800b93a:	a201      	add	r2, pc, #4	; (adr r2, 800b940 <USBD_StdDevReq+0x50>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b995 	.word	0x0800b995
 800b944:	0800b9a9 	.word	0x0800b9a9
 800b948:	0800b9b3 	.word	0x0800b9b3
 800b94c:	0800b99f 	.word	0x0800b99f
 800b950:	0800b9b3 	.word	0x0800b9b3
 800b954:	0800b973 	.word	0x0800b973
 800b958:	0800b969 	.word	0x0800b969
 800b95c:	0800b9b3 	.word	0x0800b9b3
 800b960:	0800b98b 	.word	0x0800b98b
 800b964:	0800b97d 	.word	0x0800b97d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa3c 	bl	800bde8 <USBD_GetDescriptor>
          break;
 800b970:	e024      	b.n	800b9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fba1 	bl	800c0bc <USBD_SetAddress>
          break;
 800b97a:	e01f      	b.n	800b9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fbe0 	bl	800c144 <USBD_SetConfig>
 800b984:	4603      	mov	r3, r0
 800b986:	73fb      	strb	r3, [r7, #15]
          break;
 800b988:	e018      	b.n	800b9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fc83 	bl	800c298 <USBD_GetConfig>
          break;
 800b992:	e013      	b.n	800b9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fcb4 	bl	800c304 <USBD_GetStatus>
          break;
 800b99c:	e00e      	b.n	800b9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fce3 	bl	800c36c <USBD_SetFeature>
          break;
 800b9a6:	e009      	b.n	800b9bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fd07 	bl	800c3be <USBD_ClrFeature>
          break;
 800b9b0:	e004      	b.n	800b9bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fd5e 	bl	800c476 <USBD_CtlError>
          break;
 800b9ba:	bf00      	nop
      }
      break;
 800b9bc:	e004      	b.n	800b9c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fd58 	bl	800c476 <USBD_CtlError>
      break;
 800b9c6:	bf00      	nop
  }

  return ret;
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop

0800b9d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9ea:	2b40      	cmp	r3, #64	; 0x40
 800b9ec:	d005      	beq.n	800b9fa <USBD_StdItfReq+0x26>
 800b9ee:	2b40      	cmp	r3, #64	; 0x40
 800b9f0:	d852      	bhi.n	800ba98 <USBD_StdItfReq+0xc4>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <USBD_StdItfReq+0x26>
 800b9f6:	2b20      	cmp	r3, #32
 800b9f8:	d14e      	bne.n	800ba98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	3b01      	subs	r3, #1
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d840      	bhi.n	800ba8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	889b      	ldrh	r3, [r3, #4]
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d836      	bhi.n	800ba80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	889b      	ldrh	r3, [r3, #4]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7ff fed9 	bl	800b7d2 <USBD_CoreFindIF>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	2bff      	cmp	r3, #255	; 0xff
 800ba28:	d01d      	beq.n	800ba66 <USBD_StdItfReq+0x92>
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d11a      	bne.n	800ba66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ba30:	7bba      	ldrb	r2, [r7, #14]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	32ae      	adds	r2, #174	; 0xae
 800ba36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00f      	beq.n	800ba60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ba40:	7bba      	ldrb	r2, [r7, #14]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba48:	7bba      	ldrb	r2, [r7, #14]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	32ae      	adds	r2, #174	; 0xae
 800ba4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba5e:	e004      	b.n	800ba6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ba60:	2303      	movs	r3, #3
 800ba62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba64:	e001      	b.n	800ba6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ba66:	2303      	movs	r3, #3
 800ba68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	88db      	ldrh	r3, [r3, #6]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d110      	bne.n	800ba94 <USBD_StdItfReq+0xc0>
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10d      	bne.n	800ba94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fdc7 	bl	800c60c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba7e:	e009      	b.n	800ba94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fcf7 	bl	800c476 <USBD_CtlError>
          break;
 800ba88:	e004      	b.n	800ba94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fcf2 	bl	800c476 <USBD_CtlError>
          break;
 800ba92:	e000      	b.n	800ba96 <USBD_StdItfReq+0xc2>
          break;
 800ba94:	bf00      	nop
      }
      break;
 800ba96:	e004      	b.n	800baa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fceb 	bl	800c476 <USBD_CtlError>
      break;
 800baa0:	bf00      	nop
  }

  return ret;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	889b      	ldrh	r3, [r3, #4]
 800babe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bac8:	2b40      	cmp	r3, #64	; 0x40
 800baca:	d007      	beq.n	800badc <USBD_StdEPReq+0x30>
 800bacc:	2b40      	cmp	r3, #64	; 0x40
 800bace:	f200 817f 	bhi.w	800bdd0 <USBD_StdEPReq+0x324>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d02a      	beq.n	800bb2c <USBD_StdEPReq+0x80>
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	f040 817a 	bne.w	800bdd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff fe83 	bl	800b7ec <USBD_CoreFindEP>
 800bae6:	4603      	mov	r3, r0
 800bae8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baea:	7b7b      	ldrb	r3, [r7, #13]
 800baec:	2bff      	cmp	r3, #255	; 0xff
 800baee:	f000 8174 	beq.w	800bdda <USBD_StdEPReq+0x32e>
 800baf2:	7b7b      	ldrb	r3, [r7, #13]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f040 8170 	bne.w	800bdda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bafa:	7b7a      	ldrb	r2, [r7, #13]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb02:	7b7a      	ldrb	r2, [r7, #13]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	32ae      	adds	r2, #174	; 0xae
 800bb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f000 8163 	beq.w	800bdda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb14:	7b7a      	ldrb	r2, [r7, #13]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	32ae      	adds	r2, #174	; 0xae
 800bb1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	4798      	blx	r3
 800bb26:	4603      	mov	r3, r0
 800bb28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb2a:	e156      	b.n	800bdda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	785b      	ldrb	r3, [r3, #1]
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d008      	beq.n	800bb46 <USBD_StdEPReq+0x9a>
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	f300 8145 	bgt.w	800bdc4 <USBD_StdEPReq+0x318>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 809b 	beq.w	800bc76 <USBD_StdEPReq+0x1ca>
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d03c      	beq.n	800bbbe <USBD_StdEPReq+0x112>
 800bb44:	e13e      	b.n	800bdc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d002      	beq.n	800bb58 <USBD_StdEPReq+0xac>
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d016      	beq.n	800bb84 <USBD_StdEPReq+0xd8>
 800bb56:	e02c      	b.n	800bbb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00d      	beq.n	800bb7a <USBD_StdEPReq+0xce>
 800bb5e:	7bbb      	ldrb	r3, [r7, #14]
 800bb60:	2b80      	cmp	r3, #128	; 0x80
 800bb62:	d00a      	beq.n	800bb7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f004 f887 	bl	800fc7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb6e:	2180      	movs	r1, #128	; 0x80
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f004 f883 	bl	800fc7c <USBD_LL_StallEP>
 800bb76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb78:	e020      	b.n	800bbbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc7a 	bl	800c476 <USBD_CtlError>
              break;
 800bb82:	e01b      	b.n	800bbbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	885b      	ldrh	r3, [r3, #2]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10e      	bne.n	800bbaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <USBD_StdEPReq+0xfe>
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
 800bb94:	2b80      	cmp	r3, #128	; 0x80
 800bb96:	d008      	beq.n	800bbaa <USBD_StdEPReq+0xfe>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	88db      	ldrh	r3, [r3, #6]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f004 f869 	bl	800fc7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fd2e 	bl	800c60c <USBD_CtlSendStatus>

              break;
 800bbb0:	e004      	b.n	800bbbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fc5e 	bl	800c476 <USBD_CtlError>
              break;
 800bbba:	bf00      	nop
          }
          break;
 800bbbc:	e107      	b.n	800bdce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d002      	beq.n	800bbd0 <USBD_StdEPReq+0x124>
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d016      	beq.n	800bbfc <USBD_StdEPReq+0x150>
 800bbce:	e04b      	b.n	800bc68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00d      	beq.n	800bbf2 <USBD_StdEPReq+0x146>
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	2b80      	cmp	r3, #128	; 0x80
 800bbda:	d00a      	beq.n	800bbf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f004 f84b 	bl	800fc7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbe6:	2180      	movs	r1, #128	; 0x80
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f004 f847 	bl	800fc7c <USBD_LL_StallEP>
 800bbee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbf0:	e040      	b.n	800bc74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fc3e 	bl	800c476 <USBD_CtlError>
              break;
 800bbfa:	e03b      	b.n	800bc74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	885b      	ldrh	r3, [r3, #2]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d136      	bne.n	800bc72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d004      	beq.n	800bc18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f004 f851 	bl	800fcba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fcf7 	bl	800c60c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc1e:	7bbb      	ldrb	r3, [r7, #14]
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff fde2 	bl	800b7ec <USBD_CoreFindEP>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc2c:	7b7b      	ldrb	r3, [r7, #13]
 800bc2e:	2bff      	cmp	r3, #255	; 0xff
 800bc30:	d01f      	beq.n	800bc72 <USBD_StdEPReq+0x1c6>
 800bc32:	7b7b      	ldrb	r3, [r7, #13]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d11c      	bne.n	800bc72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bc38:	7b7a      	ldrb	r2, [r7, #13]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bc40:	7b7a      	ldrb	r2, [r7, #13]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	32ae      	adds	r2, #174	; 0xae
 800bc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d010      	beq.n	800bc72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc50:	7b7a      	ldrb	r2, [r7, #13]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	32ae      	adds	r2, #174	; 0xae
 800bc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	4798      	blx	r3
 800bc62:	4603      	mov	r3, r0
 800bc64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bc66:	e004      	b.n	800bc72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fc03 	bl	800c476 <USBD_CtlError>
              break;
 800bc70:	e000      	b.n	800bc74 <USBD_StdEPReq+0x1c8>
              break;
 800bc72:	bf00      	nop
          }
          break;
 800bc74:	e0ab      	b.n	800bdce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d002      	beq.n	800bc88 <USBD_StdEPReq+0x1dc>
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d032      	beq.n	800bcec <USBD_StdEPReq+0x240>
 800bc86:	e097      	b.n	800bdb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d007      	beq.n	800bc9e <USBD_StdEPReq+0x1f2>
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	2b80      	cmp	r3, #128	; 0x80
 800bc92:	d004      	beq.n	800bc9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fbed 	bl	800c476 <USBD_CtlError>
                break;
 800bc9c:	e091      	b.n	800bdc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	da0b      	bge.n	800bcbe <USBD_StdEPReq+0x212>
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	3310      	adds	r3, #16
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	4413      	add	r3, r2
 800bcba:	3304      	adds	r3, #4
 800bcbc:	e00b      	b.n	800bcd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2202      	movs	r2, #2
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fc37 	bl	800c558 <USBD_CtlSendData>
              break;
 800bcea:	e06a      	b.n	800bdc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	da11      	bge.n	800bd18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcf4:	7bbb      	ldrb	r3, [r7, #14]
 800bcf6:	f003 020f 	and.w	r2, r3, #15
 800bcfa:	6879      	ldr	r1, [r7, #4]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	440b      	add	r3, r1
 800bd06:	3324      	adds	r3, #36	; 0x24
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d117      	bne.n	800bd3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fbb0 	bl	800c476 <USBD_CtlError>
                  break;
 800bd16:	e054      	b.n	800bdc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	f003 020f 	and.w	r2, r3, #15
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d104      	bne.n	800bd3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fb9d 	bl	800c476 <USBD_CtlError>
                  break;
 800bd3c:	e041      	b.n	800bdc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	da0b      	bge.n	800bd5e <USBD_StdEPReq+0x2b2>
 800bd46:	7bbb      	ldrb	r3, [r7, #14]
 800bd48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	3310      	adds	r3, #16
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	4413      	add	r3, r2
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	e00b      	b.n	800bd76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd5e:	7bbb      	ldrb	r3, [r7, #14]
 800bd60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4413      	add	r3, r2
 800bd74:	3304      	adds	r3, #4
 800bd76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d002      	beq.n	800bd84 <USBD_StdEPReq+0x2d8>
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	2b80      	cmp	r3, #128	; 0x80
 800bd82:	d103      	bne.n	800bd8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	2200      	movs	r2, #0
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	e00e      	b.n	800bdaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd8c:	7bbb      	ldrb	r3, [r7, #14]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f003 ffb1 	bl	800fcf8 <USBD_LL_IsStallEP>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	e002      	b.n	800bdaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2202      	movs	r2, #2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fbd1 	bl	800c558 <USBD_CtlSendData>
              break;
 800bdb6:	e004      	b.n	800bdc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fb5b 	bl	800c476 <USBD_CtlError>
              break;
 800bdc0:	bf00      	nop
          }
          break;
 800bdc2:	e004      	b.n	800bdce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fb55 	bl	800c476 <USBD_CtlError>
          break;
 800bdcc:	bf00      	nop
      }
      break;
 800bdce:	e005      	b.n	800bddc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fb4f 	bl	800c476 <USBD_CtlError>
      break;
 800bdd8:	e000      	b.n	800bddc <USBD_StdEPReq+0x330>
      break;
 800bdda:	bf00      	nop
  }

  return ret;
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
	...

0800bde8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	885b      	ldrh	r3, [r3, #2]
 800be02:	0a1b      	lsrs	r3, r3, #8
 800be04:	b29b      	uxth	r3, r3
 800be06:	3b01      	subs	r3, #1
 800be08:	2b06      	cmp	r3, #6
 800be0a:	f200 8128 	bhi.w	800c05e <USBD_GetDescriptor+0x276>
 800be0e:	a201      	add	r2, pc, #4	; (adr r2, 800be14 <USBD_GetDescriptor+0x2c>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be31 	.word	0x0800be31
 800be18:	0800be49 	.word	0x0800be49
 800be1c:	0800be89 	.word	0x0800be89
 800be20:	0800c05f 	.word	0x0800c05f
 800be24:	0800c05f 	.word	0x0800c05f
 800be28:	0800bfff 	.word	0x0800bfff
 800be2c:	0800c02b 	.word	0x0800c02b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	7c12      	ldrb	r2, [r2, #16]
 800be3c:	f107 0108 	add.w	r1, r7, #8
 800be40:	4610      	mov	r0, r2
 800be42:	4798      	blx	r3
 800be44:	60f8      	str	r0, [r7, #12]
      break;
 800be46:	e112      	b.n	800c06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7c1b      	ldrb	r3, [r3, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10d      	bne.n	800be6c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be58:	f107 0208 	add.w	r2, r7, #8
 800be5c:	4610      	mov	r0, r2
 800be5e:	4798      	blx	r3
 800be60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	3301      	adds	r3, #1
 800be66:	2202      	movs	r2, #2
 800be68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be6a:	e100      	b.n	800c06e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be74:	f107 0208 	add.w	r2, r7, #8
 800be78:	4610      	mov	r0, r2
 800be7a:	4798      	blx	r3
 800be7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3301      	adds	r3, #1
 800be82:	2202      	movs	r2, #2
 800be84:	701a      	strb	r2, [r3, #0]
      break;
 800be86:	e0f2      	b.n	800c06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	885b      	ldrh	r3, [r3, #2]
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b05      	cmp	r3, #5
 800be90:	f200 80ac 	bhi.w	800bfec <USBD_GetDescriptor+0x204>
 800be94:	a201      	add	r2, pc, #4	; (adr r2, 800be9c <USBD_GetDescriptor+0xb4>)
 800be96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9a:	bf00      	nop
 800be9c:	0800beb5 	.word	0x0800beb5
 800bea0:	0800bee9 	.word	0x0800bee9
 800bea4:	0800bf1d 	.word	0x0800bf1d
 800bea8:	0800bf51 	.word	0x0800bf51
 800beac:	0800bf85 	.word	0x0800bf85
 800beb0:	0800bfb9 	.word	0x0800bfb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	7c12      	ldrb	r2, [r2, #16]
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3
 800bed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bed6:	e091      	b.n	800bffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 facb 	bl	800c476 <USBD_CtlError>
            err++;
 800bee0:	7afb      	ldrb	r3, [r7, #11]
 800bee2:	3301      	adds	r3, #1
 800bee4:	72fb      	strb	r3, [r7, #11]
          break;
 800bee6:	e089      	b.n	800bffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	7c12      	ldrb	r2, [r2, #16]
 800bf00:	f107 0108 	add.w	r1, r7, #8
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf0a:	e077      	b.n	800bffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fab1 	bl	800c476 <USBD_CtlError>
            err++;
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	3301      	adds	r3, #1
 800bf18:	72fb      	strb	r3, [r7, #11]
          break;
 800bf1a:	e06f      	b.n	800bffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	f107 0108 	add.w	r1, r7, #8
 800bf38:	4610      	mov	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf3e:	e05d      	b.n	800bffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fa97 	bl	800c476 <USBD_CtlError>
            err++;
 800bf48:	7afb      	ldrb	r3, [r7, #11]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf4e:	e055      	b.n	800bffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00b      	beq.n	800bf74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	7c12      	ldrb	r2, [r2, #16]
 800bf68:	f107 0108 	add.w	r1, r7, #8
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	4798      	blx	r3
 800bf70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf72:	e043      	b.n	800bffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fa7d 	bl	800c476 <USBD_CtlError>
            err++;
 800bf7c:	7afb      	ldrb	r3, [r7, #11]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	72fb      	strb	r3, [r7, #11]
          break;
 800bf82:	e03b      	b.n	800bffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8a:	695b      	ldr	r3, [r3, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00b      	beq.n	800bfa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	7c12      	ldrb	r2, [r2, #16]
 800bf9c:	f107 0108 	add.w	r1, r7, #8
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4798      	blx	r3
 800bfa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfa6:	e029      	b.n	800bffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fa63 	bl	800c476 <USBD_CtlError>
            err++;
 800bfb0:	7afb      	ldrb	r3, [r7, #11]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfb6:	e021      	b.n	800bffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00b      	beq.n	800bfdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	7c12      	ldrb	r2, [r2, #16]
 800bfd0:	f107 0108 	add.w	r1, r7, #8
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	4798      	blx	r3
 800bfd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfda:	e00f      	b.n	800bffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fa49 	bl	800c476 <USBD_CtlError>
            err++;
 800bfe4:	7afb      	ldrb	r3, [r7, #11]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfea:	e007      	b.n	800bffc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fa41 	bl	800c476 <USBD_CtlError>
          err++;
 800bff4:	7afb      	ldrb	r3, [r7, #11]
 800bff6:	3301      	adds	r3, #1
 800bff8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bffa:	bf00      	nop
      }
      break;
 800bffc:	e037      	b.n	800c06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	7c1b      	ldrb	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c00e:	f107 0208 	add.w	r2, r7, #8
 800c012:	4610      	mov	r0, r2
 800c014:	4798      	blx	r3
 800c016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c018:	e029      	b.n	800c06e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fa2a 	bl	800c476 <USBD_CtlError>
        err++;
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	3301      	adds	r3, #1
 800c026:	72fb      	strb	r3, [r7, #11]
      break;
 800c028:	e021      	b.n	800c06e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	7c1b      	ldrb	r3, [r3, #16]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10d      	bne.n	800c04e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03a:	f107 0208 	add.w	r2, r7, #8
 800c03e:	4610      	mov	r0, r2
 800c040:	4798      	blx	r3
 800c042:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3301      	adds	r3, #1
 800c048:	2207      	movs	r2, #7
 800c04a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c04c:	e00f      	b.n	800c06e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fa10 	bl	800c476 <USBD_CtlError>
        err++;
 800c056:	7afb      	ldrb	r3, [r7, #11]
 800c058:	3301      	adds	r3, #1
 800c05a:	72fb      	strb	r3, [r7, #11]
      break;
 800c05c:	e007      	b.n	800c06e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fa08 	bl	800c476 <USBD_CtlError>
      err++;
 800c066:	7afb      	ldrb	r3, [r7, #11]
 800c068:	3301      	adds	r3, #1
 800c06a:	72fb      	strb	r3, [r7, #11]
      break;
 800c06c:	bf00      	nop
  }

  if (err != 0U)
 800c06e:	7afb      	ldrb	r3, [r7, #11]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d11e      	bne.n	800c0b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	88db      	ldrh	r3, [r3, #6]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d016      	beq.n	800c0aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c07c:	893b      	ldrh	r3, [r7, #8]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00e      	beq.n	800c0a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	88da      	ldrh	r2, [r3, #6]
 800c086:	893b      	ldrh	r3, [r7, #8]
 800c088:	4293      	cmp	r3, r2
 800c08a:	bf28      	it	cs
 800c08c:	4613      	movcs	r3, r2
 800c08e:	b29b      	uxth	r3, r3
 800c090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c092:	893b      	ldrh	r3, [r7, #8]
 800c094:	461a      	mov	r2, r3
 800c096:	68f9      	ldr	r1, [r7, #12]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fa5d 	bl	800c558 <USBD_CtlSendData>
 800c09e:	e009      	b.n	800c0b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f9e7 	bl	800c476 <USBD_CtlError>
 800c0a8:	e004      	b.n	800c0b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 faae 	bl	800c60c <USBD_CtlSendStatus>
 800c0b0:	e000      	b.n	800c0b4 <USBD_GetDescriptor+0x2cc>
    return;
 800c0b2:	bf00      	nop
  }
}
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop

0800c0bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	889b      	ldrh	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d131      	bne.n	800c132 <USBD_SetAddress+0x76>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	88db      	ldrh	r3, [r3, #6]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d12d      	bne.n	800c132 <USBD_SetAddress+0x76>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	885b      	ldrh	r3, [r3, #2]
 800c0da:	2b7f      	cmp	r3, #127	; 0x7f
 800c0dc:	d829      	bhi.n	800c132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b03      	cmp	r3, #3
 800c0f4:	d104      	bne.n	800c100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f9bc 	bl	800c476 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0fe:	e01d      	b.n	800c13c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	7bfa      	ldrb	r2, [r7, #15]
 800c104:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f003 fe1f 	bl	800fd50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fa7a 	bl	800c60c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d004      	beq.n	800c128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2202      	movs	r2, #2
 800c122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c126:	e009      	b.n	800c13c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c130:	e004      	b.n	800c13c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f99e 	bl	800c476 <USBD_CtlError>
  }
}
 800c13a:	bf00      	nop
 800c13c:	bf00      	nop
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	b2da      	uxtb	r2, r3
 800c158:	4b4e      	ldr	r3, [pc, #312]	; (800c294 <USBD_SetConfig+0x150>)
 800c15a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c15c:	4b4d      	ldr	r3, [pc, #308]	; (800c294 <USBD_SetConfig+0x150>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d905      	bls.n	800c170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f985 	bl	800c476 <USBD_CtlError>
    return USBD_FAIL;
 800c16c:	2303      	movs	r3, #3
 800c16e:	e08c      	b.n	800c28a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d002      	beq.n	800c182 <USBD_SetConfig+0x3e>
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	d029      	beq.n	800c1d4 <USBD_SetConfig+0x90>
 800c180:	e075      	b.n	800c26e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c182:	4b44      	ldr	r3, [pc, #272]	; (800c294 <USBD_SetConfig+0x150>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d020      	beq.n	800c1cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c18a:	4b42      	ldr	r3, [pc, #264]	; (800c294 <USBD_SetConfig+0x150>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c194:	4b3f      	ldr	r3, [pc, #252]	; (800c294 <USBD_SetConfig+0x150>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7fe ffe7 	bl	800b16e <USBD_SetClassConfig>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1a4:	7bfb      	ldrb	r3, [r7, #15]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d008      	beq.n	800c1bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f962 	bl	800c476 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1ba:	e065      	b.n	800c288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fa25 	bl	800c60c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2203      	movs	r2, #3
 800c1c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1ca:	e05d      	b.n	800c288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fa1d 	bl	800c60c <USBD_CtlSendStatus>
      break;
 800c1d2:	e059      	b.n	800c288 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c1d4:	4b2f      	ldr	r3, [pc, #188]	; (800c294 <USBD_SetConfig+0x150>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d112      	bne.n	800c202 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c1e4:	4b2b      	ldr	r3, [pc, #172]	; (800c294 <USBD_SetConfig+0x150>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1ee:	4b29      	ldr	r3, [pc, #164]	; (800c294 <USBD_SetConfig+0x150>)
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7fe ffd6 	bl	800b1a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fa06 	bl	800c60c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c200:	e042      	b.n	800c288 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c202:	4b24      	ldr	r3, [pc, #144]	; (800c294 <USBD_SetConfig+0x150>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d02a      	beq.n	800c266 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	b2db      	uxtb	r3, r3
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7fe ffc4 	bl	800b1a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c21e:	4b1d      	ldr	r3, [pc, #116]	; (800c294 <USBD_SetConfig+0x150>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c228:	4b1a      	ldr	r3, [pc, #104]	; (800c294 <USBD_SetConfig+0x150>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7fe ff9d 	bl	800b16e <USBD_SetClassConfig>
 800c234:	4603      	mov	r3, r0
 800c236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00f      	beq.n	800c25e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f918 	bl	800c476 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7fe ffa9 	bl	800b1a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c25c:	e014      	b.n	800c288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f9d4 	bl	800c60c <USBD_CtlSendStatus>
      break;
 800c264:	e010      	b.n	800c288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f9d0 	bl	800c60c <USBD_CtlSendStatus>
      break;
 800c26c:	e00c      	b.n	800c288 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f900 	bl	800c476 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c276:	4b07      	ldr	r3, [pc, #28]	; (800c294 <USBD_SetConfig+0x150>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7fe ff92 	bl	800b1a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c282:	2303      	movs	r3, #3
 800c284:	73fb      	strb	r3, [r7, #15]
      break;
 800c286:	bf00      	nop
  }

  return ret;
 800c288:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20000934 	.word	0x20000934

0800c298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	88db      	ldrh	r3, [r3, #6]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d004      	beq.n	800c2b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f8e2 	bl	800c476 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2b2:	e023      	b.n	800c2fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	dc02      	bgt.n	800c2c6 <USBD_GetConfig+0x2e>
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dc03      	bgt.n	800c2cc <USBD_GetConfig+0x34>
 800c2c4:	e015      	b.n	800c2f2 <USBD_GetConfig+0x5a>
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d00b      	beq.n	800c2e2 <USBD_GetConfig+0x4a>
 800c2ca:	e012      	b.n	800c2f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f93c 	bl	800c558 <USBD_CtlSendData>
        break;
 800c2e0:	e00c      	b.n	800c2fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f934 	bl	800c558 <USBD_CtlSendData>
        break;
 800c2f0:	e004      	b.n	800c2fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f8be 	bl	800c476 <USBD_CtlError>
        break;
 800c2fa:	bf00      	nop
}
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c314:	b2db      	uxtb	r3, r3
 800c316:	3b01      	subs	r3, #1
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d81e      	bhi.n	800c35a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	88db      	ldrh	r3, [r3, #6]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d004      	beq.n	800c32e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f8a5 	bl	800c476 <USBD_CtlError>
        break;
 800c32c:	e01a      	b.n	800c364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d005      	beq.n	800c34a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	f043 0202 	orr.w	r2, r3, #2
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	330c      	adds	r3, #12
 800c34e:	2202      	movs	r2, #2
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f900 	bl	800c558 <USBD_CtlSendData>
      break;
 800c358:	e004      	b.n	800c364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f88a 	bl	800c476 <USBD_CtlError>
      break;
 800c362:	bf00      	nop
  }
}
 800c364:	bf00      	nop
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	885b      	ldrh	r3, [r3, #2]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d107      	bne.n	800c38e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f940 	bl	800c60c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c38c:	e013      	b.n	800c3b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	885b      	ldrh	r3, [r3, #2]
 800c392:	2b02      	cmp	r3, #2
 800c394:	d10b      	bne.n	800c3ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	889b      	ldrh	r3, [r3, #4]
 800c39a:	0a1b      	lsrs	r3, r3, #8
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f930 	bl	800c60c <USBD_CtlSendStatus>
}
 800c3ac:	e003      	b.n	800c3b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f860 	bl	800c476 <USBD_CtlError>
}
 800c3b6:	bf00      	nop
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d80b      	bhi.n	800c3ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	885b      	ldrh	r3, [r3, #2]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d10c      	bne.n	800c3f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f910 	bl	800c60c <USBD_CtlSendStatus>
      }
      break;
 800c3ec:	e004      	b.n	800c3f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f840 	bl	800c476 <USBD_CtlError>
      break;
 800c3f6:	e000      	b.n	800c3fa <USBD_ClrFeature+0x3c>
      break;
 800c3f8:	bf00      	nop
  }
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	781a      	ldrb	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	3301      	adds	r3, #1
 800c41c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	781a      	ldrb	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7ff fa41 	bl	800b8b4 <SWAPBYTE>
 800c432:	4603      	mov	r3, r0
 800c434:	461a      	mov	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3301      	adds	r3, #1
 800c43e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3301      	adds	r3, #1
 800c444:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f7ff fa34 	bl	800b8b4 <SWAPBYTE>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3301      	adds	r3, #1
 800c458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3301      	adds	r3, #1
 800c45e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f7ff fa27 	bl	800b8b4 <SWAPBYTE>
 800c466:	4603      	mov	r3, r0
 800c468:	461a      	mov	r2, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	80da      	strh	r2, [r3, #6]
}
 800c46e:	bf00      	nop
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c480:	2180      	movs	r1, #128	; 0x80
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f003 fbfa 	bl	800fc7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c488:	2100      	movs	r1, #0
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f003 fbf6 	bl	800fc7c <USBD_LL_StallEP>
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d036      	beq.n	800c51c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c4b2:	6938      	ldr	r0, [r7, #16]
 800c4b4:	f000 f836 	bl	800c524 <USBD_GetLen>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	b29a      	uxth	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c4c6:	7dfb      	ldrb	r3, [r7, #23]
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	7812      	ldrb	r2, [r2, #0]
 800c4d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	4413      	add	r3, r2
 800c4de:	2203      	movs	r2, #3
 800c4e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c4e8:	e013      	b.n	800c512 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	693a      	ldr	r2, [r7, #16]
 800c4f2:	7812      	ldrb	r2, [r2, #0]
 800c4f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	613b      	str	r3, [r7, #16]
    idx++;
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	3301      	adds	r3, #1
 800c500:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	4413      	add	r3, r2
 800c508:	2200      	movs	r2, #0
 800c50a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
 800c50e:	3301      	adds	r3, #1
 800c510:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1e7      	bne.n	800c4ea <USBD_GetString+0x52>
 800c51a:	e000      	b.n	800c51e <USBD_GetString+0x86>
    return;
 800c51c:	bf00      	nop
  }
}
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c534:	e005      	b.n	800c542 <USBD_GetLen+0x1e>
  {
    len++;
 800c536:	7bfb      	ldrb	r3, [r7, #15]
 800c538:	3301      	adds	r3, #1
 800c53a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	3301      	adds	r3, #1
 800c540:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1f5      	bne.n	800c536 <USBD_GetLen+0x12>
  }

  return len;
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2202      	movs	r2, #2
 800c568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	2100      	movs	r1, #0
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f003 fc05 	bl	800fd8e <USBD_LL_Transmit>

  return USBD_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b084      	sub	sp, #16
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	2100      	movs	r1, #0
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f003 fbf4 	bl	800fd8e <USBD_LL_Transmit>

  return USBD_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2203      	movs	r2, #3
 800c5c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	2100      	movs	r1, #0
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f003 fbf8 	bl	800fdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68ba      	ldr	r2, [r7, #8]
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f003 fbe7 	bl	800fdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2204      	movs	r2, #4
 800c618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c61c:	2300      	movs	r3, #0
 800c61e:	2200      	movs	r2, #0
 800c620:	2100      	movs	r1, #0
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f003 fbb3 	bl	800fd8e <USBD_LL_Transmit>

  return USBD_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2205      	movs	r2, #5
 800c63e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c642:	2300      	movs	r3, #0
 800c644:	2200      	movs	r2, #0
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f003 fbc1 	bl	800fdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <__NVIC_SetPriority>:
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	4603      	mov	r3, r0
 800c660:	6039      	str	r1, [r7, #0]
 800c662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	db0a      	blt.n	800c682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	490c      	ldr	r1, [pc, #48]	; (800c6a4 <__NVIC_SetPriority+0x4c>)
 800c672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c676:	0112      	lsls	r2, r2, #4
 800c678:	b2d2      	uxtb	r2, r2
 800c67a:	440b      	add	r3, r1
 800c67c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c680:	e00a      	b.n	800c698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	b2da      	uxtb	r2, r3
 800c686:	4908      	ldr	r1, [pc, #32]	; (800c6a8 <__NVIC_SetPriority+0x50>)
 800c688:	79fb      	ldrb	r3, [r7, #7]
 800c68a:	f003 030f 	and.w	r3, r3, #15
 800c68e:	3b04      	subs	r3, #4
 800c690:	0112      	lsls	r2, r2, #4
 800c692:	b2d2      	uxtb	r2, r2
 800c694:	440b      	add	r3, r1
 800c696:	761a      	strb	r2, [r3, #24]
}
 800c698:	bf00      	nop
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	e000e100 	.word	0xe000e100
 800c6a8:	e000ed00 	.word	0xe000ed00

0800c6ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c6b0:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <SysTick_Handler+0x1c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c6b4:	f001 feb2 	bl	800e41c <xTaskGetSchedulerState>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d001      	beq.n	800c6c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c6be:	f002 fc9b 	bl	800eff8 <xPortSysTickHandler>
  }
}
 800c6c2:	bf00      	nop
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	e000e010 	.word	0xe000e010

0800c6cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	f06f 0004 	mvn.w	r0, #4
 800c6d6:	f7ff ffbf 	bl	800c658 <__NVIC_SetPriority>
#endif
}
 800c6da:	bf00      	nop
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6e6:	f3ef 8305 	mrs	r3, IPSR
 800c6ea:	603b      	str	r3, [r7, #0]
  return(result);
 800c6ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c6f2:	f06f 0305 	mvn.w	r3, #5
 800c6f6:	607b      	str	r3, [r7, #4]
 800c6f8:	e00c      	b.n	800c714 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c6fa:	4b0a      	ldr	r3, [pc, #40]	; (800c724 <osKernelInitialize+0x44>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d105      	bne.n	800c70e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c702:	4b08      	ldr	r3, [pc, #32]	; (800c724 <osKernelInitialize+0x44>)
 800c704:	2201      	movs	r2, #1
 800c706:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c708:	2300      	movs	r3, #0
 800c70a:	607b      	str	r3, [r7, #4]
 800c70c:	e002      	b.n	800c714 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c70e:	f04f 33ff 	mov.w	r3, #4294967295
 800c712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c714:	687b      	ldr	r3, [r7, #4]
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	20000938 	.word	0x20000938

0800c728 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c72e:	f3ef 8305 	mrs	r3, IPSR
 800c732:	603b      	str	r3, [r7, #0]
  return(result);
 800c734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c73a:	f06f 0305 	mvn.w	r3, #5
 800c73e:	607b      	str	r3, [r7, #4]
 800c740:	e010      	b.n	800c764 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c742:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <osKernelStart+0x48>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d109      	bne.n	800c75e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c74a:	f7ff ffbf 	bl	800c6cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c74e:	4b08      	ldr	r3, [pc, #32]	; (800c770 <osKernelStart+0x48>)
 800c750:	2202      	movs	r2, #2
 800c752:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c754:	f001 fa1a 	bl	800db8c <vTaskStartScheduler>
      stat = osOK;
 800c758:	2300      	movs	r3, #0
 800c75a:	607b      	str	r3, [r7, #4]
 800c75c:	e002      	b.n	800c764 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c75e:	f04f 33ff 	mov.w	r3, #4294967295
 800c762:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c764:	687b      	ldr	r3, [r7, #4]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000938 	.word	0x20000938

0800c774 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c774:	b580      	push	{r7, lr}
 800c776:	b08e      	sub	sp, #56	; 0x38
 800c778:	af04      	add	r7, sp, #16
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c780:	2300      	movs	r3, #0
 800c782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c784:	f3ef 8305 	mrs	r3, IPSR
 800c788:	617b      	str	r3, [r7, #20]
  return(result);
 800c78a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d17f      	bne.n	800c890 <osThreadNew+0x11c>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d07c      	beq.n	800c890 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c79a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c79c:	2318      	movs	r3, #24
 800c79e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d045      	beq.n	800c83c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <osThreadNew+0x4a>
        name = attr->name;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d008      	beq.n	800c7e4 <osThreadNew+0x70>
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	2b38      	cmp	r3, #56	; 0x38
 800c7d6:	d805      	bhi.n	800c7e4 <osThreadNew+0x70>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <osThreadNew+0x74>
        return (NULL);
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e054      	b.n	800c892 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d003      	beq.n	800c7f8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	089b      	lsrs	r3, r3, #2
 800c7f6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00e      	beq.n	800c81e <osThreadNew+0xaa>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	2b6b      	cmp	r3, #107	; 0x6b
 800c806:	d90a      	bls.n	800c81e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d006      	beq.n	800c81e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <osThreadNew+0xaa>
        mem = 1;
 800c818:	2301      	movs	r3, #1
 800c81a:	61bb      	str	r3, [r7, #24]
 800c81c:	e010      	b.n	800c840 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10c      	bne.n	800c840 <osThreadNew+0xcc>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d108      	bne.n	800c840 <osThreadNew+0xcc>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d104      	bne.n	800c840 <osThreadNew+0xcc>
          mem = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	61bb      	str	r3, [r7, #24]
 800c83a:	e001      	b.n	800c840 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d110      	bne.n	800c868 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c84e:	9202      	str	r2, [sp, #8]
 800c850:	9301      	str	r3, [sp, #4]
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	6a3a      	ldr	r2, [r7, #32]
 800c85a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f000 feb9 	bl	800d5d4 <xTaskCreateStatic>
 800c862:	4603      	mov	r3, r0
 800c864:	613b      	str	r3, [r7, #16]
 800c866:	e013      	b.n	800c890 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d110      	bne.n	800c890 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	b29a      	uxth	r2, r3
 800c872:	f107 0310 	add.w	r3, r7, #16
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f000 ff04 	bl	800d68e <xTaskCreate>
 800c886:	4603      	mov	r3, r0
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d001      	beq.n	800c890 <osThreadNew+0x11c>
            hTask = NULL;
 800c88c:	2300      	movs	r3, #0
 800c88e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c890:	693b      	ldr	r3, [r7, #16]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3728      	adds	r7, #40	; 0x28
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b084      	sub	sp, #16
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8a2:	f3ef 8305 	mrs	r3, IPSR
 800c8a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <osDelay+0x1c>
    stat = osErrorISR;
 800c8ae:	f06f 0305 	mvn.w	r3, #5
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	e007      	b.n	800c8c6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 f829 	bl	800d918 <vTaskDelay>
    }
  }

  return (stat);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b08a      	sub	sp, #40	; 0x28
 800c8d4:	af02      	add	r7, sp, #8
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8e0:	f3ef 8305 	mrs	r3, IPSR
 800c8e4:	613b      	str	r3, [r7, #16]
  return(result);
 800c8e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d15f      	bne.n	800c9ac <osMessageQueueNew+0xdc>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d05c      	beq.n	800c9ac <osMessageQueueNew+0xdc>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d059      	beq.n	800c9ac <osMessageQueueNew+0xdc>
    mem = -1;
 800c8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d029      	beq.n	800c958 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d012      	beq.n	800c932 <osMessageQueueNew+0x62>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	2b4f      	cmp	r3, #79	; 0x4f
 800c912:	d90e      	bls.n	800c932 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00a      	beq.n	800c932 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	695a      	ldr	r2, [r3, #20]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	68b9      	ldr	r1, [r7, #8]
 800c924:	fb01 f303 	mul.w	r3, r1, r3
 800c928:	429a      	cmp	r2, r3
 800c92a:	d302      	bcc.n	800c932 <osMessageQueueNew+0x62>
        mem = 1;
 800c92c:	2301      	movs	r3, #1
 800c92e:	61bb      	str	r3, [r7, #24]
 800c930:	e014      	b.n	800c95c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d110      	bne.n	800c95c <osMessageQueueNew+0x8c>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10c      	bne.n	800c95c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c946:	2b00      	cmp	r3, #0
 800c948:	d108      	bne.n	800c95c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d104      	bne.n	800c95c <osMessageQueueNew+0x8c>
          mem = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	e001      	b.n	800c95c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d10b      	bne.n	800c97a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691a      	ldr	r2, [r3, #16]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	2100      	movs	r1, #0
 800c96c:	9100      	str	r1, [sp, #0]
 800c96e:	68b9      	ldr	r1, [r7, #8]
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 f971 	bl	800cc58 <xQueueGenericCreateStatic>
 800c976:	61f8      	str	r0, [r7, #28]
 800c978:	e008      	b.n	800c98c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d105      	bne.n	800c98c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c980:	2200      	movs	r2, #0
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f000 f9df 	bl	800cd48 <xQueueGenericCreate>
 800c98a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00c      	beq.n	800c9ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d003      	beq.n	800c9a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	617b      	str	r3, [r7, #20]
 800c99e:	e001      	b.n	800c9a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c9a4:	6979      	ldr	r1, [r7, #20]
 800c9a6:	69f8      	ldr	r0, [r7, #28]
 800c9a8:	f000 fdb6 	bl	800d518 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c9ac:	69fb      	ldr	r3, [r7, #28]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3720      	adds	r7, #32
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4a07      	ldr	r2, [pc, #28]	; (800c9e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c9c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	4a06      	ldr	r2, [pc, #24]	; (800c9e8 <vApplicationGetIdleTaskMemory+0x30>)
 800c9ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9d6:	601a      	str	r2, [r3, #0]
}
 800c9d8:	bf00      	nop
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	2000093c 	.word	0x2000093c
 800c9e8:	200009a8 	.word	0x200009a8

0800c9ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	4a07      	ldr	r2, [pc, #28]	; (800ca18 <vApplicationGetTimerTaskMemory+0x2c>)
 800c9fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	4a06      	ldr	r2, [pc, #24]	; (800ca1c <vApplicationGetTimerTaskMemory+0x30>)
 800ca02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca0a:	601a      	str	r2, [r3, #0]
}
 800ca0c:	bf00      	nop
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	20000da8 	.word	0x20000da8
 800ca1c:	20000e14 	.word	0x20000e14

0800ca20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f103 0208 	add.w	r2, r3, #8
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f04f 32ff 	mov.w	r2, #4294967295
 800ca38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f103 0208 	add.w	r2, r3, #8
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f103 0208 	add.w	r2, r3, #8
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca6e:	bf00      	nop
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b085      	sub	sp, #20
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	689a      	ldr	r2, [r3, #8]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]
}
 800cab6:	bf00      	nop
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cac2:	b480      	push	{r7}
 800cac4:	b085      	sub	sp, #20
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad8:	d103      	bne.n	800cae2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e00c      	b.n	800cafc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3308      	adds	r3, #8
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	e002      	b.n	800caf0 <vListInsert+0x2e>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d2f6      	bcs.n	800caea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	685a      	ldr	r2, [r3, #4]
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	683a      	ldr	r2, [r7, #0]
 800cb0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	601a      	str	r2, [r3, #0]
}
 800cb28:	bf00      	nop
 800cb2a:	3714      	adds	r7, #20
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	6892      	ldr	r2, [r2, #8]
 800cb4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	6852      	ldr	r2, [r2, #4]
 800cb54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d103      	bne.n	800cb68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	689a      	ldr	r2, [r3, #8]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	1e5a      	subs	r2, r3, #1
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbb2:	f002 f98f 	bl	800eed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbbe:	68f9      	ldr	r1, [r7, #12]
 800cbc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbc2:	fb01 f303 	mul.w	r3, r1, r3
 800cbc6:	441a      	add	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	68f9      	ldr	r1, [r7, #12]
 800cbe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbe8:	fb01 f303 	mul.w	r3, r1, r3
 800cbec:	441a      	add	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	22ff      	movs	r2, #255	; 0xff
 800cbf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	22ff      	movs	r2, #255	; 0xff
 800cbfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d114      	bne.n	800cc32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d01a      	beq.n	800cc46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	3310      	adds	r3, #16
 800cc14:	4618      	mov	r0, r3
 800cc16:	f001 fa43 	bl	800e0a0 <xTaskRemoveFromEventList>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d012      	beq.n	800cc46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <xQueueGenericReset+0xcc>)
 800cc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	e009      	b.n	800cc46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3310      	adds	r3, #16
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff fef2 	bl	800ca20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3324      	adds	r3, #36	; 0x24
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff feed 	bl	800ca20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc46:	f002 f975 	bl	800ef34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc4a:	2301      	movs	r3, #1
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	e000ed04 	.word	0xe000ed04

0800cc58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08e      	sub	sp, #56	; 0x38
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10a      	bne.n	800cc82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc7e:	bf00      	nop
 800cc80:	e7fe      	b.n	800cc80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10a      	bne.n	800cc9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc9a:	bf00      	nop
 800cc9c:	e7fe      	b.n	800cc9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <xQueueGenericCreateStatic+0x52>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <xQueueGenericCreateStatic+0x56>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e000      	b.n	800ccb0 <xQueueGenericCreateStatic+0x58>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10a      	bne.n	800ccca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	623b      	str	r3, [r7, #32]
}
 800ccc6:	bf00      	nop
 800ccc8:	e7fe      	b.n	800ccc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <xQueueGenericCreateStatic+0x7e>
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <xQueueGenericCreateStatic+0x82>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e000      	b.n	800ccdc <xQueueGenericCreateStatic+0x84>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10a      	bne.n	800ccf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	61fb      	str	r3, [r7, #28]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccf6:	2350      	movs	r3, #80	; 0x50
 800ccf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2b50      	cmp	r3, #80	; 0x50
 800ccfe:	d00a      	beq.n	800cd16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	61bb      	str	r3, [r7, #24]
}
 800cd12:	bf00      	nop
 800cd14:	e7fe      	b.n	800cd14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00d      	beq.n	800cd3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	2201      	movs	r2, #1
 800cd26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	4613      	mov	r3, r2
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f000 f83f 	bl	800cdbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3730      	adds	r7, #48	; 0x30
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08a      	sub	sp, #40	; 0x28
 800cd4c:	af02      	add	r7, sp, #8
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	4613      	mov	r3, r2
 800cd54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	613b      	str	r3, [r7, #16]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	fb02 f303 	mul.w	r3, r2, r3
 800cd7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	3350      	adds	r3, #80	; 0x50
 800cd80:	4618      	mov	r0, r3
 800cd82:	f002 f9c9 	bl	800f118 <pvPortMalloc>
 800cd86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d011      	beq.n	800cdb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	3350      	adds	r3, #80	; 0x50
 800cd96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cda0:	79fa      	ldrb	r2, [r7, #7]
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	4613      	mov	r3, r2
 800cda8:	697a      	ldr	r2, [r7, #20]
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f000 f805 	bl	800cdbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdb2:	69bb      	ldr	r3, [r7, #24]
	}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3720      	adds	r7, #32
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
 800cdc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d103      	bne.n	800cdd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	e002      	b.n	800cdde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cde4:	69bb      	ldr	r3, [r7, #24]
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdea:	2101      	movs	r1, #1
 800cdec:	69b8      	ldr	r0, [r7, #24]
 800cdee:	f7ff fecb 	bl	800cb88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	78fa      	ldrb	r2, [r7, #3]
 800cdf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cdfa:	bf00      	nop
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b08e      	sub	sp, #56	; 0x38
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce12:	2300      	movs	r3, #0
 800ce14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d10a      	bne.n	800ce36 <xQueueGenericSend+0x32>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce32:	bf00      	nop
 800ce34:	e7fe      	b.n	800ce34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d103      	bne.n	800ce44 <xQueueGenericSend+0x40>
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d101      	bne.n	800ce48 <xQueueGenericSend+0x44>
 800ce44:	2301      	movs	r3, #1
 800ce46:	e000      	b.n	800ce4a <xQueueGenericSend+0x46>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <xQueueGenericSend+0x60>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce60:	bf00      	nop
 800ce62:	e7fe      	b.n	800ce62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d103      	bne.n	800ce72 <xQueueGenericSend+0x6e>
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d101      	bne.n	800ce76 <xQueueGenericSend+0x72>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e000      	b.n	800ce78 <xQueueGenericSend+0x74>
 800ce76:	2300      	movs	r3, #0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10a      	bne.n	800ce92 <xQueueGenericSend+0x8e>
	__asm volatile
 800ce7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	623b      	str	r3, [r7, #32]
}
 800ce8e:	bf00      	nop
 800ce90:	e7fe      	b.n	800ce90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce92:	f001 fac3 	bl	800e41c <xTaskGetSchedulerState>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <xQueueGenericSend+0x9e>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <xQueueGenericSend+0xa2>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e000      	b.n	800cea8 <xQueueGenericSend+0xa4>
 800cea6:	2300      	movs	r3, #0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	61fb      	str	r3, [r7, #28]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cec2:	f002 f807 	bl	800eed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cece:	429a      	cmp	r2, r3
 800ced0:	d302      	bcc.n	800ced8 <xQueueGenericSend+0xd4>
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d129      	bne.n	800cf2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	68b9      	ldr	r1, [r7, #8]
 800cedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cede:	f000 fa0b 	bl	800d2f8 <prvCopyDataToQueue>
 800cee2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d010      	beq.n	800cf0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	3324      	adds	r3, #36	; 0x24
 800cef0:	4618      	mov	r0, r3
 800cef2:	f001 f8d5 	bl	800e0a0 <xTaskRemoveFromEventList>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d013      	beq.n	800cf24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cefc:	4b3f      	ldr	r3, [pc, #252]	; (800cffc <xQueueGenericSend+0x1f8>)
 800cefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	e00a      	b.n	800cf24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d007      	beq.n	800cf24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf14:	4b39      	ldr	r3, [pc, #228]	; (800cffc <xQueueGenericSend+0x1f8>)
 800cf16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf24:	f002 f806 	bl	800ef34 <vPortExitCritical>
				return pdPASS;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e063      	b.n	800cff4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d103      	bne.n	800cf3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf32:	f001 ffff 	bl	800ef34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	e05c      	b.n	800cff4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d106      	bne.n	800cf4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf40:	f107 0314 	add.w	r3, r7, #20
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 f90f 	bl	800e168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf4e:	f001 fff1 	bl	800ef34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf52:	f000 fe81 	bl	800dc58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf56:	f001 ffbd 	bl	800eed4 <vPortEnterCritical>
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf60:	b25b      	sxtb	r3, r3
 800cf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf66:	d103      	bne.n	800cf70 <xQueueGenericSend+0x16c>
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf76:	b25b      	sxtb	r3, r3
 800cf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7c:	d103      	bne.n	800cf86 <xQueueGenericSend+0x182>
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf86:	f001 ffd5 	bl	800ef34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf8a:	1d3a      	adds	r2, r7, #4
 800cf8c:	f107 0314 	add.w	r3, r7, #20
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f8fe 	bl	800e194 <xTaskCheckForTimeOut>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d124      	bne.n	800cfe8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfa0:	f000 faa2 	bl	800d4e8 <prvIsQueueFull>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d018      	beq.n	800cfdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	3310      	adds	r3, #16
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f001 f824 	bl	800e000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cfb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfba:	f000 fa2d 	bl	800d418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cfbe:	f000 fe59 	bl	800dc74 <xTaskResumeAll>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f47f af7c 	bne.w	800cec2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cfca:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <xQueueGenericSend+0x1f8>)
 800cfcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfd0:	601a      	str	r2, [r3, #0]
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	e772      	b.n	800cec2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cfdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfde:	f000 fa1b 	bl	800d418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfe2:	f000 fe47 	bl	800dc74 <xTaskResumeAll>
 800cfe6:	e76c      	b.n	800cec2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfea:	f000 fa15 	bl	800d418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfee:	f000 fe41 	bl	800dc74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cff2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3738      	adds	r7, #56	; 0x38
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	e000ed04 	.word	0xe000ed04

0800d000 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b090      	sub	sp, #64	; 0x40
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
 800d00c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10a      	bne.n	800d02e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d02a:	bf00      	nop
 800d02c:	e7fe      	b.n	800d02c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d103      	bne.n	800d03c <xQueueGenericSendFromISR+0x3c>
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <xQueueGenericSendFromISR+0x40>
 800d03c:	2301      	movs	r3, #1
 800d03e:	e000      	b.n	800d042 <xQueueGenericSendFromISR+0x42>
 800d040:	2300      	movs	r3, #0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d058:	bf00      	nop
 800d05a:	e7fe      	b.n	800d05a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d103      	bne.n	800d06a <xQueueGenericSendFromISR+0x6a>
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	2b01      	cmp	r3, #1
 800d068:	d101      	bne.n	800d06e <xQueueGenericSendFromISR+0x6e>
 800d06a:	2301      	movs	r3, #1
 800d06c:	e000      	b.n	800d070 <xQueueGenericSendFromISR+0x70>
 800d06e:	2300      	movs	r3, #0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10a      	bne.n	800d08a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	623b      	str	r3, [r7, #32]
}
 800d086:	bf00      	nop
 800d088:	e7fe      	b.n	800d088 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d08a:	f002 f805 	bl	800f098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d08e:	f3ef 8211 	mrs	r2, BASEPRI
 800d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	61fa      	str	r2, [r7, #28]
 800d0a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d0a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d302      	bcc.n	800d0bc <xQueueGenericSendFromISR+0xbc>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d12f      	bne.n	800d11c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	68b9      	ldr	r1, [r7, #8]
 800d0d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0d2:	f000 f911 	bl	800d2f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0de:	d112      	bne.n	800d106 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d016      	beq.n	800d116 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ea:	3324      	adds	r3, #36	; 0x24
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 ffd7 	bl	800e0a0 <xTaskRemoveFromEventList>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00e      	beq.n	800d116 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00b      	beq.n	800d116 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	e007      	b.n	800d116 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d106:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d10a:	3301      	adds	r3, #1
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	b25a      	sxtb	r2, r3
 800d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d116:	2301      	movs	r3, #1
 800d118:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d11a:	e001      	b.n	800d120 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d122:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d12a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3740      	adds	r7, #64	; 0x40
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b08c      	sub	sp, #48	; 0x30
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d144:	2300      	movs	r3, #0
 800d146:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10a      	bne.n	800d168 <xQueueReceive+0x30>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	623b      	str	r3, [r7, #32]
}
 800d164:	bf00      	nop
 800d166:	e7fe      	b.n	800d166 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <xQueueReceive+0x3e>
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <xQueueReceive+0x42>
 800d176:	2301      	movs	r3, #1
 800d178:	e000      	b.n	800d17c <xQueueReceive+0x44>
 800d17a:	2300      	movs	r3, #0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <xQueueReceive+0x5e>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	61fb      	str	r3, [r7, #28]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d196:	f001 f941 	bl	800e41c <xTaskGetSchedulerState>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <xQueueReceive+0x6e>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <xQueueReceive+0x72>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e000      	b.n	800d1ac <xQueueReceive+0x74>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <xQueueReceive+0x8e>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	61bb      	str	r3, [r7, #24]
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1c6:	f001 fe85 	bl	800eed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d01f      	beq.n	800d216 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1d6:	68b9      	ldr	r1, [r7, #8]
 800d1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1da:	f000 f8f7 	bl	800d3cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	1e5a      	subs	r2, r3, #1
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00f      	beq.n	800d20e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f0:	3310      	adds	r3, #16
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f000 ff54 	bl	800e0a0 <xTaskRemoveFromEventList>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d007      	beq.n	800d20e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1fe:	4b3d      	ldr	r3, [pc, #244]	; (800d2f4 <xQueueReceive+0x1bc>)
 800d200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d20e:	f001 fe91 	bl	800ef34 <vPortExitCritical>
				return pdPASS;
 800d212:	2301      	movs	r3, #1
 800d214:	e069      	b.n	800d2ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d103      	bne.n	800d224 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d21c:	f001 fe8a 	bl	800ef34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d220:	2300      	movs	r3, #0
 800d222:	e062      	b.n	800d2ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d106      	bne.n	800d238 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d22a:	f107 0310 	add.w	r3, r7, #16
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 ff9a 	bl	800e168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d234:	2301      	movs	r3, #1
 800d236:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d238:	f001 fe7c 	bl	800ef34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d23c:	f000 fd0c 	bl	800dc58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d240:	f001 fe48 	bl	800eed4 <vPortEnterCritical>
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d24a:	b25b      	sxtb	r3, r3
 800d24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d250:	d103      	bne.n	800d25a <xQueueReceive+0x122>
 800d252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d260:	b25b      	sxtb	r3, r3
 800d262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d266:	d103      	bne.n	800d270 <xQueueReceive+0x138>
 800d268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d270:	f001 fe60 	bl	800ef34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d274:	1d3a      	adds	r2, r7, #4
 800d276:	f107 0310 	add.w	r3, r7, #16
 800d27a:	4611      	mov	r1, r2
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 ff89 	bl	800e194 <xTaskCheckForTimeOut>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	d123      	bne.n	800d2d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d28a:	f000 f917 	bl	800d4bc <prvIsQueueEmpty>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d017      	beq.n	800d2c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	3324      	adds	r3, #36	; 0x24
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	4611      	mov	r1, r2
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 feaf 	bl	800e000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a4:	f000 f8b8 	bl	800d418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2a8:	f000 fce4 	bl	800dc74 <xTaskResumeAll>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d189      	bne.n	800d1c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d2b2:	4b10      	ldr	r3, [pc, #64]	; (800d2f4 <xQueueReceive+0x1bc>)
 800d2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	e780      	b.n	800d1c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2c6:	f000 f8a7 	bl	800d418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ca:	f000 fcd3 	bl	800dc74 <xTaskResumeAll>
 800d2ce:	e77a      	b.n	800d1c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d2:	f000 f8a1 	bl	800d418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2d6:	f000 fccd 	bl	800dc74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2dc:	f000 f8ee 	bl	800d4bc <prvIsQueueEmpty>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f43f af6f 	beq.w	800d1c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3730      	adds	r7, #48	; 0x30
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	e000ed04 	.word	0xe000ed04

0800d2f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d304:	2300      	movs	r3, #0
 800d306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	2b00      	cmp	r3, #0
 800d314:	d10d      	bne.n	800d332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d14d      	bne.n	800d3ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	4618      	mov	r0, r3
 800d324:	f001 f898 	bl	800e458 <xTaskPriorityDisinherit>
 800d328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	609a      	str	r2, [r3, #8]
 800d330:	e043      	b.n	800d3ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d119      	bne.n	800d36c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6858      	ldr	r0, [r3, #4]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d340:	461a      	mov	r2, r3
 800d342:	68b9      	ldr	r1, [r7, #8]
 800d344:	f002 fdf6 	bl	800ff34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d350:	441a      	add	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d32b      	bcc.n	800d3ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	605a      	str	r2, [r3, #4]
 800d36a:	e026      	b.n	800d3ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	68d8      	ldr	r0, [r3, #12]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d374:	461a      	mov	r2, r3
 800d376:	68b9      	ldr	r1, [r7, #8]
 800d378:	f002 fddc 	bl	800ff34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	68da      	ldr	r2, [r3, #12]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d384:	425b      	negs	r3, r3
 800d386:	441a      	add	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	68da      	ldr	r2, [r3, #12]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d207      	bcs.n	800d3a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	689a      	ldr	r2, [r3, #8]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a0:	425b      	negs	r3, r3
 800d3a2:	441a      	add	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d105      	bne.n	800d3ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d002      	beq.n	800d3ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d3c2:	697b      	ldr	r3, [r7, #20]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3718      	adds	r7, #24
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d018      	beq.n	800d410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	68da      	ldr	r2, [r3, #12]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e6:	441a      	add	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	68da      	ldr	r2, [r3, #12]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d303      	bcc.n	800d400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	68d9      	ldr	r1, [r3, #12]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d408:	461a      	mov	r2, r3
 800d40a:	6838      	ldr	r0, [r7, #0]
 800d40c:	f002 fd92 	bl	800ff34 <memcpy>
	}
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d420:	f001 fd58 	bl	800eed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d42a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d42c:	e011      	b.n	800d452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d432:	2b00      	cmp	r3, #0
 800d434:	d012      	beq.n	800d45c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3324      	adds	r3, #36	; 0x24
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 fe30 	bl	800e0a0 <xTaskRemoveFromEventList>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d446:	f000 ff07 	bl	800e258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	3b01      	subs	r3, #1
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d456:	2b00      	cmp	r3, #0
 800d458:	dce9      	bgt.n	800d42e <prvUnlockQueue+0x16>
 800d45a:	e000      	b.n	800d45e <prvUnlockQueue+0x46>
					break;
 800d45c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	22ff      	movs	r2, #255	; 0xff
 800d462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d466:	f001 fd65 	bl	800ef34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d46a:	f001 fd33 	bl	800eed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d476:	e011      	b.n	800d49c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d012      	beq.n	800d4a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	3310      	adds	r3, #16
 800d484:	4618      	mov	r0, r3
 800d486:	f000 fe0b 	bl	800e0a0 <xTaskRemoveFromEventList>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d001      	beq.n	800d494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d490:	f000 fee2 	bl	800e258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d494:	7bbb      	ldrb	r3, [r7, #14]
 800d496:	3b01      	subs	r3, #1
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d49c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	dce9      	bgt.n	800d478 <prvUnlockQueue+0x60>
 800d4a4:	e000      	b.n	800d4a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d4a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	22ff      	movs	r2, #255	; 0xff
 800d4ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d4b0:	f001 fd40 	bl	800ef34 <vPortExitCritical>
}
 800d4b4:	bf00      	nop
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4c4:	f001 fd06 	bl	800eed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d102      	bne.n	800d4d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	e001      	b.n	800d4da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4da:	f001 fd2b 	bl	800ef34 <vPortExitCritical>

	return xReturn;
 800d4de:	68fb      	ldr	r3, [r7, #12]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4f0:	f001 fcf0 	bl	800eed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d102      	bne.n	800d506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d500:	2301      	movs	r3, #1
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e001      	b.n	800d50a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d506:	2300      	movs	r3, #0
 800d508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d50a:	f001 fd13 	bl	800ef34 <vPortExitCritical>

	return xReturn;
 800d50e:	68fb      	ldr	r3, [r7, #12]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d522:	2300      	movs	r3, #0
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	e014      	b.n	800d552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d528:	4a0f      	ldr	r2, [pc, #60]	; (800d568 <vQueueAddToRegistry+0x50>)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10b      	bne.n	800d54c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d534:	490c      	ldr	r1, [pc, #48]	; (800d568 <vQueueAddToRegistry+0x50>)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d53e:	4a0a      	ldr	r2, [pc, #40]	; (800d568 <vQueueAddToRegistry+0x50>)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	4413      	add	r3, r2
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d54a:	e006      	b.n	800d55a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	3301      	adds	r3, #1
 800d550:	60fb      	str	r3, [r7, #12]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b07      	cmp	r3, #7
 800d556:	d9e7      	bls.n	800d528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d558:	bf00      	nop
 800d55a:	bf00      	nop
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	20001614 	.word	0x20001614

0800d56c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d57c:	f001 fcaa 	bl	800eed4 <vPortEnterCritical>
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d586:	b25b      	sxtb	r3, r3
 800d588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58c:	d103      	bne.n	800d596 <vQueueWaitForMessageRestricted+0x2a>
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	2200      	movs	r2, #0
 800d592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d59c:	b25b      	sxtb	r3, r3
 800d59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a2:	d103      	bne.n	800d5ac <vQueueWaitForMessageRestricted+0x40>
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5ac:	f001 fcc2 	bl	800ef34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d106      	bne.n	800d5c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	3324      	adds	r3, #36	; 0x24
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	68b9      	ldr	r1, [r7, #8]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f000 fd41 	bl	800e048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d5c6:	6978      	ldr	r0, [r7, #20]
 800d5c8:	f7ff ff26 	bl	800d418 <prvUnlockQueue>
	}
 800d5cc:	bf00      	nop
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b08e      	sub	sp, #56	; 0x38
 800d5d8:	af04      	add	r7, sp, #16
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ec:	f383 8811 	msr	BASEPRI, r3
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	623b      	str	r3, [r7, #32]
}
 800d5fa:	bf00      	nop
 800d5fc:	e7fe      	b.n	800d5fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10a      	bne.n	800d61a <xTaskCreateStatic+0x46>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	61fb      	str	r3, [r7, #28]
}
 800d616:	bf00      	nop
 800d618:	e7fe      	b.n	800d618 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d61a:	236c      	movs	r3, #108	; 0x6c
 800d61c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	2b6c      	cmp	r3, #108	; 0x6c
 800d622:	d00a      	beq.n	800d63a <xTaskCreateStatic+0x66>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	61bb      	str	r3, [r7, #24]
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d63a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d01e      	beq.n	800d680 <xTaskCreateStatic+0xac>
 800d642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01b      	beq.n	800d680 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d650:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	2202      	movs	r2, #2
 800d656:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d65a:	2300      	movs	r3, #0
 800d65c:	9303      	str	r3, [sp, #12]
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	9302      	str	r3, [sp, #8]
 800d662:	f107 0314 	add.w	r3, r7, #20
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	68b9      	ldr	r1, [r7, #8]
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 f850 	bl	800d718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d67a:	f000 f8dd 	bl	800d838 <prvAddNewTaskToReadyList>
 800d67e:	e001      	b.n	800d684 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d680:	2300      	movs	r3, #0
 800d682:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d684:	697b      	ldr	r3, [r7, #20]
	}
 800d686:	4618      	mov	r0, r3
 800d688:	3728      	adds	r7, #40	; 0x28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b08c      	sub	sp, #48	; 0x30
 800d692:	af04      	add	r7, sp, #16
 800d694:	60f8      	str	r0, [r7, #12]
 800d696:	60b9      	str	r1, [r7, #8]
 800d698:	603b      	str	r3, [r7, #0]
 800d69a:	4613      	mov	r3, r2
 800d69c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f001 fd38 	bl	800f118 <pvPortMalloc>
 800d6a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00e      	beq.n	800d6ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6b0:	206c      	movs	r0, #108	; 0x6c
 800d6b2:	f001 fd31 	bl	800f118 <pvPortMalloc>
 800d6b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	631a      	str	r2, [r3, #48]	; 0x30
 800d6c4:	e005      	b.n	800d6d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6c6:	6978      	ldr	r0, [r7, #20]
 800d6c8:	f001 fdf2 	bl	800f2b0 <vPortFree>
 800d6cc:	e001      	b.n	800d6d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d017      	beq.n	800d708 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6e0:	88fa      	ldrh	r2, [r7, #6]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	9303      	str	r3, [sp, #12]
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	9302      	str	r3, [sp, #8]
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	68b9      	ldr	r1, [r7, #8]
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f000 f80e 	bl	800d718 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6fc:	69f8      	ldr	r0, [r7, #28]
 800d6fe:	f000 f89b 	bl	800d838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d702:	2301      	movs	r3, #1
 800d704:	61bb      	str	r3, [r7, #24]
 800d706:	e002      	b.n	800d70e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d708:	f04f 33ff 	mov.w	r3, #4294967295
 800d70c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d70e:	69bb      	ldr	r3, [r7, #24]
	}
 800d710:	4618      	mov	r0, r3
 800d712:	3720      	adds	r7, #32
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
 800d724:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	461a      	mov	r2, r3
 800d730:	21a5      	movs	r1, #165	; 0xa5
 800d732:	f002 fc0d 	bl	800ff50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d740:	3b01      	subs	r3, #1
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	f023 0307 	bic.w	r3, r3, #7
 800d74e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00a      	beq.n	800d770 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75e:	f383 8811 	msr	BASEPRI, r3
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	617b      	str	r3, [r7, #20]
}
 800d76c:	bf00      	nop
 800d76e:	e7fe      	b.n	800d76e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d01f      	beq.n	800d7b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d776:	2300      	movs	r3, #0
 800d778:	61fb      	str	r3, [r7, #28]
 800d77a:	e012      	b.n	800d7a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	4413      	add	r3, r2
 800d782:	7819      	ldrb	r1, [r3, #0]
 800d784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	4413      	add	r3, r2
 800d78a:	3334      	adds	r3, #52	; 0x34
 800d78c:	460a      	mov	r2, r1
 800d78e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	4413      	add	r3, r2
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d006      	beq.n	800d7aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	61fb      	str	r3, [r7, #28]
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2b1d      	cmp	r3, #29
 800d7a6:	d9e9      	bls.n	800d77c <prvInitialiseNewTask+0x64>
 800d7a8:	e000      	b.n	800d7ac <prvInitialiseNewTask+0x94>
			{
				break;
 800d7aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800d7b4:	e003      	b.n	800d7be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	2b37      	cmp	r3, #55	; 0x37
 800d7c2:	d901      	bls.n	800d7c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7c4:	2337      	movs	r3, #55	; 0x37
 800d7c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7d2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	3304      	adds	r3, #4
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff f93e 	bl	800ca60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	3318      	adds	r3, #24
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff f939 	bl	800ca60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d802:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	2200      	movs	r2, #0
 800d808:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	68f9      	ldr	r1, [r7, #12]
 800d816:	69b8      	ldr	r0, [r7, #24]
 800d818:	f001 fa2e 	bl	800ec78 <pxPortInitialiseStack>
 800d81c:	4602      	mov	r2, r0
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d82c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d82e:	bf00      	nop
 800d830:	3720      	adds	r7, #32
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
	...

0800d838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d840:	f001 fb48 	bl	800eed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d844:	4b2d      	ldr	r3, [pc, #180]	; (800d8fc <prvAddNewTaskToReadyList+0xc4>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3301      	adds	r3, #1
 800d84a:	4a2c      	ldr	r2, [pc, #176]	; (800d8fc <prvAddNewTaskToReadyList+0xc4>)
 800d84c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d84e:	4b2c      	ldr	r3, [pc, #176]	; (800d900 <prvAddNewTaskToReadyList+0xc8>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d109      	bne.n	800d86a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d856:	4a2a      	ldr	r2, [pc, #168]	; (800d900 <prvAddNewTaskToReadyList+0xc8>)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d85c:	4b27      	ldr	r3, [pc, #156]	; (800d8fc <prvAddNewTaskToReadyList+0xc4>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d110      	bne.n	800d886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d864:	f000 fd1c 	bl	800e2a0 <prvInitialiseTaskLists>
 800d868:	e00d      	b.n	800d886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d86a:	4b26      	ldr	r3, [pc, #152]	; (800d904 <prvAddNewTaskToReadyList+0xcc>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d109      	bne.n	800d886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d872:	4b23      	ldr	r3, [pc, #140]	; (800d900 <prvAddNewTaskToReadyList+0xc8>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d802      	bhi.n	800d886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d880:	4a1f      	ldr	r2, [pc, #124]	; (800d900 <prvAddNewTaskToReadyList+0xc8>)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d886:	4b20      	ldr	r3, [pc, #128]	; (800d908 <prvAddNewTaskToReadyList+0xd0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	4a1e      	ldr	r2, [pc, #120]	; (800d908 <prvAddNewTaskToReadyList+0xd0>)
 800d88e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d890:	4b1d      	ldr	r3, [pc, #116]	; (800d908 <prvAddNewTaskToReadyList+0xd0>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89c:	4b1b      	ldr	r3, [pc, #108]	; (800d90c <prvAddNewTaskToReadyList+0xd4>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d903      	bls.n	800d8ac <prvAddNewTaskToReadyList+0x74>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a8:	4a18      	ldr	r2, [pc, #96]	; (800d90c <prvAddNewTaskToReadyList+0xd4>)
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4413      	add	r3, r2
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4a15      	ldr	r2, [pc, #84]	; (800d910 <prvAddNewTaskToReadyList+0xd8>)
 800d8ba:	441a      	add	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	3304      	adds	r3, #4
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	f7ff f8d9 	bl	800ca7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8c8:	f001 fb34 	bl	800ef34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8cc:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <prvAddNewTaskToReadyList+0xcc>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00e      	beq.n	800d8f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8d4:	4b0a      	ldr	r3, [pc, #40]	; (800d900 <prvAddNewTaskToReadyList+0xc8>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d207      	bcs.n	800d8f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <prvAddNewTaskToReadyList+0xdc>)
 800d8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20001b28 	.word	0x20001b28
 800d900:	20001654 	.word	0x20001654
 800d904:	20001b34 	.word	0x20001b34
 800d908:	20001b44 	.word	0x20001b44
 800d90c:	20001b30 	.word	0x20001b30
 800d910:	20001658 	.word	0x20001658
 800d914:	e000ed04 	.word	0xe000ed04

0800d918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d920:	2300      	movs	r3, #0
 800d922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d017      	beq.n	800d95a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d92a:	4b13      	ldr	r3, [pc, #76]	; (800d978 <vTaskDelay+0x60>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00a      	beq.n	800d948 <vTaskDelay+0x30>
	__asm volatile
 800d932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	60bb      	str	r3, [r7, #8]
}
 800d944:	bf00      	nop
 800d946:	e7fe      	b.n	800d946 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d948:	f000 f986 	bl	800dc58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d94c:	2100      	movs	r1, #0
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fdf0 	bl	800e534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d954:	f000 f98e 	bl	800dc74 <xTaskResumeAll>
 800d958:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d107      	bne.n	800d970 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d960:	4b06      	ldr	r3, [pc, #24]	; (800d97c <vTaskDelay+0x64>)
 800d962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d970:	bf00      	nop
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	20001b50 	.word	0x20001b50
 800d97c:	e000ed04 	.word	0xe000ed04

0800d980 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d988:	f001 faa4 	bl	800eed4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d102      	bne.n	800d998 <vTaskSuspend+0x18>
 800d992:	4b30      	ldr	r3, [pc, #192]	; (800da54 <vTaskSuspend+0xd4>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	e000      	b.n	800d99a <vTaskSuspend+0x1a>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7ff f8c7 	bl	800cb34 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d004      	beq.n	800d9b8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	3318      	adds	r3, #24
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7ff f8be 	bl	800cb34 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4826      	ldr	r0, [pc, #152]	; (800da58 <vTaskSuspend+0xd8>)
 800d9c0:	f7ff f85b 	bl	800ca7a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d103      	bne.n	800d9d8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d9d8:	f001 faac 	bl	800ef34 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d9dc:	4b1f      	ldr	r3, [pc, #124]	; (800da5c <vTaskSuspend+0xdc>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d005      	beq.n	800d9f0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d9e4:	f001 fa76 	bl	800eed4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d9e8:	f000 fcf8 	bl	800e3dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d9ec:	f001 faa2 	bl	800ef34 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d9f0:	4b18      	ldr	r3, [pc, #96]	; (800da54 <vTaskSuspend+0xd4>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d127      	bne.n	800da4a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800d9fa:	4b18      	ldr	r3, [pc, #96]	; (800da5c <vTaskSuspend+0xdc>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d017      	beq.n	800da32 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800da02:	4b17      	ldr	r3, [pc, #92]	; (800da60 <vTaskSuspend+0xe0>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00a      	beq.n	800da20 <vTaskSuspend+0xa0>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	60bb      	str	r3, [r7, #8]
}
 800da1c:	bf00      	nop
 800da1e:	e7fe      	b.n	800da1e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800da20:	4b10      	ldr	r3, [pc, #64]	; (800da64 <vTaskSuspend+0xe4>)
 800da22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da26:	601a      	str	r2, [r3, #0]
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da30:	e00b      	b.n	800da4a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800da32:	4b09      	ldr	r3, [pc, #36]	; (800da58 <vTaskSuspend+0xd8>)
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <vTaskSuspend+0xe8>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d103      	bne.n	800da46 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800da3e:	4b05      	ldr	r3, [pc, #20]	; (800da54 <vTaskSuspend+0xd4>)
 800da40:	2200      	movs	r2, #0
 800da42:	601a      	str	r2, [r3, #0]
	}
 800da44:	e001      	b.n	800da4a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800da46:	f000 fa7d 	bl	800df44 <vTaskSwitchContext>
	}
 800da4a:	bf00      	nop
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	20001654 	.word	0x20001654
 800da58:	20001b14 	.word	0x20001b14
 800da5c:	20001b34 	.word	0x20001b34
 800da60:	20001b50 	.word	0x20001b50
 800da64:	e000ed04 	.word	0xe000ed04
 800da68:	20001b28 	.word	0x20001b28

0800da6c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800da6c:	b480      	push	{r7}
 800da6e:	b087      	sub	sp, #28
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800da74:	2300      	movs	r3, #0
 800da76:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10a      	bne.n	800da98 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	60fb      	str	r3, [r7, #12]
}
 800da94:	bf00      	nop
 800da96:	e7fe      	b.n	800da96 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	4a0a      	ldr	r2, [pc, #40]	; (800dac8 <prvTaskIsTaskSuspended+0x5c>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d10a      	bne.n	800dab8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa6:	4a09      	ldr	r2, [pc, #36]	; (800dacc <prvTaskIsTaskSuspended+0x60>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d005      	beq.n	800dab8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d101      	bne.n	800dab8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800dab4:	2301      	movs	r3, #1
 800dab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dab8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800daba:	4618      	mov	r0, r3
 800dabc:	371c      	adds	r7, #28
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	20001b14 	.word	0x20001b14
 800dacc:	20001ae8 	.word	0x20001ae8

0800dad0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10a      	bne.n	800daf8 <vTaskResume+0x28>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	60bb      	str	r3, [r7, #8]
}
 800daf4:	bf00      	nop
 800daf6:	e7fe      	b.n	800daf6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800daf8:	4b20      	ldr	r3, [pc, #128]	; (800db7c <vTaskResume+0xac>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d038      	beq.n	800db74 <vTaskResume+0xa4>
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d035      	beq.n	800db74 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800db08:	f001 f9e4 	bl	800eed4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7ff ffad 	bl	800da6c <prvTaskIsTaskSuspended>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d02b      	beq.n	800db70 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff f809 	bl	800cb34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db26:	4b16      	ldr	r3, [pc, #88]	; (800db80 <vTaskResume+0xb0>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d903      	bls.n	800db36 <vTaskResume+0x66>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db32:	4a13      	ldr	r2, [pc, #76]	; (800db80 <vTaskResume+0xb0>)
 800db34:	6013      	str	r3, [r2, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3a:	4613      	mov	r3, r2
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4413      	add	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4a10      	ldr	r2, [pc, #64]	; (800db84 <vTaskResume+0xb4>)
 800db44:	441a      	add	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	3304      	adds	r3, #4
 800db4a:	4619      	mov	r1, r3
 800db4c:	4610      	mov	r0, r2
 800db4e:	f7fe ff94 	bl	800ca7a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db56:	4b09      	ldr	r3, [pc, #36]	; (800db7c <vTaskResume+0xac>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d307      	bcc.n	800db70 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800db60:	4b09      	ldr	r3, [pc, #36]	; (800db88 <vTaskResume+0xb8>)
 800db62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db66:	601a      	str	r2, [r3, #0]
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800db70:	f001 f9e0 	bl	800ef34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db74:	bf00      	nop
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20001654 	.word	0x20001654
 800db80:	20001b30 	.word	0x20001b30
 800db84:	20001658 	.word	0x20001658
 800db88:	e000ed04 	.word	0xe000ed04

0800db8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b08a      	sub	sp, #40	; 0x28
 800db90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db92:	2300      	movs	r3, #0
 800db94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db9a:	463a      	mov	r2, r7
 800db9c:	1d39      	adds	r1, r7, #4
 800db9e:	f107 0308 	add.w	r3, r7, #8
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe ff08 	bl	800c9b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	9202      	str	r2, [sp, #8]
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	460a      	mov	r2, r1
 800dbba:	4921      	ldr	r1, [pc, #132]	; (800dc40 <vTaskStartScheduler+0xb4>)
 800dbbc:	4821      	ldr	r0, [pc, #132]	; (800dc44 <vTaskStartScheduler+0xb8>)
 800dbbe:	f7ff fd09 	bl	800d5d4 <xTaskCreateStatic>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	4a20      	ldr	r2, [pc, #128]	; (800dc48 <vTaskStartScheduler+0xbc>)
 800dbc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dbc8:	4b1f      	ldr	r3, [pc, #124]	; (800dc48 <vTaskStartScheduler+0xbc>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	617b      	str	r3, [r7, #20]
 800dbd4:	e001      	b.n	800dbda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d102      	bne.n	800dbe6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dbe0:	f000 fcfc 	bl	800e5dc <xTimerCreateTimerTask>
 800dbe4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d116      	bne.n	800dc1a <vTaskStartScheduler+0x8e>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	613b      	str	r3, [r7, #16]
}
 800dbfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc00:	4b12      	ldr	r3, [pc, #72]	; (800dc4c <vTaskStartScheduler+0xc0>)
 800dc02:	f04f 32ff 	mov.w	r2, #4294967295
 800dc06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc08:	4b11      	ldr	r3, [pc, #68]	; (800dc50 <vTaskStartScheduler+0xc4>)
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc0e:	4b11      	ldr	r3, [pc, #68]	; (800dc54 <vTaskStartScheduler+0xc8>)
 800dc10:	2200      	movs	r2, #0
 800dc12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc14:	f001 f8bc 	bl	800ed90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc18:	e00e      	b.n	800dc38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc20:	d10a      	bne.n	800dc38 <vTaskStartScheduler+0xac>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	60fb      	str	r3, [r7, #12]
}
 800dc34:	bf00      	nop
 800dc36:	e7fe      	b.n	800dc36 <vTaskStartScheduler+0xaa>
}
 800dc38:	bf00      	nop
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	08010c74 	.word	0x08010c74
 800dc44:	0800e271 	.word	0x0800e271
 800dc48:	20001b4c 	.word	0x20001b4c
 800dc4c:	20001b48 	.word	0x20001b48
 800dc50:	20001b34 	.word	0x20001b34
 800dc54:	20001b2c 	.word	0x20001b2c

0800dc58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc58:	b480      	push	{r7}
 800dc5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dc5c:	4b04      	ldr	r3, [pc, #16]	; (800dc70 <vTaskSuspendAll+0x18>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	3301      	adds	r3, #1
 800dc62:	4a03      	ldr	r2, [pc, #12]	; (800dc70 <vTaskSuspendAll+0x18>)
 800dc64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dc66:	bf00      	nop
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	20001b50 	.word	0x20001b50

0800dc74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc82:	4b42      	ldr	r3, [pc, #264]	; (800dd8c <xTaskResumeAll+0x118>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10a      	bne.n	800dca0 <xTaskResumeAll+0x2c>
	__asm volatile
 800dc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	603b      	str	r3, [r7, #0]
}
 800dc9c:	bf00      	nop
 800dc9e:	e7fe      	b.n	800dc9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dca0:	f001 f918 	bl	800eed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dca4:	4b39      	ldr	r3, [pc, #228]	; (800dd8c <xTaskResumeAll+0x118>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	4a38      	ldr	r2, [pc, #224]	; (800dd8c <xTaskResumeAll+0x118>)
 800dcac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcae:	4b37      	ldr	r3, [pc, #220]	; (800dd8c <xTaskResumeAll+0x118>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d162      	bne.n	800dd7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcb6:	4b36      	ldr	r3, [pc, #216]	; (800dd90 <xTaskResumeAll+0x11c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d05e      	beq.n	800dd7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcbe:	e02f      	b.n	800dd20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcc0:	4b34      	ldr	r3, [pc, #208]	; (800dd94 <xTaskResumeAll+0x120>)
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	3318      	adds	r3, #24
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fe ff31 	bl	800cb34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe ff2c 	bl	800cb34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce0:	4b2d      	ldr	r3, [pc, #180]	; (800dd98 <xTaskResumeAll+0x124>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d903      	bls.n	800dcf0 <xTaskResumeAll+0x7c>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcec:	4a2a      	ldr	r2, [pc, #168]	; (800dd98 <xTaskResumeAll+0x124>)
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	4a27      	ldr	r2, [pc, #156]	; (800dd9c <xTaskResumeAll+0x128>)
 800dcfe:	441a      	add	r2, r3
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	3304      	adds	r3, #4
 800dd04:	4619      	mov	r1, r3
 800dd06:	4610      	mov	r0, r2
 800dd08:	f7fe feb7 	bl	800ca7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd10:	4b23      	ldr	r3, [pc, #140]	; (800dda0 <xTaskResumeAll+0x12c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d302      	bcc.n	800dd20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dd1a:	4b22      	ldr	r3, [pc, #136]	; (800dda4 <xTaskResumeAll+0x130>)
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd20:	4b1c      	ldr	r3, [pc, #112]	; (800dd94 <xTaskResumeAll+0x120>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d1cb      	bne.n	800dcc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd2e:	f000 fb55 	bl	800e3dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dd32:	4b1d      	ldr	r3, [pc, #116]	; (800dda8 <xTaskResumeAll+0x134>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d010      	beq.n	800dd60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd3e:	f000 f847 	bl	800ddd0 <xTaskIncrementTick>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dd48:	4b16      	ldr	r3, [pc, #88]	; (800dda4 <xTaskResumeAll+0x130>)
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3b01      	subs	r3, #1
 800dd52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1f1      	bne.n	800dd3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dd5a:	4b13      	ldr	r3, [pc, #76]	; (800dda8 <xTaskResumeAll+0x134>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd60:	4b10      	ldr	r3, [pc, #64]	; (800dda4 <xTaskResumeAll+0x130>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d009      	beq.n	800dd7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd6c:	4b0f      	ldr	r3, [pc, #60]	; (800ddac <xTaskResumeAll+0x138>)
 800dd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd72:	601a      	str	r2, [r3, #0]
 800dd74:	f3bf 8f4f 	dsb	sy
 800dd78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd7c:	f001 f8da 	bl	800ef34 <vPortExitCritical>

	return xAlreadyYielded;
 800dd80:	68bb      	ldr	r3, [r7, #8]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20001b50 	.word	0x20001b50
 800dd90:	20001b28 	.word	0x20001b28
 800dd94:	20001ae8 	.word	0x20001ae8
 800dd98:	20001b30 	.word	0x20001b30
 800dd9c:	20001658 	.word	0x20001658
 800dda0:	20001654 	.word	0x20001654
 800dda4:	20001b3c 	.word	0x20001b3c
 800dda8:	20001b38 	.word	0x20001b38
 800ddac:	e000ed04 	.word	0xe000ed04

0800ddb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ddb6:	4b05      	ldr	r3, [pc, #20]	; (800ddcc <xTaskGetTickCount+0x1c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ddbc:	687b      	ldr	r3, [r7, #4]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	370c      	adds	r7, #12
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	20001b2c 	.word	0x20001b2c

0800ddd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddda:	4b4f      	ldr	r3, [pc, #316]	; (800df18 <xTaskIncrementTick+0x148>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f040 808f 	bne.w	800df02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dde4:	4b4d      	ldr	r3, [pc, #308]	; (800df1c <xTaskIncrementTick+0x14c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	3301      	adds	r3, #1
 800ddea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ddec:	4a4b      	ldr	r2, [pc, #300]	; (800df1c <xTaskIncrementTick+0x14c>)
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d120      	bne.n	800de3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ddf8:	4b49      	ldr	r3, [pc, #292]	; (800df20 <xTaskIncrementTick+0x150>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00a      	beq.n	800de18 <xTaskIncrementTick+0x48>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	603b      	str	r3, [r7, #0]
}
 800de14:	bf00      	nop
 800de16:	e7fe      	b.n	800de16 <xTaskIncrementTick+0x46>
 800de18:	4b41      	ldr	r3, [pc, #260]	; (800df20 <xTaskIncrementTick+0x150>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	4b41      	ldr	r3, [pc, #260]	; (800df24 <xTaskIncrementTick+0x154>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a3f      	ldr	r2, [pc, #252]	; (800df20 <xTaskIncrementTick+0x150>)
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	4a3f      	ldr	r2, [pc, #252]	; (800df24 <xTaskIncrementTick+0x154>)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6013      	str	r3, [r2, #0]
 800de2c:	4b3e      	ldr	r3, [pc, #248]	; (800df28 <xTaskIncrementTick+0x158>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3301      	adds	r3, #1
 800de32:	4a3d      	ldr	r2, [pc, #244]	; (800df28 <xTaskIncrementTick+0x158>)
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	f000 fad1 	bl	800e3dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de3a:	4b3c      	ldr	r3, [pc, #240]	; (800df2c <xTaskIncrementTick+0x15c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	693a      	ldr	r2, [r7, #16]
 800de40:	429a      	cmp	r2, r3
 800de42:	d349      	bcc.n	800ded8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de44:	4b36      	ldr	r3, [pc, #216]	; (800df20 <xTaskIncrementTick+0x150>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d104      	bne.n	800de58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de4e:	4b37      	ldr	r3, [pc, #220]	; (800df2c <xTaskIncrementTick+0x15c>)
 800de50:	f04f 32ff 	mov.w	r2, #4294967295
 800de54:	601a      	str	r2, [r3, #0]
					break;
 800de56:	e03f      	b.n	800ded8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de58:	4b31      	ldr	r3, [pc, #196]	; (800df20 <xTaskIncrementTick+0x150>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d203      	bcs.n	800de78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de70:	4a2e      	ldr	r2, [pc, #184]	; (800df2c <xTaskIncrementTick+0x15c>)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de76:	e02f      	b.n	800ded8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	3304      	adds	r3, #4
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fe fe59 	bl	800cb34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de86:	2b00      	cmp	r3, #0
 800de88:	d004      	beq.n	800de94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	3318      	adds	r3, #24
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fe50 	bl	800cb34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4b25      	ldr	r3, [pc, #148]	; (800df30 <xTaskIncrementTick+0x160>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d903      	bls.n	800dea8 <xTaskIncrementTick+0xd8>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	4a22      	ldr	r2, [pc, #136]	; (800df30 <xTaskIncrementTick+0x160>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a1f      	ldr	r2, [pc, #124]	; (800df34 <xTaskIncrementTick+0x164>)
 800deb6:	441a      	add	r2, r3
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fe fddb 	bl	800ca7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	4b1b      	ldr	r3, [pc, #108]	; (800df38 <xTaskIncrementTick+0x168>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dece:	429a      	cmp	r2, r3
 800ded0:	d3b8      	bcc.n	800de44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ded2:	2301      	movs	r3, #1
 800ded4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ded6:	e7b5      	b.n	800de44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ded8:	4b17      	ldr	r3, [pc, #92]	; (800df38 <xTaskIncrementTick+0x168>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dede:	4915      	ldr	r1, [pc, #84]	; (800df34 <xTaskIncrementTick+0x164>)
 800dee0:	4613      	mov	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	440b      	add	r3, r1
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d901      	bls.n	800def4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800def0:	2301      	movs	r3, #1
 800def2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800def4:	4b11      	ldr	r3, [pc, #68]	; (800df3c <xTaskIncrementTick+0x16c>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d007      	beq.n	800df0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800defc:	2301      	movs	r3, #1
 800defe:	617b      	str	r3, [r7, #20]
 800df00:	e004      	b.n	800df0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df02:	4b0f      	ldr	r3, [pc, #60]	; (800df40 <xTaskIncrementTick+0x170>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	3301      	adds	r3, #1
 800df08:	4a0d      	ldr	r2, [pc, #52]	; (800df40 <xTaskIncrementTick+0x170>)
 800df0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800df0c:	697b      	ldr	r3, [r7, #20]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	20001b50 	.word	0x20001b50
 800df1c:	20001b2c 	.word	0x20001b2c
 800df20:	20001ae0 	.word	0x20001ae0
 800df24:	20001ae4 	.word	0x20001ae4
 800df28:	20001b40 	.word	0x20001b40
 800df2c:	20001b48 	.word	0x20001b48
 800df30:	20001b30 	.word	0x20001b30
 800df34:	20001658 	.word	0x20001658
 800df38:	20001654 	.word	0x20001654
 800df3c:	20001b3c 	.word	0x20001b3c
 800df40:	20001b38 	.word	0x20001b38

0800df44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df4a:	4b28      	ldr	r3, [pc, #160]	; (800dfec <vTaskSwitchContext+0xa8>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d003      	beq.n	800df5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800df52:	4b27      	ldr	r3, [pc, #156]	; (800dff0 <vTaskSwitchContext+0xac>)
 800df54:	2201      	movs	r2, #1
 800df56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df58:	e041      	b.n	800dfde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800df5a:	4b25      	ldr	r3, [pc, #148]	; (800dff0 <vTaskSwitchContext+0xac>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df60:	4b24      	ldr	r3, [pc, #144]	; (800dff4 <vTaskSwitchContext+0xb0>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	60fb      	str	r3, [r7, #12]
 800df66:	e010      	b.n	800df8a <vTaskSwitchContext+0x46>
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10a      	bne.n	800df84 <vTaskSwitchContext+0x40>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	607b      	str	r3, [r7, #4]
}
 800df80:	bf00      	nop
 800df82:	e7fe      	b.n	800df82 <vTaskSwitchContext+0x3e>
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3b01      	subs	r3, #1
 800df88:	60fb      	str	r3, [r7, #12]
 800df8a:	491b      	ldr	r1, [pc, #108]	; (800dff8 <vTaskSwitchContext+0xb4>)
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	4613      	mov	r3, r2
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	4413      	add	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	440b      	add	r3, r1
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d0e4      	beq.n	800df68 <vTaskSwitchContext+0x24>
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4a13      	ldr	r2, [pc, #76]	; (800dff8 <vTaskSwitchContext+0xb4>)
 800dfaa:	4413      	add	r3, r2
 800dfac:	60bb      	str	r3, [r7, #8]
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	605a      	str	r2, [r3, #4]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	685a      	ldr	r2, [r3, #4]
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	3308      	adds	r3, #8
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d104      	bne.n	800dfce <vTaskSwitchContext+0x8a>
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	685a      	ldr	r2, [r3, #4]
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	605a      	str	r2, [r3, #4]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	4a09      	ldr	r2, [pc, #36]	; (800dffc <vTaskSwitchContext+0xb8>)
 800dfd6:	6013      	str	r3, [r2, #0]
 800dfd8:	4a06      	ldr	r2, [pc, #24]	; (800dff4 <vTaskSwitchContext+0xb0>)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6013      	str	r3, [r2, #0]
}
 800dfde:	bf00      	nop
 800dfe0:	3714      	adds	r7, #20
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	20001b50 	.word	0x20001b50
 800dff0:	20001b3c 	.word	0x20001b3c
 800dff4:	20001b30 	.word	0x20001b30
 800dff8:	20001658 	.word	0x20001658
 800dffc:	20001654 	.word	0x20001654

0800e000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d10a      	bne.n	800e026 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	60fb      	str	r3, [r7, #12]
}
 800e022:	bf00      	nop
 800e024:	e7fe      	b.n	800e024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e026:	4b07      	ldr	r3, [pc, #28]	; (800e044 <vTaskPlaceOnEventList+0x44>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	3318      	adds	r3, #24
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7fe fd47 	bl	800cac2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e034:	2101      	movs	r1, #1
 800e036:	6838      	ldr	r0, [r7, #0]
 800e038:	f000 fa7c 	bl	800e534 <prvAddCurrentTaskToDelayedList>
}
 800e03c:	bf00      	nop
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	20001654 	.word	0x20001654

0800e048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10a      	bne.n	800e070 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	617b      	str	r3, [r7, #20]
}
 800e06c:	bf00      	nop
 800e06e:	e7fe      	b.n	800e06e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e070:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <vTaskPlaceOnEventListRestricted+0x54>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	3318      	adds	r3, #24
 800e076:	4619      	mov	r1, r3
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f7fe fcfe 	bl	800ca7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e084:	f04f 33ff 	mov.w	r3, #4294967295
 800e088:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e08a:	6879      	ldr	r1, [r7, #4]
 800e08c:	68b8      	ldr	r0, [r7, #8]
 800e08e:	f000 fa51 	bl	800e534 <prvAddCurrentTaskToDelayedList>
	}
 800e092:	bf00      	nop
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20001654 	.word	0x20001654

0800e0a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10a      	bne.n	800e0cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	60fb      	str	r3, [r7, #12]
}
 800e0c8:	bf00      	nop
 800e0ca:	e7fe      	b.n	800e0ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	3318      	adds	r3, #24
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fe fd2f 	bl	800cb34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0d6:	4b1e      	ldr	r3, [pc, #120]	; (800e150 <xTaskRemoveFromEventList+0xb0>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d11d      	bne.n	800e11a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	3304      	adds	r3, #4
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fe fd26 	bl	800cb34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ec:	4b19      	ldr	r3, [pc, #100]	; (800e154 <xTaskRemoveFromEventList+0xb4>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d903      	bls.n	800e0fc <xTaskRemoveFromEventList+0x5c>
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f8:	4a16      	ldr	r2, [pc, #88]	; (800e154 <xTaskRemoveFromEventList+0xb4>)
 800e0fa:	6013      	str	r3, [r2, #0]
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e100:	4613      	mov	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4a13      	ldr	r2, [pc, #76]	; (800e158 <xTaskRemoveFromEventList+0xb8>)
 800e10a:	441a      	add	r2, r3
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	3304      	adds	r3, #4
 800e110:	4619      	mov	r1, r3
 800e112:	4610      	mov	r0, r2
 800e114:	f7fe fcb1 	bl	800ca7a <vListInsertEnd>
 800e118:	e005      	b.n	800e126 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	3318      	adds	r3, #24
 800e11e:	4619      	mov	r1, r3
 800e120:	480e      	ldr	r0, [pc, #56]	; (800e15c <xTaskRemoveFromEventList+0xbc>)
 800e122:	f7fe fcaa 	bl	800ca7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12a:	4b0d      	ldr	r3, [pc, #52]	; (800e160 <xTaskRemoveFromEventList+0xc0>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e130:	429a      	cmp	r2, r3
 800e132:	d905      	bls.n	800e140 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e134:	2301      	movs	r3, #1
 800e136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e138:	4b0a      	ldr	r3, [pc, #40]	; (800e164 <xTaskRemoveFromEventList+0xc4>)
 800e13a:	2201      	movs	r2, #1
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	e001      	b.n	800e144 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e140:	2300      	movs	r3, #0
 800e142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e144:	697b      	ldr	r3, [r7, #20]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	20001b50 	.word	0x20001b50
 800e154:	20001b30 	.word	0x20001b30
 800e158:	20001658 	.word	0x20001658
 800e15c:	20001ae8 	.word	0x20001ae8
 800e160:	20001654 	.word	0x20001654
 800e164:	20001b3c 	.word	0x20001b3c

0800e168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e170:	4b06      	ldr	r3, [pc, #24]	; (800e18c <vTaskInternalSetTimeOutState+0x24>)
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <vTaskInternalSetTimeOutState+0x28>)
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	605a      	str	r2, [r3, #4]
}
 800e180:	bf00      	nop
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	20001b40 	.word	0x20001b40
 800e190:	20001b2c 	.word	0x20001b2c

0800e194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b088      	sub	sp, #32
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10a      	bne.n	800e1ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	613b      	str	r3, [r7, #16]
}
 800e1b6:	bf00      	nop
 800e1b8:	e7fe      	b.n	800e1b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10a      	bne.n	800e1d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	60fb      	str	r3, [r7, #12]
}
 800e1d2:	bf00      	nop
 800e1d4:	e7fe      	b.n	800e1d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e1d6:	f000 fe7d 	bl	800eed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e1da:	4b1d      	ldr	r3, [pc, #116]	; (800e250 <xTaskCheckForTimeOut+0xbc>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	69ba      	ldr	r2, [r7, #24]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f2:	d102      	bne.n	800e1fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	61fb      	str	r3, [r7, #28]
 800e1f8:	e023      	b.n	800e242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	4b15      	ldr	r3, [pc, #84]	; (800e254 <xTaskCheckForTimeOut+0xc0>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	429a      	cmp	r2, r3
 800e204:	d007      	beq.n	800e216 <xTaskCheckForTimeOut+0x82>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	69ba      	ldr	r2, [r7, #24]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d302      	bcc.n	800e216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e210:	2301      	movs	r3, #1
 800e212:	61fb      	str	r3, [r7, #28]
 800e214:	e015      	b.n	800e242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d20b      	bcs.n	800e238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	1ad2      	subs	r2, r2, r3
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7ff ff9b 	bl	800e168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e232:	2300      	movs	r3, #0
 800e234:	61fb      	str	r3, [r7, #28]
 800e236:	e004      	b.n	800e242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e23e:	2301      	movs	r3, #1
 800e240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e242:	f000 fe77 	bl	800ef34 <vPortExitCritical>

	return xReturn;
 800e246:	69fb      	ldr	r3, [r7, #28]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	20001b2c 	.word	0x20001b2c
 800e254:	20001b40 	.word	0x20001b40

0800e258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e258:	b480      	push	{r7}
 800e25a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e25c:	4b03      	ldr	r3, [pc, #12]	; (800e26c <vTaskMissedYield+0x14>)
 800e25e:	2201      	movs	r2, #1
 800e260:	601a      	str	r2, [r3, #0]
}
 800e262:	bf00      	nop
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	20001b3c 	.word	0x20001b3c

0800e270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e278:	f000 f852 	bl	800e320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e27c:	4b06      	ldr	r3, [pc, #24]	; (800e298 <prvIdleTask+0x28>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d9f9      	bls.n	800e278 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e284:	4b05      	ldr	r3, [pc, #20]	; (800e29c <prvIdleTask+0x2c>)
 800e286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e294:	e7f0      	b.n	800e278 <prvIdleTask+0x8>
 800e296:	bf00      	nop
 800e298:	20001658 	.word	0x20001658
 800e29c:	e000ed04 	.word	0xe000ed04

0800e2a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	607b      	str	r3, [r7, #4]
 800e2aa:	e00c      	b.n	800e2c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4a12      	ldr	r2, [pc, #72]	; (800e300 <prvInitialiseTaskLists+0x60>)
 800e2b8:	4413      	add	r3, r2
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe fbb0 	bl	800ca20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	607b      	str	r3, [r7, #4]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b37      	cmp	r3, #55	; 0x37
 800e2ca:	d9ef      	bls.n	800e2ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e2cc:	480d      	ldr	r0, [pc, #52]	; (800e304 <prvInitialiseTaskLists+0x64>)
 800e2ce:	f7fe fba7 	bl	800ca20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e2d2:	480d      	ldr	r0, [pc, #52]	; (800e308 <prvInitialiseTaskLists+0x68>)
 800e2d4:	f7fe fba4 	bl	800ca20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2d8:	480c      	ldr	r0, [pc, #48]	; (800e30c <prvInitialiseTaskLists+0x6c>)
 800e2da:	f7fe fba1 	bl	800ca20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2de:	480c      	ldr	r0, [pc, #48]	; (800e310 <prvInitialiseTaskLists+0x70>)
 800e2e0:	f7fe fb9e 	bl	800ca20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2e4:	480b      	ldr	r0, [pc, #44]	; (800e314 <prvInitialiseTaskLists+0x74>)
 800e2e6:	f7fe fb9b 	bl	800ca20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2ea:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <prvInitialiseTaskLists+0x78>)
 800e2ec:	4a05      	ldr	r2, [pc, #20]	; (800e304 <prvInitialiseTaskLists+0x64>)
 800e2ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2f0:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <prvInitialiseTaskLists+0x7c>)
 800e2f2:	4a05      	ldr	r2, [pc, #20]	; (800e308 <prvInitialiseTaskLists+0x68>)
 800e2f4:	601a      	str	r2, [r3, #0]
}
 800e2f6:	bf00      	nop
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20001658 	.word	0x20001658
 800e304:	20001ab8 	.word	0x20001ab8
 800e308:	20001acc 	.word	0x20001acc
 800e30c:	20001ae8 	.word	0x20001ae8
 800e310:	20001afc 	.word	0x20001afc
 800e314:	20001b14 	.word	0x20001b14
 800e318:	20001ae0 	.word	0x20001ae0
 800e31c:	20001ae4 	.word	0x20001ae4

0800e320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e326:	e019      	b.n	800e35c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e328:	f000 fdd4 	bl	800eed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e32c:	4b10      	ldr	r3, [pc, #64]	; (800e370 <prvCheckTasksWaitingTermination+0x50>)
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3304      	adds	r3, #4
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe fbfb 	bl	800cb34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e33e:	4b0d      	ldr	r3, [pc, #52]	; (800e374 <prvCheckTasksWaitingTermination+0x54>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	3b01      	subs	r3, #1
 800e344:	4a0b      	ldr	r2, [pc, #44]	; (800e374 <prvCheckTasksWaitingTermination+0x54>)
 800e346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e348:	4b0b      	ldr	r3, [pc, #44]	; (800e378 <prvCheckTasksWaitingTermination+0x58>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	4a0a      	ldr	r2, [pc, #40]	; (800e378 <prvCheckTasksWaitingTermination+0x58>)
 800e350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e352:	f000 fdef 	bl	800ef34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f810 	bl	800e37c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e35c:	4b06      	ldr	r3, [pc, #24]	; (800e378 <prvCheckTasksWaitingTermination+0x58>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1e1      	bne.n	800e328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	20001afc 	.word	0x20001afc
 800e374:	20001b28 	.word	0x20001b28
 800e378:	20001b10 	.word	0x20001b10

0800e37c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d108      	bne.n	800e3a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e392:	4618      	mov	r0, r3
 800e394:	f000 ff8c 	bl	800f2b0 <vPortFree>
				vPortFree( pxTCB );
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 ff89 	bl	800f2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e39e:	e018      	b.n	800e3d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d103      	bne.n	800e3b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 ff80 	bl	800f2b0 <vPortFree>
	}
 800e3b0:	e00f      	b.n	800e3d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d00a      	beq.n	800e3d2 <prvDeleteTCB+0x56>
	__asm volatile
 800e3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	60fb      	str	r3, [r7, #12]
}
 800e3ce:	bf00      	nop
 800e3d0:	e7fe      	b.n	800e3d0 <prvDeleteTCB+0x54>
	}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
	...

0800e3dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3e2:	4b0c      	ldr	r3, [pc, #48]	; (800e414 <prvResetNextTaskUnblockTime+0x38>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d104      	bne.n	800e3f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3ec:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <prvResetNextTaskUnblockTime+0x3c>)
 800e3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3f4:	e008      	b.n	800e408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f6:	4b07      	ldr	r3, [pc, #28]	; (800e414 <prvResetNextTaskUnblockTime+0x38>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4a04      	ldr	r2, [pc, #16]	; (800e418 <prvResetNextTaskUnblockTime+0x3c>)
 800e406:	6013      	str	r3, [r2, #0]
}
 800e408:	bf00      	nop
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	20001ae0 	.word	0x20001ae0
 800e418:	20001b48 	.word	0x20001b48

0800e41c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e422:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <xTaskGetSchedulerState+0x34>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d102      	bne.n	800e430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e42a:	2301      	movs	r3, #1
 800e42c:	607b      	str	r3, [r7, #4]
 800e42e:	e008      	b.n	800e442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e430:	4b08      	ldr	r3, [pc, #32]	; (800e454 <xTaskGetSchedulerState+0x38>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d102      	bne.n	800e43e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e438:	2302      	movs	r3, #2
 800e43a:	607b      	str	r3, [r7, #4]
 800e43c:	e001      	b.n	800e442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e43e:	2300      	movs	r3, #0
 800e440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e442:	687b      	ldr	r3, [r7, #4]
	}
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr
 800e450:	20001b34 	.word	0x20001b34
 800e454:	20001b50 	.word	0x20001b50

0800e458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e464:	2300      	movs	r3, #0
 800e466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d056      	beq.n	800e51c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e46e:	4b2e      	ldr	r3, [pc, #184]	; (800e528 <xTaskPriorityDisinherit+0xd0>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	429a      	cmp	r2, r3
 800e476:	d00a      	beq.n	800e48e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	60fb      	str	r3, [r7, #12]
}
 800e48a:	bf00      	nop
 800e48c:	e7fe      	b.n	800e48c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10a      	bne.n	800e4ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49a:	f383 8811 	msr	BASEPRI, r3
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f3bf 8f4f 	dsb	sy
 800e4a6:	60bb      	str	r3, [r7, #8]
}
 800e4a8:	bf00      	nop
 800e4aa:	e7fe      	b.n	800e4aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4b0:	1e5a      	subs	r2, r3, #1
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d02c      	beq.n	800e51c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d128      	bne.n	800e51c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fe fb30 	bl	800cb34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ec:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <xTaskPriorityDisinherit+0xd4>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d903      	bls.n	800e4fc <xTaskPriorityDisinherit+0xa4>
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f8:	4a0c      	ldr	r2, [pc, #48]	; (800e52c <xTaskPriorityDisinherit+0xd4>)
 800e4fa:	6013      	str	r3, [r2, #0]
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	4a09      	ldr	r2, [pc, #36]	; (800e530 <xTaskPriorityDisinherit+0xd8>)
 800e50a:	441a      	add	r2, r3
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	3304      	adds	r3, #4
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f7fe fab1 	bl	800ca7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e518:	2301      	movs	r3, #1
 800e51a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e51c:	697b      	ldr	r3, [r7, #20]
	}
 800e51e:	4618      	mov	r0, r3
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20001654 	.word	0x20001654
 800e52c:	20001b30 	.word	0x20001b30
 800e530:	20001658 	.word	0x20001658

0800e534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e53e:	4b21      	ldr	r3, [pc, #132]	; (800e5c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e544:	4b20      	ldr	r3, [pc, #128]	; (800e5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3304      	adds	r3, #4
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe faf2 	bl	800cb34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d10a      	bne.n	800e56e <prvAddCurrentTaskToDelayedList+0x3a>
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d007      	beq.n	800e56e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e55e:	4b1a      	ldr	r3, [pc, #104]	; (800e5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3304      	adds	r3, #4
 800e564:	4619      	mov	r1, r3
 800e566:	4819      	ldr	r0, [pc, #100]	; (800e5cc <prvAddCurrentTaskToDelayedList+0x98>)
 800e568:	f7fe fa87 	bl	800ca7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e56c:	e026      	b.n	800e5bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4413      	add	r3, r2
 800e574:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e576:	4b14      	ldr	r3, [pc, #80]	; (800e5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e57e:	68ba      	ldr	r2, [r7, #8]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	429a      	cmp	r2, r3
 800e584:	d209      	bcs.n	800e59a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e586:	4b12      	ldr	r3, [pc, #72]	; (800e5d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	4b0f      	ldr	r3, [pc, #60]	; (800e5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3304      	adds	r3, #4
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f7fe fa95 	bl	800cac2 <vListInsert>
}
 800e598:	e010      	b.n	800e5bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e59a:	4b0e      	ldr	r3, [pc, #56]	; (800e5d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	4b0a      	ldr	r3, [pc, #40]	; (800e5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	3304      	adds	r3, #4
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	f7fe fa8b 	bl	800cac2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5ac:	4b0a      	ldr	r3, [pc, #40]	; (800e5d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d202      	bcs.n	800e5bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e5b6:	4a08      	ldr	r2, [pc, #32]	; (800e5d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	6013      	str	r3, [r2, #0]
}
 800e5bc:	bf00      	nop
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	20001b2c 	.word	0x20001b2c
 800e5c8:	20001654 	.word	0x20001654
 800e5cc:	20001b14 	.word	0x20001b14
 800e5d0:	20001ae4 	.word	0x20001ae4
 800e5d4:	20001ae0 	.word	0x20001ae0
 800e5d8:	20001b48 	.word	0x20001b48

0800e5dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08a      	sub	sp, #40	; 0x28
 800e5e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e5e6:	f000 fb07 	bl	800ebf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e5ea:	4b1c      	ldr	r3, [pc, #112]	; (800e65c <xTimerCreateTimerTask+0x80>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d021      	beq.n	800e636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e5fa:	1d3a      	adds	r2, r7, #4
 800e5fc:	f107 0108 	add.w	r1, r7, #8
 800e600:	f107 030c 	add.w	r3, r7, #12
 800e604:	4618      	mov	r0, r3
 800e606:	f7fe f9f1 	bl	800c9ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e60a:	6879      	ldr	r1, [r7, #4]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	68fa      	ldr	r2, [r7, #12]
 800e610:	9202      	str	r2, [sp, #8]
 800e612:	9301      	str	r3, [sp, #4]
 800e614:	2302      	movs	r3, #2
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	2300      	movs	r3, #0
 800e61a:	460a      	mov	r2, r1
 800e61c:	4910      	ldr	r1, [pc, #64]	; (800e660 <xTimerCreateTimerTask+0x84>)
 800e61e:	4811      	ldr	r0, [pc, #68]	; (800e664 <xTimerCreateTimerTask+0x88>)
 800e620:	f7fe ffd8 	bl	800d5d4 <xTaskCreateStatic>
 800e624:	4603      	mov	r3, r0
 800e626:	4a10      	ldr	r2, [pc, #64]	; (800e668 <xTimerCreateTimerTask+0x8c>)
 800e628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e62a:	4b0f      	ldr	r3, [pc, #60]	; (800e668 <xTimerCreateTimerTask+0x8c>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e632:	2301      	movs	r3, #1
 800e634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10a      	bne.n	800e652 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	613b      	str	r3, [r7, #16]
}
 800e64e:	bf00      	nop
 800e650:	e7fe      	b.n	800e650 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e652:	697b      	ldr	r3, [r7, #20]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3718      	adds	r7, #24
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	20001b84 	.word	0x20001b84
 800e660:	08010c7c 	.word	0x08010c7c
 800e664:	0800e7a1 	.word	0x0800e7a1
 800e668:	20001b88 	.word	0x20001b88

0800e66c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b08a      	sub	sp, #40	; 0x28
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
 800e678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e67a:	2300      	movs	r3, #0
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10a      	bne.n	800e69a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	623b      	str	r3, [r7, #32]
}
 800e696:	bf00      	nop
 800e698:	e7fe      	b.n	800e698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e69a:	4b1a      	ldr	r3, [pc, #104]	; (800e704 <xTimerGenericCommand+0x98>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d02a      	beq.n	800e6f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b05      	cmp	r3, #5
 800e6b2:	dc18      	bgt.n	800e6e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e6b4:	f7ff feb2 	bl	800e41c <xTaskGetSchedulerState>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d109      	bne.n	800e6d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e6be:	4b11      	ldr	r3, [pc, #68]	; (800e704 <xTimerGenericCommand+0x98>)
 800e6c0:	6818      	ldr	r0, [r3, #0]
 800e6c2:	f107 0110 	add.w	r1, r7, #16
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ca:	f7fe fb9b 	bl	800ce04 <xQueueGenericSend>
 800e6ce:	6278      	str	r0, [r7, #36]	; 0x24
 800e6d0:	e012      	b.n	800e6f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e6d2:	4b0c      	ldr	r3, [pc, #48]	; (800e704 <xTimerGenericCommand+0x98>)
 800e6d4:	6818      	ldr	r0, [r3, #0]
 800e6d6:	f107 0110 	add.w	r1, r7, #16
 800e6da:	2300      	movs	r3, #0
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f7fe fb91 	bl	800ce04 <xQueueGenericSend>
 800e6e2:	6278      	str	r0, [r7, #36]	; 0x24
 800e6e4:	e008      	b.n	800e6f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e6e6:	4b07      	ldr	r3, [pc, #28]	; (800e704 <xTimerGenericCommand+0x98>)
 800e6e8:	6818      	ldr	r0, [r3, #0]
 800e6ea:	f107 0110 	add.w	r1, r7, #16
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	f7fe fc85 	bl	800d000 <xQueueGenericSendFromISR>
 800e6f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3728      	adds	r7, #40	; 0x28
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	20001b84 	.word	0x20001b84

0800e708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b088      	sub	sp, #32
 800e70c:	af02      	add	r7, sp, #8
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e712:	4b22      	ldr	r3, [pc, #136]	; (800e79c <prvProcessExpiredTimer+0x94>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	3304      	adds	r3, #4
 800e720:	4618      	mov	r0, r3
 800e722:	f7fe fa07 	bl	800cb34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e72c:	f003 0304 	and.w	r3, r3, #4
 800e730:	2b00      	cmp	r3, #0
 800e732:	d022      	beq.n	800e77a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	699a      	ldr	r2, [r3, #24]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	18d1      	adds	r1, r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	683a      	ldr	r2, [r7, #0]
 800e740:	6978      	ldr	r0, [r7, #20]
 800e742:	f000 f8d1 	bl	800e8e8 <prvInsertTimerInActiveList>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d01f      	beq.n	800e78c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e74c:	2300      	movs	r3, #0
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	2300      	movs	r3, #0
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	2100      	movs	r1, #0
 800e756:	6978      	ldr	r0, [r7, #20]
 800e758:	f7ff ff88 	bl	800e66c <xTimerGenericCommand>
 800e75c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d113      	bne.n	800e78c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	60fb      	str	r3, [r7, #12]
}
 800e776:	bf00      	nop
 800e778:	e7fe      	b.n	800e778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e780:	f023 0301 	bic.w	r3, r3, #1
 800e784:	b2da      	uxtb	r2, r3
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	6a1b      	ldr	r3, [r3, #32]
 800e790:	6978      	ldr	r0, [r7, #20]
 800e792:	4798      	blx	r3
}
 800e794:	bf00      	nop
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	20001b7c 	.word	0x20001b7c

0800e7a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e7a8:	f107 0308 	add.w	r3, r7, #8
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f000 f857 	bl	800e860 <prvGetNextExpireTime>
 800e7b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f000 f803 	bl	800e7c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e7be:	f000 f8d5 	bl	800e96c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e7c2:	e7f1      	b.n	800e7a8 <prvTimerTask+0x8>

0800e7c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e7ce:	f7ff fa43 	bl	800dc58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7d2:	f107 0308 	add.w	r3, r7, #8
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 f866 	bl	800e8a8 <prvSampleTimeNow>
 800e7dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d130      	bne.n	800e846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10a      	bne.n	800e800 <prvProcessTimerOrBlockTask+0x3c>
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d806      	bhi.n	800e800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e7f2:	f7ff fa3f 	bl	800dc74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e7f6:	68f9      	ldr	r1, [r7, #12]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7ff ff85 	bl	800e708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e7fe:	e024      	b.n	800e84a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d008      	beq.n	800e818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e806:	4b13      	ldr	r3, [pc, #76]	; (800e854 <prvProcessTimerOrBlockTask+0x90>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <prvProcessTimerOrBlockTask+0x50>
 800e810:	2301      	movs	r3, #1
 800e812:	e000      	b.n	800e816 <prvProcessTimerOrBlockTask+0x52>
 800e814:	2300      	movs	r3, #0
 800e816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e818:	4b0f      	ldr	r3, [pc, #60]	; (800e858 <prvProcessTimerOrBlockTask+0x94>)
 800e81a:	6818      	ldr	r0, [r3, #0]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	4619      	mov	r1, r3
 800e826:	f7fe fea1 	bl	800d56c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e82a:	f7ff fa23 	bl	800dc74 <xTaskResumeAll>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d10a      	bne.n	800e84a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e834:	4b09      	ldr	r3, [pc, #36]	; (800e85c <prvProcessTimerOrBlockTask+0x98>)
 800e836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	f3bf 8f6f 	isb	sy
}
 800e844:	e001      	b.n	800e84a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e846:	f7ff fa15 	bl	800dc74 <xTaskResumeAll>
}
 800e84a:	bf00      	nop
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	20001b80 	.word	0x20001b80
 800e858:	20001b84 	.word	0x20001b84
 800e85c:	e000ed04 	.word	0xe000ed04

0800e860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e860:	b480      	push	{r7}
 800e862:	b085      	sub	sp, #20
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e868:	4b0e      	ldr	r3, [pc, #56]	; (800e8a4 <prvGetNextExpireTime+0x44>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d101      	bne.n	800e876 <prvGetNextExpireTime+0x16>
 800e872:	2201      	movs	r2, #1
 800e874:	e000      	b.n	800e878 <prvGetNextExpireTime+0x18>
 800e876:	2200      	movs	r2, #0
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d105      	bne.n	800e890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e884:	4b07      	ldr	r3, [pc, #28]	; (800e8a4 <prvGetNextExpireTime+0x44>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60fb      	str	r3, [r7, #12]
 800e88e:	e001      	b.n	800e894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e890:	2300      	movs	r3, #0
 800e892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e894:	68fb      	ldr	r3, [r7, #12]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3714      	adds	r7, #20
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	20001b7c 	.word	0x20001b7c

0800e8a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e8b0:	f7ff fa7e 	bl	800ddb0 <xTaskGetTickCount>
 800e8b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e8b6:	4b0b      	ldr	r3, [pc, #44]	; (800e8e4 <prvSampleTimeNow+0x3c>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d205      	bcs.n	800e8cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e8c0:	f000 f936 	bl	800eb30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	e002      	b.n	800e8d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e8d2:	4a04      	ldr	r2, [pc, #16]	; (800e8e4 <prvSampleTimeNow+0x3c>)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20001b8c 	.word	0x20001b8c

0800e8e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
 800e8f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d812      	bhi.n	800e934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	1ad2      	subs	r2, r2, r3
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	699b      	ldr	r3, [r3, #24]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d302      	bcc.n	800e922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e91c:	2301      	movs	r3, #1
 800e91e:	617b      	str	r3, [r7, #20]
 800e920:	e01b      	b.n	800e95a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e922:	4b10      	ldr	r3, [pc, #64]	; (800e964 <prvInsertTimerInActiveList+0x7c>)
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3304      	adds	r3, #4
 800e92a:	4619      	mov	r1, r3
 800e92c:	4610      	mov	r0, r2
 800e92e:	f7fe f8c8 	bl	800cac2 <vListInsert>
 800e932:	e012      	b.n	800e95a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d206      	bcs.n	800e94a <prvInsertTimerInActiveList+0x62>
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d302      	bcc.n	800e94a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e944:	2301      	movs	r3, #1
 800e946:	617b      	str	r3, [r7, #20]
 800e948:	e007      	b.n	800e95a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e94a:	4b07      	ldr	r3, [pc, #28]	; (800e968 <prvInsertTimerInActiveList+0x80>)
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	3304      	adds	r3, #4
 800e952:	4619      	mov	r1, r3
 800e954:	4610      	mov	r0, r2
 800e956:	f7fe f8b4 	bl	800cac2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e95a:	697b      	ldr	r3, [r7, #20]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3718      	adds	r7, #24
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	20001b80 	.word	0x20001b80
 800e968:	20001b7c 	.word	0x20001b7c

0800e96c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08e      	sub	sp, #56	; 0x38
 800e970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e972:	e0ca      	b.n	800eb0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	da18      	bge.n	800e9ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e97a:	1d3b      	adds	r3, r7, #4
 800e97c:	3304      	adds	r3, #4
 800e97e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	2b00      	cmp	r3, #0
 800e984:	d10a      	bne.n	800e99c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98a:	f383 8811 	msr	BASEPRI, r3
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f3bf 8f4f 	dsb	sy
 800e996:	61fb      	str	r3, [r7, #28]
}
 800e998:	bf00      	nop
 800e99a:	e7fe      	b.n	800e99a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a2:	6850      	ldr	r0, [r2, #4]
 800e9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a6:	6892      	ldr	r2, [r2, #8]
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f2c0 80aa 	blt.w	800eb08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	695b      	ldr	r3, [r3, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d004      	beq.n	800e9ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c2:	3304      	adds	r3, #4
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fe f8b5 	bl	800cb34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9ca:	463b      	mov	r3, r7
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7ff ff6b 	bl	800e8a8 <prvSampleTimeNow>
 800e9d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b09      	cmp	r3, #9
 800e9d8:	f200 8097 	bhi.w	800eb0a <prvProcessReceivedCommands+0x19e>
 800e9dc:	a201      	add	r2, pc, #4	; (adr r2, 800e9e4 <prvProcessReceivedCommands+0x78>)
 800e9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e2:	bf00      	nop
 800e9e4:	0800ea0d 	.word	0x0800ea0d
 800e9e8:	0800ea0d 	.word	0x0800ea0d
 800e9ec:	0800ea0d 	.word	0x0800ea0d
 800e9f0:	0800ea81 	.word	0x0800ea81
 800e9f4:	0800ea95 	.word	0x0800ea95
 800e9f8:	0800eadf 	.word	0x0800eadf
 800e9fc:	0800ea0d 	.word	0x0800ea0d
 800ea00:	0800ea0d 	.word	0x0800ea0d
 800ea04:	0800ea81 	.word	0x0800ea81
 800ea08:	0800ea95 	.word	0x0800ea95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea12:	f043 0301 	orr.w	r3, r3, #1
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea1e:	68ba      	ldr	r2, [r7, #8]
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	18d1      	adds	r1, r2, r3
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea2c:	f7ff ff5c 	bl	800e8e8 <prvInsertTimerInActiveList>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d069      	beq.n	800eb0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea38:	6a1b      	ldr	r3, [r3, #32]
 800ea3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea44:	f003 0304 	and.w	r3, r3, #4
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d05e      	beq.n	800eb0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	441a      	add	r2, r3
 800ea54:	2300      	movs	r3, #0
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	2300      	movs	r3, #0
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea5e:	f7ff fe05 	bl	800e66c <xTimerGenericCommand>
 800ea62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d14f      	bne.n	800eb0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	61bb      	str	r3, [r7, #24]
}
 800ea7c:	bf00      	nop
 800ea7e:	e7fe      	b.n	800ea7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea86:	f023 0301 	bic.w	r3, r3, #1
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea92:	e03a      	b.n	800eb0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea9a:	f043 0301 	orr.w	r3, r3, #1
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d10a      	bne.n	800eaca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800eab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	617b      	str	r3, [r7, #20]
}
 800eac6:	bf00      	nop
 800eac8:	e7fe      	b.n	800eac8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	699a      	ldr	r2, [r3, #24]
 800eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead0:	18d1      	adds	r1, r2, r3
 800ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ead6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ead8:	f7ff ff06 	bl	800e8e8 <prvInsertTimerInActiveList>
					break;
 800eadc:	e015      	b.n	800eb0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eae4:	f003 0302 	and.w	r3, r3, #2
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d103      	bne.n	800eaf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eaec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaee:	f000 fbdf 	bl	800f2b0 <vPortFree>
 800eaf2:	e00a      	b.n	800eb0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eafa:	f023 0301 	bic.w	r3, r3, #1
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb06:	e000      	b.n	800eb0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eb08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb0a:	4b08      	ldr	r3, [pc, #32]	; (800eb2c <prvProcessReceivedCommands+0x1c0>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	1d39      	adds	r1, r7, #4
 800eb10:	2200      	movs	r2, #0
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe fb10 	bl	800d138 <xQueueReceive>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f47f af2a 	bne.w	800e974 <prvProcessReceivedCommands+0x8>
	}
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	3730      	adds	r7, #48	; 0x30
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	20001b84 	.word	0x20001b84

0800eb30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b088      	sub	sp, #32
 800eb34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb36:	e048      	b.n	800ebca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb38:	4b2d      	ldr	r3, [pc, #180]	; (800ebf0 <prvSwitchTimerLists+0xc0>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb42:	4b2b      	ldr	r3, [pc, #172]	; (800ebf0 <prvSwitchTimerLists+0xc0>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fd ffef 	bl	800cb34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6a1b      	ldr	r3, [r3, #32]
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb64:	f003 0304 	and.w	r3, r3, #4
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d02e      	beq.n	800ebca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	693a      	ldr	r2, [r7, #16]
 800eb72:	4413      	add	r3, r2
 800eb74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d90e      	bls.n	800eb9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb8a:	4b19      	ldr	r3, [pc, #100]	; (800ebf0 <prvSwitchTimerLists+0xc0>)
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3304      	adds	r3, #4
 800eb92:	4619      	mov	r1, r3
 800eb94:	4610      	mov	r0, r2
 800eb96:	f7fd ff94 	bl	800cac2 <vListInsert>
 800eb9a:	e016      	b.n	800ebca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	2300      	movs	r3, #0
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	2100      	movs	r1, #0
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff fd60 	bl	800e66c <xTimerGenericCommand>
 800ebac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10a      	bne.n	800ebca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	603b      	str	r3, [r7, #0]
}
 800ebc6:	bf00      	nop
 800ebc8:	e7fe      	b.n	800ebc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebca:	4b09      	ldr	r3, [pc, #36]	; (800ebf0 <prvSwitchTimerLists+0xc0>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1b1      	bne.n	800eb38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ebd4:	4b06      	ldr	r3, [pc, #24]	; (800ebf0 <prvSwitchTimerLists+0xc0>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ebda:	4b06      	ldr	r3, [pc, #24]	; (800ebf4 <prvSwitchTimerLists+0xc4>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a04      	ldr	r2, [pc, #16]	; (800ebf0 <prvSwitchTimerLists+0xc0>)
 800ebe0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ebe2:	4a04      	ldr	r2, [pc, #16]	; (800ebf4 <prvSwitchTimerLists+0xc4>)
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	6013      	str	r3, [r2, #0]
}
 800ebe8:	bf00      	nop
 800ebea:	3718      	adds	r7, #24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	20001b7c 	.word	0x20001b7c
 800ebf4:	20001b80 	.word	0x20001b80

0800ebf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ebfe:	f000 f969 	bl	800eed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec02:	4b15      	ldr	r3, [pc, #84]	; (800ec58 <prvCheckForValidListAndQueue+0x60>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d120      	bne.n	800ec4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec0a:	4814      	ldr	r0, [pc, #80]	; (800ec5c <prvCheckForValidListAndQueue+0x64>)
 800ec0c:	f7fd ff08 	bl	800ca20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec10:	4813      	ldr	r0, [pc, #76]	; (800ec60 <prvCheckForValidListAndQueue+0x68>)
 800ec12:	f7fd ff05 	bl	800ca20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec16:	4b13      	ldr	r3, [pc, #76]	; (800ec64 <prvCheckForValidListAndQueue+0x6c>)
 800ec18:	4a10      	ldr	r2, [pc, #64]	; (800ec5c <prvCheckForValidListAndQueue+0x64>)
 800ec1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ec1c:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <prvCheckForValidListAndQueue+0x70>)
 800ec1e:	4a10      	ldr	r2, [pc, #64]	; (800ec60 <prvCheckForValidListAndQueue+0x68>)
 800ec20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec22:	2300      	movs	r3, #0
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	4b11      	ldr	r3, [pc, #68]	; (800ec6c <prvCheckForValidListAndQueue+0x74>)
 800ec28:	4a11      	ldr	r2, [pc, #68]	; (800ec70 <prvCheckForValidListAndQueue+0x78>)
 800ec2a:	2110      	movs	r1, #16
 800ec2c:	200a      	movs	r0, #10
 800ec2e:	f7fe f813 	bl	800cc58 <xQueueGenericCreateStatic>
 800ec32:	4603      	mov	r3, r0
 800ec34:	4a08      	ldr	r2, [pc, #32]	; (800ec58 <prvCheckForValidListAndQueue+0x60>)
 800ec36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ec38:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <prvCheckForValidListAndQueue+0x60>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d005      	beq.n	800ec4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ec40:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <prvCheckForValidListAndQueue+0x60>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	490b      	ldr	r1, [pc, #44]	; (800ec74 <prvCheckForValidListAndQueue+0x7c>)
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fe fc66 	bl	800d518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ec4c:	f000 f972 	bl	800ef34 <vPortExitCritical>
}
 800ec50:	bf00      	nop
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	20001b84 	.word	0x20001b84
 800ec5c:	20001b54 	.word	0x20001b54
 800ec60:	20001b68 	.word	0x20001b68
 800ec64:	20001b7c 	.word	0x20001b7c
 800ec68:	20001b80 	.word	0x20001b80
 800ec6c:	20001c30 	.word	0x20001c30
 800ec70:	20001b90 	.word	0x20001b90
 800ec74:	08010c84 	.word	0x08010c84

0800ec78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	3b04      	subs	r3, #4
 800ec88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	3b04      	subs	r3, #4
 800ec96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	f023 0201 	bic.w	r2, r3, #1
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3b04      	subs	r3, #4
 800eca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eca8:	4a0c      	ldr	r2, [pc, #48]	; (800ecdc <pxPortInitialiseStack+0x64>)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	3b14      	subs	r3, #20
 800ecb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ecb4:	687a      	ldr	r2, [r7, #4]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	3b04      	subs	r3, #4
 800ecbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f06f 0202 	mvn.w	r2, #2
 800ecc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	3b20      	subs	r3, #32
 800eccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ecce:	68fb      	ldr	r3, [r7, #12]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	0800ece1 	.word	0x0800ece1

0800ece0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ecea:	4b12      	ldr	r3, [pc, #72]	; (800ed34 <prvTaskExitError+0x54>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf2:	d00a      	beq.n	800ed0a <prvTaskExitError+0x2a>
	__asm volatile
 800ecf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	60fb      	str	r3, [r7, #12]
}
 800ed06:	bf00      	nop
 800ed08:	e7fe      	b.n	800ed08 <prvTaskExitError+0x28>
	__asm volatile
 800ed0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	60bb      	str	r3, [r7, #8]
}
 800ed1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ed1e:	bf00      	nop
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d0fc      	beq.n	800ed20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ed26:	bf00      	nop
 800ed28:	bf00      	nop
 800ed2a:	3714      	adds	r7, #20
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr
 800ed34:	20000634 	.word	0x20000634
	...

0800ed40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ed40:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <pxCurrentTCBConst2>)
 800ed42:	6819      	ldr	r1, [r3, #0]
 800ed44:	6808      	ldr	r0, [r1, #0]
 800ed46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed4a:	f380 8809 	msr	PSP, r0
 800ed4e:	f3bf 8f6f 	isb	sy
 800ed52:	f04f 0000 	mov.w	r0, #0
 800ed56:	f380 8811 	msr	BASEPRI, r0
 800ed5a:	4770      	bx	lr
 800ed5c:	f3af 8000 	nop.w

0800ed60 <pxCurrentTCBConst2>:
 800ed60:	20001654 	.word	0x20001654
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ed64:	bf00      	nop
 800ed66:	bf00      	nop

0800ed68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ed68:	4808      	ldr	r0, [pc, #32]	; (800ed8c <prvPortStartFirstTask+0x24>)
 800ed6a:	6800      	ldr	r0, [r0, #0]
 800ed6c:	6800      	ldr	r0, [r0, #0]
 800ed6e:	f380 8808 	msr	MSP, r0
 800ed72:	f04f 0000 	mov.w	r0, #0
 800ed76:	f380 8814 	msr	CONTROL, r0
 800ed7a:	b662      	cpsie	i
 800ed7c:	b661      	cpsie	f
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	df00      	svc	0
 800ed88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed8a:	bf00      	nop
 800ed8c:	e000ed08 	.word	0xe000ed08

0800ed90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed96:	4b46      	ldr	r3, [pc, #280]	; (800eeb0 <xPortStartScheduler+0x120>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a46      	ldr	r2, [pc, #280]	; (800eeb4 <xPortStartScheduler+0x124>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d10a      	bne.n	800edb6 <xPortStartScheduler+0x26>
	__asm volatile
 800eda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda4:	f383 8811 	msr	BASEPRI, r3
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	613b      	str	r3, [r7, #16]
}
 800edb2:	bf00      	nop
 800edb4:	e7fe      	b.n	800edb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800edb6:	4b3e      	ldr	r3, [pc, #248]	; (800eeb0 <xPortStartScheduler+0x120>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a3f      	ldr	r2, [pc, #252]	; (800eeb8 <xPortStartScheduler+0x128>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d10a      	bne.n	800edd6 <xPortStartScheduler+0x46>
	__asm volatile
 800edc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc4:	f383 8811 	msr	BASEPRI, r3
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	60fb      	str	r3, [r7, #12]
}
 800edd2:	bf00      	nop
 800edd4:	e7fe      	b.n	800edd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800edd6:	4b39      	ldr	r3, [pc, #228]	; (800eebc <xPortStartScheduler+0x12c>)
 800edd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	22ff      	movs	r2, #255	; 0xff
 800ede6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	b2db      	uxtb	r3, r3
 800edee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800edf8:	b2da      	uxtb	r2, r3
 800edfa:	4b31      	ldr	r3, [pc, #196]	; (800eec0 <xPortStartScheduler+0x130>)
 800edfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800edfe:	4b31      	ldr	r3, [pc, #196]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee00:	2207      	movs	r2, #7
 800ee02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee04:	e009      	b.n	800ee1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ee06:	4b2f      	ldr	r3, [pc, #188]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	4a2d      	ldr	r2, [pc, #180]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee10:	78fb      	ldrb	r3, [r7, #3]
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee1a:	78fb      	ldrb	r3, [r7, #3]
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee22:	2b80      	cmp	r3, #128	; 0x80
 800ee24:	d0ef      	beq.n	800ee06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee26:	4b27      	ldr	r3, [pc, #156]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f1c3 0307 	rsb	r3, r3, #7
 800ee2e:	2b04      	cmp	r3, #4
 800ee30:	d00a      	beq.n	800ee48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ee32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee36:	f383 8811 	msr	BASEPRI, r3
 800ee3a:	f3bf 8f6f 	isb	sy
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	60bb      	str	r3, [r7, #8]
}
 800ee44:	bf00      	nop
 800ee46:	e7fe      	b.n	800ee46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ee48:	4b1e      	ldr	r3, [pc, #120]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	021b      	lsls	r3, r3, #8
 800ee4e:	4a1d      	ldr	r2, [pc, #116]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee52:	4b1c      	ldr	r3, [pc, #112]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ee5a:	4a1a      	ldr	r2, [pc, #104]	; (800eec4 <xPortStartScheduler+0x134>)
 800ee5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee66:	4b18      	ldr	r3, [pc, #96]	; (800eec8 <xPortStartScheduler+0x138>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a17      	ldr	r2, [pc, #92]	; (800eec8 <xPortStartScheduler+0x138>)
 800ee6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ee72:	4b15      	ldr	r3, [pc, #84]	; (800eec8 <xPortStartScheduler+0x138>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4a14      	ldr	r2, [pc, #80]	; (800eec8 <xPortStartScheduler+0x138>)
 800ee78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ee7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ee7e:	f000 f8dd 	bl	800f03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ee82:	4b12      	ldr	r3, [pc, #72]	; (800eecc <xPortStartScheduler+0x13c>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ee88:	f000 f8fc 	bl	800f084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ee8c:	4b10      	ldr	r3, [pc, #64]	; (800eed0 <xPortStartScheduler+0x140>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a0f      	ldr	r2, [pc, #60]	; (800eed0 <xPortStartScheduler+0x140>)
 800ee92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee98:	f7ff ff66 	bl	800ed68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee9c:	f7ff f852 	bl	800df44 <vTaskSwitchContext>
	prvTaskExitError();
 800eea0:	f7ff ff1e 	bl	800ece0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eea4:	2300      	movs	r3, #0
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	e000ed00 	.word	0xe000ed00
 800eeb4:	410fc271 	.word	0x410fc271
 800eeb8:	410fc270 	.word	0x410fc270
 800eebc:	e000e400 	.word	0xe000e400
 800eec0:	20001c80 	.word	0x20001c80
 800eec4:	20001c84 	.word	0x20001c84
 800eec8:	e000ed20 	.word	0xe000ed20
 800eecc:	20000634 	.word	0x20000634
 800eed0:	e000ef34 	.word	0xe000ef34

0800eed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	607b      	str	r3, [r7, #4]
}
 800eeec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eeee:	4b0f      	ldr	r3, [pc, #60]	; (800ef2c <vPortEnterCritical+0x58>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	3301      	adds	r3, #1
 800eef4:	4a0d      	ldr	r2, [pc, #52]	; (800ef2c <vPortEnterCritical+0x58>)
 800eef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eef8:	4b0c      	ldr	r3, [pc, #48]	; (800ef2c <vPortEnterCritical+0x58>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d10f      	bne.n	800ef20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef00:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <vPortEnterCritical+0x5c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00a      	beq.n	800ef20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	f383 8811 	msr	BASEPRI, r3
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	603b      	str	r3, [r7, #0]
}
 800ef1c:	bf00      	nop
 800ef1e:	e7fe      	b.n	800ef1e <vPortEnterCritical+0x4a>
	}
}
 800ef20:	bf00      	nop
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr
 800ef2c:	20000634 	.word	0x20000634
 800ef30:	e000ed04 	.word	0xe000ed04

0800ef34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ef3a:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <vPortExitCritical+0x50>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d10a      	bne.n	800ef58 <vPortExitCritical+0x24>
	__asm volatile
 800ef42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef46:	f383 8811 	msr	BASEPRI, r3
 800ef4a:	f3bf 8f6f 	isb	sy
 800ef4e:	f3bf 8f4f 	dsb	sy
 800ef52:	607b      	str	r3, [r7, #4]
}
 800ef54:	bf00      	nop
 800ef56:	e7fe      	b.n	800ef56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ef58:	4b0a      	ldr	r3, [pc, #40]	; (800ef84 <vPortExitCritical+0x50>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	4a09      	ldr	r2, [pc, #36]	; (800ef84 <vPortExitCritical+0x50>)
 800ef60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ef62:	4b08      	ldr	r3, [pc, #32]	; (800ef84 <vPortExitCritical+0x50>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d105      	bne.n	800ef76 <vPortExitCritical+0x42>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	f383 8811 	msr	BASEPRI, r3
}
 800ef74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ef76:	bf00      	nop
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	20000634 	.word	0x20000634
	...

0800ef90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef90:	f3ef 8009 	mrs	r0, PSP
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	4b15      	ldr	r3, [pc, #84]	; (800eff0 <pxCurrentTCBConst>)
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	f01e 0f10 	tst.w	lr, #16
 800efa0:	bf08      	it	eq
 800efa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800efa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efaa:	6010      	str	r0, [r2, #0]
 800efac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800efb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800efb4:	f380 8811 	msr	BASEPRI, r0
 800efb8:	f3bf 8f4f 	dsb	sy
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f7fe ffc0 	bl	800df44 <vTaskSwitchContext>
 800efc4:	f04f 0000 	mov.w	r0, #0
 800efc8:	f380 8811 	msr	BASEPRI, r0
 800efcc:	bc09      	pop	{r0, r3}
 800efce:	6819      	ldr	r1, [r3, #0]
 800efd0:	6808      	ldr	r0, [r1, #0]
 800efd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd6:	f01e 0f10 	tst.w	lr, #16
 800efda:	bf08      	it	eq
 800efdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800efe0:	f380 8809 	msr	PSP, r0
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop
 800efec:	f3af 8000 	nop.w

0800eff0 <pxCurrentTCBConst>:
 800eff0:	20001654 	.word	0x20001654
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop

0800eff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	607b      	str	r3, [r7, #4]
}
 800f010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f012:	f7fe fedd 	bl	800ddd0 <xTaskIncrementTick>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d003      	beq.n	800f024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f01c:	4b06      	ldr	r3, [pc, #24]	; (800f038 <xPortSysTickHandler+0x40>)
 800f01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	2300      	movs	r3, #0
 800f026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f383 8811 	msr	BASEPRI, r3
}
 800f02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f030:	bf00      	nop
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	e000ed04 	.word	0xe000ed04

0800f03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f03c:	b480      	push	{r7}
 800f03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f040:	4b0b      	ldr	r3, [pc, #44]	; (800f070 <vPortSetupTimerInterrupt+0x34>)
 800f042:	2200      	movs	r2, #0
 800f044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f046:	4b0b      	ldr	r3, [pc, #44]	; (800f074 <vPortSetupTimerInterrupt+0x38>)
 800f048:	2200      	movs	r2, #0
 800f04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f04c:	4b0a      	ldr	r3, [pc, #40]	; (800f078 <vPortSetupTimerInterrupt+0x3c>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a0a      	ldr	r2, [pc, #40]	; (800f07c <vPortSetupTimerInterrupt+0x40>)
 800f052:	fba2 2303 	umull	r2, r3, r2, r3
 800f056:	099b      	lsrs	r3, r3, #6
 800f058:	4a09      	ldr	r2, [pc, #36]	; (800f080 <vPortSetupTimerInterrupt+0x44>)
 800f05a:	3b01      	subs	r3, #1
 800f05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f05e:	4b04      	ldr	r3, [pc, #16]	; (800f070 <vPortSetupTimerInterrupt+0x34>)
 800f060:	2207      	movs	r2, #7
 800f062:	601a      	str	r2, [r3, #0]
}
 800f064:	bf00      	nop
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	e000e010 	.word	0xe000e010
 800f074:	e000e018 	.word	0xe000e018
 800f078:	2000059c 	.word	0x2000059c
 800f07c:	10624dd3 	.word	0x10624dd3
 800f080:	e000e014 	.word	0xe000e014

0800f084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f094 <vPortEnableVFP+0x10>
 800f088:	6801      	ldr	r1, [r0, #0]
 800f08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f08e:	6001      	str	r1, [r0, #0]
 800f090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f092:	bf00      	nop
 800f094:	e000ed88 	.word	0xe000ed88

0800f098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f09e:	f3ef 8305 	mrs	r3, IPSR
 800f0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2b0f      	cmp	r3, #15
 800f0a8:	d914      	bls.n	800f0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f0aa:	4a17      	ldr	r2, [pc, #92]	; (800f108 <vPortValidateInterruptPriority+0x70>)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f0b4:	4b15      	ldr	r3, [pc, #84]	; (800f10c <vPortValidateInterruptPriority+0x74>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	7afa      	ldrb	r2, [r7, #11]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d20a      	bcs.n	800f0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	607b      	str	r3, [r7, #4]
}
 800f0d0:	bf00      	nop
 800f0d2:	e7fe      	b.n	800f0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f0d4:	4b0e      	ldr	r3, [pc, #56]	; (800f110 <vPortValidateInterruptPriority+0x78>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f0dc:	4b0d      	ldr	r3, [pc, #52]	; (800f114 <vPortValidateInterruptPriority+0x7c>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d90a      	bls.n	800f0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e8:	f383 8811 	msr	BASEPRI, r3
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f3bf 8f4f 	dsb	sy
 800f0f4:	603b      	str	r3, [r7, #0]
}
 800f0f6:	bf00      	nop
 800f0f8:	e7fe      	b.n	800f0f8 <vPortValidateInterruptPriority+0x60>
	}
 800f0fa:	bf00      	nop
 800f0fc:	3714      	adds	r7, #20
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	e000e3f0 	.word	0xe000e3f0
 800f10c:	20001c80 	.word	0x20001c80
 800f110:	e000ed0c 	.word	0xe000ed0c
 800f114:	20001c84 	.word	0x20001c84

0800f118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b08a      	sub	sp, #40	; 0x28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f120:	2300      	movs	r3, #0
 800f122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f124:	f7fe fd98 	bl	800dc58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f128:	4b5b      	ldr	r3, [pc, #364]	; (800f298 <pvPortMalloc+0x180>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d101      	bne.n	800f134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f130:	f000 f920 	bl	800f374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f134:	4b59      	ldr	r3, [pc, #356]	; (800f29c <pvPortMalloc+0x184>)
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	4013      	ands	r3, r2
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f040 8093 	bne.w	800f268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d01d      	beq.n	800f184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f148:	2208      	movs	r2, #8
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4413      	add	r3, r2
 800f14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f003 0307 	and.w	r3, r3, #7
 800f156:	2b00      	cmp	r3, #0
 800f158:	d014      	beq.n	800f184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f023 0307 	bic.w	r3, r3, #7
 800f160:	3308      	adds	r3, #8
 800f162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f003 0307 	and.w	r3, r3, #7
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00a      	beq.n	800f184 <pvPortMalloc+0x6c>
	__asm volatile
 800f16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	617b      	str	r3, [r7, #20]
}
 800f180:	bf00      	nop
 800f182:	e7fe      	b.n	800f182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d06e      	beq.n	800f268 <pvPortMalloc+0x150>
 800f18a:	4b45      	ldr	r3, [pc, #276]	; (800f2a0 <pvPortMalloc+0x188>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	429a      	cmp	r2, r3
 800f192:	d869      	bhi.n	800f268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f194:	4b43      	ldr	r3, [pc, #268]	; (800f2a4 <pvPortMalloc+0x18c>)
 800f196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f198:	4b42      	ldr	r3, [pc, #264]	; (800f2a4 <pvPortMalloc+0x18c>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f19e:	e004      	b.n	800f1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d903      	bls.n	800f1bc <pvPortMalloc+0xa4>
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1f1      	bne.n	800f1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f1bc:	4b36      	ldr	r3, [pc, #216]	; (800f298 <pvPortMalloc+0x180>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d050      	beq.n	800f268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2208      	movs	r2, #8
 800f1cc:	4413      	add	r3, r2
 800f1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	6a3b      	ldr	r3, [r7, #32]
 800f1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	1ad2      	subs	r2, r2, r3
 800f1e0:	2308      	movs	r3, #8
 800f1e2:	005b      	lsls	r3, r3, #1
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d91f      	bls.n	800f228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	f003 0307 	and.w	r3, r3, #7
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00a      	beq.n	800f210 <pvPortMalloc+0xf8>
	__asm volatile
 800f1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fe:	f383 8811 	msr	BASEPRI, r3
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	f3bf 8f4f 	dsb	sy
 800f20a:	613b      	str	r3, [r7, #16]
}
 800f20c:	bf00      	nop
 800f20e:	e7fe      	b.n	800f20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	685a      	ldr	r2, [r3, #4]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	1ad2      	subs	r2, r2, r3
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f222:	69b8      	ldr	r0, [r7, #24]
 800f224:	f000 f908 	bl	800f438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f228:	4b1d      	ldr	r3, [pc, #116]	; (800f2a0 <pvPortMalloc+0x188>)
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	1ad3      	subs	r3, r2, r3
 800f232:	4a1b      	ldr	r2, [pc, #108]	; (800f2a0 <pvPortMalloc+0x188>)
 800f234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f236:	4b1a      	ldr	r3, [pc, #104]	; (800f2a0 <pvPortMalloc+0x188>)
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	4b1b      	ldr	r3, [pc, #108]	; (800f2a8 <pvPortMalloc+0x190>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d203      	bcs.n	800f24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f242:	4b17      	ldr	r3, [pc, #92]	; (800f2a0 <pvPortMalloc+0x188>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a18      	ldr	r2, [pc, #96]	; (800f2a8 <pvPortMalloc+0x190>)
 800f248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	4b13      	ldr	r3, [pc, #76]	; (800f29c <pvPortMalloc+0x184>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	431a      	orrs	r2, r3
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25a:	2200      	movs	r2, #0
 800f25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f25e:	4b13      	ldr	r3, [pc, #76]	; (800f2ac <pvPortMalloc+0x194>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	3301      	adds	r3, #1
 800f264:	4a11      	ldr	r2, [pc, #68]	; (800f2ac <pvPortMalloc+0x194>)
 800f266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f268:	f7fe fd04 	bl	800dc74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	f003 0307 	and.w	r3, r3, #7
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00a      	beq.n	800f28c <pvPortMalloc+0x174>
	__asm volatile
 800f276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	60fb      	str	r3, [r7, #12]
}
 800f288:	bf00      	nop
 800f28a:	e7fe      	b.n	800f28a <pvPortMalloc+0x172>
	return pvReturn;
 800f28c:	69fb      	ldr	r3, [r7, #28]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3728      	adds	r7, #40	; 0x28
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	20007e38 	.word	0x20007e38
 800f29c:	20007e4c 	.word	0x20007e4c
 800f2a0:	20007e3c 	.word	0x20007e3c
 800f2a4:	20007e30 	.word	0x20007e30
 800f2a8:	20007e40 	.word	0x20007e40
 800f2ac:	20007e44 	.word	0x20007e44

0800f2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b086      	sub	sp, #24
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d04d      	beq.n	800f35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f2c2:	2308      	movs	r3, #8
 800f2c4:	425b      	negs	r3, r3
 800f2c6:	697a      	ldr	r2, [r7, #20]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	685a      	ldr	r2, [r3, #4]
 800f2d4:	4b24      	ldr	r3, [pc, #144]	; (800f368 <vPortFree+0xb8>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4013      	ands	r3, r2
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10a      	bne.n	800f2f4 <vPortFree+0x44>
	__asm volatile
 800f2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	60fb      	str	r3, [r7, #12]
}
 800f2f0:	bf00      	nop
 800f2f2:	e7fe      	b.n	800f2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00a      	beq.n	800f312 <vPortFree+0x62>
	__asm volatile
 800f2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f300:	f383 8811 	msr	BASEPRI, r3
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	f3bf 8f4f 	dsb	sy
 800f30c:	60bb      	str	r3, [r7, #8]
}
 800f30e:	bf00      	nop
 800f310:	e7fe      	b.n	800f310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	4b14      	ldr	r3, [pc, #80]	; (800f368 <vPortFree+0xb8>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4013      	ands	r3, r2
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d01e      	beq.n	800f35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d11a      	bne.n	800f35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	685a      	ldr	r2, [r3, #4]
 800f32c:	4b0e      	ldr	r3, [pc, #56]	; (800f368 <vPortFree+0xb8>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	43db      	mvns	r3, r3
 800f332:	401a      	ands	r2, r3
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f338:	f7fe fc8e 	bl	800dc58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	685a      	ldr	r2, [r3, #4]
 800f340:	4b0a      	ldr	r3, [pc, #40]	; (800f36c <vPortFree+0xbc>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4413      	add	r3, r2
 800f346:	4a09      	ldr	r2, [pc, #36]	; (800f36c <vPortFree+0xbc>)
 800f348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f34a:	6938      	ldr	r0, [r7, #16]
 800f34c:	f000 f874 	bl	800f438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f350:	4b07      	ldr	r3, [pc, #28]	; (800f370 <vPortFree+0xc0>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3301      	adds	r3, #1
 800f356:	4a06      	ldr	r2, [pc, #24]	; (800f370 <vPortFree+0xc0>)
 800f358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f35a:	f7fe fc8b 	bl	800dc74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f35e:	bf00      	nop
 800f360:	3718      	adds	r7, #24
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
 800f366:	bf00      	nop
 800f368:	20007e4c 	.word	0x20007e4c
 800f36c:	20007e3c 	.word	0x20007e3c
 800f370:	20007e48 	.word	0x20007e48

0800f374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f37a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800f37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f380:	4b27      	ldr	r3, [pc, #156]	; (800f420 <prvHeapInit+0xac>)
 800f382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f003 0307 	and.w	r3, r3, #7
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00c      	beq.n	800f3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	3307      	adds	r3, #7
 800f392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f023 0307 	bic.w	r3, r3, #7
 800f39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	1ad3      	subs	r3, r2, r3
 800f3a2:	4a1f      	ldr	r2, [pc, #124]	; (800f420 <prvHeapInit+0xac>)
 800f3a4:	4413      	add	r3, r2
 800f3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f3ac:	4a1d      	ldr	r2, [pc, #116]	; (800f424 <prvHeapInit+0xb0>)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f3b2:	4b1c      	ldr	r3, [pc, #112]	; (800f424 <prvHeapInit+0xb0>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	4413      	add	r3, r2
 800f3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f3c0:	2208      	movs	r2, #8
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	1a9b      	subs	r3, r3, r2
 800f3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f023 0307 	bic.w	r3, r3, #7
 800f3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	4a15      	ldr	r2, [pc, #84]	; (800f428 <prvHeapInit+0xb4>)
 800f3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f3d6:	4b14      	ldr	r3, [pc, #80]	; (800f428 <prvHeapInit+0xb4>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f3de:	4b12      	ldr	r3, [pc, #72]	; (800f428 <prvHeapInit+0xb4>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	1ad2      	subs	r2, r2, r3
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f3f4:	4b0c      	ldr	r3, [pc, #48]	; (800f428 <prvHeapInit+0xb4>)
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	4a0a      	ldr	r2, [pc, #40]	; (800f42c <prvHeapInit+0xb8>)
 800f402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	4a09      	ldr	r2, [pc, #36]	; (800f430 <prvHeapInit+0xbc>)
 800f40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f40c:	4b09      	ldr	r3, [pc, #36]	; (800f434 <prvHeapInit+0xc0>)
 800f40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f412:	601a      	str	r2, [r3, #0]
}
 800f414:	bf00      	nop
 800f416:	3714      	adds	r7, #20
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	20001c88 	.word	0x20001c88
 800f424:	20007e30 	.word	0x20007e30
 800f428:	20007e38 	.word	0x20007e38
 800f42c:	20007e40 	.word	0x20007e40
 800f430:	20007e3c 	.word	0x20007e3c
 800f434:	20007e4c 	.word	0x20007e4c

0800f438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f440:	4b28      	ldr	r3, [pc, #160]	; (800f4e4 <prvInsertBlockIntoFreeList+0xac>)
 800f442:	60fb      	str	r3, [r7, #12]
 800f444:	e002      	b.n	800f44c <prvInsertBlockIntoFreeList+0x14>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	60fb      	str	r3, [r7, #12]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	429a      	cmp	r2, r3
 800f454:	d8f7      	bhi.n	800f446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	68ba      	ldr	r2, [r7, #8]
 800f460:	4413      	add	r3, r2
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	429a      	cmp	r2, r3
 800f466:	d108      	bne.n	800f47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	441a      	add	r2, r3
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	441a      	add	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d118      	bne.n	800f4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	4b15      	ldr	r3, [pc, #84]	; (800f4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	429a      	cmp	r2, r3
 800f498:	d00d      	beq.n	800f4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	685a      	ldr	r2, [r3, #4]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	441a      	add	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	e008      	b.n	800f4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f4b6:	4b0c      	ldr	r3, [pc, #48]	; (800f4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	e003      	b.n	800f4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d002      	beq.n	800f4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4d6:	bf00      	nop
 800f4d8:	3714      	adds	r7, #20
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	20007e30 	.word	0x20007e30
 800f4e8:	20007e38 	.word	0x20007e38

0800f4ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	4912      	ldr	r1, [pc, #72]	; (800f53c <MX_USB_DEVICE_Init+0x50>)
 800f4f4:	4812      	ldr	r0, [pc, #72]	; (800f540 <MX_USB_DEVICE_Init+0x54>)
 800f4f6:	f7fb fdbd 	bl	800b074 <USBD_Init>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f500:	f7f4 f830 	bl	8003564 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f504:	490f      	ldr	r1, [pc, #60]	; (800f544 <MX_USB_DEVICE_Init+0x58>)
 800f506:	480e      	ldr	r0, [pc, #56]	; (800f540 <MX_USB_DEVICE_Init+0x54>)
 800f508:	f7fb fde4 	bl	800b0d4 <USBD_RegisterClass>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d001      	beq.n	800f516 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f512:	f7f4 f827 	bl	8003564 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f516:	490c      	ldr	r1, [pc, #48]	; (800f548 <MX_USB_DEVICE_Init+0x5c>)
 800f518:	4809      	ldr	r0, [pc, #36]	; (800f540 <MX_USB_DEVICE_Init+0x54>)
 800f51a:	f7fb fd1b 	bl	800af54 <USBD_CDC_RegisterInterface>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d001      	beq.n	800f528 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f524:	f7f4 f81e 	bl	8003564 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f528:	4805      	ldr	r0, [pc, #20]	; (800f540 <MX_USB_DEVICE_Init+0x54>)
 800f52a:	f7fb fe09 	bl	800b140 <USBD_Start>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f534:	f7f4 f816 	bl	8003564 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f538:	bf00      	nop
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	2000064c 	.word	0x2000064c
 800f540:	20007e50 	.word	0x20007e50
 800f544:	200005b4 	.word	0x200005b4
 800f548:	20000638 	.word	0x20000638

0800f54c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f550:	2200      	movs	r2, #0
 800f552:	4905      	ldr	r1, [pc, #20]	; (800f568 <CDC_Init_FS+0x1c>)
 800f554:	4805      	ldr	r0, [pc, #20]	; (800f56c <CDC_Init_FS+0x20>)
 800f556:	f7fb fd17 	bl	800af88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f55a:	4905      	ldr	r1, [pc, #20]	; (800f570 <CDC_Init_FS+0x24>)
 800f55c:	4803      	ldr	r0, [pc, #12]	; (800f56c <CDC_Init_FS+0x20>)
 800f55e:	f7fb fd35 	bl	800afcc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f562:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f564:	4618      	mov	r0, r3
 800f566:	bd80      	pop	{r7, pc}
 800f568:	2000852c 	.word	0x2000852c
 800f56c:	20007e50 	.word	0x20007e50
 800f570:	2000812c 	.word	0x2000812c

0800f574 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f574:	b480      	push	{r7}
 800f576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f578:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	6039      	str	r1, [r7, #0]
 800f58e:	71fb      	strb	r3, [r7, #7]
 800f590:	4613      	mov	r3, r2
 800f592:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f594:	79fb      	ldrb	r3, [r7, #7]
 800f596:	2b23      	cmp	r3, #35	; 0x23
 800f598:	d84a      	bhi.n	800f630 <CDC_Control_FS+0xac>
 800f59a:	a201      	add	r2, pc, #4	; (adr r2, 800f5a0 <CDC_Control_FS+0x1c>)
 800f59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a0:	0800f631 	.word	0x0800f631
 800f5a4:	0800f631 	.word	0x0800f631
 800f5a8:	0800f631 	.word	0x0800f631
 800f5ac:	0800f631 	.word	0x0800f631
 800f5b0:	0800f631 	.word	0x0800f631
 800f5b4:	0800f631 	.word	0x0800f631
 800f5b8:	0800f631 	.word	0x0800f631
 800f5bc:	0800f631 	.word	0x0800f631
 800f5c0:	0800f631 	.word	0x0800f631
 800f5c4:	0800f631 	.word	0x0800f631
 800f5c8:	0800f631 	.word	0x0800f631
 800f5cc:	0800f631 	.word	0x0800f631
 800f5d0:	0800f631 	.word	0x0800f631
 800f5d4:	0800f631 	.word	0x0800f631
 800f5d8:	0800f631 	.word	0x0800f631
 800f5dc:	0800f631 	.word	0x0800f631
 800f5e0:	0800f631 	.word	0x0800f631
 800f5e4:	0800f631 	.word	0x0800f631
 800f5e8:	0800f631 	.word	0x0800f631
 800f5ec:	0800f631 	.word	0x0800f631
 800f5f0:	0800f631 	.word	0x0800f631
 800f5f4:	0800f631 	.word	0x0800f631
 800f5f8:	0800f631 	.word	0x0800f631
 800f5fc:	0800f631 	.word	0x0800f631
 800f600:	0800f631 	.word	0x0800f631
 800f604:	0800f631 	.word	0x0800f631
 800f608:	0800f631 	.word	0x0800f631
 800f60c:	0800f631 	.word	0x0800f631
 800f610:	0800f631 	.word	0x0800f631
 800f614:	0800f631 	.word	0x0800f631
 800f618:	0800f631 	.word	0x0800f631
 800f61c:	0800f631 	.word	0x0800f631
 800f620:	0800f631 	.word	0x0800f631
 800f624:	0800f631 	.word	0x0800f631
 800f628:	0800f631 	.word	0x0800f631
 800f62c:	0800f631 	.word	0x0800f631
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f630:	bf00      	nop
  }

  return (USBD_OK);
 800f632:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f634:	4618      	mov	r0, r3
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f64a:	6879      	ldr	r1, [r7, #4]
 800f64c:	4805      	ldr	r0, [pc, #20]	; (800f664 <CDC_Receive_FS+0x24>)
 800f64e:	f7fb fcbd 	bl	800afcc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f652:	4804      	ldr	r0, [pc, #16]	; (800f664 <CDC_Receive_FS+0x24>)
 800f654:	f7fb fcd8 	bl	800b008 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f658:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	20007e50 	.word	0x20007e50

0800f668 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f668:	b480      	push	{r7}
 800f66a:	b087      	sub	sp, #28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	4613      	mov	r3, r2
 800f674:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f676:	2300      	movs	r3, #0
 800f678:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f67a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	371c      	adds	r7, #28
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr
	...

0800f68c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	4603      	mov	r3, r0
 800f694:	6039      	str	r1, [r7, #0]
 800f696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	2212      	movs	r2, #18
 800f69c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f69e:	4b03      	ldr	r3, [pc, #12]	; (800f6ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr
 800f6ac:	20000668 	.word	0x20000668

0800f6b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	6039      	str	r1, [r7, #0]
 800f6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2204      	movs	r2, #4
 800f6c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6c2:	4b03      	ldr	r3, [pc, #12]	; (800f6d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr
 800f6d0:	2000067c 	.word	0x2000067c

0800f6d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	6039      	str	r1, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d105      	bne.n	800f6f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	4907      	ldr	r1, [pc, #28]	; (800f708 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6ea:	4808      	ldr	r0, [pc, #32]	; (800f70c <USBD_FS_ProductStrDescriptor+0x38>)
 800f6ec:	f7fc fed4 	bl	800c498 <USBD_GetString>
 800f6f0:	e004      	b.n	800f6fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	4904      	ldr	r1, [pc, #16]	; (800f708 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6f6:	4805      	ldr	r0, [pc, #20]	; (800f70c <USBD_FS_ProductStrDescriptor+0x38>)
 800f6f8:	f7fc fece 	bl	800c498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6fc:	4b02      	ldr	r3, [pc, #8]	; (800f708 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	2000892c 	.word	0x2000892c
 800f70c:	08010c8c 	.word	0x08010c8c

0800f710 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	6039      	str	r1, [r7, #0]
 800f71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f71c:	683a      	ldr	r2, [r7, #0]
 800f71e:	4904      	ldr	r1, [pc, #16]	; (800f730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f720:	4804      	ldr	r0, [pc, #16]	; (800f734 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f722:	f7fc feb9 	bl	800c498 <USBD_GetString>
  return USBD_StrDesc;
 800f726:	4b02      	ldr	r3, [pc, #8]	; (800f730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	2000892c 	.word	0x2000892c
 800f734:	08010ca4 	.word	0x08010ca4

0800f738 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	6039      	str	r1, [r7, #0]
 800f742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	221a      	movs	r2, #26
 800f748:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f74a:	f000 f843 	bl	800f7d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f74e:	4b02      	ldr	r3, [pc, #8]	; (800f758 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	20000680 	.word	0x20000680

0800f75c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	4603      	mov	r3, r0
 800f764:	6039      	str	r1, [r7, #0]
 800f766:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f768:	79fb      	ldrb	r3, [r7, #7]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d105      	bne.n	800f77a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f76e:	683a      	ldr	r2, [r7, #0]
 800f770:	4907      	ldr	r1, [pc, #28]	; (800f790 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f772:	4808      	ldr	r0, [pc, #32]	; (800f794 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f774:	f7fc fe90 	bl	800c498 <USBD_GetString>
 800f778:	e004      	b.n	800f784 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f77a:	683a      	ldr	r2, [r7, #0]
 800f77c:	4904      	ldr	r1, [pc, #16]	; (800f790 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f77e:	4805      	ldr	r0, [pc, #20]	; (800f794 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f780:	f7fc fe8a 	bl	800c498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f784:	4b02      	ldr	r3, [pc, #8]	; (800f790 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f786:	4618      	mov	r0, r3
 800f788:	3708      	adds	r7, #8
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	2000892c 	.word	0x2000892c
 800f794:	08010cb8 	.word	0x08010cb8

0800f798 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	6039      	str	r1, [r7, #0]
 800f7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7a4:	79fb      	ldrb	r3, [r7, #7]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d105      	bne.n	800f7b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7aa:	683a      	ldr	r2, [r7, #0]
 800f7ac:	4907      	ldr	r1, [pc, #28]	; (800f7cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7ae:	4808      	ldr	r0, [pc, #32]	; (800f7d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7b0:	f7fc fe72 	bl	800c498 <USBD_GetString>
 800f7b4:	e004      	b.n	800f7c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	4904      	ldr	r1, [pc, #16]	; (800f7cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7ba:	4805      	ldr	r0, [pc, #20]	; (800f7d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7bc:	f7fc fe6c 	bl	800c498 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7c0:	4b02      	ldr	r3, [pc, #8]	; (800f7cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3708      	adds	r7, #8
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	2000892c 	.word	0x2000892c
 800f7d0:	08010cc4 	.word	0x08010cc4

0800f7d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7da:	4b0f      	ldr	r3, [pc, #60]	; (800f818 <Get_SerialNum+0x44>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7e0:	4b0e      	ldr	r3, [pc, #56]	; (800f81c <Get_SerialNum+0x48>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7e6:	4b0e      	ldr	r3, [pc, #56]	; (800f820 <Get_SerialNum+0x4c>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d009      	beq.n	800f80e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7fa:	2208      	movs	r2, #8
 800f7fc:	4909      	ldr	r1, [pc, #36]	; (800f824 <Get_SerialNum+0x50>)
 800f7fe:	68f8      	ldr	r0, [r7, #12]
 800f800:	f000 f814 	bl	800f82c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f804:	2204      	movs	r2, #4
 800f806:	4908      	ldr	r1, [pc, #32]	; (800f828 <Get_SerialNum+0x54>)
 800f808:	68b8      	ldr	r0, [r7, #8]
 800f80a:	f000 f80f 	bl	800f82c <IntToUnicode>
  }
}
 800f80e:	bf00      	nop
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	1fff7a10 	.word	0x1fff7a10
 800f81c:	1fff7a14 	.word	0x1fff7a14
 800f820:	1fff7a18 	.word	0x1fff7a18
 800f824:	20000682 	.word	0x20000682
 800f828:	20000692 	.word	0x20000692

0800f82c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b087      	sub	sp, #28
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	4613      	mov	r3, r2
 800f838:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f83e:	2300      	movs	r3, #0
 800f840:	75fb      	strb	r3, [r7, #23]
 800f842:	e027      	b.n	800f894 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	0f1b      	lsrs	r3, r3, #28
 800f848:	2b09      	cmp	r3, #9
 800f84a:	d80b      	bhi.n	800f864 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	0f1b      	lsrs	r3, r3, #28
 800f850:	b2da      	uxtb	r2, r3
 800f852:	7dfb      	ldrb	r3, [r7, #23]
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	4619      	mov	r1, r3
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	440b      	add	r3, r1
 800f85c:	3230      	adds	r2, #48	; 0x30
 800f85e:	b2d2      	uxtb	r2, r2
 800f860:	701a      	strb	r2, [r3, #0]
 800f862:	e00a      	b.n	800f87a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	0f1b      	lsrs	r3, r3, #28
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	7dfb      	ldrb	r3, [r7, #23]
 800f86c:	005b      	lsls	r3, r3, #1
 800f86e:	4619      	mov	r1, r3
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	440b      	add	r3, r1
 800f874:	3237      	adds	r2, #55	; 0x37
 800f876:	b2d2      	uxtb	r2, r2
 800f878:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	011b      	lsls	r3, r3, #4
 800f87e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f880:	7dfb      	ldrb	r3, [r7, #23]
 800f882:	005b      	lsls	r3, r3, #1
 800f884:	3301      	adds	r3, #1
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	4413      	add	r3, r2
 800f88a:	2200      	movs	r2, #0
 800f88c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f88e:	7dfb      	ldrb	r3, [r7, #23]
 800f890:	3301      	adds	r3, #1
 800f892:	75fb      	strb	r3, [r7, #23]
 800f894:	7dfa      	ldrb	r2, [r7, #23]
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d3d3      	bcc.n	800f844 <IntToUnicode+0x18>
  }
}
 800f89c:	bf00      	nop
 800f89e:	bf00      	nop
 800f8a0:	371c      	adds	r7, #28
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
	...

0800f8ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b08a      	sub	sp, #40	; 0x28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8b4:	f107 0314 	add.w	r3, r7, #20
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	601a      	str	r2, [r3, #0]
 800f8bc:	605a      	str	r2, [r3, #4]
 800f8be:	609a      	str	r2, [r3, #8]
 800f8c0:	60da      	str	r2, [r3, #12]
 800f8c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8cc:	d13a      	bne.n	800f944 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	613b      	str	r3, [r7, #16]
 800f8d2:	4b1e      	ldr	r3, [pc, #120]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d6:	4a1d      	ldr	r2, [pc, #116]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f8d8:	f043 0301 	orr.w	r3, r3, #1
 800f8dc:	6313      	str	r3, [r2, #48]	; 0x30
 800f8de:	4b1b      	ldr	r3, [pc, #108]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e2:	f003 0301 	and.w	r3, r3, #1
 800f8e6:	613b      	str	r3, [r7, #16]
 800f8e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f8ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f8ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f0:	2302      	movs	r3, #2
 800f8f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f8fc:	230a      	movs	r3, #10
 800f8fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f900:	f107 0314 	add.w	r3, r7, #20
 800f904:	4619      	mov	r1, r3
 800f906:	4812      	ldr	r0, [pc, #72]	; (800f950 <HAL_PCD_MspInit+0xa4>)
 800f908:	f7f4 fd3c 	bl	8004384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f90c:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f910:	4a0e      	ldr	r2, [pc, #56]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f916:	6353      	str	r3, [r2, #52]	; 0x34
 800f918:	2300      	movs	r3, #0
 800f91a:	60fb      	str	r3, [r7, #12]
 800f91c:	4b0b      	ldr	r3, [pc, #44]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f91e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f920:	4a0a      	ldr	r2, [pc, #40]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f926:	6453      	str	r3, [r2, #68]	; 0x44
 800f928:	4b08      	ldr	r3, [pc, #32]	; (800f94c <HAL_PCD_MspInit+0xa0>)
 800f92a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f92c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f930:	60fb      	str	r3, [r7, #12]
 800f932:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f934:	2200      	movs	r2, #0
 800f936:	2105      	movs	r1, #5
 800f938:	2043      	movs	r0, #67	; 0x43
 800f93a:	f7f4 fcf9 	bl	8004330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f93e:	2043      	movs	r0, #67	; 0x43
 800f940:	f7f4 fd12 	bl	8004368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f944:	bf00      	nop
 800f946:	3728      	adds	r7, #40	; 0x28
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	40023800 	.word	0x40023800
 800f950:	40020000 	.word	0x40020000

0800f954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f968:	4619      	mov	r1, r3
 800f96a:	4610      	mov	r0, r2
 800f96c:	f7fb fc35 	bl	800b1da <USBD_LL_SetupStage>
}
 800f970:	bf00      	nop
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	460b      	mov	r3, r1
 800f982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f98a:	78fa      	ldrb	r2, [r7, #3]
 800f98c:	6879      	ldr	r1, [r7, #4]
 800f98e:	4613      	mov	r3, r2
 800f990:	00db      	lsls	r3, r3, #3
 800f992:	4413      	add	r3, r2
 800f994:	009b      	lsls	r3, r3, #2
 800f996:	440b      	add	r3, r1
 800f998:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	78fb      	ldrb	r3, [r7, #3]
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	f7fb fc6f 	bl	800b284 <USBD_LL_DataOutStage>
}
 800f9a6:	bf00      	nop
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b082      	sub	sp, #8
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f9c0:	78fa      	ldrb	r2, [r7, #3]
 800f9c2:	6879      	ldr	r1, [r7, #4]
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	00db      	lsls	r3, r3, #3
 800f9c8:	4413      	add	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	440b      	add	r3, r1
 800f9ce:	334c      	adds	r3, #76	; 0x4c
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	f7fb fd08 	bl	800b3ea <USBD_LL_DataInStage>
}
 800f9da:	bf00      	nop
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b082      	sub	sp, #8
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fb fe3c 	bl	800b66e <USBD_LL_SOF>
}
 800f9f6:	bf00      	nop
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b084      	sub	sp, #16
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa06:	2301      	movs	r3, #1
 800fa08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68db      	ldr	r3, [r3, #12]
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	d001      	beq.n	800fa16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fa12:	f7f3 fda7 	bl	8003564 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa1c:	7bfa      	ldrb	r2, [r7, #15]
 800fa1e:	4611      	mov	r1, r2
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fb fde6 	bl	800b5f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7fb fd8e 	bl	800b54e <USBD_LL_Reset>
}
 800fa32:	bf00      	nop
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
	...

0800fa3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fb fde1 	bl	800b612 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	6812      	ldr	r2, [r2, #0]
 800fa5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa62:	f043 0301 	orr.w	r3, r3, #1
 800fa66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6a1b      	ldr	r3, [r3, #32]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d005      	beq.n	800fa7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa70:	4b04      	ldr	r3, [pc, #16]	; (800fa84 <HAL_PCD_SuspendCallback+0x48>)
 800fa72:	691b      	ldr	r3, [r3, #16]
 800fa74:	4a03      	ldr	r2, [pc, #12]	; (800fa84 <HAL_PCD_SuspendCallback+0x48>)
 800fa76:	f043 0306 	orr.w	r3, r3, #6
 800fa7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa7c:	bf00      	nop
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	e000ed00 	.word	0xe000ed00

0800fa88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fb fdd1 	bl	800b63e <USBD_LL_Resume>
}
 800fa9c:	bf00      	nop
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	460b      	mov	r3, r1
 800faae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fab6:	78fa      	ldrb	r2, [r7, #3]
 800fab8:	4611      	mov	r1, r2
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fb fe29 	bl	800b712 <USBD_LL_IsoOUTIncomplete>
}
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	460b      	mov	r3, r1
 800fad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fada:	78fa      	ldrb	r2, [r7, #3]
 800fadc:	4611      	mov	r1, r2
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fb fde5 	bl	800b6ae <USBD_LL_IsoINIncomplete>
}
 800fae4:	bf00      	nop
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fb fe3b 	bl	800b776 <USBD_LL_DevConnected>
}
 800fb00:	bf00      	nop
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fb fe38 	bl	800b78c <USBD_LL_DevDisconnected>
}
 800fb1c:	bf00      	nop
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d13c      	bne.n	800fbae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fb34:	4a20      	ldr	r2, [pc, #128]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a1e      	ldr	r2, [pc, #120]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb40:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb44:	4b1c      	ldr	r3, [pc, #112]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fb4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fb4c:	4b1a      	ldr	r3, [pc, #104]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb4e:	2204      	movs	r2, #4
 800fb50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb52:	4b19      	ldr	r3, [pc, #100]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb54:	2202      	movs	r2, #2
 800fb56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb58:	4b17      	ldr	r3, [pc, #92]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb5e:	4b16      	ldr	r3, [pc, #88]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb60:	2202      	movs	r2, #2
 800fb62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb64:	4b14      	ldr	r3, [pc, #80]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb6a:	4b13      	ldr	r3, [pc, #76]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb70:	4b11      	ldr	r3, [pc, #68]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb72:	2200      	movs	r2, #0
 800fb74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fb76:	4b10      	ldr	r3, [pc, #64]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb78:	2200      	movs	r2, #0
 800fb7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fb7c:	4b0e      	ldr	r3, [pc, #56]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb7e:	2200      	movs	r2, #0
 800fb80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fb82:	480d      	ldr	r0, [pc, #52]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb84:	f7f5 fd8b 	bl	800569e <HAL_PCD_Init>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d001      	beq.n	800fb92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fb8e:	f7f3 fce9 	bl	8003564 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fb92:	2180      	movs	r1, #128	; 0x80
 800fb94:	4808      	ldr	r0, [pc, #32]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fb96:	f7f6 ffe2 	bl	8006b5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fb9a:	2240      	movs	r2, #64	; 0x40
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	4806      	ldr	r0, [pc, #24]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fba0:	f7f6 ff96 	bl	8006ad0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fba4:	2280      	movs	r2, #128	; 0x80
 800fba6:	2101      	movs	r1, #1
 800fba8:	4803      	ldr	r0, [pc, #12]	; (800fbb8 <USBD_LL_Init+0x94>)
 800fbaa:	f7f6 ff91 	bl	8006ad0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fbae:	2300      	movs	r3, #0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	20008b2c 	.word	0x20008b2c

0800fbbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7f5 fe80 	bl	80058d8 <HAL_PCD_Start>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbdc:	7bfb      	ldrb	r3, [r7, #15]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 f942 	bl	800fe68 <USBD_Get_USB_Status>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b084      	sub	sp, #16
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
 800fbfa:	4608      	mov	r0, r1
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	461a      	mov	r2, r3
 800fc00:	4603      	mov	r3, r0
 800fc02:	70fb      	strb	r3, [r7, #3]
 800fc04:	460b      	mov	r3, r1
 800fc06:	70bb      	strb	r3, [r7, #2]
 800fc08:	4613      	mov	r3, r2
 800fc0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc1a:	78bb      	ldrb	r3, [r7, #2]
 800fc1c:	883a      	ldrh	r2, [r7, #0]
 800fc1e:	78f9      	ldrb	r1, [r7, #3]
 800fc20:	f7f6 fb51 	bl	80062c6 <HAL_PCD_EP_Open>
 800fc24:	4603      	mov	r3, r0
 800fc26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f000 f91c 	bl	800fe68 <USBD_Get_USB_Status>
 800fc30:	4603      	mov	r3, r0
 800fc32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc34:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b084      	sub	sp, #16
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
 800fc46:	460b      	mov	r3, r1
 800fc48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc58:	78fa      	ldrb	r2, [r7, #3]
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7f6 fb9a 	bl	8006396 <HAL_PCD_EP_Close>
 800fc62:	4603      	mov	r3, r0
 800fc64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc66:	7bfb      	ldrb	r3, [r7, #15]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 f8fd 	bl	800fe68 <USBD_Get_USB_Status>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc72:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	460b      	mov	r3, r1
 800fc86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc96:	78fa      	ldrb	r2, [r7, #3]
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7f6 fc72 	bl	8006584 <HAL_PCD_EP_SetStall>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f000 f8de 	bl	800fe68 <USBD_Get_USB_Status>
 800fcac:	4603      	mov	r3, r0
 800fcae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b084      	sub	sp, #16
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcca:	2300      	movs	r3, #0
 800fccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcd4:	78fa      	ldrb	r2, [r7, #3]
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7f6 fcb7 	bl	800664c <HAL_PCD_EP_ClrStall>
 800fcde:	4603      	mov	r3, r0
 800fce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fce2:	7bfb      	ldrb	r3, [r7, #15]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f000 f8bf 	bl	800fe68 <USBD_Get_USB_Status>
 800fcea:	4603      	mov	r3, r0
 800fcec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcee:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	460b      	mov	r3, r1
 800fd02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	da0b      	bge.n	800fd2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd14:	78fb      	ldrb	r3, [r7, #3]
 800fd16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd1a:	68f9      	ldr	r1, [r7, #12]
 800fd1c:	4613      	mov	r3, r2
 800fd1e:	00db      	lsls	r3, r3, #3
 800fd20:	4413      	add	r3, r2
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	440b      	add	r3, r1
 800fd26:	333e      	adds	r3, #62	; 0x3e
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	e00b      	b.n	800fd44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd2c:	78fb      	ldrb	r3, [r7, #3]
 800fd2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd32:	68f9      	ldr	r1, [r7, #12]
 800fd34:	4613      	mov	r3, r2
 800fd36:	00db      	lsls	r3, r3, #3
 800fd38:	4413      	add	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	440b      	add	r3, r1
 800fd3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fd42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3714      	adds	r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd6a:	78fa      	ldrb	r2, [r7, #3]
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f6 fa84 	bl	800627c <HAL_PCD_SetAddress>
 800fd74:	4603      	mov	r3, r0
 800fd76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 f874 	bl	800fe68 <USBD_Get_USB_Status>
 800fd80:	4603      	mov	r3, r0
 800fd82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd84:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b086      	sub	sp, #24
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	60f8      	str	r0, [r7, #12]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fda2:	2300      	movs	r3, #0
 800fda4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdac:	7af9      	ldrb	r1, [r7, #11]
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	f7f6 fb9d 	bl	80064f0 <HAL_PCD_EP_Transmit>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdba:	7dfb      	ldrb	r3, [r7, #23]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f000 f853 	bl	800fe68 <USBD_Get_USB_Status>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fdc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3718      	adds	r7, #24
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	607a      	str	r2, [r7, #4]
 800fdda:	603b      	str	r3, [r7, #0]
 800fddc:	460b      	mov	r3, r1
 800fdde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fde0:	2300      	movs	r3, #0
 800fde2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fde4:	2300      	movs	r3, #0
 800fde6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdee:	7af9      	ldrb	r1, [r7, #11]
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	f7f6 fb19 	bl	800642a <HAL_PCD_EP_Receive>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdfc:	7dfb      	ldrb	r3, [r7, #23]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f000 f832 	bl	800fe68 <USBD_Get_USB_Status>
 800fe04:	4603      	mov	r3, r0
 800fe06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe08:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3718      	adds	r7, #24
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b082      	sub	sp, #8
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe24:	78fa      	ldrb	r2, [r7, #3]
 800fe26:	4611      	mov	r1, r2
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7f6 fb49 	bl	80064c0 <HAL_PCD_EP_GetRxCount>
 800fe2e:	4603      	mov	r3, r0
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe40:	4b03      	ldr	r3, [pc, #12]	; (800fe50 <USBD_static_malloc+0x18>)
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	370c      	adds	r7, #12
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	20009038 	.word	0x20009038

0800fe54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]

}
 800fe5c:	bf00      	nop
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	4603      	mov	r3, r0
 800fe70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe76:	79fb      	ldrb	r3, [r7, #7]
 800fe78:	2b03      	cmp	r3, #3
 800fe7a:	d817      	bhi.n	800feac <USBD_Get_USB_Status+0x44>
 800fe7c:	a201      	add	r2, pc, #4	; (adr r2, 800fe84 <USBD_Get_USB_Status+0x1c>)
 800fe7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe82:	bf00      	nop
 800fe84:	0800fe95 	.word	0x0800fe95
 800fe88:	0800fe9b 	.word	0x0800fe9b
 800fe8c:	0800fea1 	.word	0x0800fea1
 800fe90:	0800fea7 	.word	0x0800fea7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	73fb      	strb	r3, [r7, #15]
    break;
 800fe98:	e00b      	b.n	800feb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe9a:	2303      	movs	r3, #3
 800fe9c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe9e:	e008      	b.n	800feb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fea0:	2301      	movs	r3, #1
 800fea2:	73fb      	strb	r3, [r7, #15]
    break;
 800fea4:	e005      	b.n	800feb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fea6:	2303      	movs	r3, #3
 800fea8:	73fb      	strb	r3, [r7, #15]
    break;
 800feaa:	e002      	b.n	800feb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800feac:	2303      	movs	r3, #3
 800feae:	73fb      	strb	r3, [r7, #15]
    break;
 800feb0:	bf00      	nop
  }
  return usb_status;
 800feb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <__errno>:
 800fec0:	4b01      	ldr	r3, [pc, #4]	; (800fec8 <__errno+0x8>)
 800fec2:	6818      	ldr	r0, [r3, #0]
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	2000069c 	.word	0x2000069c

0800fecc <__libc_init_array>:
 800fecc:	b570      	push	{r4, r5, r6, lr}
 800fece:	4d0d      	ldr	r5, [pc, #52]	; (800ff04 <__libc_init_array+0x38>)
 800fed0:	4c0d      	ldr	r4, [pc, #52]	; (800ff08 <__libc_init_array+0x3c>)
 800fed2:	1b64      	subs	r4, r4, r5
 800fed4:	10a4      	asrs	r4, r4, #2
 800fed6:	2600      	movs	r6, #0
 800fed8:	42a6      	cmp	r6, r4
 800feda:	d109      	bne.n	800fef0 <__libc_init_array+0x24>
 800fedc:	4d0b      	ldr	r5, [pc, #44]	; (800ff0c <__libc_init_array+0x40>)
 800fede:	4c0c      	ldr	r4, [pc, #48]	; (800ff10 <__libc_init_array+0x44>)
 800fee0:	f000 fcc0 	bl	8010864 <_init>
 800fee4:	1b64      	subs	r4, r4, r5
 800fee6:	10a4      	asrs	r4, r4, #2
 800fee8:	2600      	movs	r6, #0
 800feea:	42a6      	cmp	r6, r4
 800feec:	d105      	bne.n	800fefa <__libc_init_array+0x2e>
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fef4:	4798      	blx	r3
 800fef6:	3601      	adds	r6, #1
 800fef8:	e7ee      	b.n	800fed8 <__libc_init_array+0xc>
 800fefa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fefe:	4798      	blx	r3
 800ff00:	3601      	adds	r6, #1
 800ff02:	e7f2      	b.n	800feea <__libc_init_array+0x1e>
 800ff04:	08011254 	.word	0x08011254
 800ff08:	08011254 	.word	0x08011254
 800ff0c:	08011254 	.word	0x08011254
 800ff10:	08011258 	.word	0x08011258

0800ff14 <malloc>:
 800ff14:	4b02      	ldr	r3, [pc, #8]	; (800ff20 <malloc+0xc>)
 800ff16:	4601      	mov	r1, r0
 800ff18:	6818      	ldr	r0, [r3, #0]
 800ff1a:	f000 b88d 	b.w	8010038 <_malloc_r>
 800ff1e:	bf00      	nop
 800ff20:	2000069c 	.word	0x2000069c

0800ff24 <free>:
 800ff24:	4b02      	ldr	r3, [pc, #8]	; (800ff30 <free+0xc>)
 800ff26:	4601      	mov	r1, r0
 800ff28:	6818      	ldr	r0, [r3, #0]
 800ff2a:	f000 b819 	b.w	800ff60 <_free_r>
 800ff2e:	bf00      	nop
 800ff30:	2000069c 	.word	0x2000069c

0800ff34 <memcpy>:
 800ff34:	440a      	add	r2, r1
 800ff36:	4291      	cmp	r1, r2
 800ff38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff3c:	d100      	bne.n	800ff40 <memcpy+0xc>
 800ff3e:	4770      	bx	lr
 800ff40:	b510      	push	{r4, lr}
 800ff42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff4a:	4291      	cmp	r1, r2
 800ff4c:	d1f9      	bne.n	800ff42 <memcpy+0xe>
 800ff4e:	bd10      	pop	{r4, pc}

0800ff50 <memset>:
 800ff50:	4402      	add	r2, r0
 800ff52:	4603      	mov	r3, r0
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d100      	bne.n	800ff5a <memset+0xa>
 800ff58:	4770      	bx	lr
 800ff5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff5e:	e7f9      	b.n	800ff54 <memset+0x4>

0800ff60 <_free_r>:
 800ff60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff62:	2900      	cmp	r1, #0
 800ff64:	d044      	beq.n	800fff0 <_free_r+0x90>
 800ff66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff6a:	9001      	str	r0, [sp, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ff72:	bfb8      	it	lt
 800ff74:	18e4      	addlt	r4, r4, r3
 800ff76:	f000 f927 	bl	80101c8 <__malloc_lock>
 800ff7a:	4a1e      	ldr	r2, [pc, #120]	; (800fff4 <_free_r+0x94>)
 800ff7c:	9801      	ldr	r0, [sp, #4]
 800ff7e:	6813      	ldr	r3, [r2, #0]
 800ff80:	b933      	cbnz	r3, 800ff90 <_free_r+0x30>
 800ff82:	6063      	str	r3, [r4, #4]
 800ff84:	6014      	str	r4, [r2, #0]
 800ff86:	b003      	add	sp, #12
 800ff88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff8c:	f000 b922 	b.w	80101d4 <__malloc_unlock>
 800ff90:	42a3      	cmp	r3, r4
 800ff92:	d908      	bls.n	800ffa6 <_free_r+0x46>
 800ff94:	6825      	ldr	r5, [r4, #0]
 800ff96:	1961      	adds	r1, r4, r5
 800ff98:	428b      	cmp	r3, r1
 800ff9a:	bf01      	itttt	eq
 800ff9c:	6819      	ldreq	r1, [r3, #0]
 800ff9e:	685b      	ldreq	r3, [r3, #4]
 800ffa0:	1949      	addeq	r1, r1, r5
 800ffa2:	6021      	streq	r1, [r4, #0]
 800ffa4:	e7ed      	b.n	800ff82 <_free_r+0x22>
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	b10b      	cbz	r3, 800ffb0 <_free_r+0x50>
 800ffac:	42a3      	cmp	r3, r4
 800ffae:	d9fa      	bls.n	800ffa6 <_free_r+0x46>
 800ffb0:	6811      	ldr	r1, [r2, #0]
 800ffb2:	1855      	adds	r5, r2, r1
 800ffb4:	42a5      	cmp	r5, r4
 800ffb6:	d10b      	bne.n	800ffd0 <_free_r+0x70>
 800ffb8:	6824      	ldr	r4, [r4, #0]
 800ffba:	4421      	add	r1, r4
 800ffbc:	1854      	adds	r4, r2, r1
 800ffbe:	42a3      	cmp	r3, r4
 800ffc0:	6011      	str	r1, [r2, #0]
 800ffc2:	d1e0      	bne.n	800ff86 <_free_r+0x26>
 800ffc4:	681c      	ldr	r4, [r3, #0]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	6053      	str	r3, [r2, #4]
 800ffca:	4421      	add	r1, r4
 800ffcc:	6011      	str	r1, [r2, #0]
 800ffce:	e7da      	b.n	800ff86 <_free_r+0x26>
 800ffd0:	d902      	bls.n	800ffd8 <_free_r+0x78>
 800ffd2:	230c      	movs	r3, #12
 800ffd4:	6003      	str	r3, [r0, #0]
 800ffd6:	e7d6      	b.n	800ff86 <_free_r+0x26>
 800ffd8:	6825      	ldr	r5, [r4, #0]
 800ffda:	1961      	adds	r1, r4, r5
 800ffdc:	428b      	cmp	r3, r1
 800ffde:	bf04      	itt	eq
 800ffe0:	6819      	ldreq	r1, [r3, #0]
 800ffe2:	685b      	ldreq	r3, [r3, #4]
 800ffe4:	6063      	str	r3, [r4, #4]
 800ffe6:	bf04      	itt	eq
 800ffe8:	1949      	addeq	r1, r1, r5
 800ffea:	6021      	streq	r1, [r4, #0]
 800ffec:	6054      	str	r4, [r2, #4]
 800ffee:	e7ca      	b.n	800ff86 <_free_r+0x26>
 800fff0:	b003      	add	sp, #12
 800fff2:	bd30      	pop	{r4, r5, pc}
 800fff4:	20009258 	.word	0x20009258

0800fff8 <sbrk_aligned>:
 800fff8:	b570      	push	{r4, r5, r6, lr}
 800fffa:	4e0e      	ldr	r6, [pc, #56]	; (8010034 <sbrk_aligned+0x3c>)
 800fffc:	460c      	mov	r4, r1
 800fffe:	6831      	ldr	r1, [r6, #0]
 8010000:	4605      	mov	r5, r0
 8010002:	b911      	cbnz	r1, 801000a <sbrk_aligned+0x12>
 8010004:	f000 f894 	bl	8010130 <_sbrk_r>
 8010008:	6030      	str	r0, [r6, #0]
 801000a:	4621      	mov	r1, r4
 801000c:	4628      	mov	r0, r5
 801000e:	f000 f88f 	bl	8010130 <_sbrk_r>
 8010012:	1c43      	adds	r3, r0, #1
 8010014:	d00a      	beq.n	801002c <sbrk_aligned+0x34>
 8010016:	1cc4      	adds	r4, r0, #3
 8010018:	f024 0403 	bic.w	r4, r4, #3
 801001c:	42a0      	cmp	r0, r4
 801001e:	d007      	beq.n	8010030 <sbrk_aligned+0x38>
 8010020:	1a21      	subs	r1, r4, r0
 8010022:	4628      	mov	r0, r5
 8010024:	f000 f884 	bl	8010130 <_sbrk_r>
 8010028:	3001      	adds	r0, #1
 801002a:	d101      	bne.n	8010030 <sbrk_aligned+0x38>
 801002c:	f04f 34ff 	mov.w	r4, #4294967295
 8010030:	4620      	mov	r0, r4
 8010032:	bd70      	pop	{r4, r5, r6, pc}
 8010034:	2000925c 	.word	0x2000925c

08010038 <_malloc_r>:
 8010038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801003c:	1ccd      	adds	r5, r1, #3
 801003e:	f025 0503 	bic.w	r5, r5, #3
 8010042:	3508      	adds	r5, #8
 8010044:	2d0c      	cmp	r5, #12
 8010046:	bf38      	it	cc
 8010048:	250c      	movcc	r5, #12
 801004a:	2d00      	cmp	r5, #0
 801004c:	4607      	mov	r7, r0
 801004e:	db01      	blt.n	8010054 <_malloc_r+0x1c>
 8010050:	42a9      	cmp	r1, r5
 8010052:	d905      	bls.n	8010060 <_malloc_r+0x28>
 8010054:	230c      	movs	r3, #12
 8010056:	603b      	str	r3, [r7, #0]
 8010058:	2600      	movs	r6, #0
 801005a:	4630      	mov	r0, r6
 801005c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010060:	4e2e      	ldr	r6, [pc, #184]	; (801011c <_malloc_r+0xe4>)
 8010062:	f000 f8b1 	bl	80101c8 <__malloc_lock>
 8010066:	6833      	ldr	r3, [r6, #0]
 8010068:	461c      	mov	r4, r3
 801006a:	bb34      	cbnz	r4, 80100ba <_malloc_r+0x82>
 801006c:	4629      	mov	r1, r5
 801006e:	4638      	mov	r0, r7
 8010070:	f7ff ffc2 	bl	800fff8 <sbrk_aligned>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	4604      	mov	r4, r0
 8010078:	d14d      	bne.n	8010116 <_malloc_r+0xde>
 801007a:	6834      	ldr	r4, [r6, #0]
 801007c:	4626      	mov	r6, r4
 801007e:	2e00      	cmp	r6, #0
 8010080:	d140      	bne.n	8010104 <_malloc_r+0xcc>
 8010082:	6823      	ldr	r3, [r4, #0]
 8010084:	4631      	mov	r1, r6
 8010086:	4638      	mov	r0, r7
 8010088:	eb04 0803 	add.w	r8, r4, r3
 801008c:	f000 f850 	bl	8010130 <_sbrk_r>
 8010090:	4580      	cmp	r8, r0
 8010092:	d13a      	bne.n	801010a <_malloc_r+0xd2>
 8010094:	6821      	ldr	r1, [r4, #0]
 8010096:	3503      	adds	r5, #3
 8010098:	1a6d      	subs	r5, r5, r1
 801009a:	f025 0503 	bic.w	r5, r5, #3
 801009e:	3508      	adds	r5, #8
 80100a0:	2d0c      	cmp	r5, #12
 80100a2:	bf38      	it	cc
 80100a4:	250c      	movcc	r5, #12
 80100a6:	4629      	mov	r1, r5
 80100a8:	4638      	mov	r0, r7
 80100aa:	f7ff ffa5 	bl	800fff8 <sbrk_aligned>
 80100ae:	3001      	adds	r0, #1
 80100b0:	d02b      	beq.n	801010a <_malloc_r+0xd2>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	442b      	add	r3, r5
 80100b6:	6023      	str	r3, [r4, #0]
 80100b8:	e00e      	b.n	80100d8 <_malloc_r+0xa0>
 80100ba:	6822      	ldr	r2, [r4, #0]
 80100bc:	1b52      	subs	r2, r2, r5
 80100be:	d41e      	bmi.n	80100fe <_malloc_r+0xc6>
 80100c0:	2a0b      	cmp	r2, #11
 80100c2:	d916      	bls.n	80100f2 <_malloc_r+0xba>
 80100c4:	1961      	adds	r1, r4, r5
 80100c6:	42a3      	cmp	r3, r4
 80100c8:	6025      	str	r5, [r4, #0]
 80100ca:	bf18      	it	ne
 80100cc:	6059      	strne	r1, [r3, #4]
 80100ce:	6863      	ldr	r3, [r4, #4]
 80100d0:	bf08      	it	eq
 80100d2:	6031      	streq	r1, [r6, #0]
 80100d4:	5162      	str	r2, [r4, r5]
 80100d6:	604b      	str	r3, [r1, #4]
 80100d8:	4638      	mov	r0, r7
 80100da:	f104 060b 	add.w	r6, r4, #11
 80100de:	f000 f879 	bl	80101d4 <__malloc_unlock>
 80100e2:	f026 0607 	bic.w	r6, r6, #7
 80100e6:	1d23      	adds	r3, r4, #4
 80100e8:	1af2      	subs	r2, r6, r3
 80100ea:	d0b6      	beq.n	801005a <_malloc_r+0x22>
 80100ec:	1b9b      	subs	r3, r3, r6
 80100ee:	50a3      	str	r3, [r4, r2]
 80100f0:	e7b3      	b.n	801005a <_malloc_r+0x22>
 80100f2:	6862      	ldr	r2, [r4, #4]
 80100f4:	42a3      	cmp	r3, r4
 80100f6:	bf0c      	ite	eq
 80100f8:	6032      	streq	r2, [r6, #0]
 80100fa:	605a      	strne	r2, [r3, #4]
 80100fc:	e7ec      	b.n	80100d8 <_malloc_r+0xa0>
 80100fe:	4623      	mov	r3, r4
 8010100:	6864      	ldr	r4, [r4, #4]
 8010102:	e7b2      	b.n	801006a <_malloc_r+0x32>
 8010104:	4634      	mov	r4, r6
 8010106:	6876      	ldr	r6, [r6, #4]
 8010108:	e7b9      	b.n	801007e <_malloc_r+0x46>
 801010a:	230c      	movs	r3, #12
 801010c:	603b      	str	r3, [r7, #0]
 801010e:	4638      	mov	r0, r7
 8010110:	f000 f860 	bl	80101d4 <__malloc_unlock>
 8010114:	e7a1      	b.n	801005a <_malloc_r+0x22>
 8010116:	6025      	str	r5, [r4, #0]
 8010118:	e7de      	b.n	80100d8 <_malloc_r+0xa0>
 801011a:	bf00      	nop
 801011c:	20009258 	.word	0x20009258

08010120 <realloc>:
 8010120:	4b02      	ldr	r3, [pc, #8]	; (801012c <realloc+0xc>)
 8010122:	460a      	mov	r2, r1
 8010124:	4601      	mov	r1, r0
 8010126:	6818      	ldr	r0, [r3, #0]
 8010128:	f000 b85a 	b.w	80101e0 <_realloc_r>
 801012c:	2000069c 	.word	0x2000069c

08010130 <_sbrk_r>:
 8010130:	b538      	push	{r3, r4, r5, lr}
 8010132:	4d06      	ldr	r5, [pc, #24]	; (801014c <_sbrk_r+0x1c>)
 8010134:	2300      	movs	r3, #0
 8010136:	4604      	mov	r4, r0
 8010138:	4608      	mov	r0, r1
 801013a:	602b      	str	r3, [r5, #0]
 801013c:	f7f3 ff68 	bl	8004010 <_sbrk>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_sbrk_r+0x1a>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_sbrk_r+0x1a>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	20009260 	.word	0x20009260

08010150 <siprintf>:
 8010150:	b40e      	push	{r1, r2, r3}
 8010152:	b500      	push	{lr}
 8010154:	b09c      	sub	sp, #112	; 0x70
 8010156:	ab1d      	add	r3, sp, #116	; 0x74
 8010158:	9002      	str	r0, [sp, #8]
 801015a:	9006      	str	r0, [sp, #24]
 801015c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010160:	4809      	ldr	r0, [pc, #36]	; (8010188 <siprintf+0x38>)
 8010162:	9107      	str	r1, [sp, #28]
 8010164:	9104      	str	r1, [sp, #16]
 8010166:	4909      	ldr	r1, [pc, #36]	; (801018c <siprintf+0x3c>)
 8010168:	f853 2b04 	ldr.w	r2, [r3], #4
 801016c:	9105      	str	r1, [sp, #20]
 801016e:	6800      	ldr	r0, [r0, #0]
 8010170:	9301      	str	r3, [sp, #4]
 8010172:	a902      	add	r1, sp, #8
 8010174:	f000 f8be 	bl	80102f4 <_svfiprintf_r>
 8010178:	9b02      	ldr	r3, [sp, #8]
 801017a:	2200      	movs	r2, #0
 801017c:	701a      	strb	r2, [r3, #0]
 801017e:	b01c      	add	sp, #112	; 0x70
 8010180:	f85d eb04 	ldr.w	lr, [sp], #4
 8010184:	b003      	add	sp, #12
 8010186:	4770      	bx	lr
 8010188:	2000069c 	.word	0x2000069c
 801018c:	ffff0208 	.word	0xffff0208

08010190 <strcpy>:
 8010190:	4603      	mov	r3, r0
 8010192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010196:	f803 2b01 	strb.w	r2, [r3], #1
 801019a:	2a00      	cmp	r2, #0
 801019c:	d1f9      	bne.n	8010192 <strcpy+0x2>
 801019e:	4770      	bx	lr

080101a0 <strncpy>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	3901      	subs	r1, #1
 80101a4:	4603      	mov	r3, r0
 80101a6:	b132      	cbz	r2, 80101b6 <strncpy+0x16>
 80101a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80101ac:	f803 4b01 	strb.w	r4, [r3], #1
 80101b0:	3a01      	subs	r2, #1
 80101b2:	2c00      	cmp	r4, #0
 80101b4:	d1f7      	bne.n	80101a6 <strncpy+0x6>
 80101b6:	441a      	add	r2, r3
 80101b8:	2100      	movs	r1, #0
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d100      	bne.n	80101c0 <strncpy+0x20>
 80101be:	bd10      	pop	{r4, pc}
 80101c0:	f803 1b01 	strb.w	r1, [r3], #1
 80101c4:	e7f9      	b.n	80101ba <strncpy+0x1a>
	...

080101c8 <__malloc_lock>:
 80101c8:	4801      	ldr	r0, [pc, #4]	; (80101d0 <__malloc_lock+0x8>)
 80101ca:	f000 bb27 	b.w	801081c <__retarget_lock_acquire_recursive>
 80101ce:	bf00      	nop
 80101d0:	20009264 	.word	0x20009264

080101d4 <__malloc_unlock>:
 80101d4:	4801      	ldr	r0, [pc, #4]	; (80101dc <__malloc_unlock+0x8>)
 80101d6:	f000 bb22 	b.w	801081e <__retarget_lock_release_recursive>
 80101da:	bf00      	nop
 80101dc:	20009264 	.word	0x20009264

080101e0 <_realloc_r>:
 80101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e4:	4680      	mov	r8, r0
 80101e6:	4614      	mov	r4, r2
 80101e8:	460e      	mov	r6, r1
 80101ea:	b921      	cbnz	r1, 80101f6 <_realloc_r+0x16>
 80101ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101f0:	4611      	mov	r1, r2
 80101f2:	f7ff bf21 	b.w	8010038 <_malloc_r>
 80101f6:	b92a      	cbnz	r2, 8010204 <_realloc_r+0x24>
 80101f8:	f7ff feb2 	bl	800ff60 <_free_r>
 80101fc:	4625      	mov	r5, r4
 80101fe:	4628      	mov	r0, r5
 8010200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010204:	f000 fb26 	bl	8010854 <_malloc_usable_size_r>
 8010208:	4284      	cmp	r4, r0
 801020a:	4607      	mov	r7, r0
 801020c:	d802      	bhi.n	8010214 <_realloc_r+0x34>
 801020e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010212:	d812      	bhi.n	801023a <_realloc_r+0x5a>
 8010214:	4621      	mov	r1, r4
 8010216:	4640      	mov	r0, r8
 8010218:	f7ff ff0e 	bl	8010038 <_malloc_r>
 801021c:	4605      	mov	r5, r0
 801021e:	2800      	cmp	r0, #0
 8010220:	d0ed      	beq.n	80101fe <_realloc_r+0x1e>
 8010222:	42bc      	cmp	r4, r7
 8010224:	4622      	mov	r2, r4
 8010226:	4631      	mov	r1, r6
 8010228:	bf28      	it	cs
 801022a:	463a      	movcs	r2, r7
 801022c:	f7ff fe82 	bl	800ff34 <memcpy>
 8010230:	4631      	mov	r1, r6
 8010232:	4640      	mov	r0, r8
 8010234:	f7ff fe94 	bl	800ff60 <_free_r>
 8010238:	e7e1      	b.n	80101fe <_realloc_r+0x1e>
 801023a:	4635      	mov	r5, r6
 801023c:	e7df      	b.n	80101fe <_realloc_r+0x1e>

0801023e <__ssputs_r>:
 801023e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010242:	688e      	ldr	r6, [r1, #8]
 8010244:	429e      	cmp	r6, r3
 8010246:	4682      	mov	sl, r0
 8010248:	460c      	mov	r4, r1
 801024a:	4690      	mov	r8, r2
 801024c:	461f      	mov	r7, r3
 801024e:	d838      	bhi.n	80102c2 <__ssputs_r+0x84>
 8010250:	898a      	ldrh	r2, [r1, #12]
 8010252:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010256:	d032      	beq.n	80102be <__ssputs_r+0x80>
 8010258:	6825      	ldr	r5, [r4, #0]
 801025a:	6909      	ldr	r1, [r1, #16]
 801025c:	eba5 0901 	sub.w	r9, r5, r1
 8010260:	6965      	ldr	r5, [r4, #20]
 8010262:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010266:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801026a:	3301      	adds	r3, #1
 801026c:	444b      	add	r3, r9
 801026e:	106d      	asrs	r5, r5, #1
 8010270:	429d      	cmp	r5, r3
 8010272:	bf38      	it	cc
 8010274:	461d      	movcc	r5, r3
 8010276:	0553      	lsls	r3, r2, #21
 8010278:	d531      	bpl.n	80102de <__ssputs_r+0xa0>
 801027a:	4629      	mov	r1, r5
 801027c:	f7ff fedc 	bl	8010038 <_malloc_r>
 8010280:	4606      	mov	r6, r0
 8010282:	b950      	cbnz	r0, 801029a <__ssputs_r+0x5c>
 8010284:	230c      	movs	r3, #12
 8010286:	f8ca 3000 	str.w	r3, [sl]
 801028a:	89a3      	ldrh	r3, [r4, #12]
 801028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010290:	81a3      	strh	r3, [r4, #12]
 8010292:	f04f 30ff 	mov.w	r0, #4294967295
 8010296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029a:	6921      	ldr	r1, [r4, #16]
 801029c:	464a      	mov	r2, r9
 801029e:	f7ff fe49 	bl	800ff34 <memcpy>
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80102a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102ac:	81a3      	strh	r3, [r4, #12]
 80102ae:	6126      	str	r6, [r4, #16]
 80102b0:	6165      	str	r5, [r4, #20]
 80102b2:	444e      	add	r6, r9
 80102b4:	eba5 0509 	sub.w	r5, r5, r9
 80102b8:	6026      	str	r6, [r4, #0]
 80102ba:	60a5      	str	r5, [r4, #8]
 80102bc:	463e      	mov	r6, r7
 80102be:	42be      	cmp	r6, r7
 80102c0:	d900      	bls.n	80102c4 <__ssputs_r+0x86>
 80102c2:	463e      	mov	r6, r7
 80102c4:	6820      	ldr	r0, [r4, #0]
 80102c6:	4632      	mov	r2, r6
 80102c8:	4641      	mov	r1, r8
 80102ca:	f000 faa9 	bl	8010820 <memmove>
 80102ce:	68a3      	ldr	r3, [r4, #8]
 80102d0:	1b9b      	subs	r3, r3, r6
 80102d2:	60a3      	str	r3, [r4, #8]
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	4433      	add	r3, r6
 80102d8:	6023      	str	r3, [r4, #0]
 80102da:	2000      	movs	r0, #0
 80102dc:	e7db      	b.n	8010296 <__ssputs_r+0x58>
 80102de:	462a      	mov	r2, r5
 80102e0:	f7ff ff7e 	bl	80101e0 <_realloc_r>
 80102e4:	4606      	mov	r6, r0
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d1e1      	bne.n	80102ae <__ssputs_r+0x70>
 80102ea:	6921      	ldr	r1, [r4, #16]
 80102ec:	4650      	mov	r0, sl
 80102ee:	f7ff fe37 	bl	800ff60 <_free_r>
 80102f2:	e7c7      	b.n	8010284 <__ssputs_r+0x46>

080102f4 <_svfiprintf_r>:
 80102f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f8:	4698      	mov	r8, r3
 80102fa:	898b      	ldrh	r3, [r1, #12]
 80102fc:	061b      	lsls	r3, r3, #24
 80102fe:	b09d      	sub	sp, #116	; 0x74
 8010300:	4607      	mov	r7, r0
 8010302:	460d      	mov	r5, r1
 8010304:	4614      	mov	r4, r2
 8010306:	d50e      	bpl.n	8010326 <_svfiprintf_r+0x32>
 8010308:	690b      	ldr	r3, [r1, #16]
 801030a:	b963      	cbnz	r3, 8010326 <_svfiprintf_r+0x32>
 801030c:	2140      	movs	r1, #64	; 0x40
 801030e:	f7ff fe93 	bl	8010038 <_malloc_r>
 8010312:	6028      	str	r0, [r5, #0]
 8010314:	6128      	str	r0, [r5, #16]
 8010316:	b920      	cbnz	r0, 8010322 <_svfiprintf_r+0x2e>
 8010318:	230c      	movs	r3, #12
 801031a:	603b      	str	r3, [r7, #0]
 801031c:	f04f 30ff 	mov.w	r0, #4294967295
 8010320:	e0d1      	b.n	80104c6 <_svfiprintf_r+0x1d2>
 8010322:	2340      	movs	r3, #64	; 0x40
 8010324:	616b      	str	r3, [r5, #20]
 8010326:	2300      	movs	r3, #0
 8010328:	9309      	str	r3, [sp, #36]	; 0x24
 801032a:	2320      	movs	r3, #32
 801032c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010330:	f8cd 800c 	str.w	r8, [sp, #12]
 8010334:	2330      	movs	r3, #48	; 0x30
 8010336:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80104e0 <_svfiprintf_r+0x1ec>
 801033a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801033e:	f04f 0901 	mov.w	r9, #1
 8010342:	4623      	mov	r3, r4
 8010344:	469a      	mov	sl, r3
 8010346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801034a:	b10a      	cbz	r2, 8010350 <_svfiprintf_r+0x5c>
 801034c:	2a25      	cmp	r2, #37	; 0x25
 801034e:	d1f9      	bne.n	8010344 <_svfiprintf_r+0x50>
 8010350:	ebba 0b04 	subs.w	fp, sl, r4
 8010354:	d00b      	beq.n	801036e <_svfiprintf_r+0x7a>
 8010356:	465b      	mov	r3, fp
 8010358:	4622      	mov	r2, r4
 801035a:	4629      	mov	r1, r5
 801035c:	4638      	mov	r0, r7
 801035e:	f7ff ff6e 	bl	801023e <__ssputs_r>
 8010362:	3001      	adds	r0, #1
 8010364:	f000 80aa 	beq.w	80104bc <_svfiprintf_r+0x1c8>
 8010368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801036a:	445a      	add	r2, fp
 801036c:	9209      	str	r2, [sp, #36]	; 0x24
 801036e:	f89a 3000 	ldrb.w	r3, [sl]
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 80a2 	beq.w	80104bc <_svfiprintf_r+0x1c8>
 8010378:	2300      	movs	r3, #0
 801037a:	f04f 32ff 	mov.w	r2, #4294967295
 801037e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010382:	f10a 0a01 	add.w	sl, sl, #1
 8010386:	9304      	str	r3, [sp, #16]
 8010388:	9307      	str	r3, [sp, #28]
 801038a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801038e:	931a      	str	r3, [sp, #104]	; 0x68
 8010390:	4654      	mov	r4, sl
 8010392:	2205      	movs	r2, #5
 8010394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010398:	4851      	ldr	r0, [pc, #324]	; (80104e0 <_svfiprintf_r+0x1ec>)
 801039a:	f7ef ff29 	bl	80001f0 <memchr>
 801039e:	9a04      	ldr	r2, [sp, #16]
 80103a0:	b9d8      	cbnz	r0, 80103da <_svfiprintf_r+0xe6>
 80103a2:	06d0      	lsls	r0, r2, #27
 80103a4:	bf44      	itt	mi
 80103a6:	2320      	movmi	r3, #32
 80103a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103ac:	0711      	lsls	r1, r2, #28
 80103ae:	bf44      	itt	mi
 80103b0:	232b      	movmi	r3, #43	; 0x2b
 80103b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103b6:	f89a 3000 	ldrb.w	r3, [sl]
 80103ba:	2b2a      	cmp	r3, #42	; 0x2a
 80103bc:	d015      	beq.n	80103ea <_svfiprintf_r+0xf6>
 80103be:	9a07      	ldr	r2, [sp, #28]
 80103c0:	4654      	mov	r4, sl
 80103c2:	2000      	movs	r0, #0
 80103c4:	f04f 0c0a 	mov.w	ip, #10
 80103c8:	4621      	mov	r1, r4
 80103ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103ce:	3b30      	subs	r3, #48	; 0x30
 80103d0:	2b09      	cmp	r3, #9
 80103d2:	d94e      	bls.n	8010472 <_svfiprintf_r+0x17e>
 80103d4:	b1b0      	cbz	r0, 8010404 <_svfiprintf_r+0x110>
 80103d6:	9207      	str	r2, [sp, #28]
 80103d8:	e014      	b.n	8010404 <_svfiprintf_r+0x110>
 80103da:	eba0 0308 	sub.w	r3, r0, r8
 80103de:	fa09 f303 	lsl.w	r3, r9, r3
 80103e2:	4313      	orrs	r3, r2
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	46a2      	mov	sl, r4
 80103e8:	e7d2      	b.n	8010390 <_svfiprintf_r+0x9c>
 80103ea:	9b03      	ldr	r3, [sp, #12]
 80103ec:	1d19      	adds	r1, r3, #4
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	9103      	str	r1, [sp, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	bfbb      	ittet	lt
 80103f6:	425b      	neglt	r3, r3
 80103f8:	f042 0202 	orrlt.w	r2, r2, #2
 80103fc:	9307      	strge	r3, [sp, #28]
 80103fe:	9307      	strlt	r3, [sp, #28]
 8010400:	bfb8      	it	lt
 8010402:	9204      	strlt	r2, [sp, #16]
 8010404:	7823      	ldrb	r3, [r4, #0]
 8010406:	2b2e      	cmp	r3, #46	; 0x2e
 8010408:	d10c      	bne.n	8010424 <_svfiprintf_r+0x130>
 801040a:	7863      	ldrb	r3, [r4, #1]
 801040c:	2b2a      	cmp	r3, #42	; 0x2a
 801040e:	d135      	bne.n	801047c <_svfiprintf_r+0x188>
 8010410:	9b03      	ldr	r3, [sp, #12]
 8010412:	1d1a      	adds	r2, r3, #4
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	9203      	str	r2, [sp, #12]
 8010418:	2b00      	cmp	r3, #0
 801041a:	bfb8      	it	lt
 801041c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010420:	3402      	adds	r4, #2
 8010422:	9305      	str	r3, [sp, #20]
 8010424:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80104f0 <_svfiprintf_r+0x1fc>
 8010428:	7821      	ldrb	r1, [r4, #0]
 801042a:	2203      	movs	r2, #3
 801042c:	4650      	mov	r0, sl
 801042e:	f7ef fedf 	bl	80001f0 <memchr>
 8010432:	b140      	cbz	r0, 8010446 <_svfiprintf_r+0x152>
 8010434:	2340      	movs	r3, #64	; 0x40
 8010436:	eba0 000a 	sub.w	r0, r0, sl
 801043a:	fa03 f000 	lsl.w	r0, r3, r0
 801043e:	9b04      	ldr	r3, [sp, #16]
 8010440:	4303      	orrs	r3, r0
 8010442:	3401      	adds	r4, #1
 8010444:	9304      	str	r3, [sp, #16]
 8010446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801044a:	4826      	ldr	r0, [pc, #152]	; (80104e4 <_svfiprintf_r+0x1f0>)
 801044c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010450:	2206      	movs	r2, #6
 8010452:	f7ef fecd 	bl	80001f0 <memchr>
 8010456:	2800      	cmp	r0, #0
 8010458:	d038      	beq.n	80104cc <_svfiprintf_r+0x1d8>
 801045a:	4b23      	ldr	r3, [pc, #140]	; (80104e8 <_svfiprintf_r+0x1f4>)
 801045c:	bb1b      	cbnz	r3, 80104a6 <_svfiprintf_r+0x1b2>
 801045e:	9b03      	ldr	r3, [sp, #12]
 8010460:	3307      	adds	r3, #7
 8010462:	f023 0307 	bic.w	r3, r3, #7
 8010466:	3308      	adds	r3, #8
 8010468:	9303      	str	r3, [sp, #12]
 801046a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801046c:	4433      	add	r3, r6
 801046e:	9309      	str	r3, [sp, #36]	; 0x24
 8010470:	e767      	b.n	8010342 <_svfiprintf_r+0x4e>
 8010472:	fb0c 3202 	mla	r2, ip, r2, r3
 8010476:	460c      	mov	r4, r1
 8010478:	2001      	movs	r0, #1
 801047a:	e7a5      	b.n	80103c8 <_svfiprintf_r+0xd4>
 801047c:	2300      	movs	r3, #0
 801047e:	3401      	adds	r4, #1
 8010480:	9305      	str	r3, [sp, #20]
 8010482:	4619      	mov	r1, r3
 8010484:	f04f 0c0a 	mov.w	ip, #10
 8010488:	4620      	mov	r0, r4
 801048a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801048e:	3a30      	subs	r2, #48	; 0x30
 8010490:	2a09      	cmp	r2, #9
 8010492:	d903      	bls.n	801049c <_svfiprintf_r+0x1a8>
 8010494:	2b00      	cmp	r3, #0
 8010496:	d0c5      	beq.n	8010424 <_svfiprintf_r+0x130>
 8010498:	9105      	str	r1, [sp, #20]
 801049a:	e7c3      	b.n	8010424 <_svfiprintf_r+0x130>
 801049c:	fb0c 2101 	mla	r1, ip, r1, r2
 80104a0:	4604      	mov	r4, r0
 80104a2:	2301      	movs	r3, #1
 80104a4:	e7f0      	b.n	8010488 <_svfiprintf_r+0x194>
 80104a6:	ab03      	add	r3, sp, #12
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	462a      	mov	r2, r5
 80104ac:	4b0f      	ldr	r3, [pc, #60]	; (80104ec <_svfiprintf_r+0x1f8>)
 80104ae:	a904      	add	r1, sp, #16
 80104b0:	4638      	mov	r0, r7
 80104b2:	f3af 8000 	nop.w
 80104b6:	1c42      	adds	r2, r0, #1
 80104b8:	4606      	mov	r6, r0
 80104ba:	d1d6      	bne.n	801046a <_svfiprintf_r+0x176>
 80104bc:	89ab      	ldrh	r3, [r5, #12]
 80104be:	065b      	lsls	r3, r3, #25
 80104c0:	f53f af2c 	bmi.w	801031c <_svfiprintf_r+0x28>
 80104c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104c6:	b01d      	add	sp, #116	; 0x74
 80104c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104cc:	ab03      	add	r3, sp, #12
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	462a      	mov	r2, r5
 80104d2:	4b06      	ldr	r3, [pc, #24]	; (80104ec <_svfiprintf_r+0x1f8>)
 80104d4:	a904      	add	r1, sp, #16
 80104d6:	4638      	mov	r0, r7
 80104d8:	f000 f87a 	bl	80105d0 <_printf_i>
 80104dc:	e7eb      	b.n	80104b6 <_svfiprintf_r+0x1c2>
 80104de:	bf00      	nop
 80104e0:	08011218 	.word	0x08011218
 80104e4:	08011222 	.word	0x08011222
 80104e8:	00000000 	.word	0x00000000
 80104ec:	0801023f 	.word	0x0801023f
 80104f0:	0801121e 	.word	0x0801121e

080104f4 <_printf_common>:
 80104f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104f8:	4616      	mov	r6, r2
 80104fa:	4699      	mov	r9, r3
 80104fc:	688a      	ldr	r2, [r1, #8]
 80104fe:	690b      	ldr	r3, [r1, #16]
 8010500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010504:	4293      	cmp	r3, r2
 8010506:	bfb8      	it	lt
 8010508:	4613      	movlt	r3, r2
 801050a:	6033      	str	r3, [r6, #0]
 801050c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010510:	4607      	mov	r7, r0
 8010512:	460c      	mov	r4, r1
 8010514:	b10a      	cbz	r2, 801051a <_printf_common+0x26>
 8010516:	3301      	adds	r3, #1
 8010518:	6033      	str	r3, [r6, #0]
 801051a:	6823      	ldr	r3, [r4, #0]
 801051c:	0699      	lsls	r1, r3, #26
 801051e:	bf42      	ittt	mi
 8010520:	6833      	ldrmi	r3, [r6, #0]
 8010522:	3302      	addmi	r3, #2
 8010524:	6033      	strmi	r3, [r6, #0]
 8010526:	6825      	ldr	r5, [r4, #0]
 8010528:	f015 0506 	ands.w	r5, r5, #6
 801052c:	d106      	bne.n	801053c <_printf_common+0x48>
 801052e:	f104 0a19 	add.w	sl, r4, #25
 8010532:	68e3      	ldr	r3, [r4, #12]
 8010534:	6832      	ldr	r2, [r6, #0]
 8010536:	1a9b      	subs	r3, r3, r2
 8010538:	42ab      	cmp	r3, r5
 801053a:	dc26      	bgt.n	801058a <_printf_common+0x96>
 801053c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010540:	1e13      	subs	r3, r2, #0
 8010542:	6822      	ldr	r2, [r4, #0]
 8010544:	bf18      	it	ne
 8010546:	2301      	movne	r3, #1
 8010548:	0692      	lsls	r2, r2, #26
 801054a:	d42b      	bmi.n	80105a4 <_printf_common+0xb0>
 801054c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010550:	4649      	mov	r1, r9
 8010552:	4638      	mov	r0, r7
 8010554:	47c0      	blx	r8
 8010556:	3001      	adds	r0, #1
 8010558:	d01e      	beq.n	8010598 <_printf_common+0xa4>
 801055a:	6823      	ldr	r3, [r4, #0]
 801055c:	68e5      	ldr	r5, [r4, #12]
 801055e:	6832      	ldr	r2, [r6, #0]
 8010560:	f003 0306 	and.w	r3, r3, #6
 8010564:	2b04      	cmp	r3, #4
 8010566:	bf08      	it	eq
 8010568:	1aad      	subeq	r5, r5, r2
 801056a:	68a3      	ldr	r3, [r4, #8]
 801056c:	6922      	ldr	r2, [r4, #16]
 801056e:	bf0c      	ite	eq
 8010570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010574:	2500      	movne	r5, #0
 8010576:	4293      	cmp	r3, r2
 8010578:	bfc4      	itt	gt
 801057a:	1a9b      	subgt	r3, r3, r2
 801057c:	18ed      	addgt	r5, r5, r3
 801057e:	2600      	movs	r6, #0
 8010580:	341a      	adds	r4, #26
 8010582:	42b5      	cmp	r5, r6
 8010584:	d11a      	bne.n	80105bc <_printf_common+0xc8>
 8010586:	2000      	movs	r0, #0
 8010588:	e008      	b.n	801059c <_printf_common+0xa8>
 801058a:	2301      	movs	r3, #1
 801058c:	4652      	mov	r2, sl
 801058e:	4649      	mov	r1, r9
 8010590:	4638      	mov	r0, r7
 8010592:	47c0      	blx	r8
 8010594:	3001      	adds	r0, #1
 8010596:	d103      	bne.n	80105a0 <_printf_common+0xac>
 8010598:	f04f 30ff 	mov.w	r0, #4294967295
 801059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a0:	3501      	adds	r5, #1
 80105a2:	e7c6      	b.n	8010532 <_printf_common+0x3e>
 80105a4:	18e1      	adds	r1, r4, r3
 80105a6:	1c5a      	adds	r2, r3, #1
 80105a8:	2030      	movs	r0, #48	; 0x30
 80105aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105ae:	4422      	add	r2, r4
 80105b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80105b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80105b8:	3302      	adds	r3, #2
 80105ba:	e7c7      	b.n	801054c <_printf_common+0x58>
 80105bc:	2301      	movs	r3, #1
 80105be:	4622      	mov	r2, r4
 80105c0:	4649      	mov	r1, r9
 80105c2:	4638      	mov	r0, r7
 80105c4:	47c0      	blx	r8
 80105c6:	3001      	adds	r0, #1
 80105c8:	d0e6      	beq.n	8010598 <_printf_common+0xa4>
 80105ca:	3601      	adds	r6, #1
 80105cc:	e7d9      	b.n	8010582 <_printf_common+0x8e>
	...

080105d0 <_printf_i>:
 80105d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105d4:	7e0f      	ldrb	r7, [r1, #24]
 80105d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105d8:	2f78      	cmp	r7, #120	; 0x78
 80105da:	4691      	mov	r9, r2
 80105dc:	4680      	mov	r8, r0
 80105de:	460c      	mov	r4, r1
 80105e0:	469a      	mov	sl, r3
 80105e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80105e6:	d807      	bhi.n	80105f8 <_printf_i+0x28>
 80105e8:	2f62      	cmp	r7, #98	; 0x62
 80105ea:	d80a      	bhi.n	8010602 <_printf_i+0x32>
 80105ec:	2f00      	cmp	r7, #0
 80105ee:	f000 80d8 	beq.w	80107a2 <_printf_i+0x1d2>
 80105f2:	2f58      	cmp	r7, #88	; 0x58
 80105f4:	f000 80a3 	beq.w	801073e <_printf_i+0x16e>
 80105f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010600:	e03a      	b.n	8010678 <_printf_i+0xa8>
 8010602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010606:	2b15      	cmp	r3, #21
 8010608:	d8f6      	bhi.n	80105f8 <_printf_i+0x28>
 801060a:	a101      	add	r1, pc, #4	; (adr r1, 8010610 <_printf_i+0x40>)
 801060c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010610:	08010669 	.word	0x08010669
 8010614:	0801067d 	.word	0x0801067d
 8010618:	080105f9 	.word	0x080105f9
 801061c:	080105f9 	.word	0x080105f9
 8010620:	080105f9 	.word	0x080105f9
 8010624:	080105f9 	.word	0x080105f9
 8010628:	0801067d 	.word	0x0801067d
 801062c:	080105f9 	.word	0x080105f9
 8010630:	080105f9 	.word	0x080105f9
 8010634:	080105f9 	.word	0x080105f9
 8010638:	080105f9 	.word	0x080105f9
 801063c:	08010789 	.word	0x08010789
 8010640:	080106ad 	.word	0x080106ad
 8010644:	0801076b 	.word	0x0801076b
 8010648:	080105f9 	.word	0x080105f9
 801064c:	080105f9 	.word	0x080105f9
 8010650:	080107ab 	.word	0x080107ab
 8010654:	080105f9 	.word	0x080105f9
 8010658:	080106ad 	.word	0x080106ad
 801065c:	080105f9 	.word	0x080105f9
 8010660:	080105f9 	.word	0x080105f9
 8010664:	08010773 	.word	0x08010773
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	1d1a      	adds	r2, r3, #4
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	602a      	str	r2, [r5, #0]
 8010670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010678:	2301      	movs	r3, #1
 801067a:	e0a3      	b.n	80107c4 <_printf_i+0x1f4>
 801067c:	6820      	ldr	r0, [r4, #0]
 801067e:	6829      	ldr	r1, [r5, #0]
 8010680:	0606      	lsls	r6, r0, #24
 8010682:	f101 0304 	add.w	r3, r1, #4
 8010686:	d50a      	bpl.n	801069e <_printf_i+0xce>
 8010688:	680e      	ldr	r6, [r1, #0]
 801068a:	602b      	str	r3, [r5, #0]
 801068c:	2e00      	cmp	r6, #0
 801068e:	da03      	bge.n	8010698 <_printf_i+0xc8>
 8010690:	232d      	movs	r3, #45	; 0x2d
 8010692:	4276      	negs	r6, r6
 8010694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010698:	485e      	ldr	r0, [pc, #376]	; (8010814 <_printf_i+0x244>)
 801069a:	230a      	movs	r3, #10
 801069c:	e019      	b.n	80106d2 <_printf_i+0x102>
 801069e:	680e      	ldr	r6, [r1, #0]
 80106a0:	602b      	str	r3, [r5, #0]
 80106a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80106a6:	bf18      	it	ne
 80106a8:	b236      	sxthne	r6, r6
 80106aa:	e7ef      	b.n	801068c <_printf_i+0xbc>
 80106ac:	682b      	ldr	r3, [r5, #0]
 80106ae:	6820      	ldr	r0, [r4, #0]
 80106b0:	1d19      	adds	r1, r3, #4
 80106b2:	6029      	str	r1, [r5, #0]
 80106b4:	0601      	lsls	r1, r0, #24
 80106b6:	d501      	bpl.n	80106bc <_printf_i+0xec>
 80106b8:	681e      	ldr	r6, [r3, #0]
 80106ba:	e002      	b.n	80106c2 <_printf_i+0xf2>
 80106bc:	0646      	lsls	r6, r0, #25
 80106be:	d5fb      	bpl.n	80106b8 <_printf_i+0xe8>
 80106c0:	881e      	ldrh	r6, [r3, #0]
 80106c2:	4854      	ldr	r0, [pc, #336]	; (8010814 <_printf_i+0x244>)
 80106c4:	2f6f      	cmp	r7, #111	; 0x6f
 80106c6:	bf0c      	ite	eq
 80106c8:	2308      	moveq	r3, #8
 80106ca:	230a      	movne	r3, #10
 80106cc:	2100      	movs	r1, #0
 80106ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80106d2:	6865      	ldr	r5, [r4, #4]
 80106d4:	60a5      	str	r5, [r4, #8]
 80106d6:	2d00      	cmp	r5, #0
 80106d8:	bfa2      	ittt	ge
 80106da:	6821      	ldrge	r1, [r4, #0]
 80106dc:	f021 0104 	bicge.w	r1, r1, #4
 80106e0:	6021      	strge	r1, [r4, #0]
 80106e2:	b90e      	cbnz	r6, 80106e8 <_printf_i+0x118>
 80106e4:	2d00      	cmp	r5, #0
 80106e6:	d04d      	beq.n	8010784 <_printf_i+0x1b4>
 80106e8:	4615      	mov	r5, r2
 80106ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80106ee:	fb03 6711 	mls	r7, r3, r1, r6
 80106f2:	5dc7      	ldrb	r7, [r0, r7]
 80106f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106f8:	4637      	mov	r7, r6
 80106fa:	42bb      	cmp	r3, r7
 80106fc:	460e      	mov	r6, r1
 80106fe:	d9f4      	bls.n	80106ea <_printf_i+0x11a>
 8010700:	2b08      	cmp	r3, #8
 8010702:	d10b      	bne.n	801071c <_printf_i+0x14c>
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	07de      	lsls	r6, r3, #31
 8010708:	d508      	bpl.n	801071c <_printf_i+0x14c>
 801070a:	6923      	ldr	r3, [r4, #16]
 801070c:	6861      	ldr	r1, [r4, #4]
 801070e:	4299      	cmp	r1, r3
 8010710:	bfde      	ittt	le
 8010712:	2330      	movle	r3, #48	; 0x30
 8010714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010718:	f105 35ff 	addle.w	r5, r5, #4294967295
 801071c:	1b52      	subs	r2, r2, r5
 801071e:	6122      	str	r2, [r4, #16]
 8010720:	f8cd a000 	str.w	sl, [sp]
 8010724:	464b      	mov	r3, r9
 8010726:	aa03      	add	r2, sp, #12
 8010728:	4621      	mov	r1, r4
 801072a:	4640      	mov	r0, r8
 801072c:	f7ff fee2 	bl	80104f4 <_printf_common>
 8010730:	3001      	adds	r0, #1
 8010732:	d14c      	bne.n	80107ce <_printf_i+0x1fe>
 8010734:	f04f 30ff 	mov.w	r0, #4294967295
 8010738:	b004      	add	sp, #16
 801073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801073e:	4835      	ldr	r0, [pc, #212]	; (8010814 <_printf_i+0x244>)
 8010740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010744:	6829      	ldr	r1, [r5, #0]
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	f851 6b04 	ldr.w	r6, [r1], #4
 801074c:	6029      	str	r1, [r5, #0]
 801074e:	061d      	lsls	r5, r3, #24
 8010750:	d514      	bpl.n	801077c <_printf_i+0x1ac>
 8010752:	07df      	lsls	r7, r3, #31
 8010754:	bf44      	itt	mi
 8010756:	f043 0320 	orrmi.w	r3, r3, #32
 801075a:	6023      	strmi	r3, [r4, #0]
 801075c:	b91e      	cbnz	r6, 8010766 <_printf_i+0x196>
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	f023 0320 	bic.w	r3, r3, #32
 8010764:	6023      	str	r3, [r4, #0]
 8010766:	2310      	movs	r3, #16
 8010768:	e7b0      	b.n	80106cc <_printf_i+0xfc>
 801076a:	6823      	ldr	r3, [r4, #0]
 801076c:	f043 0320 	orr.w	r3, r3, #32
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	2378      	movs	r3, #120	; 0x78
 8010774:	4828      	ldr	r0, [pc, #160]	; (8010818 <_printf_i+0x248>)
 8010776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801077a:	e7e3      	b.n	8010744 <_printf_i+0x174>
 801077c:	0659      	lsls	r1, r3, #25
 801077e:	bf48      	it	mi
 8010780:	b2b6      	uxthmi	r6, r6
 8010782:	e7e6      	b.n	8010752 <_printf_i+0x182>
 8010784:	4615      	mov	r5, r2
 8010786:	e7bb      	b.n	8010700 <_printf_i+0x130>
 8010788:	682b      	ldr	r3, [r5, #0]
 801078a:	6826      	ldr	r6, [r4, #0]
 801078c:	6961      	ldr	r1, [r4, #20]
 801078e:	1d18      	adds	r0, r3, #4
 8010790:	6028      	str	r0, [r5, #0]
 8010792:	0635      	lsls	r5, r6, #24
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	d501      	bpl.n	801079c <_printf_i+0x1cc>
 8010798:	6019      	str	r1, [r3, #0]
 801079a:	e002      	b.n	80107a2 <_printf_i+0x1d2>
 801079c:	0670      	lsls	r0, r6, #25
 801079e:	d5fb      	bpl.n	8010798 <_printf_i+0x1c8>
 80107a0:	8019      	strh	r1, [r3, #0]
 80107a2:	2300      	movs	r3, #0
 80107a4:	6123      	str	r3, [r4, #16]
 80107a6:	4615      	mov	r5, r2
 80107a8:	e7ba      	b.n	8010720 <_printf_i+0x150>
 80107aa:	682b      	ldr	r3, [r5, #0]
 80107ac:	1d1a      	adds	r2, r3, #4
 80107ae:	602a      	str	r2, [r5, #0]
 80107b0:	681d      	ldr	r5, [r3, #0]
 80107b2:	6862      	ldr	r2, [r4, #4]
 80107b4:	2100      	movs	r1, #0
 80107b6:	4628      	mov	r0, r5
 80107b8:	f7ef fd1a 	bl	80001f0 <memchr>
 80107bc:	b108      	cbz	r0, 80107c2 <_printf_i+0x1f2>
 80107be:	1b40      	subs	r0, r0, r5
 80107c0:	6060      	str	r0, [r4, #4]
 80107c2:	6863      	ldr	r3, [r4, #4]
 80107c4:	6123      	str	r3, [r4, #16]
 80107c6:	2300      	movs	r3, #0
 80107c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107cc:	e7a8      	b.n	8010720 <_printf_i+0x150>
 80107ce:	6923      	ldr	r3, [r4, #16]
 80107d0:	462a      	mov	r2, r5
 80107d2:	4649      	mov	r1, r9
 80107d4:	4640      	mov	r0, r8
 80107d6:	47d0      	blx	sl
 80107d8:	3001      	adds	r0, #1
 80107da:	d0ab      	beq.n	8010734 <_printf_i+0x164>
 80107dc:	6823      	ldr	r3, [r4, #0]
 80107de:	079b      	lsls	r3, r3, #30
 80107e0:	d413      	bmi.n	801080a <_printf_i+0x23a>
 80107e2:	68e0      	ldr	r0, [r4, #12]
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	4298      	cmp	r0, r3
 80107e8:	bfb8      	it	lt
 80107ea:	4618      	movlt	r0, r3
 80107ec:	e7a4      	b.n	8010738 <_printf_i+0x168>
 80107ee:	2301      	movs	r3, #1
 80107f0:	4632      	mov	r2, r6
 80107f2:	4649      	mov	r1, r9
 80107f4:	4640      	mov	r0, r8
 80107f6:	47d0      	blx	sl
 80107f8:	3001      	adds	r0, #1
 80107fa:	d09b      	beq.n	8010734 <_printf_i+0x164>
 80107fc:	3501      	adds	r5, #1
 80107fe:	68e3      	ldr	r3, [r4, #12]
 8010800:	9903      	ldr	r1, [sp, #12]
 8010802:	1a5b      	subs	r3, r3, r1
 8010804:	42ab      	cmp	r3, r5
 8010806:	dcf2      	bgt.n	80107ee <_printf_i+0x21e>
 8010808:	e7eb      	b.n	80107e2 <_printf_i+0x212>
 801080a:	2500      	movs	r5, #0
 801080c:	f104 0619 	add.w	r6, r4, #25
 8010810:	e7f5      	b.n	80107fe <_printf_i+0x22e>
 8010812:	bf00      	nop
 8010814:	08011229 	.word	0x08011229
 8010818:	0801123a 	.word	0x0801123a

0801081c <__retarget_lock_acquire_recursive>:
 801081c:	4770      	bx	lr

0801081e <__retarget_lock_release_recursive>:
 801081e:	4770      	bx	lr

08010820 <memmove>:
 8010820:	4288      	cmp	r0, r1
 8010822:	b510      	push	{r4, lr}
 8010824:	eb01 0402 	add.w	r4, r1, r2
 8010828:	d902      	bls.n	8010830 <memmove+0x10>
 801082a:	4284      	cmp	r4, r0
 801082c:	4623      	mov	r3, r4
 801082e:	d807      	bhi.n	8010840 <memmove+0x20>
 8010830:	1e43      	subs	r3, r0, #1
 8010832:	42a1      	cmp	r1, r4
 8010834:	d008      	beq.n	8010848 <memmove+0x28>
 8010836:	f811 2b01 	ldrb.w	r2, [r1], #1
 801083a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801083e:	e7f8      	b.n	8010832 <memmove+0x12>
 8010840:	4402      	add	r2, r0
 8010842:	4601      	mov	r1, r0
 8010844:	428a      	cmp	r2, r1
 8010846:	d100      	bne.n	801084a <memmove+0x2a>
 8010848:	bd10      	pop	{r4, pc}
 801084a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801084e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010852:	e7f7      	b.n	8010844 <memmove+0x24>

08010854 <_malloc_usable_size_r>:
 8010854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010858:	1f18      	subs	r0, r3, #4
 801085a:	2b00      	cmp	r3, #0
 801085c:	bfbc      	itt	lt
 801085e:	580b      	ldrlt	r3, [r1, r0]
 8010860:	18c0      	addlt	r0, r0, r3
 8010862:	4770      	bx	lr

08010864 <_init>:
 8010864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010866:	bf00      	nop
 8010868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801086a:	bc08      	pop	{r3}
 801086c:	469e      	mov	lr, r3
 801086e:	4770      	bx	lr

08010870 <_fini>:
 8010870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010872:	bf00      	nop
 8010874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010876:	bc08      	pop	{r3}
 8010878:	469e      	mov	lr, r3
 801087a:	4770      	bx	lr
