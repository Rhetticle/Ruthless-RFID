
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800fe3c  0800fe3c  0001fe3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801043c  0801043c  00030664  2**0
                  CONTENTS
  4 .ARM          00000008  0801043c  0801043c  0002043c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010444  08010444  00030664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010444  08010444  00020444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010448  08010448  00020448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  0801044c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065c0  20000664  08010ab0  00030664  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c24  08010ab0  00036c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030664  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029fd3  00000000  00000000  00030694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f1a  00000000  00000000  0005a667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002318  00000000  00000000  00060588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020a8  00000000  00000000  000628a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8fd  00000000  00000000  00064948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002baf9  00000000  00000000  00083245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a032c  00000000  00000000  000aed3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f06a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097ac  00000000  00000000  0014f0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000664 	.word	0x20000664
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe24 	.word	0x0800fe24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000668 	.word	0x20000668
 80001dc:	0800fe24 	.word	0x0800fe24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fe16 	bl	80031f0 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000684 	.word	0x20000684

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fef1 	bl	80033e4 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000684 	.word	0x20000684

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fdd3 	bl	80031f0 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 f9cb 	bl	80029f0 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000684 	.word	0x20000684

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fe9f 	bl	80033e4 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 f99d 	bl	80029f0 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000684 	.word	0x20000684

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 f92d 	bl	80029f0 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fba7 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fba2 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 f8fd 	bl	80029f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fb9a 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 f8f5 	bl	80029f0 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 f89f 	bl	80029f0 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00e fd8e 	bl	800f510 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00e fd3b 	bl	800f510 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 ff7b 	bl	80029f0 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 ff70 	bl	80029f0 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 ff69 	bl	80029f0 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 ff60 	bl	80029f0 <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f00e fc72 	bl	800f510 <memcpy>
	CDC_Transmit_FS((uint8_t*)send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f00d ffdd 	bl	800ebf8 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fed6 	bl	80029f0 <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 feb8 	bl	80029f0 <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0020 	add.w	r0, r7, #32
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f00e fd18 	bl	800f71c <siprintf>
						Print(mess);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8000d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fe5a 	bl	80029f0 <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fe55 	bl	80029f0 <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f00e fcb5 	bl	800f71c <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	; 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000680 	.word	0x20000680
 8000dec:	0800fe3c 	.word	0x0800fe3c
 8000df0:	0800fe54 	.word	0x0800fe54
 8000df4:	0800fe60 	.word	0x0800fe60
 8000df8:	0800fe6c 	.word	0x0800fe6c
 8000dfc:	0800fe78 	.word	0x0800fe78

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00e fb8b 	bl	800f52c <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f002 f87a 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f002 f875 	bl	8002f34 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f005 f800 	bl	8005e5a <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f002 f865 	bl	8002f34 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fdc0 	bl	80029f0 <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f002 f85b 	bl	8002f34 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fdb6 	bl	80029f0 <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006d8 	.word	0x200006d8

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f002 f841 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f002 f83c 	bl	8002f34 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 ffc7 	bl	8005e5a <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f002 f82c 	bl	8002f34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f002 f827 	bl	8002f34 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f002 f820 	bl	8002f34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f002 f81b 	bl	8002f34 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006d8 	.word	0x200006d8

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <OLED_INIT+0xc8>)
 8000f88:	f001 ffd4 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2108      	movs	r1, #8
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <OLED_INIT+0xc8>)
 8000f92:	f001 ffcf 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <OLED_INIT+0xcc>)
 8000f9c:	f001 ffca 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f001 fd25 	bl	80029f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <OLED_INIT+0xc8>)
 8000fac:	f001 ffc2 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f001 fd1d 	bl	80029f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <OLED_INIT+0xc8>)
 8000fbc:	f001 ffba 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f001 fd15 	bl	80029f0 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <OLED_INIT+0xd0>)
 8000fc8:	463c      	mov	r4, r7
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd4:	c403      	stmia	r4!, {r0, r1}
 8000fd6:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	e00c      	b.n	8000ff8 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000fde:	463a      	mov	r2, r7
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff1e 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f001 fcff 	bl	80029f0 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	ddef      	ble.n	8000fde <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ffe:	20a7      	movs	r0, #167	; 0xa7
 8001000:	f7ff ff12 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <OLED_INIT+0xd4>)
 8001006:	f7ff ff85 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 800100a:	20af      	movs	r0, #175	; 0xaf
 800100c:	f7ff ff0c 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f001 fcec 	bl	80029f0 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001018:	20ae      	movs	r0, #174	; 0xae
 800101a:	f7ff ff05 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 fce6 	bl	80029f0 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8001024:	20a6      	movs	r0, #166	; 0xa6
 8001026:	f7ff feff 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 fce0 	bl	80029f0 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001030:	20af      	movs	r0, #175	; 0xaf
 8001032:	f7ff fef9 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 8001036:	f7ff fee3 	bl	8000e00 <OLED_Clear>
	return HAL_OK;
 800103a:	2300      	movs	r3, #0

}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	0800fe8c 	.word	0x0800fe8c
 8001050:	20000000 	.word	0x20000000

08001054 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001060:	2005      	movs	r0, #5
 8001062:	f00e fa45 	bl	800f4f0 <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e013      	b.n	8001098 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f1a3 0220 	sub.w	r2, r3, #32
 8001076:	4910      	ldr	r1, [pc, #64]	; (80010b8 <OLED_InvChar+0x64>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	18ca      	adds	r2, r1, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	440b      	add	r3, r1
 800108c:	43d2      	mvns	r2, r2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b05      	cmp	r3, #5
 800109c:	dde8      	ble.n	8001070 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 800109e:	2205      	movs	r2, #5
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f00e fa34 	bl	800f510 <memcpy>
	free(temp);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f00e fa29 	bl	800f500 <free>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	08010090 	.word	0x08010090

080010bc <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b50      	subs	r3, #80	; 0x50
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fea1 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe9a 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe91 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 8001106:	2006      	movs	r0, #6
 8001108:	f00e f9f2 	bl	800f4f0 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	f1a3 0220 	sub.w	r2, r3, #32
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <OLED_drawChar+0xa0>)
 8001124:	4413      	add	r3, r2
 8001126:	2205      	movs	r2, #5
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f00e f9f0 	bl	800f510 <memcpy>
 8001130:	e004      	b.n	800113c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff8c 	bl	8001054 <OLED_InvChar>
	}

	*(data+5)=0x00;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3305      	adds	r3, #5
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001144:	2106      	movs	r1, #6
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fea8 	bl	8000e9c <OLED_data>
	free(data);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f00e f9d7 	bl	800f500 <free>
	}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	08010090 	.word	0x08010090

08001160 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e014      	b.n	80011a6 <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4413      	add	r3, r2
 800118e:	b2d9      	uxtb	r1, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	79f8      	ldrb	r0, [r7, #7]
 800119c:	f7ff ff8e 	bl	80010bc <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8e3      	bhi.n	800117c <OLED_Printlin+0x1c>


	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff f806 	bl	80001e0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	0fda      	lsrs	r2, r3, #31
 80011dc:	4413      	add	r3, r2
 80011de:	105b      	asrs	r3, r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	3340      	adds	r3, #64	; 0x40
 80011ee:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	79f8      	ldrb	r0, [r7, #7]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	f7ff ffb1 	bl	8001160 <OLED_Printlin>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001206:	b580      	push	{r7, lr}
 8001208:	b094      	sub	sp, #80	; 0x50
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 800120e:	2320      	movs	r3, #32
 8001210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001218:	2300      	movs	r3, #0
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
 8001228:	e018      	b.n	800125c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 800122a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800122e:	4413      	add	r3, r2
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d10b      	bne.n	8001254 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 800123c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800123e:	b2d9      	uxtb	r1, r3
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
	                i++;
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	3301      	adds	r3, #1
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001252:	e000      	b.n	8001256 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001254:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001258:	3301      	adds	r3, #1
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
 800125c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800125e:	2b15      	cmp	r3, #21
 8001260:	dde3      	ble.n	800122a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d102      	bne.n	8001274 <OLED_Print+0x6e>
	            last_ind++;
 800126e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001270:	3301      	adds	r3, #1
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	2b15      	cmp	r3, #21
 8001284:	d828      	bhi.n	80012d8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ffa7 	bl	80001e0 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f00e fa5a 	bl	800f75c <strncpy>
	            memset(thisline+linend,fill,21-linend);
 80012a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012aa:	f107 0220 	add.w	r2, r7, #32
 80012ae:	18d0      	adds	r0, r2, r3
 80012b0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80012b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b6:	f1c3 0315 	rsb	r3, r3, #21
 80012ba:	461a      	mov	r2, r3
 80012bc:	f00e f936 	bl	800f52c <memset>
	            thisline[21]=' ';
 80012c0:	2320      	movs	r3, #32
 80012c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 80012c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2300      	movs	r3, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	f7ff ff45 	bl	8001160 <OLED_Printlin>




	    }
}
 80012d6:	e05e      	b.n	8001396 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80012d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012da:	3314      	adds	r3, #20
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d03a      	beq.n	800135c <OLED_Print+0x156>
 80012e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e8:	3315      	adds	r3, #21
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d033      	beq.n	800135c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80012f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fc:	3b01      	subs	r3, #1
 80012fe:	3350      	adds	r3, #80	; 0x50
 8001300:	443b      	add	r3, r7
 8001302:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001306:	461a      	mov	r2, r3
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f00e fa25 	bl	800f75c <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001314:	3b01      	subs	r3, #1
 8001316:	3350      	adds	r3, #80	; 0x50
 8001318:	443b      	add	r3, r7
 800131a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800131e:	461a      	mov	r2, r3
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	1898      	adds	r0, r3, r2
 8001326:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	3b01      	subs	r3, #1
 800132e:	3350      	adds	r3, #80	; 0x50
 8001330:	443b      	add	r3, r7
 8001332:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001336:	f1c3 0315 	rsb	r3, r3, #21
 800133a:	461a      	mov	r2, r3
 800133c:	f00e f8f6 	bl	800f52c <memset>
	            thisline[21]=' ';
 8001340:	2320      	movs	r3, #32
 8001342:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	3b01      	subs	r3, #1
 800134a:	3350      	adds	r3, #80	; 0x50
 800134c:	443b      	add	r3, r7
 800134e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001352:	461a      	mov	r2, r3
 8001354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001356:	4413      	add	r3, r2
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
 800135a:	e00e      	b.n	800137a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	18d1      	adds	r1, r2, r3
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2215      	movs	r2, #21
 8001368:	4618      	mov	r0, r3
 800136a:	f00e f9f7 	bl	800f75c <strncpy>
	            thisline[21]=' ';
 800136e:	2320      	movs	r3, #32
 8001370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001376:	3315      	adds	r3, #21
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800137a:	2300      	movs	r3, #0
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	2300      	movs	r3, #0
 8001388:	2102      	movs	r1, #2
 800138a:	f7ff fee9 	bl	8001160 <OLED_Printlin>
	        line++;
 800138e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001390:	3301      	adds	r3, #1
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001394:	e746      	b.n	8001224 <OLED_Print+0x1e>
}
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 80013a8:	f7ff fd2a 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff01 	bl	80011be <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e01a      	b.n	80013f8 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	7859      	ldrb	r1, [r3, #1]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	f7ff feb7 	bl	8001160 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbde      	blt.n	80013c2 <OLED_SCREEN+0x26>
	}
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	460b      	mov	r3, r1
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3302      	adds	r3, #2
 800143e:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	b2d9      	uxtb	r1, r3
 8001450:	2300      	movs	r3, #0
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	f7ff fe84 	bl	8001160 <OLED_Printlin>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	460b      	mov	r3, r1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 800146e:	4a40      	ldr	r2, [pc, #256]	; (8001570 <OLED_SELECT+0x110>)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	8019      	strh	r1, [r3, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	0c12      	lsrs	r2, r2, #16
 800147e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d116      	bne.n	80014b4 <OLED_SELECT+0x54>
			if(selopt==0){
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10b      	bne.n	80014a4 <OLED_SELECT+0x44>
			rest=(char*)screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001498:	3b01      	subs	r3, #1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e009      	b.n	80014b8 <OLED_SELECT+0x58>
			}
			else{
				rest=(char*)screen->data[selopt];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e001      	b.n	80014b8 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <OLED_SELECT+0x114>)
 80014b6:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d124      	bne.n	8001508 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014ca:	3b01      	subs	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014e0:	3b01      	subs	r3, #1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	773b      	strb	r3, [r7, #28]
 8001506:	e021      	b.n	800154c <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001512:	3b01      	subs	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001526:	3b01      	subs	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	7afb      	ldrb	r3, [r7, #11]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 800154c:	7fb9      	ldrb	r1, [r7, #30]
 800154e:	7ff8      	ldrb	r0, [r7, #31]
 8001550:	2300      	movs	r3, #0
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	f7ff fe04 	bl	8001160 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001558:	f107 0214 	add.w	r2, r7, #20
 800155c:	7f39      	ldrb	r1, [r7, #28]
 800155e:	7f78      	ldrb	r0, [r7, #29]
 8001560:	2300      	movs	r3, #0
 8001562:	f7ff fdfd 	bl	8001160 <OLED_Printlin>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	0800feac 	.word	0x0800feac
 8001574:	0800fea8 	.word	0x0800fea8

08001578 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8001582:	230f      	movs	r3, #15
 8001584:	733b      	strb	r3, [r7, #12]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	737b      	strb	r3, [r7, #13]
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <STAT_READ+0x54>)
 8001596:	f001 fccd 	bl	8002f34 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800159a:	bf00      	nop
 800159c:	f107 0208 	add.w	r2, r7, #8
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2303      	movs	r3, #3
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <STAT_READ+0x58>)
 80015ac:	f004 fd91 	bl	80060d2 <HAL_SPI_TransmitReceive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f2      	bne.n	800159c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <STAT_READ+0x54>)
 80015be:	f001 fcb9 	bl	8002f34 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80015c2:	7abb      	ldrb	r3, [r7, #10]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000
 80015d0:	20000730 	.word	0x20000730

080015d4 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80015e4:	231f      	movs	r3, #31
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	737b      	strb	r3, [r7, #13]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <STAT_WRITE+0x4c>)
 80015f8:	f001 fc9c 	bl	8002f34 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80015fc:	f107 010c 	add.w	r1, r7, #12
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	2203      	movs	r2, #3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <STAT_WRITE+0x50>)
 8001606:	f004 fc28 	bl	8005e5a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <STAT_WRITE+0x4c>)
 8001612:	f001 fc8f 	bl	8002f34 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020000 	.word	0x40020000
 8001624:	20000730 	.word	0x20000730

08001628 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800162e:	2306      	movs	r3, #6
 8001630:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 8001632:	f000 f825 	bl	8001680 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001636:	e011      	b.n	800165c <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <WRIT_EN+0x50>)
 8001640:	f001 fc78 	bl	8002f34 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001644:	1df9      	adds	r1, r7, #7
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <WRIT_EN+0x54>)
 800164c:	f004 fc05 	bl	8005e5a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <WRIT_EN+0x50>)
 8001658:	f001 fc6c 	bl	8002f34 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800165c:	20c0      	movs	r0, #192	; 0xc0
 800165e:	f7ff ff8b 	bl	8001578 <STAT_READ>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d1e5      	bne.n	8001638 <WRIT_EN+0x10>
	}


}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000
 800167c:	20000730 	.word	0x20000730

08001680 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001686:	2304      	movs	r3, #4
 8001688:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800168a:	e011      	b.n	80016b0 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <WRITE_DIS+0x4c>)
 8001694:	f001 fc4e 	bl	8002f34 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001698:	1df9      	adds	r1, r7, #7
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <WRITE_DIS+0x50>)
 80016a0:	f004 fbdb 	bl	8005e5a <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <WRITE_DIS+0x4c>)
 80016ac:	f001 fc42 	bl	8002f34 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80016b0:	20c0      	movs	r0, #192	; 0xc0
 80016b2:	f7ff ff61 	bl	8001578 <STAT_READ>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d0e5      	beq.n	800168c <WRITE_DIS+0xc>
		}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000
 80016d0:	20000730 	.word	0x20000730

080016d4 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param page_addr - Page address to begin erasing from
 * */
void block_erase(uint16_t page_addr) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 80016de:	23d8      	movs	r3, #216	; 0xd8
 80016e0:	733b      	strb	r3, [r7, #12]
 80016e2:	2300      	movs	r3, #0
 80016e4:	737b      	strb	r3, [r7, #13]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	73bb      	strb	r3, [r7, #14]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	73fb      	strb	r3, [r7, #15]
	WRIT_EN();
 80016f6:	f7ff ff97 	bl	8001628 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <block_erase+0x68>)
 8001702:	f001 fc17 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, 4, 100);
 8001706:	f107 010c 	add.w	r1, r7, #12
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	2204      	movs	r2, #4
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <block_erase+0x6c>)
 8001710:	f004 fba3 	bl	8005e5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <block_erase+0x68>)
 800171c:	f001 fc0a 	bl	8002f34 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001720:	bf00      	nop
 8001722:	20c0      	movs	r0, #192	; 0xc0
 8001724:	f7ff ff28 	bl	8001578 <STAT_READ>
 8001728:	4603      	mov	r3, r0
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d0f7      	beq.n	8001722 <block_erase+0x4e>
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	20000730 	.word	0x20000730

08001744 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	480a      	ldr	r0, [pc, #40]	; (8001778 <MEM_INIT+0x34>)
 8001750:	f001 fbf0 	bl	8002f34 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001754:	2100      	movs	r1, #0
 8001756:	20a0      	movs	r0, #160	; 0xa0
 8001758:	f7ff ff3c 	bl	80015d4 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 800175c:	20a0      	movs	r0, #160	; 0xa0
 800175e:	f7ff ff0b 	bl	8001578 <STAT_READ>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MEM_INIT+0x28>
		return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e002      	b.n	8001772 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 800176c:	f7ff ff88 	bl	8001680 <WRITE_DIS>
	return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000

0800177c <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	81fb      	strh	r3, [r7, #14]
 800178a:	460b      	mov	r3, r1
 800178c:	81bb      	strh	r3, [r7, #12]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3303      	adds	r3, #3
 8001796:	4618      	mov	r0, r3
 8001798:	f00d feaa 	bl	800f4f0 <malloc>
 800179c:	4603      	mov	r3, r0
 800179e:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 80017a0:	2310      	movs	r3, #16
 80017a2:	743b      	strb	r3, [r7, #16]
 80017a4:	2300      	movs	r3, #0
 80017a6:	747b      	strb	r3, [r7, #17]
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	74bb      	strb	r3, [r7, #18]
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 80017be:	89bb      	ldrh	r3, [r7, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3302      	adds	r3, #2
 80017d0:	89ba      	ldrh	r2, [r7, #12]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3303      	adds	r3, #3
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	4618      	mov	r0, r3
 80017e0:	f00d fe96 	bl	800f510 <memcpy>

	WRIT_EN();
 80017e4:	f7ff ff20 	bl	8001628 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ee:	482a      	ldr	r0, [pc, #168]	; (8001898 <MEM_WRITE+0x11c>)
 80017f0:	f001 fba0 	bl	8002f34 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	3303      	adds	r3, #3
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	2364      	movs	r3, #100	; 0x64
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	4827      	ldr	r0, [pc, #156]	; (800189c <MEM_WRITE+0x120>)
 8001800:	f004 fb2b 	bl	8005e5a <HAL_SPI_Transmit>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <MEM_WRITE+0x9e>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001810:	4821      	ldr	r0, [pc, #132]	; (8001898 <MEM_WRITE+0x11c>)
 8001812:	f001 fb8f 	bl	8002f34 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001816:	2301      	movs	r3, #1
 8001818:	e039      	b.n	800188e <MEM_WRITE+0x112>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001820:	481d      	ldr	r0, [pc, #116]	; (8001898 <MEM_WRITE+0x11c>)
 8001822:	f001 fb87 	bl	8002f34 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 8001826:	bf00      	nop
 8001828:	20c0      	movs	r0, #192	; 0xc0
 800182a:	f7ff fea5 	bl	8001578 <STAT_READ>
 800182e:	4603      	mov	r3, r0
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d0f7      	beq.n	8001828 <MEM_WRITE+0xac>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	4816      	ldr	r0, [pc, #88]	; (8001898 <MEM_WRITE+0x11c>)
 8001840:	f001 fb78 	bl	8002f34 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 8001844:	f107 0110 	add.w	r1, r7, #16
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	2204      	movs	r2, #4
 800184c:	4813      	ldr	r0, [pc, #76]	; (800189c <MEM_WRITE+0x120>)
 800184e:	f004 fb04 	bl	8005e5a <HAL_SPI_Transmit>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <MEM_WRITE+0xec>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <MEM_WRITE+0x11c>)
 8001860:	f001 fb68 	bl	8002f34 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001864:	2301      	movs	r3, #1
 8001866:	e012      	b.n	800188e <MEM_WRITE+0x112>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <MEM_WRITE+0x11c>)
 8001870:	f001 fb60 	bl	8002f34 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001874:	bf00      	nop
 8001876:	20c0      	movs	r0, #192	; 0xc0
 8001878:	f7ff fe7e 	bl	8001578 <STAT_READ>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d0f7      	beq.n	8001876 <MEM_WRITE+0xfa>
	free(setup);
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f00d fe3a 	bl	800f500 <free>
	return(HAL_OK);
 800188c:	2300      	movs	r3, #0

}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40020000 	.word	0x40020000
 800189c:	20000730 	.word	0x20000730

080018a0 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	81fb      	strh	r3, [r7, #14]
 80018ae:	460b      	mov	r3, r1
 80018b0:	81bb      	strh	r3, [r7, #12]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 80018b6:	2313      	movs	r3, #19
 80018b8:	753b      	strb	r3, [r7, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	757b      	strb	r3, [r7, #21]
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	75bb      	strb	r3, [r7, #22]
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 80018ce:	2304      	movs	r3, #4
 80018d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018da:	4413      	add	r3, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f00d fe07 	bl	800f4f0 <malloc>
 80018e2:	4603      	mov	r3, r0
 80018e4:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018ec:	4413      	add	r3, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00d fdfe 	bl	800f4f0 <malloc>
 80018f4:	4603      	mov	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	69f8      	ldr	r0, [r7, #28]
 8001906:	f00d fe11 	bl	800f52c <memset>
	read_command[0]=READ_BUF;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	2203      	movs	r2, #3
 800190e:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29a      	uxth	r2, r3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3302      	adds	r3, #2
 8001922:	89ba      	ldrh	r2, [r7, #12]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3303      	adds	r3, #3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001936:	483b      	ldr	r0, [pc, #236]	; (8001a24 <MEM_READPAGE+0x184>)
 8001938:	f001 fafc 	bl	8002f34 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 800193c:	f107 0114 	add.w	r1, r7, #20
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	2204      	movs	r2, #4
 8001944:	4838      	ldr	r0, [pc, #224]	; (8001a28 <MEM_READPAGE+0x188>)
 8001946:	f004 fa88 	bl	8005e5a <HAL_SPI_Transmit>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d007      	beq.n	8001960 <MEM_READPAGE+0xc0>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001956:	4833      	ldr	r0, [pc, #204]	; (8001a24 <MEM_READPAGE+0x184>)
 8001958:	f001 faec 	bl	8002f34 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800195c:	2301      	movs	r3, #1
 800195e:	e05d      	b.n	8001a1c <MEM_READPAGE+0x17c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001966:	482f      	ldr	r0, [pc, #188]	; (8001a24 <MEM_READPAGE+0x184>)
 8001968:	f001 fae4 	bl	8002f34 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 800196c:	bf00      	nop
 800196e:	20c0      	movs	r0, #192	; 0xc0
 8001970:	f7ff fe02 	bl	8001578 <STAT_READ>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	d0f7      	beq.n	800196e <MEM_READPAGE+0xce>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001984:	4827      	ldr	r0, [pc, #156]	; (8001a24 <MEM_READPAGE+0x184>)
 8001986:	f001 fad5 	bl	8002f34 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 800198a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800198e:	b29a      	uxth	r2, r3
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	4413      	add	r3, r2
 8001994:	b29b      	uxth	r3, r3
 8001996:	2264      	movs	r2, #100	; 0x64
 8001998:	9200      	str	r2, [sp, #0]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	69f9      	ldr	r1, [r7, #28]
 800199e:	4822      	ldr	r0, [pc, #136]	; (8001a28 <MEM_READPAGE+0x188>)
 80019a0:	f004 fb97 	bl	80060d2 <HAL_SPI_TransmitReceive>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <MEM_READPAGE+0x11a>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b0:	481c      	ldr	r0, [pc, #112]	; (8001a24 <MEM_READPAGE+0x184>)
 80019b2:	f001 fabf 	bl	8002f34 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80019b6:	2301      	movs	r3, #1
 80019b8:	e030      	b.n	8001a1c <MEM_READPAGE+0x17c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c0:	4818      	ldr	r0, [pc, #96]	; (8001a24 <MEM_READPAGE+0x184>)
 80019c2:	f001 fab7 	bl	8002f34 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80019c6:	bf00      	nop
 80019c8:	20c0      	movs	r0, #192	; 0xc0
 80019ca:	f7ff fdd5 	bl	8001578 <STAT_READ>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d0f7      	beq.n	80019c8 <MEM_READPAGE+0x128>

	if (bytes == 1) {
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d104      	bne.n	80019e8 <MEM_READPAGE+0x148>
		*data = rec_data[4];
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	791a      	ldrb	r2, [r3, #4]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e012      	b.n	8001a0e <MEM_READPAGE+0x16e>
	} else {
		for(int i = 0; i < bytes; i++){
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
 80019ec:	e00b      	b.n	8001a06 <MEM_READPAGE+0x166>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3304      	adds	r3, #4
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	441a      	add	r2, r3
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	440b      	add	r3, r1
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	3301      	adds	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbef      	blt.n	80019ee <MEM_READPAGE+0x14e>
		}
	}
	free(read_command);
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f00d fd76 	bl	800f500 <free>
	free(rec_data);
 8001a14:	69b8      	ldr	r0, [r7, #24]
 8001a16:	f00d fd73 	bl	800f500 <free>
	return(HAL_OK);
 8001a1a:	2300      	movs	r3, #0

}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020000 	.word	0x40020000
 8001a28:	20000730 	.word	0x20000730

08001a2c <mem_init>:
 * 									FATFS Section
 *
 * Following functions are added in order to make this driver compatible with the FATFS package
 * */

DSTATUS mem_init (BYTE pdrv) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
	if (MEM_INIT() != HAL_OK) {
 8001a36:	f7ff fe85 	bl	8001744 <MEM_INIT>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <mem_init+0x18>
		return STA_NOINIT;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e005      	b.n	8001a50 <mem_init+0x24>
	}
	MEM_STATUS = MEM_OK;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <mem_init+0x2c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	return (MEM_STATUS); //Inidicates successful init
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <mem_init+0x2c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000400 	.word	0x20000400

08001a5c <mem_getstatus>:

DSTATUS mem_getstatus (BYTE prdv) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
	return MEM_STATUS;
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <mem_getstatus+0x1c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	20000400 	.word	0x20000400

08001a7c <mem_read>:

DRESULT mem_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
	 if (!count) { //0 count, invalid parameter
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <mem_read+0x1a>
		 return RES_PARERR;
 8001a92:	2304      	movs	r3, #4
 8001a94:	e026      	b.n	8001ae4 <mem_read+0x68>
	 }

	 if (MEM_STATUS) { //Memory not initialised
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <mem_read+0x70>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <mem_read+0x28>
		 return RES_NOTRDY;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e01f      	b.n	8001ae4 <mem_read+0x68>
	 }

	 for (int i = 0; i < count; i++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e017      	b.n	8001ada <mem_read+0x5e>
		 if (MEM_READPAGE(sector+i, 0x0000, (uint8_t*) buff, SECTOR_SIZE) != HAL_OK) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	2100      	movs	r1, #0
 8001abe:	f7ff feef 	bl	80018a0 <MEM_READPAGE>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <mem_read+0x50>
			 return RES_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e00b      	b.n	8001ae4 <mem_read+0x68>
		 }
		 buff += SECTOR_SIZE; //increment pointer
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad2:	60bb      	str	r3, [r7, #8]
	 for (int i = 0; i < count; i++) {
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d8e3      	bhi.n	8001aaa <mem_read+0x2e>
	 }

	 return RES_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000400 	.word	0x20000400

08001af0 <mem_write>:

DRESULT mem_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
	if (!count) {
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <mem_write+0x1a>
		return RES_PARERR;
 8001b06:	2304      	movs	r3, #4
 8001b08:	e026      	b.n	8001b58 <mem_write+0x68>
	}

	if (MEM_STATUS) {
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <mem_write+0x70>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <mem_write+0x28>
		return RES_NOTRDY;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e01f      	b.n	8001b58 <mem_write+0x68>
	}

	for (int i = 0; i < count; i++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e017      	b.n	8001b4e <mem_write+0x5e>
		if (MEM_WRITE(0x0000, sector+i, (uint8_t*) buff, SECTOR_SIZE) != HAL_OK) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fe23 	bl	800177c <MEM_WRITE>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <mem_write+0x50>
			return RES_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e00b      	b.n	8001b58 <mem_write+0x68>
		}
		buff += SECTOR_SIZE; //increment pointer
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b46:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < count; i++) {
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d8e3      	bhi.n	8001b1e <mem_write+0x2e>
	}

	return RES_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000400 	.word	0x20000400

08001b64 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b68:	2108      	movs	r1, #8
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <BUZZ+0x20>)
 8001b6c:	f004 feac 	bl	80068c8 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b74:	f000 ff3c 	bl	80029f0 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001b78:	2108      	movs	r1, #8
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <BUZZ+0x20>)
 8001b7c:	f004 ff54 	bl	8006a28 <HAL_TIM_PWM_Stop>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000788 	.word	0x20000788

08001b88 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001b96:	2102      	movs	r1, #2
 8001b98:	4820      	ldr	r0, [pc, #128]	; (8001c1c <choose+0x94>)
 8001b9a:	f001 f9b3 	bl	8002f04 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d136      	bne.n	8001c12 <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <choose+0x98>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001bac:	e012      	b.n	8001bd4 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001bae:	481c      	ldr	r0, [pc, #112]	; (8001c20 <choose+0x98>)
 8001bb0:	f004 fd4c 	bl	800664c <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <choose+0x98>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d108      	bne.n	8001bd4 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001bc2:	4817      	ldr	r0, [pc, #92]	; (8001c20 <choose+0x98>)
 8001bc4:	f004 fd9c 	bl	8006700 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e01e      	b.n	8001c12 <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <choose+0x94>)
 8001bd8:	f001 f994 	bl	8002f04 <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0e5      	beq.n	8001bae <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d102      	bne.n	8001bfc <choose+0x74>
	 	    	*count = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4619      	mov	r1, r3
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fc2a 	bl	8001460 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <choose+0x98>)
 8001c0e:	f004 fd77 	bl	8006700 <HAL_TIM_Base_Stop>
	 	}
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	200007d0 	.word	0x200007d0

08001c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c28:	f000 fea0 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c2c:	f000 f866 	bl	8001cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c30:	f000 fa2e 	bl	8002090 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c34:	f000 f8cc 	bl	8001dd0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c38:	f000 f8f8 	bl	8001e2c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c3c:	f000 f92e 	bl	8001e9c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c40:	f000 f962 	bl	8001f08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c44:	f000 f9d6 	bl	8001ff4 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001c48:	f007 f9a8 	bl	8008f9c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c4c:	f00a f80e 	bl	800bc6c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <main+0x94>)
 8001c52:	2104      	movs	r1, #4
 8001c54:	2001      	movs	r0, #1
 8001c56:	f00a f901 	bl	800be5c <osMessageQueueNew>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <main+0x98>)
 8001c5e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <main+0x9c>)
 8001c62:	2100      	movs	r1, #0
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <main+0xa0>)
 8001c66:	f00a f84b 	bl	800bd00 <osThreadNew>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <main+0xa4>)
 8001c6e:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <main+0xa8>)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <main+0xac>)
 8001c76:	f00a f843 	bl	800bd00 <osThreadNew>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <main+0xb0>)
 8001c7e:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001c80:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <main+0xb4>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4815      	ldr	r0, [pc, #84]	; (8001cdc <main+0xb8>)
 8001c86:	f00a f83b 	bl	800bd00 <osThreadNew>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <main+0xbc>)
 8001c8e:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <main+0xc0>)
 8001c92:	2100      	movs	r1, #0
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <main+0xc4>)
 8001c96:	f00a f833 	bl	800bd00 <osThreadNew>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a13      	ldr	r2, [pc, #76]	; (8001cec <main+0xc8>)
 8001c9e:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001ca0:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <main+0xcc>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <main+0xd0>)
 8001ca6:	f00a f82b 	bl	800bd00 <osThreadNew>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <main+0xd4>)
 8001cae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001cb0:	f00a f800 	bl	800bcb4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <main+0x90>
 8001cb6:	bf00      	nop
 8001cb8:	08010324 	.word	0x08010324
 8001cbc:	2000082c 	.word	0x2000082c
 8001cc0:	08010270 	.word	0x08010270
 8001cc4:	08002179 	.word	0x08002179
 8001cc8:	20000818 	.word	0x20000818
 8001ccc:	08010294 	.word	0x08010294
 8001cd0:	0800221d 	.word	0x0800221d
 8001cd4:	2000081c 	.word	0x2000081c
 8001cd8:	080102b8 	.word	0x080102b8
 8001cdc:	080022d1 	.word	0x080022d1
 8001ce0:	20000820 	.word	0x20000820
 8001ce4:	080102dc 	.word	0x080102dc
 8001ce8:	080022fd 	.word	0x080022fd
 8001cec:	20000824 	.word	0x20000824
 8001cf0:	08010300 	.word	0x08010300
 8001cf4:	08002389 	.word	0x08002389
 8001cf8:	20000828 	.word	0x20000828

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	; 0x50
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2230      	movs	r2, #48	; 0x30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00d fc0e 	bl	800f52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d66:	2302      	movs	r3, #2
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d70:	2308      	movs	r3, #8
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d74:	23a8      	movs	r3, #168	; 0xa8
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 fb2b 	bl	80053e0 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d90:	f000 fb6e 	bl	8002470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fd8d 	bl	80058d0 <HAL_RCC_ClockConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001dbc:	f000 fb58 	bl	8002470 <Error_Handler>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3750      	adds	r7, #80	; 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001dd6:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <MX_I2C1_Init+0x54>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_I2C1_Init+0x58>)
 8001dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001dee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <MX_I2C1_Init+0x50>)
 8001e0e:	f001 f8ab 	bl	8002f68 <HAL_I2C_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e18:	f000 fb2a 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000684 	.word	0x20000684
 8001e24:	40005400 	.word	0x40005400
 8001e28:	000186a0 	.word	0x000186a0

08001e2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e32:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <MX_SPI1_Init+0x6c>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e62:	2218      	movs	r2, #24
 8001e64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e7a:	220a      	movs	r2, #10
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_SPI1_Init+0x68>)
 8001e80:	f003 ff62 	bl	8005d48 <HAL_SPI_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001e8a:	f000 faf1 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200006d8 	.word	0x200006d8
 8001e98:	40013000 	.word	0x40013000

08001e9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <MX_SPI2_Init+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ecc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001ee8:	220a      	movs	r2, #10
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_SPI2_Init+0x64>)
 8001eee:	f003 ff2b 	bl	8005d48 <HAL_SPI_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ef8:	f000 faba 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000730 	.word	0x20000730
 8001f04:	40003800 	.word	0x40003800

08001f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f42:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f50:	2231      	movs	r2, #49	; 0x31
 8001f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f60:	4823      	ldr	r0, [pc, #140]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f62:	f004 fb23 	bl	80065ac <HAL_TIM_Base_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f6c:	f000 fa80 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f7e:	f004 ff81 	bl	8006e84 <HAL_TIM_ConfigClockSource>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f88:	f000 fa72 	bl	8002470 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f8c:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001f8e:	f004 fc41 	bl	8006814 <HAL_TIM_PWM_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f98:	f000 fa6a 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa4:	f107 0320 	add.w	r3, r7, #32
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fac:	f005 fb26 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fb6:	f000 fa5b 	bl	8002470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fba:	2360      	movs	r3, #96	; 0x60
 8001fbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001fbe:	2318      	movs	r3, #24
 8001fc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2208      	movs	r2, #8
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fd2:	f004 fe95 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fdc:	f000 fa48 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM2_Init+0xe8>)
 8001fe2:	f000 fb73 	bl	80026cc <HAL_TIM_MspPostInit>

}
 8001fe6:	bf00      	nop
 8001fe8:	3738      	adds	r7, #56	; 0x38
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000788 	.word	0x20000788

08001ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <MX_TIM3_Init+0x94>)
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <MX_TIM3_Init+0x98>)
 8002014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_TIM3_Init+0x94>)
 8002018:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800201c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_TIM3_Init+0x94>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <MX_TIM3_Init+0x94>)
 8002026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800202a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <MX_TIM3_Init+0x94>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_TIM3_Init+0x94>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002038:	4813      	ldr	r0, [pc, #76]	; (8002088 <MX_TIM3_Init+0x94>)
 800203a:	f004 fab7 	bl	80065ac <HAL_TIM_Base_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002044:	f000 fa14 	bl	8002470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <MX_TIM3_Init+0x94>)
 8002056:	f004 ff15 	bl	8006e84 <HAL_TIM_ConfigClockSource>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002060:	f000 fa06 	bl	8002470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_TIM3_Init+0x94>)
 8002072:	f005 fac3 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800207c:	f000 f9f8 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200007d0 	.word	0x200007d0
 800208c:	40000400 	.word	0x40000400

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <MX_GPIO_Init+0xdc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a2f      	ldr	r2, [pc, #188]	; (800216c <MX_GPIO_Init+0xdc>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <MX_GPIO_Init+0xdc>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <MX_GPIO_Init+0xdc>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <MX_GPIO_Init+0xdc>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <MX_GPIO_Init+0xdc>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <MX_GPIO_Init+0xdc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <MX_GPIO_Init+0xdc>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <MX_GPIO_Init+0xdc>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002100:	481b      	ldr	r0, [pc, #108]	; (8002170 <MX_GPIO_Init+0xe0>)
 8002102:	f000 ff17 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2122      	movs	r1, #34	; 0x22
 800210a:	481a      	ldr	r0, [pc, #104]	; (8002174 <MX_GPIO_Init+0xe4>)
 800210c:	f000 ff12 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002110:	2302      	movs	r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4619      	mov	r1, r3
 8002122:	4813      	ldr	r0, [pc, #76]	; (8002170 <MX_GPIO_Init+0xe0>)
 8002124:	f000 fd6a 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002128:	f44f 738c 	mov.w	r3, #280	; 0x118
 800212c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4619      	mov	r1, r3
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <MX_GPIO_Init+0xe0>)
 8002142:	f000 fd5b 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002146:	2322      	movs	r3, #34	; 0x22
 8002148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_GPIO_Init+0xe4>)
 800215e:	f000 fd4d 	bl	8002bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002162:	bf00      	nop
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400

08002178 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	f5ad 6d05 	sub.w	sp, sp, #2128	; 0x850
 800217e:	af02      	add	r7, sp, #8
 8002180:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8002184:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 8002188:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800218a:	f00c fc77 	bl	800ea7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	BYTE* work = malloc(SECTOR_SIZE);
 800218e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002192:	f00d f9ad 	bl	800f4f0 <malloc>
 8002196:	4603      	mov	r3, r0
 8002198:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844

	vTaskSuspend(ReadCardHandle);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <Start_Init+0x8c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00a feb3 	bl	800cf0c <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <Start_Init+0x90>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00a feae 	bl	800cf0c <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <Start_Init+0x94>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f00a fea9 	bl	800cf0c <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <Start_Init+0x98>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a fea4 	bl	800cf0c <vTaskSuspend>

    MFRC_INIT();
 80021c4:	f7fe fb08 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 80021c8:	f7fe fabe 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 80021cc:	f7fe fed6 	bl	8000f7c <OLED_INIT>
    OLED_Print(TC);
 80021d0:	4810      	ldr	r0, [pc, #64]	; (8002214 <Start_Init+0x9c>)
 80021d2:	f7ff f818 	bl	8001206 <OLED_Print>
    mem_init(0);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff fc28 	bl	8001a2c <mem_init>
    block_erase(0x0000);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fa79 	bl	80016d4 <block_erase>
    while(1) {
    	FATFS fs;
    	FRESULT result1 = f_mkfs("", FM_ANY, 0, work, SECTOR_SIZE);
 80021e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80021ec:	2200      	movs	r2, #0
 80021ee:	2107      	movs	r1, #7
 80021f0:	4809      	ldr	r0, [pc, #36]	; (8002218 <Start_Init+0xa0>)
 80021f2:	f009 f84b 	bl	800b28c <f_mkfs>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f887 3843 	strb.w	r3, [r7, #2115]	; 0x843
    	//FRESULT result2 = f_mount(&fs, "0:/", 1);


    	HAL_Delay(100);
 80021fc:	2064      	movs	r0, #100	; 0x64
 80021fe:	f000 fbf7 	bl	80029f0 <HAL_Delay>
    while(1) {
 8002202:	e7ee      	b.n	80021e2 <Start_Init+0x6a>
 8002204:	2000081c 	.word	0x2000081c
 8002208:	20000820 	.word	0x20000820
 800220c:	20000824 	.word	0x20000824
 8002210:	20000828 	.word	0x20000828
 8002214:	20000404 	.word	0x20000404
 8002218:	0800fef8 	.word	0x0800fef8

0800221c <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	b091      	sub	sp, #68	; 0x44
 8002220:	af06      	add	r7, sp, #24
 8002222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 8002224:	201a      	movs	r0, #26
 8002226:	f00d f963 	bl	800f4f0 <malloc>
 800222a:	4603      	mov	r3, r0
 800222c:	60bb      	str	r3, [r7, #8]
	int ranonce = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
	MFRC_ANTON();
 8002236:	f7fe fa4d 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002240:	2100      	movs	r1, #0
 8002242:	481f      	ldr	r0, [pc, #124]	; (80022c0 <StartReadCard+0xa4>)
 8002244:	f7ff f8aa 	bl	800139c <OLED_SCREEN>
		ranonce++;
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3301      	adds	r3, #1
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(DumpINFO(cardinf)==PCD_OK){
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fcfc 	bl	8000c50 <DumpINFO>
 8002258:	4603      	mov	r3, r0
 800225a:	2bcc      	cmp	r3, #204	; 0xcc
 800225c:	d121      	bne.n	80022a2 <StartReadCard+0x86>
			BUZZ();
 800225e:	f7ff fc81 	bl	8001b64 <BUZZ>
			MFRC_ANTOFF();
 8002262:	f7fe fa71 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 8002266:	68b8      	ldr	r0, [r7, #8]
 8002268:	7b3b      	ldrb	r3, [r7, #12]
 800226a:	461e      	mov	r6, r3
 800226c:	7b7b      	ldrb	r3, [r7, #13]
 800226e:	469c      	mov	ip, r3
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	7c39      	ldrb	r1, [r7, #16]
 8002276:	7c7c      	ldrb	r4, [r7, #17]
 8002278:	7cbd      	ldrb	r5, [r7, #18]
 800227a:	9504      	str	r5, [sp, #16]
 800227c:	9403      	str	r4, [sp, #12]
 800227e:	9102      	str	r1, [sp, #8]
 8002280:	9201      	str	r2, [sp, #4]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4663      	mov	r3, ip
 8002286:	4632      	mov	r2, r6
 8002288:	490e      	ldr	r1, [pc, #56]	; (80022c4 <StartReadCard+0xa8>)
 800228a:	f00d fa47 	bl	800f71c <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0); //Send a pointer to our string to the Card Found task to use
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <StartReadCard+0xac>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f107 0108 	add.w	r1, r7, #8
 8002296:	2300      	movs	r3, #0
 8002298:	2200      	movs	r2, #0
 800229a:	f00a f879 	bl	800c390 <xQueueGenericSend>
			suspend = 1;
 800229e:	2301      	movs	r3, #1
 80022a0:	623b      	str	r3, [r7, #32]
		}
	if (suspend == 1) {
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d1c4      	bne.n	8002232 <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <StartReadCard+0xb0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00a fed5 	bl	800d05c <vTaskResume>
		ranonce = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
		vTaskSuspend(NULL);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f00a fe28 	bl	800cf0c <vTaskSuspend>
  {
 80022bc:	e7b9      	b.n	8002232 <StartReadCard+0x16>
 80022be:	bf00      	nop
 80022c0:	08010394 	.word	0x08010394
 80022c4:	0800fefc 	.word	0x0800fefc
 80022c8:	2000082c 	.word	0x2000082c
 80022cc:	20000828 	.word	0x20000828

080022d0 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 80022e2:	2100      	movs	r1, #0
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <StartWriteCard+0x28>)
 80022e6:	f7ff f859 	bl	800139c <OLED_SCREEN>
	  	ranonce++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f009 fd98 	bl	800be26 <osDelay>
	  if (ranonce == 0){
 80022f6:	e7f1      	b.n	80022dc <StartWriteCard+0xc>
 80022f8:	080103bc 	.word	0x080103bc

080022fc <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8002316:	2100      	movs	r1, #0
 8002318:	4818      	ldr	r0, [pc, #96]	; (800237c <StartHome+0x80>)
 800231a:	f7ff f83f 	bl	800139c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2201      	movs	r2, #1
 8002324:	4619      	mov	r1, r3
 8002326:	4815      	ldr	r0, [pc, #84]	; (800237c <StartHome+0x80>)
 8002328:	f7ff f89a 	bl	8001460 <OLED_SELECT>
		  ranonce++;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 8002332:	f107 0210 	add.w	r2, r7, #16
 8002336:	f107 010c 	add.w	r1, r7, #12
 800233a:	2301      	movs	r3, #1
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2306      	movs	r3, #6
 8002340:	480e      	ldr	r0, [pc, #56]	; (800237c <StartHome+0x80>)
 8002342:	f7ff fc21 	bl	8001b88 <choose>
	  if (suspend == 1) {
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d1df      	bne.n	800230c <StartHome+0x10>
		switch(count) {
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <StartHome+0x5c>
 8002352:	2b01      	cmp	r3, #1
 8002354:	d006      	beq.n	8002364 <StartHome+0x68>
 8002356:	e00b      	b.n	8002370 <StartHome+0x74>
			case 0:
				vTaskResume(ReadCardHandle);
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <StartHome+0x84>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f00a fe7d 	bl	800d05c <vTaskResume>
				break;
 8002362:	e005      	b.n	8002370 <StartHome+0x74>
			case 1:
				vTaskResume(WriteCardHandle);
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <StartHome+0x88>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f00a fe77 	bl	800d05c <vTaskResume>
				break;
 800236e:	bf00      	nop
		}
		ranonce = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8002374:	2000      	movs	r0, #0
 8002376:	f00a fdc9 	bl	800cf0c <vTaskSuspend>
  {
 800237a:	e7c7      	b.n	800230c <StartHome+0x10>
 800237c:	08010380 	.word	0x08010380
 8002380:	2000081c 	.word	0x2000081c
 8002384:	20000820 	.word	0x20000820

08002388 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
	 int ranonce = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <CardFoundStart+0xb4>)
 800239a:	f107 0410 	add.w	r4, r7, #16
 800239e:	461d      	mov	r5, r3
 80023a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a4:	682b      	ldr	r3, [r5, #0]
 80023a6:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d126      	bne.n	8002400 <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 80023b2:	bf00      	nop
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <CardFoundStart+0xb8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80023bc:	2200      	movs	r2, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f00a f980 	bl	800c6c4 <xQueueReceive>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d1f4      	bne.n	80023b4 <CardFoundStart+0x2c>
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 80023ca:	2100      	movs	r1, #0
 80023cc:	481d      	ldr	r0, [pc, #116]	; (8002444 <CardFoundStart+0xbc>)
 80023ce:	f7fe ffe5 	bl	800139c <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, 1, cardinf);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	461a      	mov	r2, r3
 80023d6:	2101      	movs	r1, #1
 80023d8:	481a      	ldr	r0, [pc, #104]	; (8002444 <CardFoundStart+0xbc>)
 80023da:	f7ff f818 	bl	800140e <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, 2, type);
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	461a      	mov	r2, r3
 80023e4:	2102      	movs	r1, #2
 80023e6:	4817      	ldr	r0, [pc, #92]	; (8002444 <CardFoundStart+0xbc>)
 80023e8:	f7ff f811 	bl	800140e <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	4619      	mov	r1, r3
 80023f4:	4813      	ldr	r0, [pc, #76]	; (8002444 <CardFoundStart+0xbc>)
 80023f6:	f7ff f833 	bl	8001460 <OLED_SELECT>
		ranonce++;
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	3301      	adds	r3, #1
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	choose(&SCRN_CardFound,&suspend,&count,2,OLED_NORESTORE);
 8002400:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002404:	f107 010c 	add.w	r1, r7, #12
 8002408:	2300      	movs	r3, #0
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2302      	movs	r3, #2
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <CardFoundStart+0xbc>)
 8002410:	f7ff fbba 	bl	8001b88 <choose>
 	if((suspend == 1) && (count == 1)){
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d1c6      	bne.n	80023a8 <CardFoundStart+0x20>
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	2b01      	cmp	r3, #1
 800241e:	d1c3      	bne.n	80023a8 <CardFoundStart+0x20>
 		vTaskResume(HomeHandle);
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <CardFoundStart+0xc0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f00a fe19 	bl	800d05c <vTaskResume>
 		ranonce = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
 		count = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
 		vTaskSuspend(NULL);
 8002432:	2000      	movs	r0, #0
 8002434:	f00a fd6a 	bl	800cf0c <vTaskSuspend>
  {
 8002438:	e7b6      	b.n	80023a8 <CardFoundStart+0x20>
 800243a:	bf00      	nop
 800243c:	0800ff0c 	.word	0x0800ff0c
 8002440:	2000082c 	.word	0x2000082c
 8002444:	080103a8 	.word	0x080103a8
 8002448:	20000824 	.word	0x20000824

0800244c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800245e:	f000 faa7 	bl	80029b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40000c00 	.word	0x40000c00

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002474:	b672      	cpsid	i
}
 8002476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002478:	e7fe      	b.n	8002478 <Error_Handler+0x8>
	...

0800247c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_MspInit+0x54>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_MspInit+0x54>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_MspInit+0x54>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_MspInit+0x54>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_MspInit+0x54>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_MspInit+0x54>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	210f      	movs	r1, #15
 80024be:	f06f 0001 	mvn.w	r0, #1
 80024c2:	f000 fb71 	bl	8002ba8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a19      	ldr	r2, [pc, #100]	; (8002558 <HAL_I2C_MspInit+0x84>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12b      	bne.n	800254e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_I2C_MspInit+0x88>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_I2C_MspInit+0x88>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_I2C_MspInit+0x88>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002512:	23c0      	movs	r3, #192	; 0xc0
 8002514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002516:	2312      	movs	r3, #18
 8002518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002522:	2304      	movs	r3, #4
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4619      	mov	r1, r3
 800252c:	480c      	ldr	r0, [pc, #48]	; (8002560 <HAL_I2C_MspInit+0x8c>)
 800252e:	f000 fb65 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_I2C_MspInit+0x88>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_I2C_MspInit+0x88>)
 800253c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_I2C_MspInit+0x88>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40005400 	.word	0x40005400
 800255c:	40023800 	.word	0x40023800
 8002560:	40020400 	.word	0x40020400

08002564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a32      	ldr	r2, [pc, #200]	; (800264c <HAL_SPI_MspInit+0xe8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12c      	bne.n	80025e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_SPI_MspInit+0xec>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	4a30      	ldr	r2, [pc, #192]	; (8002650 <HAL_SPI_MspInit+0xec>)
 8002590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002594:	6453      	str	r3, [r2, #68]	; 0x44
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_SPI_MspInit+0xec>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_SPI_MspInit+0xec>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_SPI_MspInit+0xec>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_SPI_MspInit+0xec>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025be:	23a0      	movs	r3, #160	; 0xa0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ce:	2305      	movs	r3, #5
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	481e      	ldr	r0, [pc, #120]	; (8002654 <HAL_SPI_MspInit+0xf0>)
 80025da:	f000 fb0f 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025de:	e031      	b.n	8002644 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <HAL_SPI_MspInit+0xf4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d12c      	bne.n	8002644 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_SPI_MspInit+0xec>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_SPI_MspInit+0xec>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_SPI_MspInit+0xec>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_SPI_MspInit+0xec>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_SPI_MspInit+0xec>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_SPI_MspInit+0xec>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002622:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002634:	2305      	movs	r3, #5
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	4619      	mov	r1, r3
 800263e:	4807      	ldr	r0, [pc, #28]	; (800265c <HAL_SPI_MspInit+0xf8>)
 8002640:	f000 fadc 	bl	8002bfc <HAL_GPIO_Init>
}
 8002644:	bf00      	nop
 8002646:	3730      	adds	r7, #48	; 0x30
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40013000 	.word	0x40013000
 8002650:	40023800 	.word	0x40023800
 8002654:	40020000 	.word	0x40020000
 8002658:	40003800 	.word	0x40003800
 800265c:	40020400 	.word	0x40020400

08002660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_TIM_Base_MspInit+0x64>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_TIM_Base_MspInit+0x64>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_TIM_Base_MspInit+0x64>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800268e:	e012      	b.n	80026b6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <HAL_TIM_Base_MspInit+0x68>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10d      	bne.n	80026b6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_TIM_Base_MspInit+0x64>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <HAL_TIM_Base_MspInit+0x64>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_TIM_Base_MspInit+0x64>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40000400 	.word	0x40000400

080026cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d11d      	bne.n	800272a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_TIM_MspPostInit+0x68>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_TIM_MspPostInit+0x68>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_TIM_MspPostInit+0x68>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800270a:	2304      	movs	r3, #4
 800270c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	4619      	mov	r1, r3
 8002724:	4804      	ldr	r0, [pc, #16]	; (8002738 <HAL_TIM_MspPostInit+0x6c>)
 8002726:	f000 fa69 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800272a:	bf00      	nop
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	; 0x38
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_InitTick+0xe4>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	4a32      	ldr	r2, [pc, #200]	; (8002820 <HAL_InitTick+0xe4>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	6413      	str	r3, [r2, #64]	; 0x40
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <HAL_InitTick+0xe4>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002768:	f107 0210 	add.w	r2, r7, #16
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fab6 	bl	8005ce4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002782:	f003 fa9b 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 8002786:	6378      	str	r0, [r7, #52]	; 0x34
 8002788:	e004      	b.n	8002794 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800278a:	f003 fa97 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 800278e:	4603      	mov	r3, r0
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	4a23      	ldr	r2, [pc, #140]	; (8002824 <HAL_InitTick+0xe8>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9b      	lsrs	r3, r3, #18
 800279e:	3b01      	subs	r3, #1
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_InitTick+0xec>)
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_InitTick+0xf0>)
 80027a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_InitTick+0xec>)
 80027aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027ae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80027b0:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_InitTick+0xec>)
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_InitTick+0xec>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027bc:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_InitTick+0xec>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_InitTick+0xec>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80027c8:	4817      	ldr	r0, [pc, #92]	; (8002828 <HAL_InitTick+0xec>)
 80027ca:	f003 feef 	bl	80065ac <HAL_TIM_Base_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80027d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11b      	bne.n	8002814 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80027dc:	4812      	ldr	r0, [pc, #72]	; (8002828 <HAL_InitTick+0xec>)
 80027de:	f003 ffb7 	bl	8006750 <HAL_TIM_Base_Start_IT>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80027e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027f0:	2032      	movs	r0, #50	; 0x32
 80027f2:	f000 f9f5 	bl	8002be0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d808      	bhi.n	800280e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	2032      	movs	r0, #50	; 0x32
 8002802:	f000 f9d1 	bl	8002ba8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_InitTick+0xf4>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e002      	b.n	8002814 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002814:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002818:	4618      	mov	r0, r3
 800281a:	3738      	adds	r7, #56	; 0x38
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40023800 	.word	0x40023800
 8002824:	431bde83 	.word	0x431bde83
 8002828:	20000830 	.word	0x20000830
 800282c:	40000c00 	.word	0x40000c00
 8002830:	200004f0 	.word	0x200004f0

08002834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002838:	e7fe      	b.n	8002838 <NMI_Handler+0x4>

0800283a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <HardFault_Handler+0x4>

08002840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <MemManage_Handler+0x4>

08002846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284a:	e7fe      	b.n	800284a <BusFault_Handler+0x4>

0800284c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <UsageFault_Handler+0x4>

08002852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM5_IRQHandler+0x10>)
 8002866:	f004 f943 	bl	8006af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000830 	.word	0x20000830

08002874 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <OTG_FS_IRQHandler+0x10>)
 800287a:	f001 fc84 	bl	8004186 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200064e8 	.word	0x200064e8

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f00c fdf0 	bl	800f49c <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20010000 	.word	0x20010000
 80028e8:	00000400 	.word	0x00000400
 80028ec:	20000878 	.word	0x20000878
 80028f0:	20006c28 	.word	0x20006c28

080028f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <SystemInit+0x20>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <SystemInit+0x20>)
 8002900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800291e:	490e      	ldr	r1, [pc, #56]	; (8002958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002924:	e002      	b.n	800292c <LoopCopyDataInit>

08002926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292a:	3304      	adds	r3, #4

0800292c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800292c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002930:	d3f9      	bcc.n	8002926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002932:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002934:	4c0b      	ldr	r4, [pc, #44]	; (8002964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002938:	e001      	b.n	800293e <LoopFillZerobss>

0800293a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800293c:	3204      	adds	r2, #4

0800293e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002940:	d3fb      	bcc.n	800293a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002942:	f7ff ffd7 	bl	80028f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002946:	f00c fdaf 	bl	800f4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294a:	f7ff f96b 	bl	8001c24 <main>
  bx  lr    
 800294e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002950:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 800295c:	0801044c 	.word	0x0801044c
  ldr r2, =_sbss
 8002960:	20000664 	.word	0x20000664
  ldr r4, =_ebss
 8002964:	20006c24 	.word	0x20006c24

08002968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <HAL_Init+0x40>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_Init+0x40>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <HAL_Init+0x40>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 f8fc 	bl	8002b92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	200f      	movs	r0, #15
 800299c:	f7ff fece 	bl	800273c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fd6c 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x20>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_IncTick+0x24>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <HAL_IncTick+0x24>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	200004f4 	.word	0x200004f4
 80029d4:	2000087c 	.word	0x2000087c

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	2000087c 	.word	0x2000087c

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff ffee 	bl	80029d8 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d005      	beq.n	8002a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_Delay+0x44>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a16:	bf00      	nop
 8002a18:	f7ff ffde 	bl	80029d8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8f7      	bhi.n	8002a18 <HAL_Delay+0x28>
  {
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200004f4 	.word	0x200004f4

08002a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a54:	4013      	ands	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6a:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	60d3      	str	r3, [r2, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <__NVIC_GetPriorityGrouping+0x18>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 0307 	and.w	r3, r3, #7
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db0b      	blt.n	8002ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <__NVIC_EnableIRQ+0x38>)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2001      	movs	r0, #1
 8002abe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	; (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	; (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ff4c 	bl	8002a38 <__NVIC_SetPriorityGrouping>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bba:	f7ff ff61 	bl	8002a80 <__NVIC_GetPriorityGrouping>
 8002bbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	6978      	ldr	r0, [r7, #20]
 8002bc6:	f7ff ffb1 	bl	8002b2c <NVIC_EncodePriority>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff80 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff54 	bl	8002a9c <__NVIC_EnableIRQ>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e159      	b.n	8002ecc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f040 8148 	bne.w	8002ec6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d005      	beq.n	8002c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d130      	bne.n	8002cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d017      	beq.n	8002cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d123      	bne.n	8002d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a2 	beq.w	8002ec6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b57      	ldr	r3, [pc, #348]	; (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a56      	ldr	r2, [pc, #344]	; (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b54      	ldr	r3, [pc, #336]	; (8002ee4 <HAL_GPIO_Init+0x2e8>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d9e:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_GPIO_Init+0x2ec>)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	220f      	movs	r2, #15
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a49      	ldr	r2, [pc, #292]	; (8002eec <HAL_GPIO_Init+0x2f0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x202>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <HAL_GPIO_Init+0x2f4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x1fe>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a47      	ldr	r2, [pc, #284]	; (8002ef4 <HAL_GPIO_Init+0x2f8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x1fa>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a46      	ldr	r2, [pc, #280]	; (8002ef8 <HAL_GPIO_Init+0x2fc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x1f6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a45      	ldr	r2, [pc, #276]	; (8002efc <HAL_GPIO_Init+0x300>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x1f2>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dee:	2307      	movs	r3, #7
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x204>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e10:	4935      	ldr	r1, [pc, #212]	; (8002ee8 <HAL_GPIO_Init+0x2ec>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e42:	4a2f      	ldr	r2, [pc, #188]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e48:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e6c:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	f67f aea2 	bls.w	8002c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e001      	b.n	8002f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f50:	e003      	b.n	8002f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e12b      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff faa0 	bl	80024d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	; 0x24
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f002 fe76 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 8002fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a81      	ldr	r2, [pc, #516]	; (80031dc <HAL_I2C_Init+0x274>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d807      	bhi.n	8002fec <HAL_I2C_Init+0x84>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a80      	ldr	r2, [pc, #512]	; (80031e0 <HAL_I2C_Init+0x278>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e006      	b.n	8002ffa <HAL_I2C_Init+0x92>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a7d      	ldr	r2, [pc, #500]	; (80031e4 <HAL_I2C_Init+0x27c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0e7      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a78      	ldr	r2, [pc, #480]	; (80031e8 <HAL_I2C_Init+0x280>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9b      	lsrs	r3, r3, #18
 800300c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a6a      	ldr	r2, [pc, #424]	; (80031dc <HAL_I2C_Init+0x274>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d802      	bhi.n	800303c <HAL_I2C_Init+0xd4>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	e009      	b.n	8003050 <HAL_I2C_Init+0xe8>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	4a69      	ldr	r2, [pc, #420]	; (80031ec <HAL_I2C_Init+0x284>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	3301      	adds	r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	430b      	orrs	r3, r1
 8003056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	495c      	ldr	r1, [pc, #368]	; (80031dc <HAL_I2C_Init+0x274>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d819      	bhi.n	80030a4 <HAL_I2C_Init+0x13c>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e59      	subs	r1, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fbb1 f3f3 	udiv	r3, r1, r3
 800307e:	1c59      	adds	r1, r3, #1
 8003080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003084:	400b      	ands	r3, r1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_I2C_Init+0x138>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e59      	subs	r1, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fbb1 f3f3 	udiv	r3, r1, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	e051      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e04f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <HAL_I2C_Init+0x168>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e012      	b.n	80030f6 <HAL_I2C_Init+0x18e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x196>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_I2C_Init+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e58      	subs	r0, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	440b      	add	r3, r1
 8003114:	fbb0 f3f3 	udiv	r3, r0, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e58      	subs	r0, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	0099      	lsls	r1, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6911      	ldr	r1, [r2, #16]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	000186a0 	.word	0x000186a0
 80031e0:	001e847f 	.word	0x001e847f
 80031e4:	003d08ff 	.word	0x003d08ff
 80031e8:	431bde83 	.word	0x431bde83
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	4608      	mov	r0, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	461a      	mov	r2, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	817b      	strh	r3, [r7, #10]
 8003202:	460b      	mov	r3, r1
 8003204:	813b      	strh	r3, [r7, #8]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800320a:	f7ff fbe5 	bl	80029d8 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	f040 80d9 	bne.w	80033d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2319      	movs	r3, #25
 8003224:	2201      	movs	r2, #1
 8003226:	496d      	ldr	r1, [pc, #436]	; (80033dc <HAL_I2C_Mem_Write+0x1ec>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fc7f 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
 8003236:	e0cc      	b.n	80033d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_I2C_Mem_Write+0x56>
 8003242:	2302      	movs	r3, #2
 8003244:	e0c5      	b.n	80033d2 <HAL_I2C_Mem_Write+0x1e2>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d007      	beq.n	800326c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2221      	movs	r2, #33	; 0x21
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a4d      	ldr	r2, [pc, #308]	; (80033e0 <HAL_I2C_Mem_Write+0x1f0>)
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ae:	88f8      	ldrh	r0, [r7, #6]
 80032b0:	893a      	ldrh	r2, [r7, #8]
 80032b2:	8979      	ldrh	r1, [r7, #10]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4603      	mov	r3, r0
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fab6 	bl	8003830 <I2C_RequestMemoryWrite>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d052      	beq.n	8003370 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e081      	b.n	80033d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fd00 	bl	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d107      	bne.n	80032f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06b      	b.n	80033d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	781a      	ldrb	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b04      	cmp	r3, #4
 8003336:	d11b      	bne.n	8003370 <HAL_I2C_Mem_Write+0x180>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d017      	beq.n	8003370 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1aa      	bne.n	80032ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fcec 	bl	8003d5a <I2C_WaitOnBTFFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2b04      	cmp	r3, #4
 800338e:	d107      	bne.n	80033a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e016      	b.n	80033d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	00100002 	.word	0x00100002
 80033e0:	ffff0000 	.word	0xffff0000

080033e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08c      	sub	sp, #48	; 0x30
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	460b      	mov	r3, r1
 80033f8:	813b      	strh	r3, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fe:	f7ff faeb 	bl	80029d8 <HAL_GetTick>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	f040 8208 	bne.w	8003822 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2319      	movs	r3, #25
 8003418:	2201      	movs	r2, #1
 800341a:	497b      	ldr	r1, [pc, #492]	; (8003608 <HAL_I2C_Mem_Read+0x224>)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fb85 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
 800342a:	e1fb      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_I2C_Mem_Read+0x56>
 8003436:	2302      	movs	r3, #2
 8003438:	e1f4      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d007      	beq.n	8003460 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2222      	movs	r2, #34	; 0x22
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a5b      	ldr	r2, [pc, #364]	; (800360c <HAL_I2C_Mem_Read+0x228>)
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a2:	88f8      	ldrh	r0, [r7, #6]
 80034a4:	893a      	ldrh	r2, [r7, #8]
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4603      	mov	r3, r0
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fa52 	bl	800395c <I2C_RequestMemoryRead>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1b0      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d113      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	623b      	str	r3, [r7, #32]
 80034de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e184      	b.n	80037fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d11b      	bne.n	8003532 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e164      	b.n	80037fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	2b02      	cmp	r3, #2
 8003538:	d11b      	bne.n	8003572 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003548:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	e144      	b.n	80037fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003588:	e138      	b.n	80037fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358e:	2b03      	cmp	r3, #3
 8003590:	f200 80f1 	bhi.w	8003776 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b01      	cmp	r3, #1
 800359a:	d123      	bne.n	80035e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fc1b 	bl	8003ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e139      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035e2:	e10b      	b.n	80037fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d14e      	bne.n	800368a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	2200      	movs	r2, #0
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <HAL_I2C_Mem_Read+0x22c>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fa98 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e10e      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
 8003606:	bf00      	nop
 8003608:	00100002 	.word	0x00100002
 800360c:	ffff0000 	.word	0xffff0000
 8003610:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003688:	e0b8      	b.n	80037fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2200      	movs	r2, #0
 8003692:	4966      	ldr	r1, [pc, #408]	; (800382c <HAL_I2C_Mem_Read+0x448>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fa49 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0bf      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	2200      	movs	r2, #0
 80036ee:	494f      	ldr	r1, [pc, #316]	; (800382c <HAL_I2C_Mem_Read+0x448>)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fa1b 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e091      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003774:	e042      	b.n	80037fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fb2e 	bl	8003ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e04c      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d118      	bne.n	80037fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	f47f aec2 	bne.w	800358a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3728      	adds	r7, #40	; 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	00010004 	.word	0x00010004

08003830 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	817b      	strh	r3, [r7, #10]
 8003842:	460b      	mov	r3, r1
 8003844:	813b      	strh	r3, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2200      	movs	r2, #0
 8003862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f960 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d103      	bne.n	800388a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e05f      	b.n	800394e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800389c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	6a3a      	ldr	r2, [r7, #32]
 80038a2:	492d      	ldr	r1, [pc, #180]	; (8003958 <I2C_RequestMemoryWrite+0x128>)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f998 	bl	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e04c      	b.n	800394e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	6a39      	ldr	r1, [r7, #32]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fa02 	bl	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d107      	bne.n	80038f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e02b      	b.n	800394e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038fc:	893b      	ldrh	r3, [r7, #8]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	611a      	str	r2, [r3, #16]
 8003906:	e021      	b.n	800394c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003908:	893b      	ldrh	r3, [r7, #8]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	b29b      	uxth	r3, r3
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	6a39      	ldr	r1, [r7, #32]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f9dc 	bl	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b04      	cmp	r3, #4
 800392c:	d107      	bne.n	800393e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e005      	b.n	800394e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003942:	893b      	ldrh	r3, [r7, #8]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	00010002 	.word	0x00010002

0800395c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	817b      	strh	r3, [r7, #10]
 800396e:	460b      	mov	r3, r1
 8003970:	813b      	strh	r3, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003984:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	2200      	movs	r2, #0
 800399e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8c2 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039bc:	d103      	bne.n	80039c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0aa      	b.n	8003b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	4952      	ldr	r1, [pc, #328]	; (8003b28 <I2C_RequestMemoryRead+0x1cc>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f8fa 	bl	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e097      	b.n	8003b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	6a39      	ldr	r1, [r7, #32]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f964 	bl	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d107      	bne.n	8003a2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e076      	b.n	8003b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a38:	893b      	ldrh	r3, [r7, #8]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	e021      	b.n	8003a88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a44:	893b      	ldrh	r3, [r7, #8]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	6a39      	ldr	r1, [r7, #32]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f93e 	bl	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d107      	bne.n	8003a7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e050      	b.n	8003b20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7e:	893b      	ldrh	r3, [r7, #8]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	6a39      	ldr	r1, [r7, #32]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f923 	bl	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e035      	b.n	8003b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f82b 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aea:	d103      	bne.n	8003af4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e013      	b.n	8003b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003af8:	897b      	ldrh	r3, [r7, #10]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	4906      	ldr	r1, [pc, #24]	; (8003b28 <I2C_RequestMemoryRead+0x1cc>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f863 	bl	8003bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	00010002 	.word	0x00010002

08003b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b3c:	e025      	b.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d021      	beq.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fe ff47 	bl	80029d8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d116      	bne.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e023      	b.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10d      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	e00c      	b.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d0b6      	beq.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be8:	e051      	b.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d123      	bne.n	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e046      	b.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d021      	beq.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe fec5 	bl	80029d8 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d116      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e020      	b.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10c      	bne.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	2300      	moveq	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	e00b      	b.n	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d18d      	bne.n	8003bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce4:	e02d      	b.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f8ce 	bl	8003e88 <I2C_IsAcknowledgeFailed>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e02d      	b.n	8003d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d021      	beq.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fe fe6b 	bl	80029d8 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d116      	bne.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e007      	b.n	8003d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d1ca      	bne.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d66:	e02d      	b.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f88d 	bl	8003e88 <I2C_IsAcknowledgeFailed>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e02d      	b.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d021      	beq.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fe fe2a 	bl	80029d8 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e007      	b.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d1ca      	bne.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003de8:	e042      	b.n	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d119      	bne.n	8003e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0210 	mvn.w	r2, #16
 8003e00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e029      	b.n	8003e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2c:	f7fe fdd4 	bl	80029d8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d302      	bcc.n	8003e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e007      	b.n	8003e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d1b5      	bne.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9e:	d11b      	bne.n	8003ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f043 0204 	orr.w	r2, r3, #4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee8:	b08f      	sub	sp, #60	; 0x3c
 8003eea:	af0a      	add	r7, sp, #40	; 0x28
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e10f      	b.n	8004118 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f00a ffb8 	bl	800ee88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fcf7 	bl	800792a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	687e      	ldr	r6, [r7, #4]
 8003f44:	466d      	mov	r5, sp
 8003f46:	f106 0410 	add.w	r4, r6, #16
 8003f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5a:	1d33      	adds	r3, r6, #4
 8003f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	f003 fbce 	bl	8007700 <USB_CoreInit>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0d0      	b.n	8004118 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 fce5 	bl	800794c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e04a      	b.n	800401e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	333d      	adds	r3, #61	; 0x3d
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	333c      	adds	r3, #60	; 0x3c
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	b298      	uxth	r0, r3
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3344      	adds	r3, #68	; 0x44
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3340      	adds	r3, #64	; 0x40
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3348      	adds	r3, #72	; 0x48
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	334c      	adds	r3, #76	; 0x4c
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3354      	adds	r3, #84	; 0x54
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	3301      	adds	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d3af      	bcc.n	8003f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e044      	b.n	80040b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	3301      	adds	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3b5      	bcc.n	800402e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	687e      	ldr	r6, [r7, #4]
 80040ca:	466d      	mov	r5, sp
 80040cc:	f106 0410 	add.w	r4, r6, #16
 80040d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80040e0:	1d33      	adds	r3, r6, #4
 80040e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f003 fc7d 	bl	80079e4 <USB_DevInit>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e00d      	b.n	8004118 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f004 fdcc 	bl	8008cae <USB_DevDisconnect>

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004120 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_PCD_Start+0x1c>
 8004138:	2302      	movs	r3, #2
 800413a:	e020      	b.n	800417e <HAL_PCD_Start+0x5e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	2b01      	cmp	r3, #1
 800414a:	d109      	bne.n	8004160 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004150:	2b01      	cmp	r3, #1
 8004152:	d005      	beq.n	8004160 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fbcf 	bl	8007908 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fd7c 	bl	8008c6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004186:	b590      	push	{r4, r7, lr}
 8004188:	b08d      	sub	sp, #52	; 0x34
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f004 fe3a 	bl	8008e16 <USB_GetMode>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f040 848a 	bne.w	8004abe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f004 fd9e 	bl	8008cf0 <USB_ReadInterrupts>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8480 	beq.w	8004abc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f004 fd8b 	bl	8008cf0 <USB_ReadInterrupts>
 80041da:	4603      	mov	r3, r0
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d107      	bne.n	80041f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f002 0202 	and.w	r2, r2, #2
 80041f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f004 fd79 	bl	8008cf0 <USB_ReadInterrupts>
 80041fe:	4603      	mov	r3, r0
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d161      	bne.n	80042cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0210 	bic.w	r2, r2, #16
 8004216:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	3304      	adds	r3, #4
 8004236:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	0c5b      	lsrs	r3, r3, #17
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	2b02      	cmp	r3, #2
 8004242:	d124      	bne.n	800428e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d035      	beq.n	80042bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800425a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	6a38      	ldr	r0, [r7, #32]
 8004264:	f004 fbb0 	bl	80089c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004274:	441a      	add	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004286:	441a      	add	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
 800428c:	e016      	b.n	80042bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	0c5b      	lsrs	r3, r3, #17
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	2b06      	cmp	r3, #6
 8004298:	d110      	bne.n	80042bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042a0:	2208      	movs	r2, #8
 80042a2:	4619      	mov	r1, r3
 80042a4:	6a38      	ldr	r0, [r7, #32]
 80042a6:	f004 fb8f 	bl	80089c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b6:	441a      	add	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0210 	orr.w	r2, r2, #16
 80042ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fd0d 	bl	8008cf0 <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042e0:	f040 80a7 	bne.w	8004432 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fd12 	bl	8008d16 <USB_ReadDevAllOutEpInterrupt>
 80042f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042f4:	e099      	b.n	800442a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 808e 	beq.w	800441e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f004 fd36 	bl	8008d7e <USB_ReadDevOutEPInterrupt>
 8004312:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	461a      	mov	r2, r3
 800432c:	2301      	movs	r3, #1
 800432e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fec2 	bl	80050bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	461a      	mov	r2, r3
 8004350:	2308      	movs	r3, #8
 8004352:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 ff98 	bl	800528c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	461a      	mov	r2, r3
 8004374:	2310      	movs	r3, #16
 8004376:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d030      	beq.n	80043e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d109      	bne.n	80043a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	3304      	adds	r3, #4
 80043b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d108      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2200      	movs	r2, #0
 80043c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f00a fe57 	bl	800f080 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043de:	461a      	mov	r2, r3
 80043e0:	2302      	movs	r3, #2
 80043e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	461a      	mov	r2, r3
 80043fc:	2320      	movs	r3, #32
 80043fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	461a      	mov	r2, r3
 8004418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800441c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	3301      	adds	r3, #1
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	f47f af62 	bne.w	80042f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f004 fc5a 	bl	8008cf0 <USB_ReadInterrupts>
 800443c:	4603      	mov	r3, r0
 800443e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004446:	f040 80db 	bne.w	8004600 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f004 fc7b 	bl	8008d4a <USB_ReadDevAllInEpInterrupt>
 8004454:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800445a:	e0cd      	b.n	80045f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80c2 	beq.w	80045ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f004 fca1 	bl	8008dba <USB_ReadDevInEPInterrupt>
 8004478:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d057      	beq.n	8004534 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	2201      	movs	r2, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	43db      	mvns	r3, r3
 800449e:	69f9      	ldr	r1, [r7, #28]
 80044a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a4:	4013      	ands	r3, r2
 80044a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b4:	461a      	mov	r2, r3
 80044b6:	2301      	movs	r3, #1
 80044b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d132      	bne.n	8004528 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	334c      	adds	r3, #76	; 0x4c
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4403      	add	r3, r0
 80044e2:	3348      	adds	r3, #72	; 0x48
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4419      	add	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4403      	add	r3, r0
 80044f6:	334c      	adds	r3, #76	; 0x4c
 80044f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d113      	bne.n	8004528 <HAL_PCD_IRQHandler+0x3a2>
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3354      	adds	r3, #84	; 0x54
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d108      	bne.n	8004528 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004520:	461a      	mov	r2, r3
 8004522:	2101      	movs	r1, #1
 8004524:	f004 fca8 	bl	8008e78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f00a fd2b 	bl	800ef8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454a:	461a      	mov	r2, r3
 800454c:	2308      	movs	r3, #8
 800454e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	461a      	mov	r2, r3
 8004568:	2310      	movs	r3, #16
 800456a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	461a      	mov	r2, r3
 8004584:	2340      	movs	r3, #64	; 0x40
 8004586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d023      	beq.n	80045da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004594:	6a38      	ldr	r0, [r7, #32]
 8004596:	f003 fb89 	bl	8007cac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	3338      	adds	r3, #56	; 0x38
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	3304      	adds	r3, #4
 80045ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	78db      	ldrb	r3, [r3, #3]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d108      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f00a fd6e 	bl	800f0a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	2302      	movs	r3, #2
 80045d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fcdb 	bl	8004fa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	3301      	adds	r3, #1
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f47f af2e 	bne.w	800445c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f004 fb73 	bl	8008cf0 <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004614:	d122      	bne.n	800465c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004630:	2b01      	cmp	r3, #1
 8004632:	d108      	bne.n	8004646 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800463c:	2100      	movs	r1, #0
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fec2 	bl	80053c8 <HAL_PCDEx_LPM_Callback>
 8004644:	e002      	b.n	800464c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f00a fd0c 	bl	800f064 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800465a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f004 fb45 	bl	8008cf0 <USB_ReadInterrupts>
 8004666:	4603      	mov	r3, r0
 8004668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d112      	bne.n	8004698 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d102      	bne.n	8004688 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f00a fcc8 	bl	800f018 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004696:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f004 fb27 	bl	8008cf0 <USB_ReadInterrupts>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ac:	f040 80b7 	bne.w	800481e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2110      	movs	r1, #16
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 faee 	bl	8007cac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d4:	e046      	b.n	8004764 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	461a      	mov	r2, r3
 8004718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800471c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800473c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800475c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	3301      	adds	r3, #1
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476a:	429a      	cmp	r2, r3
 800476c:	d3b3      	bcc.n	80046d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479a:	f043 030b 	orr.w	r3, r3, #11
 800479e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b0:	f043 030b 	orr.w	r3, r3, #11
 80047b4:	6453      	str	r3, [r2, #68]	; 0x44
 80047b6:	e015      	b.n	80047e4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80047ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047de:	f043 030b 	orr.w	r3, r3, #11
 80047e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004808:	461a      	mov	r2, r3
 800480a:	f004 fb35 	bl	8008e78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800481c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f004 fa64 	bl	8008cf0 <USB_ReadInterrupts>
 8004828:	4603      	mov	r3, r0
 800482a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800482e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004832:	d124      	bne.n	800487e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f004 fafa 	bl	8008e32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f003 faaf 	bl	8007da6 <USB_GetDevSpeed>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681c      	ldr	r4, [r3, #0]
 8004854:	f001 fa26 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8004858:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	4620      	mov	r0, r4
 8004864:	f002 ffae 	bl	80077c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f00a fbb6 	bl	800efda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800487c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f004 fa34 	bl	8008cf0 <USB_ReadInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d10a      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f00a fb93 	bl	800efbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f002 0208 	and.w	r2, r2, #8
 80048a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f004 fa1f 	bl	8008cf0 <USB_ReadInterrupts>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b8:	2b80      	cmp	r3, #128	; 0x80
 80048ba:	d122      	bne.n	8004902 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c8:	2301      	movs	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
 80048cc:	e014      	b.n	80048f8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d105      	bne.n	80048f2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb27 	bl	8004f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	3301      	adds	r3, #1
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3e5      	bcc.n	80048ce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f004 f9f2 	bl	8008cf0 <USB_ReadInterrupts>
 800490c:	4603      	mov	r3, r0
 800490e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004916:	d13b      	bne.n	8004990 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004918:	2301      	movs	r3, #1
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
 800491c:	e02b      	b.n	8004976 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3340      	adds	r3, #64	; 0x40
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d115      	bne.n	8004970 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004944:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004946:	2b00      	cmp	r3, #0
 8004948:	da12      	bge.n	8004970 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	4613      	mov	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	333f      	adds	r3, #63	; 0x3f
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004966:	b2db      	uxtb	r3, r3
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fae8 	bl	8004f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	3301      	adds	r3, #1
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497c:	429a      	cmp	r2, r3
 800497e:	d3ce      	bcc.n	800491e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800498e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f004 f9ab 	bl	8008cf0 <USB_ReadInterrupts>
 800499a:	4603      	mov	r3, r0
 800499c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a4:	d155      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049a6:	2301      	movs	r3, #1
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	e045      	b.n	8004a38 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d12e      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da2b      	bge.n	8004a32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80049e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d121      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a2e:	6053      	str	r3, [r2, #4]
            break;
 8004a30:	e007      	b.n	8004a42 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	3301      	adds	r3, #1
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d3b4      	bcc.n	80049ac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f004 f94a 	bl	8008cf0 <USB_ReadInterrupts>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d10a      	bne.n	8004a7e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f00a fb2d 	bl	800f0c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f004 f934 	bl	8008cf0 <USB_ReadInterrupts>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d115      	bne.n	8004abe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f00a fb1d 	bl	800f0e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	e000      	b.n	8004abe <HAL_PCD_IRQHandler+0x938>
      return;
 8004abc:	bf00      	nop
    }
  }
}
 8004abe:	3734      	adds	r7, #52	; 0x34
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd90      	pop	{r4, r7, pc}

08004ac4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_PCD_SetAddress+0x1a>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e013      	b.n	8004b06 <HAL_PCD_SetAddress+0x42>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f004 f892 	bl	8008c20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	4608      	mov	r0, r1
 8004b18:	4611      	mov	r1, r2
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	70fb      	strb	r3, [r7, #3]
 8004b20:	460b      	mov	r3, r1
 8004b22:	803b      	strh	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da0f      	bge.n	8004b54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	f003 020f 	and.w	r2, r3, #15
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	3338      	adds	r3, #56	; 0x38
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	4413      	add	r3, r2
 8004b48:	3304      	adds	r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	705a      	strb	r2, [r3, #1]
 8004b52:	e00f      	b.n	8004b74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	f003 020f 	and.w	r2, r3, #15
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	4413      	add	r3, r2
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b80:	883a      	ldrh	r2, [r7, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	78ba      	ldrb	r2, [r7, #2]
 8004b8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b9e:	78bb      	ldrb	r3, [r7, #2]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d102      	bne.n	8004baa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_PCD_EP_Open+0xaa>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e00e      	b.n	8004bd6 <HAL_PCD_EP_Open+0xc8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68f9      	ldr	r1, [r7, #12]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f003 f912 	bl	8007df0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da0f      	bge.n	8004c12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	f003 020f 	and.w	r2, r3, #15
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	3338      	adds	r3, #56	; 0x38
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	3304      	adds	r3, #4
 8004c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	705a      	strb	r2, [r3, #1]
 8004c10:	e00f      	b.n	8004c32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4413      	add	r3, r2
 8004c28:	3304      	adds	r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_PCD_EP_Close+0x6e>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e00e      	b.n	8004c6a <HAL_PCD_EP_Close+0x8c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68f9      	ldr	r1, [r7, #12]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f003 f950 	bl	8007f00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c82:	7afb      	ldrb	r3, [r7, #11]
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	3304      	adds	r3, #4
 8004c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb4:	7afb      	ldrb	r3, [r7, #11]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d102      	bne.n	8004cce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cce:	7afb      	ldrb	r3, [r7, #11]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	f003 fc2f 	bl	8008548 <USB_EP0StartXfer>
 8004cea:	e008      	b.n	8004cfe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	f003 f9dd 	bl	80080b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	460b      	mov	r3, r1
 8004d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d48:	7afb      	ldrb	r3, [r7, #11]
 8004d4a:	f003 020f 	and.w	r2, r3, #15
 8004d4e:	4613      	mov	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	3338      	adds	r3, #56	; 0x38
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2201      	movs	r2, #1
 8004d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d78:	7afb      	ldrb	r3, [r7, #11]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d102      	bne.n	8004d92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d92:	7afb      	ldrb	r3, [r7, #11]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	6979      	ldr	r1, [r7, #20]
 8004daa:	f003 fbcd 	bl	8008548 <USB_EP0StartXfer>
 8004dae:	e008      	b.n	8004dc2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6979      	ldr	r1, [r7, #20]
 8004dbe:	f003 f97b 	bl	80080b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 020f 	and.w	r2, r3, #15
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d901      	bls.n	8004dea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e050      	b.n	8004e8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	da0f      	bge.n	8004e12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 020f 	and.w	r2, r3, #15
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	3338      	adds	r3, #56	; 0x38
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4413      	add	r3, r2
 8004e06:	3304      	adds	r3, #4
 8004e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	705a      	strb	r2, [r3, #1]
 8004e10:	e00d      	b.n	8004e2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4413      	add	r3, r2
 8004e24:	3304      	adds	r3, #4
 8004e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_PCD_EP_SetStall+0x82>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e01e      	b.n	8004e8c <HAL_PCD_EP_SetStall+0xc0>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f003 fe0b 	bl	8008a78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	b2d9      	uxtb	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f003 fffb 	bl	8008e78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d901      	bls.n	8004eb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e042      	b.n	8004f38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	da0f      	bge.n	8004eda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	f003 020f 	and.w	r2, r3, #15
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	3338      	adds	r3, #56	; 0x38
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	3304      	adds	r3, #4
 8004ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	705a      	strb	r2, [r3, #1]
 8004ed8:	e00f      	b.n	8004efa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_PCD_EP_ClrStall+0x86>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e00e      	b.n	8004f38 <HAL_PCD_EP_ClrStall+0xa4>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f003 fe13 	bl	8008b54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da0c      	bge.n	8004f6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3338      	adds	r3, #56	; 0x38
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4413      	add	r3, r2
 8004f68:	3304      	adds	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e00c      	b.n	8004f88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	3304      	adds	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f003 fc32 	bl	80087f8 <USB_EPStopXfer>
 8004f94:	4603      	mov	r3, r0
 8004f96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f98:	7afb      	ldrb	r3, [r7, #11]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b08a      	sub	sp, #40	; 0x28
 8004fa6:	af02      	add	r7, sp, #8
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	3338      	adds	r3, #56	; 0x38
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d901      	bls.n	8004fda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e06c      	b.n	80050b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3303      	adds	r3, #3
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ffe:	e02b      	b.n	8005058 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	429a      	cmp	r2, r3
 8005014:	d902      	bls.n	800501c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	3303      	adds	r3, #3
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6919      	ldr	r1, [r3, #16]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005034:	b2db      	uxtb	r3, r3
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4603      	mov	r3, r0
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f003 fc86 	bl	800894c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	441a      	add	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	b29b      	uxth	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	429a      	cmp	r2, r3
 800506c:	d809      	bhi.n	8005082 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1a      	ldr	r2, [r3, #32]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005076:	429a      	cmp	r2, r3
 8005078:	d203      	bcs.n	8005082 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1be      	bne.n	8005000 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	429a      	cmp	r2, r3
 800508c:	d811      	bhi.n	80050b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	2201      	movs	r2, #1
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	6939      	ldr	r1, [r7, #16]
 80050aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ae:	4013      	ands	r3, r2
 80050b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	333c      	adds	r3, #60	; 0x3c
 80050d4:	3304      	adds	r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d17b      	bne.n	80051ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d015      	beq.n	8005128 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4a61      	ldr	r2, [pc, #388]	; (8005284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	f240 80b9 	bls.w	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80b3 	beq.w	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005124:	6093      	str	r3, [r2, #8]
 8005126:	e0a7      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	461a      	mov	r2, r3
 8005140:	2320      	movs	r3, #32
 8005142:	6093      	str	r3, [r2, #8]
 8005144:	e098      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	f040 8093 	bne.w	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4a4b      	ldr	r2, [pc, #300]	; (8005284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d90f      	bls.n	800517a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	461a      	mov	r2, r3
 8005172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005176:	6093      	str	r3, [r2, #8]
 8005178:	e07e      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	3304      	adds	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	0159      	lsls	r1, r3, #5
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	440b      	add	r3, r1
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d114      	bne.n	80051dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051c4:	461a      	mov	r2, r3
 80051c6:	2101      	movs	r1, #1
 80051c8:	f003 fe56 	bl	8008e78 <USB_EP0_OutStart>
 80051cc:	e006      	b.n	80051dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f009 feb6 	bl	800ef54 <HAL_PCD_DataOutStageCallback>
 80051e8:	e046      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	4a26      	ldr	r2, [pc, #152]	; (8005288 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d124      	bne.n	800523c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	461a      	mov	r2, r3
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	6093      	str	r3, [r2, #8]
 8005210:	e032      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	2320      	movs	r3, #32
 800522c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f009 fe8d 	bl	800ef54 <HAL_PCD_DataOutStageCallback>
 800523a:	e01d      	b.n	8005278 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d114      	bne.n	800526c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005264:	461a      	mov	r2, r3
 8005266:	2100      	movs	r1, #0
 8005268:	f003 fe06 	bl	8008e78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f009 fe6e 	bl	800ef54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	4f54300a 	.word	0x4f54300a
 8005288:	4f54310a 	.word	0x4f54310a

0800528c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	333c      	adds	r3, #60	; 0x3c
 80052a4:	3304      	adds	r3, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a15      	ldr	r2, [pc, #84]	; (8005314 <PCD_EP_OutSetupPacket_int+0x88>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d90e      	bls.n	80052e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	461a      	mov	r2, r3
 80052da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f009 fe25 	bl	800ef30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a0a      	ldr	r2, [pc, #40]	; (8005314 <PCD_EP_OutSetupPacket_int+0x88>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d90c      	bls.n	8005308 <PCD_EP_OutSetupPacket_int+0x7c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d108      	bne.n	8005308 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005300:	461a      	mov	r2, r3
 8005302:	2101      	movs	r1, #1
 8005304:	f003 fdb8 	bl	8008e78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	4f54300a 	.word	0x4f54300a

08005318 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	70fb      	strb	r3, [r7, #3]
 8005324:	4613      	mov	r3, r2
 8005326:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005336:	883b      	ldrh	r3, [r7, #0]
 8005338:	0419      	lsls	r1, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	430a      	orrs	r2, r1
 8005342:	629a      	str	r2, [r3, #40]	; 0x28
 8005344:	e028      	b.n	8005398 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4413      	add	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	e00d      	b.n	8005376 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	3340      	adds	r3, #64	; 0x40
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	3301      	adds	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	3b01      	subs	r3, #1
 800537c:	429a      	cmp	r2, r3
 800537e:	d3ec      	bcc.n	800535a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005380:	883b      	ldrh	r3, [r7, #0]
 8005382:	0418      	lsls	r0, r3, #16
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6819      	ldr	r1, [r3, #0]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	3b01      	subs	r3, #1
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	4302      	orrs	r2, r0
 8005390:	3340      	adds	r3, #64	; 0x40
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e267      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d075      	beq.n	80054ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fe:	4b88      	ldr	r3, [pc, #544]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b04      	cmp	r3, #4
 8005408:	d00c      	beq.n	8005424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540a:	4b85      	ldr	r3, [pc, #532]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005412:	2b08      	cmp	r3, #8
 8005414:	d112      	bne.n	800543c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005416:	4b82      	ldr	r3, [pc, #520]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005422:	d10b      	bne.n	800543c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	4b7e      	ldr	r3, [pc, #504]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05b      	beq.n	80054e8 <HAL_RCC_OscConfig+0x108>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d157      	bne.n	80054e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e242      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d106      	bne.n	8005454 <HAL_RCC_OscConfig+0x74>
 8005446:	4b76      	ldr	r3, [pc, #472]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a75      	ldr	r2, [pc, #468]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e01d      	b.n	8005490 <HAL_RCC_OscConfig+0xb0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0x98>
 800545e:	4b70      	ldr	r3, [pc, #448]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6f      	ldr	r2, [pc, #444]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b6d      	ldr	r3, [pc, #436]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6c      	ldr	r2, [pc, #432]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e00b      	b.n	8005490 <HAL_RCC_OscConfig+0xb0>
 8005478:	4b69      	ldr	r3, [pc, #420]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a68      	ldr	r2, [pc, #416]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b66      	ldr	r3, [pc, #408]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a65      	ldr	r2, [pc, #404]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800548a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fd fa9e 	bl	80029d8 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fd fa9a 	bl	80029d8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e207      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b5b      	ldr	r3, [pc, #364]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0xc0>
 80054be:	e014      	b.n	80054ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fd fa8a 	bl	80029d8 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fd fa86 	bl	80029d8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e1f3      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	4b51      	ldr	r3, [pc, #324]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0xe8>
 80054e6:	e000      	b.n	80054ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d063      	beq.n	80055be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f6:	4b4a      	ldr	r3, [pc, #296]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005502:	4b47      	ldr	r3, [pc, #284]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800550a:	2b08      	cmp	r3, #8
 800550c:	d11c      	bne.n	8005548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550e:	4b44      	ldr	r3, [pc, #272]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d116      	bne.n	8005548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	4b41      	ldr	r3, [pc, #260]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_RCC_OscConfig+0x152>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e1c7      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4937      	ldr	r1, [pc, #220]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	e03a      	b.n	80055be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005550:	4b34      	ldr	r3, [pc, #208]	; (8005624 <HAL_RCC_OscConfig+0x244>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fd fa3f 	bl	80029d8 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555e:	f7fd fa3b 	bl	80029d8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e1a8      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005570:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557c:	4b28      	ldr	r3, [pc, #160]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4925      	ldr	r1, [pc, #148]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]
 8005590:	e015      	b.n	80055be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005592:	4b24      	ldr	r3, [pc, #144]	; (8005624 <HAL_RCC_OscConfig+0x244>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fd fa1e 	bl	80029d8 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a0:	f7fd fa1a 	bl	80029d8 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e187      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b2:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d036      	beq.n	8005638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <HAL_RCC_OscConfig+0x248>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fd f9fe 	bl	80029d8 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e0:	f7fd f9fa 	bl	80029d8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e167      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_OscConfig+0x240>)
 80055f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x200>
 80055fe:	e01b      	b.n	8005638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <HAL_RCC_OscConfig+0x248>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005606:	f7fd f9e7 	bl	80029d8 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800560c:	e00e      	b.n	800562c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560e:	f7fd f9e3 	bl	80029d8 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d907      	bls.n	800562c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e150      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
 8005620:	40023800 	.word	0x40023800
 8005624:	42470000 	.word	0x42470000
 8005628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562c:	4b88      	ldr	r3, [pc, #544]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 800562e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1ea      	bne.n	800560e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8097 	beq.w	8005774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564a:	4b81      	ldr	r3, [pc, #516]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	4b7d      	ldr	r3, [pc, #500]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	4a7c      	ldr	r2, [pc, #496]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6413      	str	r3, [r2, #64]	; 0x40
 8005666:	4b7a      	ldr	r3, [pc, #488]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005676:	4b77      	ldr	r3, [pc, #476]	; (8005854 <HAL_RCC_OscConfig+0x474>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d118      	bne.n	80056b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005682:	4b74      	ldr	r3, [pc, #464]	; (8005854 <HAL_RCC_OscConfig+0x474>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a73      	ldr	r2, [pc, #460]	; (8005854 <HAL_RCC_OscConfig+0x474>)
 8005688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568e:	f7fd f9a3 	bl	80029d8 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005696:	f7fd f99f 	bl	80029d8 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e10c      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	4b6a      	ldr	r3, [pc, #424]	; (8005854 <HAL_RCC_OscConfig+0x474>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_OscConfig+0x2ea>
 80056bc:	4b64      	ldr	r3, [pc, #400]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	4a63      	ldr	r2, [pc, #396]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6713      	str	r3, [r2, #112]	; 0x70
 80056c8:	e01c      	b.n	8005704 <HAL_RCC_OscConfig+0x324>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0x30c>
 80056d2:	4b5f      	ldr	r3, [pc, #380]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	4a5e      	ldr	r2, [pc, #376]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056d8:	f043 0304 	orr.w	r3, r3, #4
 80056dc:	6713      	str	r3, [r2, #112]	; 0x70
 80056de:	4b5c      	ldr	r3, [pc, #368]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	4a5b      	ldr	r2, [pc, #364]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ea:	e00b      	b.n	8005704 <HAL_RCC_OscConfig+0x324>
 80056ec:	4b58      	ldr	r3, [pc, #352]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a57      	ldr	r2, [pc, #348]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
 80056f8:	4b55      	ldr	r3, [pc, #340]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	4a54      	ldr	r2, [pc, #336]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80056fe:	f023 0304 	bic.w	r3, r3, #4
 8005702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d015      	beq.n	8005738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fd f964 	bl	80029d8 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005712:	e00a      	b.n	800572a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005714:	f7fd f960 	bl	80029d8 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e0cb      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572a:	4b49      	ldr	r3, [pc, #292]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0ee      	beq.n	8005714 <HAL_RCC_OscConfig+0x334>
 8005736:	e014      	b.n	8005762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005738:	f7fd f94e 	bl	80029d8 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573e:	e00a      	b.n	8005756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f7fd f94a 	bl	80029d8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	; 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e0b5      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005756:	4b3e      	ldr	r3, [pc, #248]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1ee      	bne.n	8005740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005768:	4b39      	ldr	r3, [pc, #228]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	4a38      	ldr	r2, [pc, #224]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 800576e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80a1 	beq.w	80058c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800577e:	4b34      	ldr	r3, [pc, #208]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b08      	cmp	r3, #8
 8005788:	d05c      	beq.n	8005844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d141      	bne.n	8005816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b31      	ldr	r3, [pc, #196]	; (8005858 <HAL_RCC_OscConfig+0x478>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fd f91e 	bl	80029d8 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fd f91a 	bl	80029d8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e087      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b2:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69da      	ldr	r2, [r3, #28]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	019b      	lsls	r3, r3, #6
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	3b01      	subs	r3, #1
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	061b      	lsls	r3, r3, #24
 80057e2:	491b      	ldr	r1, [pc, #108]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e8:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <HAL_RCC_OscConfig+0x478>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ee:	f7fd f8f3 	bl	80029d8 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f6:	f7fd f8ef 	bl	80029d8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e05c      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x416>
 8005814:	e054      	b.n	80058c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <HAL_RCC_OscConfig+0x478>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fd f8dc 	bl	80029d8 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005824:	f7fd f8d8 	bl	80029d8 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e045      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <HAL_RCC_OscConfig+0x470>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x444>
 8005842:	e03d      	b.n	80058c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e038      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
 8005850:	40023800 	.word	0x40023800
 8005854:	40007000 	.word	0x40007000
 8005858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800585c:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_RCC_OscConfig+0x4ec>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d028      	beq.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d121      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d11a      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005894:	4293      	cmp	r3, r2
 8005896:	d111      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	3b01      	subs	r3, #1
 80058a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d107      	bne.n	80058bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800

080058d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0cc      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e4:	4b68      	ldr	r3, [pc, #416]	; (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d90c      	bls.n	800590c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b65      	ldr	r3, [pc, #404]	; (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b63      	ldr	r3, [pc, #396]	; (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0b8      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d020      	beq.n	800595a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005924:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4a58      	ldr	r2, [pc, #352]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800592e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800593c:	4b53      	ldr	r3, [pc, #332]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4a52      	ldr	r2, [pc, #328]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005948:	4b50      	ldr	r3, [pc, #320]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	494d      	ldr	r1, [pc, #308]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d044      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d107      	bne.n	800597e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d119      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e07f      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d003      	beq.n	800598e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598a:	2b03      	cmp	r3, #3
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598e:	4b3f      	ldr	r3, [pc, #252]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e06f      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599e:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e067      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4934      	ldr	r1, [pc, #208]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c0:	f7fd f80a 	bl	80029d8 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	e00a      	b.n	80059de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c8:	f7fd f806 	bl	80029d8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e04f      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059de:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 020c 	and.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d1eb      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d20c      	bcs.n	8005a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e032      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a24:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4916      	ldr	r1, [pc, #88]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a42:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	490e      	ldr	r1, [pc, #56]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a56:	f000 f821 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	490a      	ldr	r1, [pc, #40]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a68:	5ccb      	ldrb	r3, [r1, r3]
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fc fe60 	bl	800273c <HAL_InitTick>

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40023c00 	.word	0x40023c00
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	080103d0 	.word	0x080103d0
 8005a94:	200004ec 	.word	0x200004ec
 8005a98:	200004f0 	.word	0x200004f0

08005a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa0:	b094      	sub	sp, #80	; 0x50
 8005aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aac:	2300      	movs	r3, #0
 8005aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab4:	4b79      	ldr	r3, [pc, #484]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 030c 	and.w	r3, r3, #12
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d00d      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0x40>
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	f200 80e1 	bhi.w	8005c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ace:	e0db      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad0:	4b73      	ldr	r3, [pc, #460]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ad2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ad4:	e0db      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ad6:	4b72      	ldr	r3, [pc, #456]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ada:	e0d8      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005adc:	4b6f      	ldr	r3, [pc, #444]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae6:	4b6d      	ldr	r3, [pc, #436]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d063      	beq.n	8005bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005af2:	4b6a      	ldr	r3, [pc, #424]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	099b      	lsrs	r3, r3, #6
 8005af8:	2200      	movs	r2, #0
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
 8005b06:	2300      	movs	r3, #0
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b0e:	4622      	mov	r2, r4
 8005b10:	462b      	mov	r3, r5
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	0159      	lsls	r1, r3, #5
 8005b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b20:	0150      	lsls	r0, r2, #5
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4621      	mov	r1, r4
 8005b28:	1a51      	subs	r1, r2, r1
 8005b2a:	6139      	str	r1, [r7, #16]
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b40:	4659      	mov	r1, fp
 8005b42:	018b      	lsls	r3, r1, #6
 8005b44:	4651      	mov	r1, sl
 8005b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b4a:	4651      	mov	r1, sl
 8005b4c:	018a      	lsls	r2, r1, #6
 8005b4e:	4651      	mov	r1, sl
 8005b50:	ebb2 0801 	subs.w	r8, r2, r1
 8005b54:	4659      	mov	r1, fp
 8005b56:	eb63 0901 	sbc.w	r9, r3, r1
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b6e:	4690      	mov	r8, r2
 8005b70:	4699      	mov	r9, r3
 8005b72:	4623      	mov	r3, r4
 8005b74:	eb18 0303 	adds.w	r3, r8, r3
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	462b      	mov	r3, r5
 8005b7c:	eb49 0303 	adc.w	r3, r9, r3
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	028b      	lsls	r3, r1, #10
 8005b92:	4621      	mov	r1, r4
 8005b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b98:	4621      	mov	r1, r4
 8005b9a:	028a      	lsls	r2, r1, #10
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bac:	f7fa fb70 	bl	8000290 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb8:	e058      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bba:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	099b      	lsrs	r3, r3, #6
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bca:	623b      	str	r3, [r7, #32]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	f04f 0000 	mov.w	r0, #0
 8005bdc:	f04f 0100 	mov.w	r1, #0
 8005be0:	0159      	lsls	r1, r3, #5
 8005be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005be6:	0150      	lsls	r0, r2, #5
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4641      	mov	r1, r8
 8005bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8005c10:	eb63 050b 	sbc.w	r5, r3, fp
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	00eb      	lsls	r3, r5, #3
 8005c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c22:	00e2      	lsls	r2, r4, #3
 8005c24:	4614      	mov	r4, r2
 8005c26:	461d      	mov	r5, r3
 8005c28:	4643      	mov	r3, r8
 8005c2a:	18e3      	adds	r3, r4, r3
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	464b      	mov	r3, r9
 8005c30:	eb45 0303 	adc.w	r3, r5, r3
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c42:	4629      	mov	r1, r5
 8005c44:	028b      	lsls	r3, r1, #10
 8005c46:	4621      	mov	r1, r4
 8005c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	028a      	lsls	r2, r1, #10
 8005c50:	4610      	mov	r0, r2
 8005c52:	4619      	mov	r1, r3
 8005c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c56:	2200      	movs	r2, #0
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	61fa      	str	r2, [r7, #28]
 8005c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c60:	f7fa fb16 	bl	8000290 <__aeabi_uldivmod>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4613      	mov	r3, r2
 8005c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	3301      	adds	r3, #1
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c86:	e002      	b.n	8005c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3750      	adds	r7, #80	; 0x50
 8005c94:	46bd      	mov	sp, r7
 8005c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	00f42400 	.word	0x00f42400

08005ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005caa:	681b      	ldr	r3, [r3, #0]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	200004ec 	.word	0x200004ec

08005cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cc0:	f7ff fff0 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	0a9b      	lsrs	r3, r3, #10
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	4903      	ldr	r1, [pc, #12]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd2:	5ccb      	ldrb	r3, [r1, r3]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	080103e0 	.word	0x080103e0

08005ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	220f      	movs	r2, #15
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0203 	and.w	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	08db      	lsrs	r3, r3, #3
 8005d1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <HAL_RCC_GetClockConfig+0x60>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0207 	and.w	r2, r3, #7
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800
 8005d44:	40023c00 	.word	0x40023c00

08005d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e07b      	b.n	8005e52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d6a:	d009      	beq.n	8005d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	61da      	str	r2, [r3, #28]
 8005d72:	e005      	b.n	8005d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fc fbe2 	bl	8002564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	ea42 0103 	orr.w	r1, r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	0c1b      	lsrs	r3, r3, #16
 8005e1e:	f003 0104 	and.w	r1, r3, #4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	f003 0210 	and.w	r2, r3, #16
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b088      	sub	sp, #32
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_SPI_Transmit+0x22>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e126      	b.n	80060ca <HAL_SPI_Transmit+0x270>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e84:	f7fc fda8 	bl	80029d8 <HAL_GetTick>
 8005e88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d002      	beq.n	8005ea0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e9e:	e10b      	b.n	80060b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_Transmit+0x52>
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d102      	bne.n	8005eb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005eb0:	e102      	b.n	80060b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	88fa      	ldrh	r2, [r7, #6]
 8005eca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef8:	d10f      	bne.n	8005f1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d007      	beq.n	8005f38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f40:	d14b      	bne.n	8005fda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0xf6>
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d13e      	bne.n	8005fce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f74:	e02b      	b.n	8005fce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d112      	bne.n	8005faa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fa8:	e011      	b.n	8005fce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005faa:	f7fc fd15 	bl	80029d8 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d803      	bhi.n	8005fc2 <HAL_SPI_Transmit+0x168>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d102      	bne.n	8005fc8 <HAL_SPI_Transmit+0x16e>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fcc:	e074      	b.n	80060b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ce      	bne.n	8005f76 <HAL_SPI_Transmit+0x11c>
 8005fd8:	e04c      	b.n	8006074 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_SPI_Transmit+0x18e>
 8005fe2:	8afb      	ldrh	r3, [r7, #22]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d140      	bne.n	800606a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800600e:	e02c      	b.n	800606a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d113      	bne.n	8006046 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	330c      	adds	r3, #12
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	86da      	strh	r2, [r3, #54]	; 0x36
 8006044:	e011      	b.n	800606a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006046:	f7fc fcc7 	bl	80029d8 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d803      	bhi.n	800605e <HAL_SPI_Transmit+0x204>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d102      	bne.n	8006064 <HAL_SPI_Transmit+0x20a>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006068:	e026      	b.n	80060b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1cd      	bne.n	8006010 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fa55 	bl	8006528 <SPI_EndRxTxTransaction>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e000      	b.n	80060b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80060b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b08c      	sub	sp, #48	; 0x30
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
 80060de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060e0:	2301      	movs	r3, #1
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x26>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e18a      	b.n	800640e <HAL_SPI_TransmitReceive+0x33c>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006100:	f7fc fc6a 	bl	80029d8 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800610c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006116:	887b      	ldrh	r3, [r7, #2]
 8006118:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800611a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800611e:	2b01      	cmp	r3, #1
 8006120:	d00f      	beq.n	8006142 <HAL_SPI_TransmitReceive+0x70>
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006128:	d107      	bne.n	800613a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <HAL_SPI_TransmitReceive+0x68>
 8006132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006136:	2b04      	cmp	r3, #4
 8006138:	d003      	beq.n	8006142 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800613a:	2302      	movs	r3, #2
 800613c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006140:	e15b      	b.n	80063fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_SPI_TransmitReceive+0x82>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_SPI_TransmitReceive+0x82>
 800614e:	887b      	ldrh	r3, [r7, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d103      	bne.n	800615c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800615a:	e14e      	b.n	80063fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b04      	cmp	r3, #4
 8006166:	d003      	beq.n	8006170 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2205      	movs	r2, #5
 800616c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	887a      	ldrh	r2, [r7, #2]
 8006186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	887a      	ldrh	r2, [r7, #2]
 8006192:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	887a      	ldrh	r2, [r7, #2]
 8006198:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d007      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061cc:	d178      	bne.n	80062c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_TransmitReceive+0x10a>
 80061d6:	8b7b      	ldrh	r3, [r7, #26]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d166      	bne.n	80062aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	881a      	ldrh	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006200:	e053      	b.n	80062aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d11b      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x176>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d016      	beq.n	8006248 <HAL_SPI_TransmitReceive+0x176>
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	2b01      	cmp	r3, #1
 800621e:	d113      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	881a      	ldrh	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	1c9a      	adds	r2, r3, #2
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b01      	cmp	r3, #1
 8006254:	d119      	bne.n	800628a <HAL_SPI_TransmitReceive+0x1b8>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d014      	beq.n	800628a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	b292      	uxth	r2, r2
 800626c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	1c9a      	adds	r2, r3, #2
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006286:	2301      	movs	r3, #1
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800628a:	f7fc fba5 	bl	80029d8 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006296:	429a      	cmp	r2, r3
 8006298:	d807      	bhi.n	80062aa <HAL_SPI_TransmitReceive+0x1d8>
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d003      	beq.n	80062aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062a8:	e0a7      	b.n	80063fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1a6      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x130>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1a1      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x130>
 80062be:	e07c      	b.n	80063ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_SPI_TransmitReceive+0x1fc>
 80062c8:	8b7b      	ldrh	r3, [r7, #26]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d16b      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f4:	e057      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b02      	cmp	r3, #2
 8006302:	d11c      	bne.n	800633e <HAL_SPI_TransmitReceive+0x26c>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <HAL_SPI_TransmitReceive+0x26c>
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d114      	bne.n	800633e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	d119      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x2ae>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d014      	beq.n	8006380 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800637c:	2301      	movs	r3, #1
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006380:	f7fc fb2a 	bl	80029d8 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638c:	429a      	cmp	r2, r3
 800638e:	d803      	bhi.n	8006398 <HAL_SPI_TransmitReceive+0x2c6>
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d102      	bne.n	800639e <HAL_SPI_TransmitReceive+0x2cc>
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063a4:	e029      	b.n	80063fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1a2      	bne.n	80062f6 <HAL_SPI_TransmitReceive+0x224>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d19d      	bne.n	80062f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f8b2 	bl	8006528 <SPI_EndRxTxTransaction>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d006      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063d6:	e010      	b.n	80063fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10b      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	e000      	b.n	80063fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800640a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800640e:	4618      	mov	r0, r3
 8006410:	3730      	adds	r7, #48	; 0x30
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006428:	f7fc fad6 	bl	80029d8 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	4413      	add	r3, r2
 8006436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006438:	f7fc face 	bl	80029d8 <HAL_GetTick>
 800643c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800643e:	4b39      	ldr	r3, [pc, #228]	; (8006524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	015b      	lsls	r3, r3, #5
 8006444:	0d1b      	lsrs	r3, r3, #20
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	fb02 f303 	mul.w	r3, r2, r3
 800644c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800644e:	e054      	b.n	80064fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d050      	beq.n	80064fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006458:	f7fc fabe 	bl	80029d8 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	429a      	cmp	r2, r3
 8006466:	d902      	bls.n	800646e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d13d      	bne.n	80064ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800647c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006486:	d111      	bne.n	80064ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006490:	d004      	beq.n	800649c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649a:	d107      	bne.n	80064ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b4:	d10f      	bne.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e017      	b.n	800651a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4013      	ands	r3, r2
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	429a      	cmp	r2, r3
 8006508:	bf0c      	ite	eq
 800650a:	2301      	moveq	r3, #1
 800650c:	2300      	movne	r3, #0
 800650e:	b2db      	uxtb	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	429a      	cmp	r2, r3
 8006516:	d19b      	bne.n	8006450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200004ec 	.word	0x200004ec

08006528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <SPI_EndRxTxTransaction+0x7c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <SPI_EndRxTxTransaction+0x80>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	0d5b      	lsrs	r3, r3, #21
 8006540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006552:	d112      	bne.n	800657a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff ff5a 	bl	8006418 <SPI_WaitFlagStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e00f      	b.n	800659a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3b01      	subs	r3, #1
 8006584:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d0f2      	beq.n	800657a <SPI_EndRxTxTransaction+0x52>
 8006594:	e000      	b.n	8006598 <SPI_EndRxTxTransaction+0x70>
        break;
 8006596:	bf00      	nop
  }

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200004ec 	.word	0x200004ec
 80065a8:	165e9f81 	.word	0x165e9f81

080065ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e041      	b.n	8006642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fc f844 	bl	8002660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f000 fd3a 	bl	8007064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e03c      	b.n	80066de <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1e      	ldr	r2, [pc, #120]	; (80066ec <HAL_TIM_Base_Start+0xa0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d018      	beq.n	80066a8 <HAL_TIM_Base_Start+0x5c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667e:	d013      	beq.n	80066a8 <HAL_TIM_Base_Start+0x5c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <HAL_TIM_Base_Start+0xa4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00e      	beq.n	80066a8 <HAL_TIM_Base_Start+0x5c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_TIM_Base_Start+0xa8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d009      	beq.n	80066a8 <HAL_TIM_Base_Start+0x5c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_TIM_Base_Start+0xac>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d004      	beq.n	80066a8 <HAL_TIM_Base_Start+0x5c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a16      	ldr	r2, [pc, #88]	; (80066fc <HAL_TIM_Base_Start+0xb0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d111      	bne.n	80066cc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b06      	cmp	r3, #6
 80066b8:	d010      	beq.n	80066dc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0201 	orr.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ca:	e007      	b.n	80066dc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40000400 	.word	0x40000400
 80066f4:	40000800 	.word	0x40000800
 80066f8:	40000c00 	.word	0x40000c00
 80066fc:	40014000 	.word	0x40014000

08006700 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a1a      	ldr	r2, [r3, #32]
 800670e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006712:	4013      	ands	r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10f      	bne.n	8006738 <HAL_TIM_Base_Stop+0x38>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	f240 4344 	movw	r3, #1092	; 0x444
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d107      	bne.n	8006738 <HAL_TIM_Base_Stop+0x38>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e044      	b.n	80067f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <HAL_TIM_Base_Start_IT+0xb0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d018      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x6c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d013      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x6c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <HAL_TIM_Base_Start_IT+0xb4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00e      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x6c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a19      	ldr	r2, [pc, #100]	; (8006808 <HAL_TIM_Base_Start_IT+0xb8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d009      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x6c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <HAL_TIM_Base_Start_IT+0xbc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x6c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a16      	ldr	r2, [pc, #88]	; (8006810 <HAL_TIM_Base_Start_IT+0xc0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d111      	bne.n	80067e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b06      	cmp	r3, #6
 80067cc:	d010      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067de:	e007      	b.n	80067f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40000400 	.word	0x40000400
 8006808:	40000800 	.word	0x40000800
 800680c:	40000c00 	.word	0x40000c00
 8006810:	40014000 	.word	0x40014000

08006814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e041      	b.n	80068aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f839 	bl	80068b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f000 fc06 	bl	8007064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <HAL_TIM_PWM_Start+0x24>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e022      	b.n	8006932 <HAL_TIM_PWM_Start+0x6a>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d109      	bne.n	8006906 <HAL_TIM_PWM_Start+0x3e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e015      	b.n	8006932 <HAL_TIM_PWM_Start+0x6a>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d109      	bne.n	8006920 <HAL_TIM_PWM_Start+0x58>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	e008      	b.n	8006932 <HAL_TIM_PWM_Start+0x6a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e068      	b.n	8006a0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start+0x82>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	e013      	b.n	8006972 <HAL_TIM_PWM_Start+0xaa>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0x92>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006958:	e00b      	b.n	8006972 <HAL_TIM_PWM_Start+0xaa>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006968:	e003      	b.n	8006972 <HAL_TIM_PWM_Start+0xaa>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2201      	movs	r2, #1
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fe18 	bl	80075b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a23      	ldr	r2, [pc, #140]	; (8006a14 <HAL_TIM_PWM_Start+0x14c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d107      	bne.n	800699a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1d      	ldr	r2, [pc, #116]	; (8006a14 <HAL_TIM_PWM_Start+0x14c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d018      	beq.n	80069d6 <HAL_TIM_PWM_Start+0x10e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ac:	d013      	beq.n	80069d6 <HAL_TIM_PWM_Start+0x10e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a19      	ldr	r2, [pc, #100]	; (8006a18 <HAL_TIM_PWM_Start+0x150>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00e      	beq.n	80069d6 <HAL_TIM_PWM_Start+0x10e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <HAL_TIM_PWM_Start+0x154>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d009      	beq.n	80069d6 <HAL_TIM_PWM_Start+0x10e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <HAL_TIM_PWM_Start+0x158>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_TIM_PWM_Start+0x10e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a14      	ldr	r2, [pc, #80]	; (8006a24 <HAL_TIM_PWM_Start+0x15c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d111      	bne.n	80069fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b06      	cmp	r3, #6
 80069e6:	d010      	beq.n	8006a0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f8:	e007      	b.n	8006a0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40000c00 	.word	0x40000c00
 8006a24:	40014000 	.word	0x40014000

08006a28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2200      	movs	r2, #0
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fdb8 	bl	80075b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a29      	ldr	r2, [pc, #164]	; (8006aec <HAL_TIM_PWM_Stop+0xc4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d117      	bne.n	8006a7a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6a1a      	ldr	r2, [r3, #32]
 8006a50:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <HAL_TIM_PWM_Stop+0x52>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	f240 4344 	movw	r3, #1092	; 0x444
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d107      	bne.n	8006a7a <HAL_TIM_PWM_Stop+0x52>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <HAL_TIM_PWM_Stop+0x82>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	f240 4344 	movw	r3, #1092	; 0x444
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d107      	bne.n	8006aaa <HAL_TIM_PWM_Stop+0x82>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0201 	bic.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <HAL_TIM_PWM_Stop+0x92>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab8:	e013      	b.n	8006ae2 <HAL_TIM_PWM_Stop+0xba>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d104      	bne.n	8006aca <HAL_TIM_PWM_Stop+0xa2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac8:	e00b      	b.n	8006ae2 <HAL_TIM_PWM_Stop+0xba>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d104      	bne.n	8006ada <HAL_TIM_PWM_Stop+0xb2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ad8:	e003      	b.n	8006ae2 <HAL_TIM_PWM_Stop+0xba>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40010000 	.word	0x40010000

08006af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d122      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d11b      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0202 	mvn.w	r2, #2
 8006b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa77 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa69 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa7a 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d122      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d11b      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0204 	mvn.w	r2, #4
 8006b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa4d 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa3f 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa50 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d122      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b08      	cmp	r3, #8
 8006bba:	d11b      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0208 	mvn.w	r2, #8
 8006bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2204      	movs	r2, #4
 8006bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa23 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006be0:	e005      	b.n	8006bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa15 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fa26 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d122      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d11b      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0210 	mvn.w	r2, #16
 8006c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f9f9 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006c34:	e005      	b.n	8006c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f9eb 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f9fc 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d10e      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d107      	bne.n	8006c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0201 	mvn.w	r2, #1
 8006c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb fbec 	bl	800244c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	2b80      	cmp	r3, #128	; 0x80
 8006c80:	d10e      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8c:	2b80      	cmp	r3, #128	; 0x80
 8006c8e:	d107      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fd26 	bl	80076ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	d10e      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d107      	bne.n	8006ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9c1 	bl	800704e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d10e      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d107      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0220 	mvn.w	r2, #32
 8006cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fcf0 	bl	80076d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e0ae      	b.n	8006e7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	f200 809f 	bhi.w	8006e6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d69 	.word	0x08006d69
 8006d38:	08006e6d 	.word	0x08006e6d
 8006d3c:	08006e6d 	.word	0x08006e6d
 8006d40:	08006e6d 	.word	0x08006e6d
 8006d44:	08006da9 	.word	0x08006da9
 8006d48:	08006e6d 	.word	0x08006e6d
 8006d4c:	08006e6d 	.word	0x08006e6d
 8006d50:	08006e6d 	.word	0x08006e6d
 8006d54:	08006deb 	.word	0x08006deb
 8006d58:	08006e6d 	.word	0x08006e6d
 8006d5c:	08006e6d 	.word	0x08006e6d
 8006d60:	08006e6d 	.word	0x08006e6d
 8006d64:	08006e2b 	.word	0x08006e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f9f8 	bl	8007164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0208 	orr.w	r2, r2, #8
 8006d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0204 	bic.w	r2, r2, #4
 8006d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6999      	ldr	r1, [r3, #24]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	619a      	str	r2, [r3, #24]
      break;
 8006da6:	e064      	b.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fa3e 	bl	8007230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6999      	ldr	r1, [r3, #24]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	619a      	str	r2, [r3, #24]
      break;
 8006de8:	e043      	b.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fa89 	bl	8007308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0208 	orr.w	r2, r2, #8
 8006e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0204 	bic.w	r2, r2, #4
 8006e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69d9      	ldr	r1, [r3, #28]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	61da      	str	r2, [r3, #28]
      break;
 8006e28:	e023      	b.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fad3 	bl	80073dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69da      	ldr	r2, [r3, #28]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69d9      	ldr	r1, [r3, #28]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	021a      	lsls	r2, r3, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	61da      	str	r2, [r3, #28]
      break;
 8006e6a:	e002      	b.n	8006e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e0b4      	b.n	800700a <HAL_TIM_ConfigClockSource+0x186>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed8:	d03e      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0xd4>
 8006eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ede:	f200 8087 	bhi.w	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee6:	f000 8086 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x172>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eee:	d87f      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b70      	cmp	r3, #112	; 0x70
 8006ef2:	d01a      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0xa6>
 8006ef4:	2b70      	cmp	r3, #112	; 0x70
 8006ef6:	d87b      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b60      	cmp	r3, #96	; 0x60
 8006efa:	d050      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x11a>
 8006efc:	2b60      	cmp	r3, #96	; 0x60
 8006efe:	d877      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b50      	cmp	r3, #80	; 0x50
 8006f02:	d03c      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0xfa>
 8006f04:	2b50      	cmp	r3, #80	; 0x50
 8006f06:	d873      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d058      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x13a>
 8006f0c:	2b40      	cmp	r3, #64	; 0x40
 8006f0e:	d86f      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b30      	cmp	r3, #48	; 0x30
 8006f12:	d064      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f14:	2b30      	cmp	r3, #48	; 0x30
 8006f16:	d86b      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d060      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d867      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d05c      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d05a      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f28:	e062      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6899      	ldr	r1, [r3, #8]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f000 fb19 	bl	8007570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	609a      	str	r2, [r3, #8]
      break;
 8006f56:	e04f      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6899      	ldr	r1, [r3, #8]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f000 fb02 	bl	8007570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f7a:	609a      	str	r2, [r3, #8]
      break;
 8006f7c:	e03c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6859      	ldr	r1, [r3, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f000 fa76 	bl	800747c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2150      	movs	r1, #80	; 0x50
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 facf 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006f9c:	e02c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 fa95 	bl	80074da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2160      	movs	r1, #96	; 0x60
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fabf 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e01c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f000 fa56 	bl	800747c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2140      	movs	r1, #64	; 0x40
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 faaf 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006fdc:	e00c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f000 faa6 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8006fee:	e003      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff4:	e000      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a34      	ldr	r2, [pc, #208]	; (8007148 <TIM_Base_SetConfig+0xe4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00f      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007082:	d00b      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a31      	ldr	r2, [pc, #196]	; (800714c <TIM_Base_SetConfig+0xe8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a30      	ldr	r2, [pc, #192]	; (8007150 <TIM_Base_SetConfig+0xec>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a2f      	ldr	r2, [pc, #188]	; (8007154 <TIM_Base_SetConfig+0xf0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a25      	ldr	r2, [pc, #148]	; (8007148 <TIM_Base_SetConfig+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01b      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070bc:	d017      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a22      	ldr	r2, [pc, #136]	; (800714c <TIM_Base_SetConfig+0xe8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d013      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a21      	ldr	r2, [pc, #132]	; (8007150 <TIM_Base_SetConfig+0xec>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00f      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a20      	ldr	r2, [pc, #128]	; (8007154 <TIM_Base_SetConfig+0xf0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00b      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <TIM_Base_SetConfig+0xf4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d007      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a1e      	ldr	r2, [pc, #120]	; (800715c <TIM_Base_SetConfig+0xf8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <TIM_Base_SetConfig+0xfc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d108      	bne.n	8007100 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a08      	ldr	r2, [pc, #32]	; (8007148 <TIM_Base_SetConfig+0xe4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d103      	bne.n	8007134 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	615a      	str	r2, [r3, #20]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800

08007164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0302 	bic.w	r3, r3, #2
 80071ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a1c      	ldr	r2, [pc, #112]	; (800722c <TIM_OC1_SetConfig+0xc8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10c      	bne.n	80071da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0308 	bic.w	r3, r3, #8
 80071c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 0304 	bic.w	r3, r3, #4
 80071d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a13      	ldr	r2, [pc, #76]	; (800722c <TIM_OC1_SetConfig+0xc8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d111      	bne.n	8007206 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	621a      	str	r2, [r3, #32]
}
 8007220:	bf00      	nop
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40010000 	.word	0x40010000

08007230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0210 	bic.w	r2, r3, #16
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0320 	bic.w	r3, r3, #32
 800727a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <TIM_OC2_SetConfig+0xd4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10d      	bne.n	80072ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a15      	ldr	r2, [pc, #84]	; (8007304 <TIM_OC2_SetConfig+0xd4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d113      	bne.n	80072dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	621a      	str	r2, [r3, #32]
}
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40010000 	.word	0x40010000

08007308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0303 	bic.w	r3, r3, #3
 800733e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a1d      	ldr	r2, [pc, #116]	; (80073d8 <TIM_OC3_SetConfig+0xd0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d10d      	bne.n	8007382 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800736c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <TIM_OC3_SetConfig+0xd0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d113      	bne.n	80073b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	621a      	str	r2, [r3, #32]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	40010000 	.word	0x40010000

080073dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	031b      	lsls	r3, r3, #12
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a10      	ldr	r2, [pc, #64]	; (8007478 <TIM_OC4_SetConfig+0x9c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d109      	bne.n	8007450 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	019b      	lsls	r3, r3, #6
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40010000 	.word	0x40010000

0800747c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f023 0201 	bic.w	r2, r3, #1
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f023 030a 	bic.w	r3, r3, #10
 80074b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074da:	b480      	push	{r7}
 80074dc:	b087      	sub	sp, #28
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	f023 0210 	bic.w	r2, r3, #16
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	031b      	lsls	r3, r3, #12
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	f043 0307 	orr.w	r3, r3, #7
 800755c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	609a      	str	r2, [r3, #8]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800758a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	021a      	lsls	r2, r3, #8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	431a      	orrs	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4313      	orrs	r3, r2
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	609a      	str	r2, [r3, #8]
}
 80075a4:	bf00      	nop
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2201      	movs	r2, #1
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1a      	ldr	r2, [r3, #32]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	fa01 f303 	lsl.w	r3, r1, r3
 80075e8:	431a      	orrs	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007610:	2302      	movs	r3, #2
 8007612:	e050      	b.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d018      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007660:	d013      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00e      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a16      	ldr	r2, [pc, #88]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d009      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d004      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d10c      	bne.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	4313      	orrs	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40014000 	.word	0x40014000

080076d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007700:	b084      	sub	sp, #16
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	f107 001c 	add.w	r0, r7, #28
 800770e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	2b01      	cmp	r3, #1
 8007716:	d122      	bne.n	800775e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800772c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d105      	bne.n	8007752 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fbee 	bl	8008f34 <USB_CoreReset>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
 800775c:	e01a      	b.n	8007794 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 fbe2 	bl	8008f34 <USB_CoreReset>
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	639a      	str	r2, [r3, #56]	; 0x38
 8007786:	e005      	b.n	8007794 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	2b01      	cmp	r3, #1
 8007798:	d10b      	bne.n	80077b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f043 0206 	orr.w	r2, r3, #6
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f043 0220 	orr.w	r2, r3, #32
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077be:	b004      	add	sp, #16
 80077c0:	4770      	bx	lr
	...

080077c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d165      	bne.n	80078a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	4a41      	ldr	r2, [pc, #260]	; (80078e0 <USB_SetTurnaroundTime+0x11c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d906      	bls.n	80077ee <USB_SetTurnaroundTime+0x2a>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4a40      	ldr	r2, [pc, #256]	; (80078e4 <USB_SetTurnaroundTime+0x120>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d202      	bcs.n	80077ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80077e8:	230f      	movs	r3, #15
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e062      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	4a3c      	ldr	r2, [pc, #240]	; (80078e4 <USB_SetTurnaroundTime+0x120>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d306      	bcc.n	8007804 <USB_SetTurnaroundTime+0x40>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4a3b      	ldr	r2, [pc, #236]	; (80078e8 <USB_SetTurnaroundTime+0x124>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d202      	bcs.n	8007804 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80077fe:	230e      	movs	r3, #14
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	e057      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4a38      	ldr	r2, [pc, #224]	; (80078e8 <USB_SetTurnaroundTime+0x124>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d306      	bcc.n	800781a <USB_SetTurnaroundTime+0x56>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4a37      	ldr	r2, [pc, #220]	; (80078ec <USB_SetTurnaroundTime+0x128>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d202      	bcs.n	800781a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007814:	230d      	movs	r3, #13
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	e04c      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4a33      	ldr	r2, [pc, #204]	; (80078ec <USB_SetTurnaroundTime+0x128>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d306      	bcc.n	8007830 <USB_SetTurnaroundTime+0x6c>
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	4a32      	ldr	r2, [pc, #200]	; (80078f0 <USB_SetTurnaroundTime+0x12c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d802      	bhi.n	8007830 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800782a:	230c      	movs	r3, #12
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e041      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	4a2f      	ldr	r2, [pc, #188]	; (80078f0 <USB_SetTurnaroundTime+0x12c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d906      	bls.n	8007846 <USB_SetTurnaroundTime+0x82>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4a2e      	ldr	r2, [pc, #184]	; (80078f4 <USB_SetTurnaroundTime+0x130>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d802      	bhi.n	8007846 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007840:	230b      	movs	r3, #11
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e036      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4a2a      	ldr	r2, [pc, #168]	; (80078f4 <USB_SetTurnaroundTime+0x130>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d906      	bls.n	800785c <USB_SetTurnaroundTime+0x98>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4a29      	ldr	r2, [pc, #164]	; (80078f8 <USB_SetTurnaroundTime+0x134>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d802      	bhi.n	800785c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007856:	230a      	movs	r3, #10
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	e02b      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4a26      	ldr	r2, [pc, #152]	; (80078f8 <USB_SetTurnaroundTime+0x134>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d906      	bls.n	8007872 <USB_SetTurnaroundTime+0xae>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4a25      	ldr	r2, [pc, #148]	; (80078fc <USB_SetTurnaroundTime+0x138>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d202      	bcs.n	8007872 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800786c:	2309      	movs	r3, #9
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	e020      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4a21      	ldr	r2, [pc, #132]	; (80078fc <USB_SetTurnaroundTime+0x138>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d306      	bcc.n	8007888 <USB_SetTurnaroundTime+0xc4>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4a20      	ldr	r2, [pc, #128]	; (8007900 <USB_SetTurnaroundTime+0x13c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d802      	bhi.n	8007888 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007882:	2308      	movs	r3, #8
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	e015      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4a1d      	ldr	r2, [pc, #116]	; (8007900 <USB_SetTurnaroundTime+0x13c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d906      	bls.n	800789e <USB_SetTurnaroundTime+0xda>
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <USB_SetTurnaroundTime+0x140>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d202      	bcs.n	800789e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007898:	2307      	movs	r3, #7
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	e00a      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800789e:	2306      	movs	r3, #6
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e007      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078aa:	2309      	movs	r3, #9
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	e001      	b.n	80078b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078b0:	2309      	movs	r3, #9
 80078b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	029b      	lsls	r3, r3, #10
 80078c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80078cc:	431a      	orrs	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	00d8acbf 	.word	0x00d8acbf
 80078e4:	00e4e1c0 	.word	0x00e4e1c0
 80078e8:	00f42400 	.word	0x00f42400
 80078ec:	01067380 	.word	0x01067380
 80078f0:	011a499f 	.word	0x011a499f
 80078f4:	01312cff 	.word	0x01312cff
 80078f8:	014ca43f 	.word	0x014ca43f
 80078fc:	016e3600 	.word	0x016e3600
 8007900:	01a6ab1f 	.word	0x01a6ab1f
 8007904:	01e84800 	.word	0x01e84800

08007908 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f043 0201 	orr.w	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f023 0201 	bic.w	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d115      	bne.n	800799a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800797a:	2001      	movs	r0, #1
 800797c:	f7fb f838 	bl	80029f0 <HAL_Delay>
      ms++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3301      	adds	r3, #1
 8007984:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 fa45 	bl	8008e16 <USB_GetMode>
 800798c:	4603      	mov	r3, r0
 800798e:	2b01      	cmp	r3, #1
 8007990:	d01e      	beq.n	80079d0 <USB_SetCurrentMode+0x84>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b31      	cmp	r3, #49	; 0x31
 8007996:	d9f0      	bls.n	800797a <USB_SetCurrentMode+0x2e>
 8007998:	e01a      	b.n	80079d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d115      	bne.n	80079cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079ac:	2001      	movs	r0, #1
 80079ae:	f7fb f81f 	bl	80029f0 <HAL_Delay>
      ms++;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 fa2c 	bl	8008e16 <USB_GetMode>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <USB_SetCurrentMode+0x84>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b31      	cmp	r3, #49	; 0x31
 80079c8:	d9f0      	bls.n	80079ac <USB_SetCurrentMode+0x60>
 80079ca:	e001      	b.n	80079d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e005      	b.n	80079dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b32      	cmp	r3, #50	; 0x32
 80079d4:	d101      	bne.n	80079da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079e4:	b084      	sub	sp, #16
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	e009      	b.n	8007a18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	3340      	adds	r3, #64	; 0x40
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	3301      	adds	r3, #1
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b0e      	cmp	r3, #14
 8007a1c:	d9f2      	bls.n	8007a04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11c      	bne.n	8007a5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a32:	f043 0302 	orr.w	r3, r3, #2
 8007a36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
 8007a5c:	e00b      	b.n	8007a76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a90:	461a      	mov	r2, r3
 8007a92:	680b      	ldr	r3, [r1, #0]
 8007a94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d10c      	bne.n	8007ab6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f965 	bl	8007d74 <USB_SetDevSpeed>
 8007aaa:	e008      	b.n	8007abe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007aac:	2101      	movs	r1, #1
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f960 	bl	8007d74 <USB_SetDevSpeed>
 8007ab4:	e003      	b.n	8007abe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ab6:	2103      	movs	r1, #3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f95b 	bl	8007d74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007abe:	2110      	movs	r1, #16
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8f3 	bl	8007cac <USB_FlushTxFifo>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f91f 	bl	8007d14 <USB_FlushRxFifo>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af2:	461a      	mov	r2, r3
 8007af4:	2300      	movs	r3, #0
 8007af6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afe:	461a      	mov	r2, r3
 8007b00:	2300      	movs	r3, #0
 8007b02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	e043      	b.n	8007b92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b20:	d118      	bne.n	8007b54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b34:	461a      	mov	r2, r3
 8007b36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	e013      	b.n	8007b66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	e008      	b.n	8007b66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	461a      	mov	r2, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b72:	461a      	mov	r2, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	461a      	mov	r2, r3
 8007b86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d3b7      	bcc.n	8007b0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	613b      	str	r3, [r7, #16]
 8007b9e:	e043      	b.n	8007c28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb6:	d118      	bne.n	8007bea <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	e013      	b.n	8007bfc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	461a      	mov	r2, r3
 8007be2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	e008      	b.n	8007bfc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c08:	461a      	mov	r2, r3
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	3301      	adds	r3, #1
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d3b7      	bcc.n	8007ba0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	f043 0210 	orr.w	r2, r3, #16
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	699a      	ldr	r2, [r3, #24]
 8007c68:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <USB_DevInit+0x2c4>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	f043 0208 	orr.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d107      	bne.n	8007c98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c90:	f043 0304 	orr.w	r3, r3, #4
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ca4:	b004      	add	sp, #16
 8007ca6:	4770      	bx	lr
 8007ca8:	803c3800 	.word	0x803c3800

08007cac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4a13      	ldr	r2, [pc, #76]	; (8007d10 <USB_FlushTxFifo+0x64>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d901      	bls.n	8007ccc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e01b      	b.n	8007d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	daf2      	bge.n	8007cba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	019b      	lsls	r3, r3, #6
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <USB_FlushTxFifo+0x64>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e006      	b.n	8007d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d0f0      	beq.n	8007ce4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	00030d40 	.word	0x00030d40

08007d14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3301      	adds	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4a11      	ldr	r2, [pc, #68]	; (8007d70 <USB_FlushRxFifo+0x5c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d901      	bls.n	8007d32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e018      	b.n	8007d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	daf2      	bge.n	8007d20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2210      	movs	r2, #16
 8007d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3301      	adds	r3, #1
 8007d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <USB_FlushRxFifo+0x5c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d901      	bls.n	8007d56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e006      	b.n	8007d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0310 	and.w	r3, r3, #16
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	d0f0      	beq.n	8007d44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	00030d40 	.word	0x00030d40

08007d74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 0306 	and.w	r3, r3, #6
 8007dbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
 8007dca:	e00a      	b.n	8007de2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d002      	beq.n	8007dd8 <USB_GetDevSpeed+0x32>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b06      	cmp	r3, #6
 8007dd6:	d102      	bne.n	8007dde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	75fb      	strb	r3, [r7, #23]
 8007ddc:	e001      	b.n	8007de2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007dde:	230f      	movs	r3, #15
 8007de0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d13a      	bne.n	8007e82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	68f9      	ldr	r1, [r7, #12]
 8007e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d155      	bne.n	8007ef0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	059b      	lsls	r3, r3, #22
 8007e66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e036      	b.n	8007ef0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e88:	69da      	ldr	r2, [r3, #28]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	2101      	movs	r1, #1
 8007e94:	fa01 f303 	lsl.w	r3, r1, r3
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d11a      	bne.n	8007ef0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d161      	bne.n	8007fe0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f32:	d11f      	bne.n	8007f74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	2101      	movs	r1, #1
 8007f86:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f94:	4013      	ands	r3, r2
 8007f96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	69da      	ldr	r2, [r3, #28]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb8:	4013      	ands	r3, r2
 8007fba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0159      	lsls	r1, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	440b      	add	r3, r1
 8007fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4b35      	ldr	r3, [pc, #212]	; (80080b0 <USB_DeactivateEndpoint+0x1b0>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]
 8007fde:	e060      	b.n	80080a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff6:	d11f      	bne.n	8008038 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008016:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f303 	lsl.w	r3, r1, r3
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	43db      	mvns	r3, r3
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008058:	4013      	ands	r3, r2
 800805a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	43db      	mvns	r3, r3
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800807c:	4013      	ands	r3, r2
 800807e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	0159      	lsls	r1, r3, #5
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	440b      	add	r3, r1
 8008096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809a:	4619      	mov	r1, r3
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <USB_DeactivateEndpoint+0x1b4>)
 800809e:	4013      	ands	r3, r2
 80080a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	ec337800 	.word	0xec337800
 80080b4:	eff37800 	.word	0xeff37800

080080b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af02      	add	r7, sp, #8
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	f040 815c 	bne.w	8008392 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d132      	bne.n	8008148 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	0151      	lsls	r1, r2, #5
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	440a      	add	r2, r1
 800811c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	440a      	add	r2, r1
 800813c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008140:	0cdb      	lsrs	r3, r3, #19
 8008142:	04db      	lsls	r3, r3, #19
 8008144:	6113      	str	r3, [r2, #16]
 8008146:	e074      	b.n	8008232 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	0151      	lsls	r1, r2, #5
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	440a      	add	r2, r1
 800815e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008162:	0cdb      	lsrs	r3, r3, #19
 8008164:	04db      	lsls	r3, r3, #19
 8008166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008182:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008186:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800818a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008198:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6999      	ldr	r1, [r3, #24]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	440b      	add	r3, r1
 80081a4:	1e59      	subs	r1, r3, #1
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80081ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081b0:	4b9d      	ldr	r3, [pc, #628]	; (8008428 <USB_EPStartXfer+0x370>)
 80081b2:	400b      	ands	r3, r1
 80081b4:	69b9      	ldr	r1, [r7, #24]
 80081b6:	0148      	lsls	r0, r1, #5
 80081b8:	69f9      	ldr	r1, [r7, #28]
 80081ba:	4401      	add	r1, r0
 80081bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081c0:	4313      	orrs	r3, r2
 80081c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d0:	691a      	ldr	r2, [r3, #16]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081da:	69b9      	ldr	r1, [r7, #24]
 80081dc:	0148      	lsls	r0, r1, #5
 80081de:	69f9      	ldr	r1, [r7, #28]
 80081e0:	4401      	add	r1, r0
 80081e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081e6:	4313      	orrs	r3, r2
 80081e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	791b      	ldrb	r3, [r3, #4]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d11f      	bne.n	8008232 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	0151      	lsls	r1, r2, #5
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	440a      	add	r2, r1
 8008208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800820c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008210:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	69ba      	ldr	r2, [r7, #24]
 8008222:	0151      	lsls	r1, r2, #5
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	440a      	add	r2, r1
 8008228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008230:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d14b      	bne.n	80082d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	461a      	mov	r2, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	791b      	ldrb	r3, [r3, #4]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d128      	bne.n	80082ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	d110      	bne.n	800828e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e00f      	b.n	80082ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	e133      	b.n	8008538 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d015      	beq.n	8008324 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 811b 	beq.w	8008538 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	2101      	movs	r1, #1
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	69f9      	ldr	r1, [r7, #28]
 800831a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800831e:	4313      	orrs	r3, r2
 8008320:	634b      	str	r3, [r1, #52]	; 0x34
 8008322:	e109      	b.n	8008538 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	d110      	bne.n	8008356 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	e00f      	b.n	8008376 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008374:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	6919      	ldr	r1, [r3, #16]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	b298      	uxth	r0, r3
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fade 	bl	800894c <USB_WritePacket>
 8008390:	e0d2      	b.n	8008538 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	0151      	lsls	r1, r2, #5
 80083a4:	69fa      	ldr	r2, [r7, #28]
 80083a6:	440a      	add	r2, r1
 80083a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ac:	0cdb      	lsrs	r3, r3, #19
 80083ae:	04db      	lsls	r3, r3, #19
 80083b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d126      	bne.n	800842c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f4:	69b9      	ldr	r1, [r7, #24]
 80083f6:	0148      	lsls	r0, r1, #5
 80083f8:	69f9      	ldr	r1, [r7, #28]
 80083fa:	4401      	add	r1, r0
 80083fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008400:	4313      	orrs	r3, r2
 8008402:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	0151      	lsls	r1, r2, #5
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	440a      	add	r2, r1
 800841a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800841e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008422:	6113      	str	r3, [r2, #16]
 8008424:	e03a      	b.n	800849c <USB_EPStartXfer+0x3e4>
 8008426:	bf00      	nop
 8008428:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	4413      	add	r3, r2
 8008436:	1e5a      	subs	r2, r3, #1
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008440:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	8afa      	ldrh	r2, [r7, #22]
 8008448:	fb03 f202 	mul.w	r2, r3, r2
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845c:	691a      	ldr	r2, [r3, #16]
 800845e:	8afb      	ldrh	r3, [r7, #22]
 8008460:	04d9      	lsls	r1, r3, #19
 8008462:	4b38      	ldr	r3, [pc, #224]	; (8008544 <USB_EPStartXfer+0x48c>)
 8008464:	400b      	ands	r3, r1
 8008466:	69b9      	ldr	r1, [r7, #24]
 8008468:	0148      	lsls	r0, r1, #5
 800846a:	69f9      	ldr	r1, [r7, #28]
 800846c:	4401      	add	r1, r0
 800846e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008472:	4313      	orrs	r3, r2
 8008474:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800848c:	69b9      	ldr	r1, [r7, #24]
 800848e:	0148      	lsls	r0, r1, #5
 8008490:	69f9      	ldr	r1, [r7, #28]
 8008492:	4401      	add	r1, r0
 8008494:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008498:	4313      	orrs	r3, r2
 800849a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d10d      	bne.n	80084be <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6919      	ldr	r1, [r3, #16]
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ba:	460a      	mov	r2, r1
 80084bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	791b      	ldrb	r3, [r3, #4]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d128      	bne.n	8008518 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d110      	bne.n	80084f8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	e00f      	b.n	8008518 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	440a      	add	r2, r1
 800850e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008516:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008536:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	1ff80000 	.word	0x1ff80000

08008548 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	f040 80ce 	bne.w	8008706 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d132      	bne.n	80085d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	440a      	add	r2, r1
 8008588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800858c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008590:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	0151      	lsls	r1, r2, #5
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	440a      	add	r2, r1
 80085cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d0:	0cdb      	lsrs	r3, r3, #19
 80085d2:	04db      	lsls	r3, r3, #19
 80085d4:	6113      	str	r3, [r2, #16]
 80085d6:	e04e      	b.n	8008676 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f2:	0cdb      	lsrs	r3, r3, #19
 80085f4:	04db      	lsls	r3, r3, #19
 80085f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008612:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008616:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800861a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	429a      	cmp	r2, r3
 8008626:	d903      	bls.n	8008630 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	440a      	add	r2, r1
 8008646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800864e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008666:	6939      	ldr	r1, [r7, #16]
 8008668:	0148      	lsls	r0, r1, #5
 800866a:	6979      	ldr	r1, [r7, #20]
 800866c:	4401      	add	r1, r0
 800866e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008672:	4313      	orrs	r3, r2
 8008674:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d11e      	bne.n	80086ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d009      	beq.n	8008698 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	461a      	mov	r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e097      	b.n	80087ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8083 	beq.w	80087ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	2101      	movs	r1, #1
 80086f6:	fa01 f303 	lsl.w	r3, r1, r3
 80086fa:	6979      	ldr	r1, [r7, #20]
 80086fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008700:	4313      	orrs	r3, r2
 8008702:	634b      	str	r3, [r1, #52]	; 0x34
 8008704:	e071      	b.n	80087ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008720:	0cdb      	lsrs	r3, r3, #19
 8008722:	04db      	lsls	r3, r3, #19
 8008724:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	440a      	add	r2, r1
 800873c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008740:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008744:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008748:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800877c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008798:	6939      	ldr	r1, [r7, #16]
 800879a:	0148      	lsls	r0, r1, #5
 800879c:	6979      	ldr	r1, [r7, #20]
 800879e:	4401      	add	r1, r0
 80087a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087a4:	4313      	orrs	r3, r2
 80087a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10d      	bne.n	80087ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6919      	ldr	r1, [r3, #16]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	460a      	mov	r2, r1
 80087c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d14a      	bne.n	80088ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800882a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800882e:	f040 8086 	bne.w	800893e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	7812      	ldrb	r2, [r2, #0]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008854:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	7812      	ldrb	r2, [r2, #0]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008878:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f242 7210 	movw	r2, #10000	; 0x2710
 8008886:	4293      	cmp	r3, r2
 8008888:	d902      	bls.n	8008890 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
          break;
 800888e:	e056      	b.n	800893e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a8:	d0e7      	beq.n	800887a <USB_EPStopXfer+0x82>
 80088aa:	e048      	b.n	800893e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c4:	d13b      	bne.n	800893e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	0151      	lsls	r1, r2, #5
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	440a      	add	r2, r1
 80088e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800890c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f242 7210 	movw	r2, #10000	; 0x2710
 800891a:	4293      	cmp	r3, r2
 800891c:	d902      	bls.n	8008924 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	75fb      	strb	r3, [r7, #23]
          break;
 8008922:	e00c      	b.n	800893e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800893c:	d0e7      	beq.n	800890e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008940:	4618      	mov	r0, r3
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800894c:	b480      	push	{r7}
 800894e:	b089      	sub	sp, #36	; 0x24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4611      	mov	r1, r2
 8008958:	461a      	mov	r2, r3
 800895a:	460b      	mov	r3, r1
 800895c:	71fb      	strb	r3, [r7, #7]
 800895e:	4613      	mov	r3, r2
 8008960:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800896a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d123      	bne.n	80089ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008972:	88bb      	ldrh	r3, [r7, #4]
 8008974:	3303      	adds	r3, #3
 8008976:	089b      	lsrs	r3, r3, #2
 8008978:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800897a:	2300      	movs	r3, #0
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	e018      	b.n	80089b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	031a      	lsls	r2, r3, #12
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4413      	add	r3, r2
 8008988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898c:	461a      	mov	r2, r3
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	3301      	adds	r3, #1
 8008998:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	3301      	adds	r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	3301      	adds	r3, #1
 80089a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	3301      	adds	r3, #1
 80089aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	3301      	adds	r3, #1
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d3e2      	bcc.n	8008980 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3724      	adds	r7, #36	; 0x24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b08b      	sub	sp, #44	; 0x2c
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	089b      	lsrs	r3, r3, #2
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089ee:	2300      	movs	r3, #0
 80089f0:	623b      	str	r3, [r7, #32]
 80089f2:	e014      	b.n	8008a1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	3301      	adds	r3, #1
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	3301      	adds	r3, #1
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	3301      	adds	r3, #1
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	3301      	adds	r3, #1
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	623b      	str	r3, [r7, #32]
 8008a1e:	6a3a      	ldr	r2, [r7, #32]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d3e6      	bcc.n	80089f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a26:	8bfb      	ldrh	r3, [r7, #30]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01e      	beq.n	8008a6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a36:	461a      	mov	r2, r3
 8008a38:	f107 0310 	add.w	r3, r7, #16
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	701a      	strb	r2, [r3, #0]
      i++;
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	3301      	adds	r3, #1
 8008a56:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a5e:	8bfb      	ldrh	r3, [r7, #30]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a64:	8bfb      	ldrh	r3, [r7, #30]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1ea      	bne.n	8008a40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	372c      	adds	r7, #44	; 0x2c
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d12c      	bne.n	8008aee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	db12      	blt.n	8008acc <USB_EPSetStall+0x54>
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00f      	beq.n	8008acc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	0151      	lsls	r1, r2, #5
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008aca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	0151      	lsls	r1, r2, #5
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e02b      	b.n	8008b46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	db12      	blt.n	8008b26 <USB_EPSetStall+0xae>
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00f      	beq.n	8008b26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d128      	bne.n	8008bc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	0151      	lsls	r1, r2, #5
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	440a      	add	r2, r1
 8008b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	791b      	ldrb	r3, [r3, #4]
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d003      	beq.n	8008ba0 <USB_EPClearStall+0x4c>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	791b      	ldrb	r3, [r3, #4]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d138      	bne.n	8008c12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e027      	b.n	8008c12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008be0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	791b      	ldrb	r3, [r3, #4]
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d003      	beq.n	8008bf2 <USB_EPClearStall+0x9e>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d10f      	bne.n	8008c12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	0151      	lsls	r1, r2, #5
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	440a      	add	r2, r1
 8008c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c86:	f023 0303 	bic.w	r3, r3, #3
 8008c8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9a:	f023 0302 	bic.w	r3, r3, #2
 8008c9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cc8:	f023 0303 	bic.w	r3, r3, #3
 8008ccc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cdc:	f043 0302 	orr.w	r3, r3, #2
 8008ce0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4013      	ands	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d08:	68fb      	ldr	r3, [r7, #12]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4013      	ands	r3, r2
 8008d38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	0c1b      	lsrs	r3, r3, #16
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	b29b      	uxth	r3, r3
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	4013      	ands	r3, r2
 8008daa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dac:	68bb      	ldr	r3, [r7, #8]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b087      	sub	sp, #28
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008dde:	78fb      	ldrb	r3, [r7, #3]
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dea:	01db      	lsls	r3, r3, #7
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4013      	ands	r3, r2
 8008e06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e08:	68bb      	ldr	r3, [r7, #8]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	f003 0301 	and.w	r3, r3, #1
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b085      	sub	sp, #20
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e50:	f023 0307 	bic.w	r3, r3, #7
 8008e54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	460b      	mov	r3, r1
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	333c      	adds	r3, #60	; 0x3c
 8008e8e:	3304      	adds	r3, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	4a26      	ldr	r2, [pc, #152]	; (8008f30 <USB_EP0_OutStart+0xb8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d90a      	bls.n	8008eb2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eac:	d101      	bne.n	8008eb2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e037      	b.n	8008f22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	461a      	mov	r2, r3
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee0:	f043 0318 	orr.w	r3, r3, #24
 8008ee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008ef8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d10f      	bne.n	8008f20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	4f54300a 	.word	0x4f54300a

08008f34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a13      	ldr	r2, [pc, #76]	; (8008f98 <USB_CoreReset+0x64>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e01b      	b.n	8008f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	daf2      	bge.n	8008f40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f043 0201 	orr.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4a09      	ldr	r2, [pc, #36]	; (8008f98 <USB_CoreReset+0x64>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d901      	bls.n	8008f7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e006      	b.n	8008f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d0f0      	beq.n	8008f6a <USB_CoreReset+0x36>

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	00030d40 	.word	0x00030d40

08008f9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008fa0:	4904      	ldr	r1, [pc, #16]	; (8008fb4 <MX_FATFS_Init+0x18>)
 8008fa2:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <MX_FATFS_Init+0x1c>)
 8008fa4:	f002 fe0e 	bl	800bbc4 <FATFS_LinkDriver>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	461a      	mov	r2, r3
 8008fac:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <MX_FATFS_Init+0x20>)
 8008fae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fb0:	bf00      	nop
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000884 	.word	0x20000884
 8008fb8:	200004f8 	.word	0x200004f8
 8008fbc:	20000880 	.word	0x20000880

08008fc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008fc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (mem_init(pdrv));
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7f8 fd25 	bl	8001a2c <mem_init>
 8008fe2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return (mem_getstatus(pdrv));
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7f8 fd2f 	bl	8001a5c <mem_getstatus>
 8008ffe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (mem_read(pdrv, buff, sector, count));
 8009018:	7bf8      	ldrb	r0, [r7, #15]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	68b9      	ldr	r1, [r7, #8]
 8009020:	f7f8 fd2c 	bl	8001a7c <mem_read>
 8009024:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return mem_write(pdrv, buff, sector, count);
 800903e:	7bf8      	ldrb	r0, [r7, #15]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	f7f8 fd53 	bl	8001af0 <mem_write>
 800904a:	4603      	mov	r3, r0
 800904c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	4603      	mov	r3, r0
 800905e:	603a      	str	r2, [r7, #0]
 8009060:	71fb      	strb	r3, [r7, #7]
 8009062:	460b      	mov	r3, r1
 8009064:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    switch (cmd) {
 8009066:	79bb      	ldrb	r3, [r7, #6]
 8009068:	2b03      	cmp	r3, #3
 800906a:	d010      	beq.n	800908e <USER_ioctl+0x38>
 800906c:	2b03      	cmp	r3, #3
 800906e:	dc12      	bgt.n	8009096 <USER_ioctl+0x40>
 8009070:	2b01      	cmp	r3, #1
 8009072:	d002      	beq.n	800907a <USER_ioctl+0x24>
 8009074:	2b02      	cmp	r3, #2
 8009076:	d005      	beq.n	8009084 <USER_ioctl+0x2e>
 8009078:	e00d      	b.n	8009096 <USER_ioctl+0x40>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = 65536;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009080:	601a      	str	r2, [r3, #0]
			break;
 8009082:	e008      	b.n	8009096 <USER_ioctl+0x40>
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = SECTOR_SIZE;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800908a:	601a      	str	r2, [r3, #0]
			break;
 800908c:	e003      	b.n	8009096 <USER_ioctl+0x40>
		case GET_BLOCK_SIZE:
			*(DWORD*) buff = 64;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2240      	movs	r2, #64	; 0x40
 8009092:	601a      	str	r2, [r3, #0]
			break;
 8009094:	bf00      	nop
    }
    return RES_OK;
 8009096:	2300      	movs	r3, #0
  /* USER CODE END IOCTL */
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80090b4:	f006 f9ae 	bl	800f414 <USBD_static_malloc>
 80090b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d109      	bne.n	80090d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	32b0      	adds	r2, #176	; 0xb0
 80090ca:	2100      	movs	r1, #0
 80090cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80090d0:	2302      	movs	r3, #2
 80090d2:	e0d4      	b.n	800927e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80090d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80090d8:	2100      	movs	r1, #0
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f006 fa26 	bl	800f52c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32b0      	adds	r2, #176	; 0xb0
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32b0      	adds	r2, #176	; 0xb0
 80090fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d138      	bne.n	800917e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800910c:	4b5e      	ldr	r3, [pc, #376]	; (8009288 <USBD_CDC_Init+0x1e4>)
 800910e:	7819      	ldrb	r1, [r3, #0]
 8009110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009114:	2202      	movs	r2, #2
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f006 f859 	bl	800f1ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800911c:	4b5a      	ldr	r3, [pc, #360]	; (8009288 <USBD_CDC_Init+0x1e4>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	f003 020f 	and.w	r2, r3, #15
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	3324      	adds	r3, #36	; 0x24
 8009132:	2201      	movs	r2, #1
 8009134:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009136:	4b55      	ldr	r3, [pc, #340]	; (800928c <USBD_CDC_Init+0x1e8>)
 8009138:	7819      	ldrb	r1, [r3, #0]
 800913a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800913e:	2202      	movs	r2, #2
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f006 f844 	bl	800f1ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009146:	4b51      	ldr	r3, [pc, #324]	; (800928c <USBD_CDC_Init+0x1e8>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f003 020f 	and.w	r2, r3, #15
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800915e:	2201      	movs	r2, #1
 8009160:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009162:	4b4b      	ldr	r3, [pc, #300]	; (8009290 <USBD_CDC_Init+0x1ec>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 020f 	and.w	r2, r3, #15
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	3326      	adds	r3, #38	; 0x26
 8009178:	2210      	movs	r2, #16
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e035      	b.n	80091ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800917e:	4b42      	ldr	r3, [pc, #264]	; (8009288 <USBD_CDC_Init+0x1e4>)
 8009180:	7819      	ldrb	r1, [r3, #0]
 8009182:	2340      	movs	r3, #64	; 0x40
 8009184:	2202      	movs	r2, #2
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f006 f821 	bl	800f1ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800918c:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <USBD_CDC_Init+0x1e4>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 020f 	and.w	r2, r3, #15
 8009194:	6879      	ldr	r1, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	440b      	add	r3, r1
 80091a0:	3324      	adds	r3, #36	; 0x24
 80091a2:	2201      	movs	r2, #1
 80091a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091a6:	4b39      	ldr	r3, [pc, #228]	; (800928c <USBD_CDC_Init+0x1e8>)
 80091a8:	7819      	ldrb	r1, [r3, #0]
 80091aa:	2340      	movs	r3, #64	; 0x40
 80091ac:	2202      	movs	r2, #2
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f006 f80d 	bl	800f1ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091b4:	4b35      	ldr	r3, [pc, #212]	; (800928c <USBD_CDC_Init+0x1e8>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 020f 	and.w	r2, r3, #15
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091cc:	2201      	movs	r2, #1
 80091ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091d0:	4b2f      	ldr	r3, [pc, #188]	; (8009290 <USBD_CDC_Init+0x1ec>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 020f 	and.w	r2, r3, #15
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	3326      	adds	r3, #38	; 0x26
 80091e6:	2210      	movs	r2, #16
 80091e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091ea:	4b29      	ldr	r3, [pc, #164]	; (8009290 <USBD_CDC_Init+0x1ec>)
 80091ec:	7819      	ldrb	r1, [r3, #0]
 80091ee:	2308      	movs	r3, #8
 80091f0:	2203      	movs	r2, #3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f005 ffeb 	bl	800f1ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80091f8:	4b25      	ldr	r3, [pc, #148]	; (8009290 <USBD_CDC_Init+0x1ec>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	3324      	adds	r3, #36	; 0x24
 800920e:	2201      	movs	r2, #1
 8009210:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	33b0      	adds	r3, #176	; 0xb0
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009248:	2302      	movs	r3, #2
 800924a:	e018      	b.n	800927e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	7c1b      	ldrb	r3, [r3, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009254:	4b0d      	ldr	r3, [pc, #52]	; (800928c <USBD_CDC_Init+0x1e8>)
 8009256:	7819      	ldrb	r1, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800925e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f006 f8a2 	bl	800f3ac <USBD_LL_PrepareReceive>
 8009268:	e008      	b.n	800927c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800926a:	4b08      	ldr	r3, [pc, #32]	; (800928c <USBD_CDC_Init+0x1e8>)
 800926c:	7819      	ldrb	r1, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f006 f898 	bl	800f3ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000593 	.word	0x20000593
 800928c:	20000594 	.word	0x20000594
 8009290:	20000595 	.word	0x20000595

08009294 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092a0:	4b3a      	ldr	r3, [pc, #232]	; (800938c <USBD_CDC_DeInit+0xf8>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f005 ffb7 	bl	800f21a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092ac:	4b37      	ldr	r3, [pc, #220]	; (800938c <USBD_CDC_DeInit+0xf8>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 020f 	and.w	r2, r3, #15
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	440b      	add	r3, r1
 80092c0:	3324      	adds	r3, #36	; 0x24
 80092c2:	2200      	movs	r2, #0
 80092c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80092c6:	4b32      	ldr	r3, [pc, #200]	; (8009390 <USBD_CDC_DeInit+0xfc>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f005 ffa4 	bl	800f21a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80092d2:	4b2f      	ldr	r3, [pc, #188]	; (8009390 <USBD_CDC_DeInit+0xfc>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	f003 020f 	and.w	r2, r3, #15
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	440b      	add	r3, r1
 80092e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092ea:	2200      	movs	r2, #0
 80092ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80092ee:	4b29      	ldr	r3, [pc, #164]	; (8009394 <USBD_CDC_DeInit+0x100>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f005 ff90 	bl	800f21a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80092fa:	4b26      	ldr	r3, [pc, #152]	; (8009394 <USBD_CDC_DeInit+0x100>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 020f 	and.w	r2, r3, #15
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	3324      	adds	r3, #36	; 0x24
 8009310:	2200      	movs	r2, #0
 8009312:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009314:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <USBD_CDC_DeInit+0x100>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 020f 	and.w	r2, r3, #15
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	440b      	add	r3, r1
 8009328:	3326      	adds	r3, #38	; 0x26
 800932a:	2200      	movs	r2, #0
 800932c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	32b0      	adds	r2, #176	; 0xb0
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01f      	beq.n	8009380 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	33b0      	adds	r3, #176	; 0xb0
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32b0      	adds	r2, #176	; 0xb0
 800935e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009362:	4618      	mov	r0, r3
 8009364:	f006 f864 	bl	800f430 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32b0      	adds	r2, #176	; 0xb0
 8009372:	2100      	movs	r1, #0
 8009374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000593 	.word	0x20000593
 8009390:	20000594 	.word	0x20000594
 8009394:	20000595 	.word	0x20000595

08009398 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	32b0      	adds	r2, #176	; 0xb0
 80093ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e0bf      	b.n	8009548 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d050      	beq.n	8009476 <USBD_CDC_Setup+0xde>
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	f040 80af 	bne.w	8009538 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88db      	ldrh	r3, [r3, #6]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d03a      	beq.n	8009458 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	b25b      	sxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da1b      	bge.n	8009424 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	33b0      	adds	r3, #176	; 0xb0
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009402:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	88d2      	ldrh	r2, [r2, #6]
 8009408:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88db      	ldrh	r3, [r3, #6]
 800940e:	2b07      	cmp	r3, #7
 8009410:	bf28      	it	cs
 8009412:	2307      	movcs	r3, #7
 8009414:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	89fa      	ldrh	r2, [r7, #14]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 fd89 	bl	800af34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009422:	e090      	b.n	8009546 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	785a      	ldrb	r2, [r3, #1]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	2b3f      	cmp	r3, #63	; 0x3f
 8009434:	d803      	bhi.n	800943e <USBD_CDC_Setup+0xa6>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	88db      	ldrh	r3, [r3, #6]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	e000      	b.n	8009440 <USBD_CDC_Setup+0xa8>
 800943e:	2240      	movs	r2, #64	; 0x40
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009446:	6939      	ldr	r1, [r7, #16]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800944e:	461a      	mov	r2, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fd9b 	bl	800af8c <USBD_CtlPrepareRx>
      break;
 8009456:	e076      	b.n	8009546 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	33b0      	adds	r3, #176	; 0xb0
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	7850      	ldrb	r0, [r2, #1]
 800946e:	2200      	movs	r2, #0
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	4798      	blx	r3
      break;
 8009474:	e067      	b.n	8009546 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	2b0b      	cmp	r3, #11
 800947c:	d851      	bhi.n	8009522 <USBD_CDC_Setup+0x18a>
 800947e:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <USBD_CDC_Setup+0xec>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	080094b5 	.word	0x080094b5
 8009488:	08009531 	.word	0x08009531
 800948c:	08009523 	.word	0x08009523
 8009490:	08009523 	.word	0x08009523
 8009494:	08009523 	.word	0x08009523
 8009498:	08009523 	.word	0x08009523
 800949c:	08009523 	.word	0x08009523
 80094a0:	08009523 	.word	0x08009523
 80094a4:	08009523 	.word	0x08009523
 80094a8:	08009523 	.word	0x08009523
 80094ac:	080094df 	.word	0x080094df
 80094b0:	08009509 	.word	0x08009509
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d107      	bne.n	80094d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094c0:	f107 030a 	add.w	r3, r7, #10
 80094c4:	2202      	movs	r2, #2
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 fd33 	bl	800af34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094ce:	e032      	b.n	8009536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 fcbd 	bl	800ae52 <USBD_CtlError>
            ret = USBD_FAIL;
 80094d8:	2303      	movs	r3, #3
 80094da:	75fb      	strb	r3, [r7, #23]
          break;
 80094dc:	e02b      	b.n	8009536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d107      	bne.n	80094fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094ea:	f107 030d 	add.w	r3, r7, #13
 80094ee:	2201      	movs	r2, #1
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 fd1e 	bl	800af34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094f8:	e01d      	b.n	8009536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 fca8 	bl	800ae52 <USBD_CtlError>
            ret = USBD_FAIL;
 8009502:	2303      	movs	r3, #3
 8009504:	75fb      	strb	r3, [r7, #23]
          break;
 8009506:	e016      	b.n	8009536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b03      	cmp	r3, #3
 8009512:	d00f      	beq.n	8009534 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fc9b 	bl	800ae52 <USBD_CtlError>
            ret = USBD_FAIL;
 800951c:	2303      	movs	r3, #3
 800951e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009520:	e008      	b.n	8009534 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fc94 	bl	800ae52 <USBD_CtlError>
          ret = USBD_FAIL;
 800952a:	2303      	movs	r3, #3
 800952c:	75fb      	strb	r3, [r7, #23]
          break;
 800952e:	e002      	b.n	8009536 <USBD_CDC_Setup+0x19e>
          break;
 8009530:	bf00      	nop
 8009532:	e008      	b.n	8009546 <USBD_CDC_Setup+0x1ae>
          break;
 8009534:	bf00      	nop
      }
      break;
 8009536:	e006      	b.n	8009546 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 fc89 	bl	800ae52 <USBD_CtlError>
      ret = USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	75fb      	strb	r3, [r7, #23]
      break;
 8009544:	bf00      	nop
  }

  return (uint8_t)ret;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009562:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	32b0      	adds	r2, #176	; 0xb0
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009576:	2303      	movs	r3, #3
 8009578:	e065      	b.n	8009646 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	32b0      	adds	r2, #176	; 0xb0
 8009584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009588:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	f003 020f 	and.w	r2, r3, #15
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	3318      	adds	r3, #24
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d02f      	beq.n	8009604 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	f003 020f 	and.w	r2, r3, #15
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	3318      	adds	r3, #24
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	f003 010f 	and.w	r1, r3, #15
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	460b      	mov	r3, r1
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	440b      	add	r3, r1
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4403      	add	r3, r0
 80095cc:	3348      	adds	r3, #72	; 0x48
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d112      	bne.n	8009604 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	f003 020f 	and.w	r2, r3, #15
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	3318      	adds	r3, #24
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095f6:	78f9      	ldrb	r1, [r7, #3]
 80095f8:	2300      	movs	r3, #0
 80095fa:	2200      	movs	r2, #0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f005 feb4 	bl	800f36a <USBD_LL_Transmit>
 8009602:	e01f      	b.n	8009644 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	33b0      	adds	r3, #176	; 0xb0
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d010      	beq.n	8009644 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	33b0      	adds	r3, #176	; 0xb0
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	32b0      	adds	r2, #176	; 0xb0
 8009664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009668:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	32b0      	adds	r2, #176	; 0xb0
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800967c:	2303      	movs	r3, #3
 800967e:	e01a      	b.n	80096b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f005 feb2 	bl	800f3ee <USBD_LL_GetRxDataSize>
 800968a:	4602      	mov	r2, r0
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	33b0      	adds	r3, #176	; 0xb0
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096b0:	4611      	mov	r1, r2
 80096b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	32b0      	adds	r2, #176	; 0xb0
 80096d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	e025      	b.n	800972c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	33b0      	adds	r3, #176	; 0xb0
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d01a      	beq.n	800972a <USBD_CDC_EP0_RxReady+0x6c>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096fa:	2bff      	cmp	r3, #255	; 0xff
 80096fc:	d015      	beq.n	800972a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	33b0      	adds	r3, #176	; 0xb0
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009716:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800971e:	b292      	uxth	r2, r2
 8009720:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800973c:	2182      	movs	r1, #130	; 0x82
 800973e:	4818      	ldr	r0, [pc, #96]	; (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009740:	f000 fd4f 	bl	800a1e2 <USBD_GetEpDesc>
 8009744:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009746:	2101      	movs	r1, #1
 8009748:	4815      	ldr	r0, [pc, #84]	; (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800974a:	f000 fd4a 	bl	800a1e2 <USBD_GetEpDesc>
 800974e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009750:	2181      	movs	r1, #129	; 0x81
 8009752:	4813      	ldr	r0, [pc, #76]	; (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009754:	f000 fd45 	bl	800a1e2 <USBD_GetEpDesc>
 8009758:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2210      	movs	r2, #16
 8009764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2200      	movs	r2, #0
 8009770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009774:	711a      	strb	r2, [r3, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d006      	beq.n	800978e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009788:	711a      	strb	r2, [r3, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2243      	movs	r2, #67	; 0x43
 8009792:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009794:	4b02      	ldr	r3, [pc, #8]	; (80097a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000550 	.word	0x20000550

080097a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097ac:	2182      	movs	r1, #130	; 0x82
 80097ae:	4818      	ldr	r0, [pc, #96]	; (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097b0:	f000 fd17 	bl	800a1e2 <USBD_GetEpDesc>
 80097b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097b6:	2101      	movs	r1, #1
 80097b8:	4815      	ldr	r0, [pc, #84]	; (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097ba:	f000 fd12 	bl	800a1e2 <USBD_GetEpDesc>
 80097be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097c0:	2181      	movs	r1, #129	; 0x81
 80097c2:	4813      	ldr	r0, [pc, #76]	; (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097c4:	f000 fd0d 	bl	800a1e2 <USBD_GetEpDesc>
 80097c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2210      	movs	r2, #16
 80097d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d006      	beq.n	80097ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2200      	movs	r2, #0
 80097e0:	711a      	strb	r2, [r3, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f042 0202 	orr.w	r2, r2, #2
 80097e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d006      	beq.n	80097fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	711a      	strb	r2, [r3, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f042 0202 	orr.w	r2, r2, #2
 80097fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2243      	movs	r2, #67	; 0x43
 8009802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009804:	4b02      	ldr	r3, [pc, #8]	; (8009810 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000550 	.word	0x20000550

08009814 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800981c:	2182      	movs	r1, #130	; 0x82
 800981e:	4818      	ldr	r0, [pc, #96]	; (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009820:	f000 fcdf 	bl	800a1e2 <USBD_GetEpDesc>
 8009824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009826:	2101      	movs	r1, #1
 8009828:	4815      	ldr	r0, [pc, #84]	; (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800982a:	f000 fcda 	bl	800a1e2 <USBD_GetEpDesc>
 800982e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009830:	2181      	movs	r1, #129	; 0x81
 8009832:	4813      	ldr	r0, [pc, #76]	; (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009834:	f000 fcd5 	bl	800a1e2 <USBD_GetEpDesc>
 8009838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2210      	movs	r2, #16
 8009844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d006      	beq.n	800985a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2200      	movs	r2, #0
 8009850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009854:	711a      	strb	r2, [r3, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009868:	711a      	strb	r2, [r3, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2243      	movs	r2, #67	; 0x43
 8009872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009874:	4b02      	ldr	r3, [pc, #8]	; (8009880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000550 	.word	0x20000550

08009884 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	220a      	movs	r2, #10
 8009890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009892:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	2000050c 	.word	0x2000050c

080098a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e009      	b.n	80098cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	33b0      	adds	r3, #176	; 0xb0
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	32b0      	adds	r2, #176	; 0xb0
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e008      	b.n	8009910 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	32b0      	adds	r2, #176	; 0xb0
 8009930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009934:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800993c:	2303      	movs	r3, #3
 800993e:	e004      	b.n	800994a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
	...

08009958 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	32b0      	adds	r2, #176	; 0xb0
 800996a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	32b0      	adds	r2, #176	; 0xb0
 800997e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009986:	2303      	movs	r3, #3
 8009988:	e025      	b.n	80099d6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009990:	2b00      	cmp	r3, #0
 8009992:	d11f      	bne.n	80099d4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2201      	movs	r2, #1
 8009998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800999c:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <USBD_CDC_TransmitPacket+0x88>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	f003 020f 	and.w	r2, r3, #15
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	4613      	mov	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4403      	add	r3, r0
 80099b6:	3318      	adds	r3, #24
 80099b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80099ba:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <USBD_CDC_TransmitPacket+0x88>)
 80099bc:	7819      	ldrb	r1, [r3, #0]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f005 fccd 	bl	800f36a <USBD_LL_Transmit>

    ret = USBD_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000593 	.word	0x20000593

080099e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	32b0      	adds	r2, #176	; 0xb0
 80099f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32b0      	adds	r2, #176	; 0xb0
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e018      	b.n	8009a44 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7c1b      	ldrb	r3, [r3, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a1a:	4b0c      	ldr	r3, [pc, #48]	; (8009a4c <USBD_CDC_ReceivePacket+0x68>)
 8009a1c:	7819      	ldrb	r1, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f005 fcbf 	bl	800f3ac <USBD_LL_PrepareReceive>
 8009a2e:	e008      	b.n	8009a42 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a30:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <USBD_CDC_ReceivePacket+0x68>)
 8009a32:	7819      	ldrb	r1, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a3a:	2340      	movs	r3, #64	; 0x40
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f005 fcb5 	bl	800f3ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20000594 	.word	0x20000594

08009a50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e01f      	b.n	8009aa8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	79fa      	ldrb	r2, [r7, #7]
 8009a9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f005 fb2f 	bl	800f100 <USBD_LL_Init>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e025      	b.n	8009b14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	32ae      	adds	r2, #174	; 0xae
 8009ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00f      	beq.n	8009b04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32ae      	adds	r2, #174	; 0xae
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	f107 020e 	add.w	r2, r7, #14
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	4602      	mov	r2, r0
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f005 fb37 	bl	800f198 <USBD_LL_Start>
 8009b2a:	4603      	mov	r3, r0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d009      	beq.n	8009b78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	78fa      	ldrb	r2, [r7, #3]
 8009b6e:	4611      	mov	r1, r2
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	4798      	blx	r3
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	4798      	blx	r3
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f001 f908 	bl	800adde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009bdc:	461a      	mov	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bea:	f003 031f 	and.w	r3, r3, #31
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d01a      	beq.n	8009c28 <USBD_LL_SetupStage+0x72>
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d822      	bhi.n	8009c3c <USBD_LL_SetupStage+0x86>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <USBD_LL_SetupStage+0x4a>
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d00a      	beq.n	8009c14 <USBD_LL_SetupStage+0x5e>
 8009bfe:	e01d      	b.n	8009c3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fb5f 	bl	800a2cc <USBD_StdDevReq>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73fb      	strb	r3, [r7, #15]
      break;
 8009c12:	e020      	b.n	8009c56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fbc7 	bl	800a3b0 <USBD_StdItfReq>
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]
      break;
 8009c26:	e016      	b.n	8009c56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fc29 	bl	800a488 <USBD_StdEPReq>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3a:	e00c      	b.n	8009c56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f005 fb04 	bl	800f258 <USBD_LL_StallEP>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]
      break;
 8009c54:	bf00      	nop
  }

  return ret;
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c72:	7afb      	ldrb	r3, [r7, #11]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d16e      	bne.n	8009d56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	f040 8098 	bne.w	8009dbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d913      	bls.n	8009cc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	689a      	ldr	r2, [r3, #8]
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	1ad2      	subs	r2, r2, r3
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	bf28      	it	cs
 8009cb2:	4613      	movcs	r3, r2
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f001 f984 	bl	800afc6 <USBD_CtlContinueRx>
 8009cbe:	e07d      	b.n	8009dbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d014      	beq.n	8009cf8 <USBD_LL_DataOutStage+0x98>
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d81d      	bhi.n	8009d0e <USBD_LL_DataOutStage+0xae>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <USBD_LL_DataOutStage+0x7c>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d003      	beq.n	8009ce2 <USBD_LL_DataOutStage+0x82>
 8009cda:	e018      	b.n	8009d0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	75bb      	strb	r3, [r7, #22]
            break;
 8009ce0:	e018      	b.n	8009d14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	4619      	mov	r1, r3
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 fa5e 	bl	800a1ae <USBD_CoreFindIF>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75bb      	strb	r3, [r7, #22]
            break;
 8009cf6:	e00d      	b.n	8009d14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	4619      	mov	r1, r3
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fa60 	bl	800a1c8 <USBD_CoreFindEP>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	75bb      	strb	r3, [r7, #22]
            break;
 8009d0c:	e002      	b.n	8009d14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	75bb      	strb	r3, [r7, #22]
            break;
 8009d12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d14:	7dbb      	ldrb	r3, [r7, #22]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d119      	bne.n	8009d4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d113      	bne.n	8009d4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d26:	7dba      	ldrb	r2, [r7, #22]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	32ae      	adds	r2, #174	; 0xae
 8009d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d36:	7dba      	ldrb	r2, [r7, #22]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d3e:	7dba      	ldrb	r2, [r7, #22]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	32ae      	adds	r2, #174	; 0xae
 8009d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f001 f94a 	bl	800afe8 <USBD_CtlSendStatus>
 8009d54:	e032      	b.n	8009dbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	4619      	mov	r1, r3
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 fa31 	bl	800a1c8 <USBD_CoreFindEP>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d6a:	7dbb      	ldrb	r3, [r7, #22]
 8009d6c:	2bff      	cmp	r3, #255	; 0xff
 8009d6e:	d025      	beq.n	8009dbc <USBD_LL_DataOutStage+0x15c>
 8009d70:	7dbb      	ldrb	r3, [r7, #22]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d122      	bne.n	8009dbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d117      	bne.n	8009db2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d82:	7dba      	ldrb	r2, [r7, #22]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	32ae      	adds	r2, #174	; 0xae
 8009d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00f      	beq.n	8009db2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009d92:	7dba      	ldrb	r2, [r7, #22]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009d9a:	7dba      	ldrb	r2, [r7, #22]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	32ae      	adds	r2, #174	; 0xae
 8009da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	7afa      	ldrb	r2, [r7, #11]
 8009da8:	4611      	mov	r1, r2
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	4798      	blx	r3
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	e000      	b.n	8009dbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b086      	sub	sp, #24
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	607a      	str	r2, [r7, #4]
 8009dd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d16f      	bne.n	8009eba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3314      	adds	r3, #20
 8009dde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d15a      	bne.n	8009ea0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d914      	bls.n	8009e20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f001 f8ac 	bl	800af6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e12:	2300      	movs	r3, #0
 8009e14:	2200      	movs	r2, #0
 8009e16:	2100      	movs	r1, #0
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f005 fac7 	bl	800f3ac <USBD_LL_PrepareReceive>
 8009e1e:	e03f      	b.n	8009ea0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	68da      	ldr	r2, [r3, #12]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d11c      	bne.n	8009e66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d316      	bcc.n	8009e66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d20f      	bcs.n	8009e66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e46:	2200      	movs	r2, #0
 8009e48:	2100      	movs	r1, #0
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f001 f88d 	bl	800af6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e58:	2300      	movs	r3, #0
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f005 faa4 	bl	800f3ac <USBD_LL_PrepareReceive>
 8009e64:	e01c      	b.n	8009ea0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d10f      	bne.n	8009e92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e92:	2180      	movs	r1, #128	; 0x80
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f005 f9df 	bl	800f258 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f001 f8b7 	bl	800b00e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d03a      	beq.n	8009f20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f7ff fe42 	bl	8009b34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009eb8:	e032      	b.n	8009f20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009eba:	7afb      	ldrb	r3, [r7, #11]
 8009ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 f97f 	bl	800a1c8 <USBD_CoreFindEP>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	2bff      	cmp	r3, #255	; 0xff
 8009ed2:	d025      	beq.n	8009f20 <USBD_LL_DataInStage+0x15a>
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d122      	bne.n	8009f20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d11c      	bne.n	8009f20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009ee6:	7dfa      	ldrb	r2, [r7, #23]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	32ae      	adds	r2, #174	; 0xae
 8009eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d014      	beq.n	8009f20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009ef6:	7dfa      	ldrb	r2, [r7, #23]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009efe:	7dfa      	ldrb	r2, [r7, #23]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	32ae      	adds	r2, #174	; 0xae
 8009f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	7afa      	ldrb	r2, [r7, #11]
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f16:	7dbb      	ldrb	r3, [r7, #22]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f1c:	7dbb      	ldrb	r3, [r7, #22]
 8009f1e:	e000      	b.n	8009f22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d014      	beq.n	8009f90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6852      	ldr	r2, [r2, #4]
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	4611      	mov	r1, r2
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	4798      	blx	r3
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f90:	2340      	movs	r3, #64	; 0x40
 8009f92:	2200      	movs	r2, #0
 8009f94:	2100      	movs	r1, #0
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f005 f919 	bl	800f1ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2240      	movs	r2, #64	; 0x40
 8009fa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fac:	2340      	movs	r3, #64	; 0x40
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2180      	movs	r1, #128	; 0x80
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f005 f90b 	bl	800f1ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2240      	movs	r2, #64	; 0x40
 8009fc2:	621a      	str	r2, [r3, #32]

  return ret;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b083      	sub	sp, #12
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	78fa      	ldrb	r2, [r7, #3]
 8009fde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2204      	movs	r2, #4
 800a008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d106      	bne.n	800a03c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a034:	b2da      	uxtb	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d110      	bne.n	800a080 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	32ae      	adds	r2, #174	; 0xae
 800a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e01c      	b.n	800a0e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d115      	bne.n	800a0e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	32ae      	adds	r2, #174	; 0xae
 800a0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00b      	beq.n	800a0e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	32ae      	adds	r2, #174	; 0xae
 800a0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32ae      	adds	r2, #174	; 0xae
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e01c      	b.n	800a14a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d115      	bne.n	800a148 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32ae      	adds	r2, #174	; 0xae
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32ae      	adds	r2, #174	; 0xae
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	78fa      	ldrb	r2, [r7, #3]
 800a142:	4611      	mov	r1, r2
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	6852      	ldr	r2, [r2, #4]
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	4611      	mov	r1, r2
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a1d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b086      	sub	sp, #24
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	885b      	ldrh	r3, [r3, #2]
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	429a      	cmp	r2, r3
 800a208:	d920      	bls.n	800a24c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a212:	e013      	b.n	800a23c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a214:	f107 030a 	add.w	r3, r7, #10
 800a218:	4619      	mov	r1, r3
 800a21a:	6978      	ldr	r0, [r7, #20]
 800a21c:	f000 f81b 	bl	800a256 <USBD_GetNextDesc>
 800a220:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b05      	cmp	r3, #5
 800a228:	d108      	bne.n	800a23c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	789b      	ldrb	r3, [r3, #2]
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	429a      	cmp	r2, r3
 800a236:	d008      	beq.n	800a24a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a238:	2300      	movs	r3, #0
 800a23a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	885b      	ldrh	r3, [r3, #2]
 800a240:	b29a      	uxth	r2, r3
 800a242:	897b      	ldrh	r3, [r7, #10]
 800a244:	429a      	cmp	r2, r3
 800a246:	d8e5      	bhi.n	800a214 <USBD_GetEpDesc+0x32>
 800a248:	e000      	b.n	800a24c <USBD_GetEpDesc+0x6a>
          break;
 800a24a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a24c:	693b      	ldr	r3, [r7, #16]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a256:	b480      	push	{r7}
 800a258:	b085      	sub	sp, #20
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	881a      	ldrh	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4413      	add	r3, r2
 800a270:	b29a      	uxth	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4413      	add	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a282:	68fb      	ldr	r3, [r7, #12]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a290:	b480      	push	{r7}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2ae:	8a3b      	ldrh	r3, [r7, #16]
 800a2b0:	021b      	lsls	r3, r3, #8
 800a2b2:	b21a      	sxth	r2, r3
 800a2b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	b21b      	sxth	r3, r3
 800a2bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a2be:	89fb      	ldrh	r3, [r7, #14]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2e2:	2b40      	cmp	r3, #64	; 0x40
 800a2e4:	d005      	beq.n	800a2f2 <USBD_StdDevReq+0x26>
 800a2e6:	2b40      	cmp	r3, #64	; 0x40
 800a2e8:	d857      	bhi.n	800a39a <USBD_StdDevReq+0xce>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00f      	beq.n	800a30e <USBD_StdDevReq+0x42>
 800a2ee:	2b20      	cmp	r3, #32
 800a2f0:	d153      	bne.n	800a39a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	32ae      	adds	r2, #174	; 0xae
 800a2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	4798      	blx	r3
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]
      break;
 800a30c:	e04a      	b.n	800a3a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	785b      	ldrb	r3, [r3, #1]
 800a312:	2b09      	cmp	r3, #9
 800a314:	d83b      	bhi.n	800a38e <USBD_StdDevReq+0xc2>
 800a316:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <USBD_StdDevReq+0x50>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a371 	.word	0x0800a371
 800a320:	0800a385 	.word	0x0800a385
 800a324:	0800a38f 	.word	0x0800a38f
 800a328:	0800a37b 	.word	0x0800a37b
 800a32c:	0800a38f 	.word	0x0800a38f
 800a330:	0800a34f 	.word	0x0800a34f
 800a334:	0800a345 	.word	0x0800a345
 800a338:	0800a38f 	.word	0x0800a38f
 800a33c:	0800a367 	.word	0x0800a367
 800a340:	0800a359 	.word	0x0800a359
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 fa3c 	bl	800a7c4 <USBD_GetDescriptor>
          break;
 800a34c:	e024      	b.n	800a398 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fba1 	bl	800aa98 <USBD_SetAddress>
          break;
 800a356:	e01f      	b.n	800a398 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fbe0 	bl	800ab20 <USBD_SetConfig>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]
          break;
 800a364:	e018      	b.n	800a398 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fc83 	bl	800ac74 <USBD_GetConfig>
          break;
 800a36e:	e013      	b.n	800a398 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fcb4 	bl	800ace0 <USBD_GetStatus>
          break;
 800a378:	e00e      	b.n	800a398 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fce3 	bl	800ad48 <USBD_SetFeature>
          break;
 800a382:	e009      	b.n	800a398 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fd07 	bl	800ad9a <USBD_ClrFeature>
          break;
 800a38c:	e004      	b.n	800a398 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fd5e 	bl	800ae52 <USBD_CtlError>
          break;
 800a396:	bf00      	nop
      }
      break;
 800a398:	e004      	b.n	800a3a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fd58 	bl	800ae52 <USBD_CtlError>
      break;
 800a3a2:	bf00      	nop
  }

  return ret;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop

0800a3b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3c6:	2b40      	cmp	r3, #64	; 0x40
 800a3c8:	d005      	beq.n	800a3d6 <USBD_StdItfReq+0x26>
 800a3ca:	2b40      	cmp	r3, #64	; 0x40
 800a3cc:	d852      	bhi.n	800a474 <USBD_StdItfReq+0xc4>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <USBD_StdItfReq+0x26>
 800a3d2:	2b20      	cmp	r3, #32
 800a3d4:	d14e      	bne.n	800a474 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d840      	bhi.n	800a466 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	889b      	ldrh	r3, [r3, #4]
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d836      	bhi.n	800a45c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	889b      	ldrh	r3, [r3, #4]
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fed9 	bl	800a1ae <USBD_CoreFindIF>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a400:	7bbb      	ldrb	r3, [r7, #14]
 800a402:	2bff      	cmp	r3, #255	; 0xff
 800a404:	d01d      	beq.n	800a442 <USBD_StdItfReq+0x92>
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d11a      	bne.n	800a442 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a40c:	7bba      	ldrb	r2, [r7, #14]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	32ae      	adds	r2, #174	; 0xae
 800a412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00f      	beq.n	800a43c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a41c:	7bba      	ldrb	r2, [r7, #14]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a424:	7bba      	ldrb	r2, [r7, #14]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	32ae      	adds	r2, #174	; 0xae
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	4798      	blx	r3
 800a436:	4603      	mov	r3, r0
 800a438:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a43a:	e004      	b.n	800a446 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a43c:	2303      	movs	r3, #3
 800a43e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a440:	e001      	b.n	800a446 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	88db      	ldrh	r3, [r3, #6]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d110      	bne.n	800a470 <USBD_StdItfReq+0xc0>
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10d      	bne.n	800a470 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fdc7 	bl	800afe8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a45a:	e009      	b.n	800a470 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fcf7 	bl	800ae52 <USBD_CtlError>
          break;
 800a464:	e004      	b.n	800a470 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fcf2 	bl	800ae52 <USBD_CtlError>
          break;
 800a46e:	e000      	b.n	800a472 <USBD_StdItfReq+0xc2>
          break;
 800a470:	bf00      	nop
      }
      break;
 800a472:	e004      	b.n	800a47e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fceb 	bl	800ae52 <USBD_CtlError>
      break;
 800a47c:	bf00      	nop
  }

  return ret;
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	889b      	ldrh	r3, [r3, #4]
 800a49a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4a4:	2b40      	cmp	r3, #64	; 0x40
 800a4a6:	d007      	beq.n	800a4b8 <USBD_StdEPReq+0x30>
 800a4a8:	2b40      	cmp	r3, #64	; 0x40
 800a4aa:	f200 817f 	bhi.w	800a7ac <USBD_StdEPReq+0x324>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d02a      	beq.n	800a508 <USBD_StdEPReq+0x80>
 800a4b2:	2b20      	cmp	r3, #32
 800a4b4:	f040 817a 	bne.w	800a7ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff fe83 	bl	800a1c8 <USBD_CoreFindEP>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4c6:	7b7b      	ldrb	r3, [r7, #13]
 800a4c8:	2bff      	cmp	r3, #255	; 0xff
 800a4ca:	f000 8174 	beq.w	800a7b6 <USBD_StdEPReq+0x32e>
 800a4ce:	7b7b      	ldrb	r3, [r7, #13]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f040 8170 	bne.w	800a7b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a4d6:	7b7a      	ldrb	r2, [r7, #13]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a4de:	7b7a      	ldrb	r2, [r7, #13]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	32ae      	adds	r2, #174	; 0xae
 800a4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 8163 	beq.w	800a7b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a4f0:	7b7a      	ldrb	r2, [r7, #13]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	32ae      	adds	r2, #174	; 0xae
 800a4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	4798      	blx	r3
 800a502:	4603      	mov	r3, r0
 800a504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a506:	e156      	b.n	800a7b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	785b      	ldrb	r3, [r3, #1]
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d008      	beq.n	800a522 <USBD_StdEPReq+0x9a>
 800a510:	2b03      	cmp	r3, #3
 800a512:	f300 8145 	bgt.w	800a7a0 <USBD_StdEPReq+0x318>
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 809b 	beq.w	800a652 <USBD_StdEPReq+0x1ca>
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d03c      	beq.n	800a59a <USBD_StdEPReq+0x112>
 800a520:	e13e      	b.n	800a7a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d002      	beq.n	800a534 <USBD_StdEPReq+0xac>
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d016      	beq.n	800a560 <USBD_StdEPReq+0xd8>
 800a532:	e02c      	b.n	800a58e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00d      	beq.n	800a556 <USBD_StdEPReq+0xce>
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	2b80      	cmp	r3, #128	; 0x80
 800a53e:	d00a      	beq.n	800a556 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a540:	7bbb      	ldrb	r3, [r7, #14]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f004 fe87 	bl	800f258 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54a:	2180      	movs	r1, #128	; 0x80
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f004 fe83 	bl	800f258 <USBD_LL_StallEP>
 800a552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a554:	e020      	b.n	800a598 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fc7a 	bl	800ae52 <USBD_CtlError>
              break;
 800a55e:	e01b      	b.n	800a598 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	885b      	ldrh	r3, [r3, #2]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10e      	bne.n	800a586 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a568:	7bbb      	ldrb	r3, [r7, #14]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00b      	beq.n	800a586 <USBD_StdEPReq+0xfe>
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	2b80      	cmp	r3, #128	; 0x80
 800a572:	d008      	beq.n	800a586 <USBD_StdEPReq+0xfe>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	88db      	ldrh	r3, [r3, #6]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d104      	bne.n	800a586 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f004 fe69 	bl	800f258 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fd2e 	bl	800afe8 <USBD_CtlSendStatus>

              break;
 800a58c:	e004      	b.n	800a598 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fc5e 	bl	800ae52 <USBD_CtlError>
              break;
 800a596:	bf00      	nop
          }
          break;
 800a598:	e107      	b.n	800a7aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d002      	beq.n	800a5ac <USBD_StdEPReq+0x124>
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d016      	beq.n	800a5d8 <USBD_StdEPReq+0x150>
 800a5aa:	e04b      	b.n	800a644 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00d      	beq.n	800a5ce <USBD_StdEPReq+0x146>
 800a5b2:	7bbb      	ldrb	r3, [r7, #14]
 800a5b4:	2b80      	cmp	r3, #128	; 0x80
 800a5b6:	d00a      	beq.n	800a5ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f004 fe4b 	bl	800f258 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c2:	2180      	movs	r1, #128	; 0x80
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f004 fe47 	bl	800f258 <USBD_LL_StallEP>
 800a5ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5cc:	e040      	b.n	800a650 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fc3e 	bl	800ae52 <USBD_CtlError>
              break;
 800a5d6:	e03b      	b.n	800a650 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	885b      	ldrh	r3, [r3, #2]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d136      	bne.n	800a64e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
 800a5e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f004 fe51 	bl	800f296 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fcf7 	bl	800afe8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7ff fde2 	bl	800a1c8 <USBD_CoreFindEP>
 800a604:	4603      	mov	r3, r0
 800a606:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a608:	7b7b      	ldrb	r3, [r7, #13]
 800a60a:	2bff      	cmp	r3, #255	; 0xff
 800a60c:	d01f      	beq.n	800a64e <USBD_StdEPReq+0x1c6>
 800a60e:	7b7b      	ldrb	r3, [r7, #13]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d11c      	bne.n	800a64e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a614:	7b7a      	ldrb	r2, [r7, #13]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a61c:	7b7a      	ldrb	r2, [r7, #13]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	32ae      	adds	r2, #174	; 0xae
 800a622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d010      	beq.n	800a64e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a62c:	7b7a      	ldrb	r2, [r7, #13]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	32ae      	adds	r2, #174	; 0xae
 800a632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a642:	e004      	b.n	800a64e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fc03 	bl	800ae52 <USBD_CtlError>
              break;
 800a64c:	e000      	b.n	800a650 <USBD_StdEPReq+0x1c8>
              break;
 800a64e:	bf00      	nop
          }
          break;
 800a650:	e0ab      	b.n	800a7aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d002      	beq.n	800a664 <USBD_StdEPReq+0x1dc>
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d032      	beq.n	800a6c8 <USBD_StdEPReq+0x240>
 800a662:	e097      	b.n	800a794 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a664:	7bbb      	ldrb	r3, [r7, #14]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d007      	beq.n	800a67a <USBD_StdEPReq+0x1f2>
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b80      	cmp	r3, #128	; 0x80
 800a66e:	d004      	beq.n	800a67a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fbed 	bl	800ae52 <USBD_CtlError>
                break;
 800a678:	e091      	b.n	800a79e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a67a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	da0b      	bge.n	800a69a <USBD_StdEPReq+0x212>
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a688:	4613      	mov	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	3310      	adds	r3, #16
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	4413      	add	r3, r2
 800a696:	3304      	adds	r3, #4
 800a698:	e00b      	b.n	800a6b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fc37 	bl	800af34 <USBD_CtlSendData>
              break;
 800a6c6:	e06a      	b.n	800a79e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	da11      	bge.n	800a6f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
 800a6d2:	f003 020f 	and.w	r2, r3, #15
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	440b      	add	r3, r1
 800a6e2:	3324      	adds	r3, #36	; 0x24
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d117      	bne.n	800a71a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fbb0 	bl	800ae52 <USBD_CtlError>
                  break;
 800a6f2:	e054      	b.n	800a79e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
 800a6f6:	f003 020f 	and.w	r2, r3, #15
 800a6fa:	6879      	ldr	r1, [r7, #4]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	440b      	add	r3, r1
 800a706:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d104      	bne.n	800a71a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fb9d 	bl	800ae52 <USBD_CtlError>
                  break;
 800a718:	e041      	b.n	800a79e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a71a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	da0b      	bge.n	800a73a <USBD_StdEPReq+0x2b2>
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	3310      	adds	r3, #16
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	4413      	add	r3, r2
 800a736:	3304      	adds	r3, #4
 800a738:	e00b      	b.n	800a752 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4413      	add	r3, r2
 800a750:	3304      	adds	r3, #4
 800a752:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <USBD_StdEPReq+0x2d8>
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b80      	cmp	r3, #128	; 0x80
 800a75e:	d103      	bne.n	800a768 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	e00e      	b.n	800a786 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f004 fdb1 	bl	800f2d4 <USBD_LL_IsStallEP>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2201      	movs	r2, #1
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	e002      	b.n	800a786 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2202      	movs	r2, #2
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fbd1 	bl	800af34 <USBD_CtlSendData>
              break;
 800a792:	e004      	b.n	800a79e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fb5b 	bl	800ae52 <USBD_CtlError>
              break;
 800a79c:	bf00      	nop
          }
          break;
 800a79e:	e004      	b.n	800a7aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fb55 	bl	800ae52 <USBD_CtlError>
          break;
 800a7a8:	bf00      	nop
      }
      break;
 800a7aa:	e005      	b.n	800a7b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fb4f 	bl	800ae52 <USBD_CtlError>
      break;
 800a7b4:	e000      	b.n	800a7b8 <USBD_StdEPReq+0x330>
      break;
 800a7b6:	bf00      	nop
  }

  return ret;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	885b      	ldrh	r3, [r3, #2]
 800a7de:	0a1b      	lsrs	r3, r3, #8
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	2b06      	cmp	r3, #6
 800a7e6:	f200 8128 	bhi.w	800aa3a <USBD_GetDescriptor+0x276>
 800a7ea:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <USBD_GetDescriptor+0x2c>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a80d 	.word	0x0800a80d
 800a7f4:	0800a825 	.word	0x0800a825
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800aa3b 	.word	0x0800aa3b
 800a800:	0800aa3b 	.word	0x0800aa3b
 800a804:	0800a9db 	.word	0x0800a9db
 800a808:	0800aa07 	.word	0x0800aa07
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	7c12      	ldrb	r2, [r2, #16]
 800a818:	f107 0108 	add.w	r1, r7, #8
 800a81c:	4610      	mov	r0, r2
 800a81e:	4798      	blx	r3
 800a820:	60f8      	str	r0, [r7, #12]
      break;
 800a822:	e112      	b.n	800aa4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7c1b      	ldrb	r3, [r3, #16]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10d      	bne.n	800a848 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a834:	f107 0208 	add.w	r2, r7, #8
 800a838:	4610      	mov	r0, r2
 800a83a:	4798      	blx	r3
 800a83c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3301      	adds	r3, #1
 800a842:	2202      	movs	r2, #2
 800a844:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a846:	e100      	b.n	800aa4a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	f107 0208 	add.w	r2, r7, #8
 800a854:	4610      	mov	r0, r2
 800a856:	4798      	blx	r3
 800a858:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3301      	adds	r3, #1
 800a85e:	2202      	movs	r2, #2
 800a860:	701a      	strb	r2, [r3, #0]
      break;
 800a862:	e0f2      	b.n	800aa4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	885b      	ldrh	r3, [r3, #2]
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b05      	cmp	r3, #5
 800a86c:	f200 80ac 	bhi.w	800a9c8 <USBD_GetDescriptor+0x204>
 800a870:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <USBD_GetDescriptor+0xb4>)
 800a872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a876:	bf00      	nop
 800a878:	0800a891 	.word	0x0800a891
 800a87c:	0800a8c5 	.word	0x0800a8c5
 800a880:	0800a8f9 	.word	0x0800a8f9
 800a884:	0800a92d 	.word	0x0800a92d
 800a888:	0800a961 	.word	0x0800a961
 800a88c:	0800a995 	.word	0x0800a995
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	7c12      	ldrb	r2, [r2, #16]
 800a8a8:	f107 0108 	add.w	r1, r7, #8
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
 800a8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8b2:	e091      	b.n	800a9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 facb 	bl	800ae52 <USBD_CtlError>
            err++;
 800a8bc:	7afb      	ldrb	r3, [r7, #11]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8c2:	e089      	b.n	800a9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	7c12      	ldrb	r2, [r2, #16]
 800a8dc:	f107 0108 	add.w	r1, r7, #8
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	4798      	blx	r3
 800a8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8e6:	e077      	b.n	800a9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fab1 	bl	800ae52 <USBD_CtlError>
            err++;
 800a8f0:	7afb      	ldrb	r3, [r7, #11]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8f6:	e06f      	b.n	800a9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	7c12      	ldrb	r2, [r2, #16]
 800a910:	f107 0108 	add.w	r1, r7, #8
 800a914:	4610      	mov	r0, r2
 800a916:	4798      	blx	r3
 800a918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a91a:	e05d      	b.n	800a9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa97 	bl	800ae52 <USBD_CtlError>
            err++;
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	3301      	adds	r3, #1
 800a928:	72fb      	strb	r3, [r7, #11]
          break;
 800a92a:	e055      	b.n	800a9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00b      	beq.n	800a950 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	7c12      	ldrb	r2, [r2, #16]
 800a944:	f107 0108 	add.w	r1, r7, #8
 800a948:	4610      	mov	r0, r2
 800a94a:	4798      	blx	r3
 800a94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a94e:	e043      	b.n	800a9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fa7d 	bl	800ae52 <USBD_CtlError>
            err++;
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	3301      	adds	r3, #1
 800a95c:	72fb      	strb	r3, [r7, #11]
          break;
 800a95e:	e03b      	b.n	800a9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a966:	695b      	ldr	r3, [r3, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00b      	beq.n	800a984 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a972:	695b      	ldr	r3, [r3, #20]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	7c12      	ldrb	r2, [r2, #16]
 800a978:	f107 0108 	add.w	r1, r7, #8
 800a97c:	4610      	mov	r0, r2
 800a97e:	4798      	blx	r3
 800a980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a982:	e029      	b.n	800a9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fa63 	bl	800ae52 <USBD_CtlError>
            err++;
 800a98c:	7afb      	ldrb	r3, [r7, #11]
 800a98e:	3301      	adds	r3, #1
 800a990:	72fb      	strb	r3, [r7, #11]
          break;
 800a992:	e021      	b.n	800a9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	7c12      	ldrb	r2, [r2, #16]
 800a9ac:	f107 0108 	add.w	r1, r7, #8
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	4798      	blx	r3
 800a9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9b6:	e00f      	b.n	800a9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fa49 	bl	800ae52 <USBD_CtlError>
            err++;
 800a9c0:	7afb      	ldrb	r3, [r7, #11]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9c6:	e007      	b.n	800a9d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fa41 	bl	800ae52 <USBD_CtlError>
          err++;
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a9d6:	bf00      	nop
      }
      break;
 800a9d8:	e037      	b.n	800aa4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7c1b      	ldrb	r3, [r3, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d109      	bne.n	800a9f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ea:	f107 0208 	add.w	r2, r7, #8
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	4798      	blx	r3
 800a9f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9f4:	e029      	b.n	800aa4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fa2a 	bl	800ae52 <USBD_CtlError>
        err++;
 800a9fe:	7afb      	ldrb	r3, [r7, #11]
 800aa00:	3301      	adds	r3, #1
 800aa02:	72fb      	strb	r3, [r7, #11]
      break;
 800aa04:	e021      	b.n	800aa4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	7c1b      	ldrb	r3, [r3, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10d      	bne.n	800aa2a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa16:	f107 0208 	add.w	r2, r7, #8
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	4798      	blx	r3
 800aa1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3301      	adds	r3, #1
 800aa24:	2207      	movs	r2, #7
 800aa26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa28:	e00f      	b.n	800aa4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fa10 	bl	800ae52 <USBD_CtlError>
        err++;
 800aa32:	7afb      	ldrb	r3, [r7, #11]
 800aa34:	3301      	adds	r3, #1
 800aa36:	72fb      	strb	r3, [r7, #11]
      break;
 800aa38:	e007      	b.n	800aa4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa08 	bl	800ae52 <USBD_CtlError>
      err++;
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	3301      	adds	r3, #1
 800aa46:	72fb      	strb	r3, [r7, #11]
      break;
 800aa48:	bf00      	nop
  }

  if (err != 0U)
 800aa4a:	7afb      	ldrb	r3, [r7, #11]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d11e      	bne.n	800aa8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	88db      	ldrh	r3, [r3, #6]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d016      	beq.n	800aa86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa58:	893b      	ldrh	r3, [r7, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00e      	beq.n	800aa7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	88da      	ldrh	r2, [r3, #6]
 800aa62:	893b      	ldrh	r3, [r7, #8]
 800aa64:	4293      	cmp	r3, r2
 800aa66:	bf28      	it	cs
 800aa68:	4613      	movcs	r3, r2
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa6e:	893b      	ldrh	r3, [r7, #8]
 800aa70:	461a      	mov	r2, r3
 800aa72:	68f9      	ldr	r1, [r7, #12]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fa5d 	bl	800af34 <USBD_CtlSendData>
 800aa7a:	e009      	b.n	800aa90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa7c:	6839      	ldr	r1, [r7, #0]
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f9e7 	bl	800ae52 <USBD_CtlError>
 800aa84:	e004      	b.n	800aa90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 faae 	bl	800afe8 <USBD_CtlSendStatus>
 800aa8c:	e000      	b.n	800aa90 <USBD_GetDescriptor+0x2cc>
    return;
 800aa8e:	bf00      	nop
  }
}
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop

0800aa98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	889b      	ldrh	r3, [r3, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d131      	bne.n	800ab0e <USBD_SetAddress+0x76>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	88db      	ldrh	r3, [r3, #6]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d12d      	bne.n	800ab0e <USBD_SetAddress+0x76>
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	885b      	ldrh	r3, [r3, #2]
 800aab6:	2b7f      	cmp	r3, #127	; 0x7f
 800aab8:	d829      	bhi.n	800ab0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	885b      	ldrh	r3, [r3, #2]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d104      	bne.n	800aadc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f9bc 	bl	800ae52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aada:	e01d      	b.n	800ab18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7bfa      	ldrb	r2, [r7, #15]
 800aae0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f004 fc1f 	bl	800f32c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fa7a 	bl	800afe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d004      	beq.n	800ab04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2202      	movs	r2, #2
 800aafe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab02:	e009      	b.n	800ab18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab0c:	e004      	b.n	800ab18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f99e 	bl	800ae52 <USBD_CtlError>
  }
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	885b      	ldrh	r3, [r3, #2]
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	4b4e      	ldr	r3, [pc, #312]	; (800ac70 <USBD_SetConfig+0x150>)
 800ab36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab38:	4b4d      	ldr	r3, [pc, #308]	; (800ac70 <USBD_SetConfig+0x150>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d905      	bls.n	800ab4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f985 	bl	800ae52 <USBD_CtlError>
    return USBD_FAIL;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e08c      	b.n	800ac66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d002      	beq.n	800ab5e <USBD_SetConfig+0x3e>
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d029      	beq.n	800abb0 <USBD_SetConfig+0x90>
 800ab5c:	e075      	b.n	800ac4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab5e:	4b44      	ldr	r3, [pc, #272]	; (800ac70 <USBD_SetConfig+0x150>)
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d020      	beq.n	800aba8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab66:	4b42      	ldr	r3, [pc, #264]	; (800ac70 <USBD_SetConfig+0x150>)
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab70:	4b3f      	ldr	r3, [pc, #252]	; (800ac70 <USBD_SetConfig+0x150>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7fe ffe7 	bl	8009b4a <USBD_SetClassConfig>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d008      	beq.n	800ab98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f962 	bl	800ae52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2202      	movs	r2, #2
 800ab92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab96:	e065      	b.n	800ac64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fa25 	bl	800afe8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2203      	movs	r2, #3
 800aba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aba6:	e05d      	b.n	800ac64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fa1d 	bl	800afe8 <USBD_CtlSendStatus>
      break;
 800abae:	e059      	b.n	800ac64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800abb0:	4b2f      	ldr	r3, [pc, #188]	; (800ac70 <USBD_SetConfig+0x150>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d112      	bne.n	800abde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800abc0:	4b2b      	ldr	r3, [pc, #172]	; (800ac70 <USBD_SetConfig+0x150>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	461a      	mov	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abca:	4b29      	ldr	r3, [pc, #164]	; (800ac70 <USBD_SetConfig+0x150>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7fe ffd6 	bl	8009b82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fa06 	bl	800afe8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abdc:	e042      	b.n	800ac64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800abde:	4b24      	ldr	r3, [pc, #144]	; (800ac70 <USBD_SetConfig+0x150>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d02a      	beq.n	800ac42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7fe ffc4 	bl	8009b82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800abfa:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <USBD_SetConfig+0x150>)
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac04:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <USBD_SetConfig+0x150>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7fe ff9d 	bl	8009b4a <USBD_SetClassConfig>
 800ac10:	4603      	mov	r3, r0
 800ac12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00f      	beq.n	800ac3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f918 	bl	800ae52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7fe ffa9 	bl	8009b82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac38:	e014      	b.n	800ac64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f9d4 	bl	800afe8 <USBD_CtlSendStatus>
      break;
 800ac40:	e010      	b.n	800ac64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f9d0 	bl	800afe8 <USBD_CtlSendStatus>
      break;
 800ac48:	e00c      	b.n	800ac64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f900 	bl	800ae52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac52:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <USBD_SetConfig+0x150>)
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7fe ff92 	bl	8009b82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	73fb      	strb	r3, [r7, #15]
      break;
 800ac62:	bf00      	nop
  }

  return ret;
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20000888 	.word	0x20000888

0800ac74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	88db      	ldrh	r3, [r3, #6]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d004      	beq.n	800ac90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f8e2 	bl	800ae52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac8e:	e023      	b.n	800acd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	dc02      	bgt.n	800aca2 <USBD_GetConfig+0x2e>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dc03      	bgt.n	800aca8 <USBD_GetConfig+0x34>
 800aca0:	e015      	b.n	800acce <USBD_GetConfig+0x5a>
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d00b      	beq.n	800acbe <USBD_GetConfig+0x4a>
 800aca6:	e012      	b.n	800acce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	3308      	adds	r3, #8
 800acb2:	2201      	movs	r2, #1
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f93c 	bl	800af34 <USBD_CtlSendData>
        break;
 800acbc:	e00c      	b.n	800acd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3304      	adds	r3, #4
 800acc2:	2201      	movs	r2, #1
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f934 	bl	800af34 <USBD_CtlSendData>
        break;
 800accc:	e004      	b.n	800acd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f8be 	bl	800ae52 <USBD_CtlError>
        break;
 800acd6:	bf00      	nop
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d81e      	bhi.n	800ad36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	88db      	ldrh	r3, [r3, #6]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d004      	beq.n	800ad0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f8a5 	bl	800ae52 <USBD_CtlError>
        break;
 800ad08:	e01a      	b.n	800ad40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d005      	beq.n	800ad26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	f043 0202 	orr.w	r2, r3, #2
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	330c      	adds	r3, #12
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f900 	bl	800af34 <USBD_CtlSendData>
      break;
 800ad34:	e004      	b.n	800ad40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f88a 	bl	800ae52 <USBD_CtlError>
      break;
 800ad3e:	bf00      	nop
  }
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	885b      	ldrh	r3, [r3, #2]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d107      	bne.n	800ad6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f940 	bl	800afe8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ad68:	e013      	b.n	800ad92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	885b      	ldrh	r3, [r3, #2]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d10b      	bne.n	800ad8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	889b      	ldrh	r3, [r3, #4]
 800ad76:	0a1b      	lsrs	r3, r3, #8
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f930 	bl	800afe8 <USBD_CtlSendStatus>
}
 800ad88:	e003      	b.n	800ad92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f860 	bl	800ae52 <USBD_CtlError>
}
 800ad92:	bf00      	nop
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	3b01      	subs	r3, #1
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d80b      	bhi.n	800adca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	885b      	ldrh	r3, [r3, #2]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d10c      	bne.n	800add4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f910 	bl	800afe8 <USBD_CtlSendStatus>
      }
      break;
 800adc8:	e004      	b.n	800add4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f840 	bl	800ae52 <USBD_CtlError>
      break;
 800add2:	e000      	b.n	800add6 <USBD_ClrFeature+0x3c>
      break;
 800add4:	bf00      	nop
  }
}
 800add6:	bf00      	nop
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	781a      	ldrb	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3301      	adds	r3, #1
 800adf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	781a      	ldrb	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3301      	adds	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7ff fa41 	bl	800a290 <SWAPBYTE>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	461a      	mov	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7ff fa34 	bl	800a290 <SWAPBYTE>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	3301      	adds	r3, #1
 800ae34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7ff fa27 	bl	800a290 <SWAPBYTE>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	80da      	strh	r2, [r3, #6]
}
 800ae4a:	bf00      	nop
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae5c:	2180      	movs	r1, #128	; 0x80
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f004 f9fa 	bl	800f258 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae64:	2100      	movs	r1, #0
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f004 f9f6 	bl	800f258 <USBD_LL_StallEP>
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d036      	beq.n	800aef8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ae8e:	6938      	ldr	r0, [r7, #16]
 800ae90:	f000 f836 	bl	800af00 <USBD_GetLen>
 800ae94:	4603      	mov	r3, r0
 800ae96:	3301      	adds	r3, #1
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	4413      	add	r3, r2
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	7812      	ldrb	r2, [r2, #0]
 800aeac:	701a      	strb	r2, [r3, #0]
  idx++;
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	2203      	movs	r2, #3
 800aebc:	701a      	strb	r2, [r3, #0]
  idx++;
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
 800aec0:	3301      	adds	r3, #1
 800aec2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aec4:	e013      	b.n	800aeee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4413      	add	r3, r2
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	7812      	ldrb	r2, [r2, #0]
 800aed0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	3301      	adds	r3, #1
 800aed6:	613b      	str	r3, [r7, #16]
    idx++;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	3301      	adds	r3, #1
 800aedc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	4413      	add	r3, r2
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
    idx++;
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
 800aeea:	3301      	adds	r3, #1
 800aeec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e7      	bne.n	800aec6 <USBD_GetString+0x52>
 800aef6:	e000      	b.n	800aefa <USBD_GetString+0x86>
    return;
 800aef8:	bf00      	nop
  }
}
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af10:	e005      	b.n	800af1e <USBD_GetLen+0x1e>
  {
    len++;
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	3301      	adds	r3, #1
 800af16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	3301      	adds	r3, #1
 800af1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1f5      	bne.n	800af12 <USBD_GetLen+0x12>
  }

  return len;
 800af26:	7bfb      	ldrb	r3, [r7, #15]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2202      	movs	r2, #2
 800af44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	2100      	movs	r1, #0
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f004 fa05 	bl	800f36a <USBD_LL_Transmit>

  return USBD_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	2100      	movs	r1, #0
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f004 f9f4 	bl	800f36a <USBD_LL_Transmit>

  return USBD_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2203      	movs	r2, #3
 800af9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	2100      	movs	r1, #0
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f004 f9f8 	bl	800f3ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	2100      	movs	r1, #0
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f004 f9e7 	bl	800f3ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2204      	movs	r2, #4
 800aff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aff8:	2300      	movs	r3, #0
 800affa:	2200      	movs	r2, #0
 800affc:	2100      	movs	r1, #0
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f004 f9b3 	bl	800f36a <USBD_LL_Transmit>

  return USBD_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b082      	sub	sp, #8
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2205      	movs	r2, #5
 800b01a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b01e:	2300      	movs	r3, #0
 800b020:	2200      	movs	r2, #0
 800b022:	2100      	movs	r1, #0
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f004 f9c1 	bl	800f3ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b042:	79fb      	ldrb	r3, [r7, #7]
 800b044:	4a0d      	ldr	r2, [pc, #52]	; (800b07c <disk_initialize+0x48>)
 800b046:	5cd3      	ldrb	r3, [r2, r3]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d111      	bne.n	800b070 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	4a0b      	ldr	r2, [pc, #44]	; (800b07c <disk_initialize+0x48>)
 800b050:	2101      	movs	r1, #1
 800b052:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	4a09      	ldr	r2, [pc, #36]	; (800b07c <disk_initialize+0x48>)
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	79fa      	ldrb	r2, [r7, #7]
 800b062:	4906      	ldr	r1, [pc, #24]	; (800b07c <disk_initialize+0x48>)
 800b064:	440a      	add	r2, r1
 800b066:	7a12      	ldrb	r2, [r2, #8]
 800b068:	4610      	mov	r0, r2
 800b06a:	4798      	blx	r3
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000890 	.word	0x20000890

0800b080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b080:	b590      	push	{r4, r7, lr}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	607a      	str	r2, [r7, #4]
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	4a0a      	ldr	r2, [pc, #40]	; (800b0bc <disk_write+0x3c>)
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	68dc      	ldr	r4, [r3, #12]
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	4a07      	ldr	r2, [pc, #28]	; (800b0bc <disk_write+0x3c>)
 800b0a0:	4413      	add	r3, r2
 800b0a2:	7a18      	ldrb	r0, [r3, #8]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	47a0      	blx	r4
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	371c      	adds	r7, #28
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd90      	pop	{r4, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000890 	.word	0x20000890

0800b0c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	603a      	str	r2, [r7, #0]
 800b0ca:	71fb      	strb	r3, [r7, #7]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	4a09      	ldr	r2, [pc, #36]	; (800b0f8 <disk_ioctl+0x38>)
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	79fa      	ldrb	r2, [r7, #7]
 800b0de:	4906      	ldr	r1, [pc, #24]	; (800b0f8 <disk_ioctl+0x38>)
 800b0e0:	440a      	add	r2, r1
 800b0e2:	7a10      	ldrb	r0, [r2, #8]
 800b0e4:	79b9      	ldrb	r1, [r7, #6]
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	4798      	blx	r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000890 	.word	0x20000890

0800b0fc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	607a      	str	r2, [r7, #4]
 800b10e:	887a      	ldrh	r2, [r7, #2]
 800b110:	b2d2      	uxtb	r2, r2
 800b112:	701a      	strb	r2, [r3, #0]
 800b114:	887b      	ldrh	r3, [r7, #2]
 800b116:	0a1b      	lsrs	r3, r3, #8
 800b118:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	607a      	str	r2, [r7, #4]
 800b120:	887a      	ldrh	r2, [r7, #2]
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
}
 800b126:	bf00      	nop
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	607a      	str	r2, [r7, #4]
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	b2d2      	uxtb	r2, r2
 800b146:	701a      	strb	r2, [r3, #0]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	0a1b      	lsrs	r3, r3, #8
 800b14c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	b2d2      	uxtb	r2, r2
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	0a1b      	lsrs	r3, r3, #8
 800b15e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	607a      	str	r2, [r7, #4]
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	b2d2      	uxtb	r2, r2
 800b16a:	701a      	strb	r2, [r3, #0]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	0a1b      	lsrs	r3, r3, #8
 800b170:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b18a:	b480      	push	{r7}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00d      	beq.n	800b1c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	1c53      	adds	r3, r2, #1
 800b1a8:	613b      	str	r3, [r7, #16]
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	1c59      	adds	r1, r3, #1
 800b1ae:	6179      	str	r1, [r7, #20]
 800b1b0:	7812      	ldrb	r2, [r2, #0]
 800b1b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	607b      	str	r3, [r7, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1f1      	bne.n	800b1a4 <mem_cpy+0x1a>
	}
}
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	617a      	str	r2, [r7, #20]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	b2d2      	uxtb	r2, r2
 800b1e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	607b      	str	r3, [r7, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1f3      	bne.n	800b1dc <mem_set+0x10>
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b202:	b480      	push	{r7}
 800b204:	b087      	sub	sp, #28
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b20a:	f04f 33ff 	mov.w	r3, #4294967295
 800b20e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d031      	beq.n	800b27c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e002      	b.n	800b226 <get_ldnumber+0x24>
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	3301      	adds	r3, #1
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b20      	cmp	r3, #32
 800b22c:	d903      	bls.n	800b236 <get_ldnumber+0x34>
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b3a      	cmp	r3, #58	; 0x3a
 800b234:	d1f4      	bne.n	800b220 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	2b3a      	cmp	r3, #58	; 0x3a
 800b23c:	d11c      	bne.n	800b278 <get_ldnumber+0x76>
			tp = *path;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	60fa      	str	r2, [r7, #12]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	3b30      	subs	r3, #48	; 0x30
 800b24e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b09      	cmp	r3, #9
 800b254:	d80e      	bhi.n	800b274 <get_ldnumber+0x72>
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d10a      	bne.n	800b274 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d107      	bne.n	800b274 <get_ldnumber+0x72>
					vol = (int)i;
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	3301      	adds	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	e002      	b.n	800b27e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b278:	2300      	movs	r3, #0
 800b27a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b27c:	693b      	ldr	r3, [r7, #16]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	371c      	adds	r7, #28
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
	...

0800b28c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b28c:	b590      	push	{r4, r7, lr}
 800b28e:	b09d      	sub	sp, #116	; 0x74
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	607a      	str	r2, [r7, #4]
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	460b      	mov	r3, r1
 800b29a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b29c:	2301      	movs	r3, #1
 800b29e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b2a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2a4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b2a6:	f107 030c 	add.w	r3, r7, #12
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7ff ffa9 	bl	800b202 <get_ldnumber>
 800b2b0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	da02      	bge.n	800b2be <f_mkfs+0x32>
 800b2b8:	230b      	movs	r3, #11
 800b2ba:	f000 bc31 	b.w	800bb20 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b2be:	4aa5      	ldr	r2, [pc, #660]	; (800b554 <f_mkfs+0x2c8>)
 800b2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d005      	beq.n	800b2d6 <f_mkfs+0x4a>
 800b2ca:	4aa2      	ldr	r2, [pc, #648]	; (800b554 <f_mkfs+0x2c8>)
 800b2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b2e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff fea4 	bl	800b034 <disk_initialize>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b2f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <f_mkfs+0x78>
 800b2fe:	2303      	movs	r3, #3
 800b300:	f000 bc0e 	b.w	800bb20 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b304:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <f_mkfs+0x8a>
 800b310:	230a      	movs	r3, #10
 800b312:	f000 bc05 	b.w	800bb20 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b316:	f107 0214 	add.w	r2, r7, #20
 800b31a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b31e:	2103      	movs	r1, #3
 800b320:	4618      	mov	r0, r3
 800b322:	f7ff fecd 	bl	800b0c0 <disk_ioctl>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10c      	bne.n	800b346 <f_mkfs+0xba>
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d009      	beq.n	800b346 <f_mkfs+0xba>
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b338:	d805      	bhi.n	800b346 <f_mkfs+0xba>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	1e5a      	subs	r2, r3, #1
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	4013      	ands	r3, r2
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <f_mkfs+0xbe>
 800b346:	2301      	movs	r3, #1
 800b348:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800b34a:	f107 021a 	add.w	r2, r7, #26
 800b34e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b352:	2102      	movs	r1, #2
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff feb3 	bl	800b0c0 <disk_ioctl>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <f_mkfs+0xd8>
 800b360:	2301      	movs	r3, #1
 800b362:	e3dd      	b.n	800bb20 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800b364:	8b7b      	ldrh	r3, [r7, #26]
 800b366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b36a:	d80a      	bhi.n	800b382 <f_mkfs+0xf6>
 800b36c:	8b7b      	ldrh	r3, [r7, #26]
 800b36e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b372:	d306      	bcc.n	800b382 <f_mkfs+0xf6>
 800b374:	8b7b      	ldrh	r3, [r7, #26]
 800b376:	461a      	mov	r2, r3
 800b378:	8b7b      	ldrh	r3, [r7, #26]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	4013      	ands	r3, r2
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <f_mkfs+0xfa>
 800b382:	2301      	movs	r3, #1
 800b384:	e3cc      	b.n	800bb20 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d004      	beq.n	800b396 <f_mkfs+0x10a>
 800b38c:	8b7b      	ldrh	r3, [r7, #26]
 800b38e:	461a      	mov	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4293      	cmp	r3, r2
 800b394:	d309      	bcc.n	800b3aa <f_mkfs+0x11e>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b39c:	d805      	bhi.n	800b3aa <f_mkfs+0x11e>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	1e5a      	subs	r2, r3, #1
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <f_mkfs+0x122>
 800b3aa:	2313      	movs	r3, #19
 800b3ac:	e3b8      	b.n	800bb20 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 800b3ae:	8b7b      	ldrh	r3, [r7, #26]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3b8:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b3be:	8b7b      	ldrh	r3, [r7, #26]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3ca:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b3cc:	8b7b      	ldrh	r3, [r7, #26]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	fb02 f303 	mul.w	r3, r2, r3
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <f_mkfs+0x156>
 800b3de:	230e      	movs	r3, #14
 800b3e0:	e39e      	b.n	800bb20 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b3e2:	f107 0210 	add.w	r2, r7, #16
 800b3e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff fe67 	bl	800b0c0 <disk_ioctl>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d001      	beq.n	800b3fc <f_mkfs+0x170>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e391      	b.n	800bb20 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b3fc:	7afb      	ldrb	r3, [r7, #11]
 800b3fe:	f003 0308 	and.w	r3, r3, #8
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <f_mkfs+0x17e>
 800b406:	2300      	movs	r3, #0
 800b408:	e000      	b.n	800b40c <f_mkfs+0x180>
 800b40a:	233f      	movs	r3, #63	; 0x3f
 800b40c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b412:	429a      	cmp	r2, r3
 800b414:	d901      	bls.n	800b41a <f_mkfs+0x18e>
 800b416:	230e      	movs	r3, #14
 800b418:	e382      	b.n	800bb20 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2b7f      	cmp	r3, #127	; 0x7f
 800b426:	d801      	bhi.n	800b42c <f_mkfs+0x1a0>
 800b428:	230e      	movs	r3, #14
 800b42a:	e379      	b.n	800bb20 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b80      	cmp	r3, #128	; 0x80
 800b430:	d901      	bls.n	800b436 <f_mkfs+0x1aa>
 800b432:	2313      	movs	r3, #19
 800b434:	e374      	b.n	800bb20 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b436:	7afb      	ldrb	r3, [r7, #11]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00d      	beq.n	800b45c <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b02      	cmp	r3, #2
 800b448:	d004      	beq.n	800b454 <f_mkfs+0x1c8>
 800b44a:	7afb      	ldrb	r3, [r7, #11]
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	2b00      	cmp	r3, #0
 800b452:	d103      	bne.n	800b45c <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800b454:	2303      	movs	r3, #3
 800b456:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b45a:	e009      	b.n	800b470 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <f_mkfs+0x1de>
 800b466:	2313      	movs	r3, #19
 800b468:	e35a      	b.n	800bb20 <f_mkfs+0x894>
		fmt = FS_FAT16;
 800b46a:	2302      	movs	r3, #2
 800b46c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b474:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b478:	2b03      	cmp	r3, #3
 800b47a:	d13c      	bne.n	800b4f6 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 800b47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d11b      	bne.n	800b4ba <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	0c5b      	lsrs	r3, r3, #17
 800b486:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b488:	2300      	movs	r3, #0
 800b48a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b48c:	2301      	movs	r3, #1
 800b48e:	653b      	str	r3, [r7, #80]	; 0x50
 800b490:	e005      	b.n	800b49e <f_mkfs+0x212>
 800b492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b494:	3301      	adds	r3, #1
 800b496:	64bb      	str	r3, [r7, #72]	; 0x48
 800b498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	653b      	str	r3, [r7, #80]	; 0x50
 800b49e:	4a2e      	ldr	r2, [pc, #184]	; (800b558 <f_mkfs+0x2cc>)
 800b4a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d007      	beq.n	800b4ba <f_mkfs+0x22e>
 800b4aa:	4a2b      	ldr	r2, [pc, #172]	; (800b558 <f_mkfs+0x2cc>)
 800b4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d2eb      	bcs.n	800b492 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	3302      	adds	r3, #2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	8b7a      	ldrh	r2, [r7, #26]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	8b7a      	ldrh	r2, [r7, #26]
 800b4d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4d6:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800b4d8:	2320      	movs	r3, #32
 800b4da:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b4dc:	2300      	movs	r3, #0
 800b4de:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d903      	bls.n	800b4f2 <f_mkfs+0x266>
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	4a1b      	ldr	r2, [pc, #108]	; (800b55c <f_mkfs+0x2d0>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d954      	bls.n	800b59c <f_mkfs+0x310>
 800b4f2:	230e      	movs	r3, #14
 800b4f4:	e314      	b.n	800bb20 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d11b      	bne.n	800b534 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	0b1b      	lsrs	r3, r3, #12
 800b500:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b502:	2300      	movs	r3, #0
 800b504:	64bb      	str	r3, [r7, #72]	; 0x48
 800b506:	2301      	movs	r3, #1
 800b508:	653b      	str	r3, [r7, #80]	; 0x50
 800b50a:	e005      	b.n	800b518 <f_mkfs+0x28c>
 800b50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b50e:	3301      	adds	r3, #1
 800b510:	64bb      	str	r3, [r7, #72]	; 0x48
 800b512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	653b      	str	r3, [r7, #80]	; 0x50
 800b518:	4a11      	ldr	r2, [pc, #68]	; (800b560 <f_mkfs+0x2d4>)
 800b51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b51c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d007      	beq.n	800b534 <f_mkfs+0x2a8>
 800b524:	4a0e      	ldr	r2, [pc, #56]	; (800b560 <f_mkfs+0x2d4>)
 800b526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b52c:	461a      	mov	r2, r3
 800b52e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b530:	4293      	cmp	r3, r2
 800b532:	d2eb      	bcs.n	800b50c <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b538:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53c:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b540:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b544:	4293      	cmp	r3, r2
 800b546:	d90d      	bls.n	800b564 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54a:	3302      	adds	r3, #2
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b550:	e013      	b.n	800b57a <f_mkfs+0x2ee>
 800b552:	bf00      	nop
 800b554:	2000088c 	.word	0x2000088c
 800b558:	080103e8 	.word	0x080103e8
 800b55c:	0ffffff5 	.word	0x0ffffff5
 800b560:	080103f8 	.word	0x080103f8
				} else {
					fmt = FS_FAT12;
 800b564:	2301      	movs	r3, #1
 800b566:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56c:	4613      	mov	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	4413      	add	r3, r2
 800b572:	3301      	adds	r3, #1
 800b574:	085b      	lsrs	r3, r3, #1
 800b576:	3303      	adds	r3, #3
 800b578:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b57a:	8b7b      	ldrh	r3, [r7, #26]
 800b57c:	461a      	mov	r2, r3
 800b57e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b580:	4413      	add	r3, r2
 800b582:	3b01      	subs	r3, #1
 800b584:	8b7a      	ldrh	r2, [r7, #26]
 800b586:	fbb3 f3f2 	udiv	r3, r3, r2
 800b58a:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800b58c:	2301      	movs	r3, #1
 800b58e:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b592:	015b      	lsls	r3, r3, #5
 800b594:	8b7a      	ldrh	r2, [r7, #26]
 800b596:	fbb3 f3f2 	udiv	r3, r3, r2
 800b59a:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5a0:	4413      	add	r3, r2
 800b5a2:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b5a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5a8:	fb03 f202 	mul.w	r2, r3, r2
 800b5ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5ae:	4413      	add	r3, r2
 800b5b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5b2:	4413      	add	r3, r2
 800b5b4:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	1e5a      	subs	r2, r3, #1
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	425b      	negs	r3, r3
 800b5c2:	401a      	ands	r2, r3
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b5ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d108      	bne.n	800b5e4 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 800b5d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5d6:	4413      	add	r3, r2
 800b5d8:	657b      	str	r3, [r7, #84]	; 0x54
 800b5da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5de:	4413      	add	r3, r2
 800b5e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5e2:	e006      	b.n	800b5f2 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800b5e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5ee:	4413      	add	r3, r2
 800b5f0:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800b5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f4:	011a      	lsls	r2, r3, #4
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	441a      	add	r2, r3
 800b5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fc:	1ad2      	subs	r2, r2, r3
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	429a      	cmp	r2, r3
 800b602:	d901      	bls.n	800b608 <f_mkfs+0x37c>
 800b604:	230e      	movs	r3, #14
 800b606:	e28b      	b.n	800bb20 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b60c:	1ad2      	subs	r2, r2, r3
 800b60e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b610:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b612:	fb01 f303 	mul.w	r3, r1, r3
 800b616:	1ad2      	subs	r2, r2, r3
 800b618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 800b624:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d10f      	bne.n	800b64c <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b632:	4293      	cmp	r3, r2
 800b634:	d80a      	bhi.n	800b64c <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d105      	bne.n	800b648 <f_mkfs+0x3bc>
 800b63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b63e:	085b      	lsrs	r3, r3, #1
 800b640:	607b      	str	r3, [r7, #4]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d144      	bne.n	800b6d2 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 800b648:	230e      	movs	r3, #14
 800b64a:	e269      	b.n	800bb20 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 800b64c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b650:	2b02      	cmp	r3, #2
 800b652:	d133      	bne.n	800b6bc <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d91e      	bls.n	800b69c <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d107      	bne.n	800b674 <f_mkfs+0x3e8>
 800b664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	2b40      	cmp	r3, #64	; 0x40
 800b66a:	d803      	bhi.n	800b674 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800b66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	607b      	str	r3, [r7, #4]
 800b672:	e033      	b.n	800b6dc <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 800b674:	7afb      	ldrb	r3, [r7, #11]
 800b676:	f003 0302 	and.w	r3, r3, #2
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b67e:	2303      	movs	r3, #3
 800b680:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b684:	e02a      	b.n	800b6dc <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d105      	bne.n	800b698 <f_mkfs+0x40c>
 800b68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	607b      	str	r3, [r7, #4]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b80      	cmp	r3, #128	; 0x80
 800b696:	d91e      	bls.n	800b6d6 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 800b698:	230e      	movs	r3, #14
 800b69a:	e241      	b.n	800bb20 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d80a      	bhi.n	800b6bc <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d105      	bne.n	800b6b8 <f_mkfs+0x42c>
 800b6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	607b      	str	r3, [r7, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b80      	cmp	r3, #128	; 0x80
 800b6b6:	d910      	bls.n	800b6da <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 800b6b8:	230e      	movs	r3, #14
 800b6ba:	e231      	b.n	800bb20 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800b6bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d10c      	bne.n	800b6de <f_mkfs+0x452>
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d907      	bls.n	800b6de <f_mkfs+0x452>
 800b6ce:	230e      	movs	r3, #14
 800b6d0:	e226      	b.n	800bb20 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b6d2:	bf00      	nop
 800b6d4:	e6cc      	b.n	800b470 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b6d6:	bf00      	nop
 800b6d8:	e6ca      	b.n	800b470 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b6da:	bf00      	nop
			pau = au;
 800b6dc:	e6c8      	b.n	800b470 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 800b6de:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800b6e0:	8b7b      	ldrh	r3, [r7, #26]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6e8:	f7ff fd70 	bl	800b1cc <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800b6ec:	220b      	movs	r2, #11
 800b6ee:	49b3      	ldr	r1, [pc, #716]	; (800b9bc <f_mkfs+0x730>)
 800b6f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6f2:	f7ff fd4a 	bl	800b18a <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f8:	330b      	adds	r3, #11
 800b6fa:	8b7a      	ldrh	r2, [r7, #26]
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff fcfc 	bl	800b0fc <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b706:	330d      	adds	r3, #13
 800b708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b710:	330e      	adds	r3, #14
 800b712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b714:	b292      	uxth	r2, r2
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fcef 	bl	800b0fc <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	3310      	adds	r3, #16
 800b722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800b728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72a:	f103 0211 	add.w	r2, r3, #17
 800b72e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b732:	2b03      	cmp	r3, #3
 800b734:	d002      	beq.n	800b73c <f_mkfs+0x4b0>
 800b736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b738:	b29b      	uxth	r3, r3
 800b73a:	e000      	b.n	800b73e <f_mkfs+0x4b2>
 800b73c:	2300      	movs	r3, #0
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f7ff fcdb 	bl	800b0fc <st_word>
		if (sz_vol < 0x10000) {
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b74c:	d208      	bcs.n	800b760 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b750:	3313      	adds	r3, #19
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	b292      	uxth	r2, r2
 800b756:	4611      	mov	r1, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fccf 	bl	800b0fc <st_word>
 800b75e:	e006      	b.n	800b76e <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800b760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b762:	3320      	adds	r3, #32
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f7ff fce2 	bl	800b132 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b770:	3315      	adds	r3, #21
 800b772:	22f8      	movs	r2, #248	; 0xf8
 800b774:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b778:	3318      	adds	r3, #24
 800b77a:	213f      	movs	r1, #63	; 0x3f
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff fcbd 	bl	800b0fc <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b784:	331a      	adds	r3, #26
 800b786:	21ff      	movs	r1, #255	; 0xff
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fcb7 	bl	800b0fc <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800b78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b790:	331c      	adds	r3, #28
 800b792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fccc 	bl	800b132 <st_dword>
		if (fmt == FS_FAT32) {
 800b79a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d131      	bne.n	800b806 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a4:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800b7a8:	f7fd fc0a 	bl	8008fc0 <get_fattime>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f7ff fcbe 	bl	800b132 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b8:	3324      	adds	r3, #36	; 0x24
 800b7ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7ff fcb8 	bl	800b132 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c4:	332c      	adds	r3, #44	; 0x2c
 800b7c6:	2102      	movs	r1, #2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fcb2 	bl	800b132 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d0:	3330      	adds	r3, #48	; 0x30
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff fc91 	bl	800b0fc <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7dc:	3332      	adds	r3, #50	; 0x32
 800b7de:	2106      	movs	r1, #6
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff fc8b 	bl	800b0fc <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e8:	3340      	adds	r3, #64	; 0x40
 800b7ea:	2280      	movs	r2, #128	; 0x80
 800b7ec:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f0:	3342      	adds	r3, #66	; 0x42
 800b7f2:	2229      	movs	r2, #41	; 0x29
 800b7f4:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f8:	3347      	adds	r3, #71	; 0x47
 800b7fa:	2213      	movs	r2, #19
 800b7fc:	4970      	ldr	r1, [pc, #448]	; (800b9c0 <f_mkfs+0x734>)
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fcc3 	bl	800b18a <mem_cpy>
 800b804:	e020      	b.n	800b848 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800b806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b808:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800b80c:	f7fd fbd8 	bl	8008fc0 <get_fattime>
 800b810:	4603      	mov	r3, r0
 800b812:	4619      	mov	r1, r3
 800b814:	4620      	mov	r0, r4
 800b816:	f7ff fc8c 	bl	800b132 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81c:	3316      	adds	r3, #22
 800b81e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b820:	b292      	uxth	r2, r2
 800b822:	4611      	mov	r1, r2
 800b824:	4618      	mov	r0, r3
 800b826:	f7ff fc69 	bl	800b0fc <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800b82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82c:	3324      	adds	r3, #36	; 0x24
 800b82e:	2280      	movs	r2, #128	; 0x80
 800b830:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800b832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b834:	3326      	adds	r3, #38	; 0x26
 800b836:	2229      	movs	r2, #41	; 0x29
 800b838:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800b83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83c:	332b      	adds	r3, #43	; 0x2b
 800b83e:	2213      	movs	r2, #19
 800b840:	4960      	ldr	r1, [pc, #384]	; (800b9c4 <f_mkfs+0x738>)
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fca1 	bl	800b18a <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800b848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b84e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff fc52 	bl	800b0fc <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800b858:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b85c:	2301      	movs	r3, #1
 800b85e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b860:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b862:	f7ff fc0d 	bl	800b080 <disk_write>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <f_mkfs+0x5e4>
 800b86c:	2301      	movs	r3, #1
 800b86e:	e157      	b.n	800bb20 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800b870:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b874:	2b03      	cmp	r3, #3
 800b876:	d140      	bne.n	800b8fa <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	1d9a      	adds	r2, r3, #6
 800b87c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b880:	2301      	movs	r3, #1
 800b882:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b884:	f7ff fbfc 	bl	800b080 <disk_write>
			mem_set(buf, 0, ss);
 800b888:	8b7b      	ldrh	r3, [r7, #26]
 800b88a:	461a      	mov	r2, r3
 800b88c:	2100      	movs	r1, #0
 800b88e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b890:	f7ff fc9c 	bl	800b1cc <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800b894:	494c      	ldr	r1, [pc, #304]	; (800b9c8 <f_mkfs+0x73c>)
 800b896:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b898:	f7ff fc4b 	bl	800b132 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800b89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b8a2:	494a      	ldr	r1, [pc, #296]	; (800b9cc <f_mkfs+0x740>)
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7ff fc44 	bl	800b132 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800b8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7ff fc3b 	bl	800b132 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800b8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b8c2:	2102      	movs	r1, #2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7ff fc34 	bl	800b132 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800b8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b8d0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff fc11 	bl	800b0fc <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	1dda      	adds	r2, r3, #7
 800b8de:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8e6:	f7ff fbcb 	bl	800b080 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8f6:	f7ff fbc3 	bl	800b080 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800b8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b900:	f7ff fc64 	bl	800b1cc <mem_set>
		sect = b_fat;		/* FAT start sector */
 800b904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b906:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b908:	2300      	movs	r3, #0
 800b90a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b90c:	e04b      	b.n	800b9a6 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800b90e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b912:	2b03      	cmp	r3, #3
 800b914:	d113      	bne.n	800b93e <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800b916:	f06f 0107 	mvn.w	r1, #7
 800b91a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b91c:	f7ff fc09 	bl	800b132 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800b920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b922:	3304      	adds	r3, #4
 800b924:	f04f 31ff 	mov.w	r1, #4294967295
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff fc02 	bl	800b132 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800b92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b930:	3308      	adds	r3, #8
 800b932:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff fbfb 	bl	800b132 <st_dword>
 800b93c:	e00b      	b.n	800b956 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800b93e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <f_mkfs+0x6be>
 800b946:	4b22      	ldr	r3, [pc, #136]	; (800b9d0 <f_mkfs+0x744>)
 800b948:	e001      	b.n	800b94e <f_mkfs+0x6c2>
 800b94a:	f06f 0307 	mvn.w	r3, #7
 800b94e:	4619      	mov	r1, r3
 800b950:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b952:	f7ff fbee 	bl	800b132 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b958:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b95a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	4293      	cmp	r3, r2
 800b960:	bf28      	it	cs
 800b962:	4613      	movcs	r3, r2
 800b964:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b966:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b96a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b96c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b96e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b970:	f7ff fb86 	bl	800b080 <disk_write>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <f_mkfs+0x6f2>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e0d0      	b.n	800bb20 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800b97e:	8b7b      	ldrh	r3, [r7, #26]
 800b980:	461a      	mov	r2, r3
 800b982:	2100      	movs	r1, #0
 800b984:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b986:	f7ff fc21 	bl	800b1cc <mem_set>
				sect += n; nsect -= n;
 800b98a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b98c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b98e:	4413      	add	r3, r2
 800b990:	667b      	str	r3, [r7, #100]	; 0x64
 800b992:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800b99a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1dc      	bne.n	800b95a <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d3af      	bcc.n	800b90e <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800b9ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d10e      	bne.n	800b9d4 <f_mkfs+0x748>
 800b9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b8:	e00d      	b.n	800b9d6 <f_mkfs+0x74a>
 800b9ba:	bf00      	nop
 800b9bc:	0800fffc 	.word	0x0800fffc
 800b9c0:	08010008 	.word	0x08010008
 800b9c4:	0801001c 	.word	0x0801001c
 800b9c8:	41615252 	.word	0x41615252
 800b9cc:	61417272 	.word	0x61417272
 800b9d0:	00fffff8 	.word	0x00fffff8
 800b9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9d6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800b9d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	bf28      	it	cs
 800b9e0:	4613      	movcs	r3, r2
 800b9e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b9e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b9e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b9ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9ee:	f7ff fb47 	bl	800b080 <disk_write>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <f_mkfs+0x770>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e091      	b.n	800bb20 <f_mkfs+0x894>
			sect += n; nsect -= n;
 800b9fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b9fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba00:	4413      	add	r3, r2
 800ba02:	667b      	str	r3, [r7, #100]	; 0x64
 800ba04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800ba0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e2      	bne.n	800b9d8 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800ba12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d103      	bne.n	800ba22 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ba20:	e010      	b.n	800ba44 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba28:	d303      	bcc.n	800ba32 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800ba2a:	2306      	movs	r3, #6
 800ba2c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ba30:	e008      	b.n	800ba44 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ba32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d101      	bne.n	800ba3e <f_mkfs+0x7b2>
 800ba3a:	2304      	movs	r3, #4
 800ba3c:	e000      	b.n	800ba40 <f_mkfs+0x7b4>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d15b      	bne.n	800bb06 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800ba4e:	8b7b      	ldrh	r3, [r7, #26]
 800ba50:	461a      	mov	r2, r3
 800ba52:	2100      	movs	r1, #0
 800ba54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba56:	f7ff fbb9 	bl	800b1cc <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ba5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fb49 	bl	800b0fc <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ba6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ba70:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	2200      	movs	r2, #0
 800ba76:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	3302      	adds	r3, #2
 800ba84:	2201      	movs	r2, #1
 800ba86:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	3303      	adds	r3, #3
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	3304      	adds	r3, #4
 800ba94:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ba98:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	441a      	add	r2, r3
 800baa0:	4b21      	ldr	r3, [pc, #132]	; (800bb28 <f_mkfs+0x89c>)
 800baa2:	fba3 1302 	umull	r1, r3, r3, r2
 800baa6:	1ad2      	subs	r2, r2, r3
 800baa8:	0852      	lsrs	r2, r2, #1
 800baaa:	4413      	add	r3, r2
 800baac:	0b5b      	lsrs	r3, r3, #13
 800baae:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	3305      	adds	r3, #5
 800bab4:	22fe      	movs	r2, #254	; 0xfe
 800bab6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800bab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baba:	089b      	lsrs	r3, r3, #2
 800babc:	b2da      	uxtb	r2, r3
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	3306      	adds	r3, #6
 800bac2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	3307      	adds	r3, #7
 800bace:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bad0:	b2d2      	uxtb	r2, r2
 800bad2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	3308      	adds	r3, #8
 800bad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff fb29 	bl	800b132 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	330c      	adds	r3, #12
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	4611      	mov	r1, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f7ff fb22 	bl	800b132 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800baee:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800baf2:	2301      	movs	r3, #1
 800baf4:	2200      	movs	r2, #0
 800baf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800baf8:	f7ff fac2 	bl	800b080 <disk_write>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <f_mkfs+0x87a>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e00c      	b.n	800bb20 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800bb06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fad6 	bl	800b0c0 <disk_ioctl>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <f_mkfs+0x892>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e000      	b.n	800bb20 <f_mkfs+0x894>

	return FR_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3774      	adds	r7, #116	; 0x74
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd90      	pop	{r4, r7, pc}
 800bb28:	0515565b 	.word	0x0515565b

0800bb2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	4613      	mov	r3, r2
 800bb38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb42:	4b1f      	ldr	r3, [pc, #124]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb44:	7a5b      	ldrb	r3, [r3, #9]
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d131      	bne.n	800bbb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb4c:	4b1c      	ldr	r3, [pc, #112]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb4e:	7a5b      	ldrb	r3, [r3, #9]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	461a      	mov	r2, r3
 800bb54:	4b1a      	ldr	r3, [pc, #104]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb56:	2100      	movs	r1, #0
 800bb58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb5a:	4b19      	ldr	r3, [pc, #100]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb5c:	7a5b      	ldrb	r3, [r3, #9]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	4a17      	ldr	r2, [pc, #92]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb6a:	4b15      	ldr	r3, [pc, #84]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb6c:	7a5b      	ldrb	r3, [r3, #9]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	461a      	mov	r2, r3
 800bb72:	4b13      	ldr	r3, [pc, #76]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb74:	4413      	add	r3, r2
 800bb76:	79fa      	ldrb	r2, [r7, #7]
 800bb78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb7a:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb7c:	7a5b      	ldrb	r3, [r3, #9]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	1c5a      	adds	r2, r3, #1
 800bb82:	b2d1      	uxtb	r1, r2
 800bb84:	4a0e      	ldr	r2, [pc, #56]	; (800bbc0 <FATFS_LinkDriverEx+0x94>)
 800bb86:	7251      	strb	r1, [r2, #9]
 800bb88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb8a:	7dbb      	ldrb	r3, [r7, #22]
 800bb8c:	3330      	adds	r3, #48	; 0x30
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	3301      	adds	r3, #1
 800bb98:	223a      	movs	r2, #58	; 0x3a
 800bb9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	3302      	adds	r3, #2
 800bba0:	222f      	movs	r2, #47	; 0x2f
 800bba2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	3303      	adds	r3, #3
 800bba8:	2200      	movs	r2, #0
 800bbaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bbb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	371c      	adds	r7, #28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20000890 	.word	0x20000890

0800bbc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bbce:	2200      	movs	r2, #0
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff ffaa 	bl	800bb2c <FATFS_LinkDriverEx>
 800bbd8:	4603      	mov	r3, r0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <__NVIC_SetPriority>:
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	6039      	str	r1, [r7, #0]
 800bbee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	db0a      	blt.n	800bc0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	490c      	ldr	r1, [pc, #48]	; (800bc30 <__NVIC_SetPriority+0x4c>)
 800bbfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc02:	0112      	lsls	r2, r2, #4
 800bc04:	b2d2      	uxtb	r2, r2
 800bc06:	440b      	add	r3, r1
 800bc08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bc0c:	e00a      	b.n	800bc24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	4908      	ldr	r1, [pc, #32]	; (800bc34 <__NVIC_SetPriority+0x50>)
 800bc14:	79fb      	ldrb	r3, [r7, #7]
 800bc16:	f003 030f 	and.w	r3, r3, #15
 800bc1a:	3b04      	subs	r3, #4
 800bc1c:	0112      	lsls	r2, r2, #4
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	440b      	add	r3, r1
 800bc22:	761a      	strb	r2, [r3, #24]
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	e000e100 	.word	0xe000e100
 800bc34:	e000ed00 	.word	0xe000ed00

0800bc38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc3c:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <SysTick_Handler+0x1c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc40:	f001 feb2 	bl	800d9a8 <xTaskGetSchedulerState>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d001      	beq.n	800bc4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc4a:	f002 fc9d 	bl	800e588 <xPortSysTickHandler>
  }
}
 800bc4e:	bf00      	nop
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	e000e010 	.word	0xe000e010

0800bc58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	f06f 0004 	mvn.w	r0, #4
 800bc62:	f7ff ffbf 	bl	800bbe4 <__NVIC_SetPriority>
#endif
}
 800bc66:	bf00      	nop
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc72:	f3ef 8305 	mrs	r3, IPSR
 800bc76:	603b      	str	r3, [r7, #0]
  return(result);
 800bc78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc7e:	f06f 0305 	mvn.w	r3, #5
 800bc82:	607b      	str	r3, [r7, #4]
 800bc84:	e00c      	b.n	800bca0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc86:	4b0a      	ldr	r3, [pc, #40]	; (800bcb0 <osKernelInitialize+0x44>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d105      	bne.n	800bc9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc8e:	4b08      	ldr	r3, [pc, #32]	; (800bcb0 <osKernelInitialize+0x44>)
 800bc90:	2201      	movs	r2, #1
 800bc92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	607b      	str	r3, [r7, #4]
 800bc98:	e002      	b.n	800bca0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bca0:	687b      	ldr	r3, [r7, #4]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	2000089c 	.word	0x2000089c

0800bcb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcba:	f3ef 8305 	mrs	r3, IPSR
 800bcbe:	603b      	str	r3, [r7, #0]
  return(result);
 800bcc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d003      	beq.n	800bcce <osKernelStart+0x1a>
    stat = osErrorISR;
 800bcc6:	f06f 0305 	mvn.w	r3, #5
 800bcca:	607b      	str	r3, [r7, #4]
 800bccc:	e010      	b.n	800bcf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bcce:	4b0b      	ldr	r3, [pc, #44]	; (800bcfc <osKernelStart+0x48>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d109      	bne.n	800bcea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bcd6:	f7ff ffbf 	bl	800bc58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bcda:	4b08      	ldr	r3, [pc, #32]	; (800bcfc <osKernelStart+0x48>)
 800bcdc:	2202      	movs	r2, #2
 800bcde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bce0:	f001 fa1a 	bl	800d118 <vTaskStartScheduler>
      stat = osOK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	607b      	str	r3, [r7, #4]
 800bce8:	e002      	b.n	800bcf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bcea:	f04f 33ff 	mov.w	r3, #4294967295
 800bcee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bcf0:	687b      	ldr	r3, [r7, #4]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	2000089c 	.word	0x2000089c

0800bd00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08e      	sub	sp, #56	; 0x38
 800bd04:	af04      	add	r7, sp, #16
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd10:	f3ef 8305 	mrs	r3, IPSR
 800bd14:	617b      	str	r3, [r7, #20]
  return(result);
 800bd16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d17f      	bne.n	800be1c <osThreadNew+0x11c>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d07c      	beq.n	800be1c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800bd22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd26:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bd28:	2318      	movs	r3, #24
 800bd2a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bd30:	f04f 33ff 	mov.w	r3, #4294967295
 800bd34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d045      	beq.n	800bdc8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <osThreadNew+0x4a>
        name = attr->name;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d002      	beq.n	800bd58 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d008      	beq.n	800bd70 <osThreadNew+0x70>
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	2b38      	cmp	r3, #56	; 0x38
 800bd62:	d805      	bhi.n	800bd70 <osThreadNew+0x70>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <osThreadNew+0x74>
        return (NULL);
 800bd70:	2300      	movs	r3, #0
 800bd72:	e054      	b.n	800be1e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	695b      	ldr	r3, [r3, #20]
 800bd80:	089b      	lsrs	r3, r3, #2
 800bd82:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00e      	beq.n	800bdaa <osThreadNew+0xaa>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	2b6b      	cmp	r3, #107	; 0x6b
 800bd92:	d90a      	bls.n	800bdaa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d006      	beq.n	800bdaa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <osThreadNew+0xaa>
        mem = 1;
 800bda4:	2301      	movs	r3, #1
 800bda6:	61bb      	str	r3, [r7, #24]
 800bda8:	e010      	b.n	800bdcc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10c      	bne.n	800bdcc <osThreadNew+0xcc>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d108      	bne.n	800bdcc <osThreadNew+0xcc>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d104      	bne.n	800bdcc <osThreadNew+0xcc>
          mem = 0;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61bb      	str	r3, [r7, #24]
 800bdc6:	e001      	b.n	800bdcc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d110      	bne.n	800bdf4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdda:	9202      	str	r2, [sp, #8]
 800bddc:	9301      	str	r3, [sp, #4]
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6a3a      	ldr	r2, [r7, #32]
 800bde6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 feb9 	bl	800cb60 <xTaskCreateStatic>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	613b      	str	r3, [r7, #16]
 800bdf2:	e013      	b.n	800be1c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d110      	bne.n	800be1c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	f107 0310 	add.w	r3, r7, #16
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 ff04 	bl	800cc1a <xTaskCreate>
 800be12:	4603      	mov	r3, r0
 800be14:	2b01      	cmp	r3, #1
 800be16:	d001      	beq.n	800be1c <osThreadNew+0x11c>
            hTask = NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be1c:	693b      	ldr	r3, [r7, #16]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3728      	adds	r7, #40	; 0x28
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be2e:	f3ef 8305 	mrs	r3, IPSR
 800be32:	60bb      	str	r3, [r7, #8]
  return(result);
 800be34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <osDelay+0x1c>
    stat = osErrorISR;
 800be3a:	f06f 0305 	mvn.w	r3, #5
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	e007      	b.n	800be52 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <osDelay+0x2c>
      vTaskDelay(ticks);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f001 f829 	bl	800cea4 <vTaskDelay>
    }
  }

  return (stat);
 800be52:	68fb      	ldr	r3, [r7, #12]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	; 0x28
 800be60:	af02      	add	r7, sp, #8
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be6c:	f3ef 8305 	mrs	r3, IPSR
 800be70:	613b      	str	r3, [r7, #16]
  return(result);
 800be72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800be74:	2b00      	cmp	r3, #0
 800be76:	d15f      	bne.n	800bf38 <osMessageQueueNew+0xdc>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d05c      	beq.n	800bf38 <osMessageQueueNew+0xdc>
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d059      	beq.n	800bf38 <osMessageQueueNew+0xdc>
    mem = -1;
 800be84:	f04f 33ff 	mov.w	r3, #4294967295
 800be88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d029      	beq.n	800bee4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d012      	beq.n	800bebe <osMessageQueueNew+0x62>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	2b4f      	cmp	r3, #79	; 0x4f
 800be9e:	d90e      	bls.n	800bebe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00a      	beq.n	800bebe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	695a      	ldr	r2, [r3, #20]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	68b9      	ldr	r1, [r7, #8]
 800beb0:	fb01 f303 	mul.w	r3, r1, r3
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d302      	bcc.n	800bebe <osMessageQueueNew+0x62>
        mem = 1;
 800beb8:	2301      	movs	r3, #1
 800beba:	61bb      	str	r3, [r7, #24]
 800bebc:	e014      	b.n	800bee8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d110      	bne.n	800bee8 <osMessageQueueNew+0x8c>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10c      	bne.n	800bee8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d108      	bne.n	800bee8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d104      	bne.n	800bee8 <osMessageQueueNew+0x8c>
          mem = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	61bb      	str	r3, [r7, #24]
 800bee2:	e001      	b.n	800bee8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d10b      	bne.n	800bf06 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691a      	ldr	r2, [r3, #16]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	2100      	movs	r1, #0
 800bef8:	9100      	str	r1, [sp, #0]
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f000 f971 	bl	800c1e4 <xQueueGenericCreateStatic>
 800bf02:	61f8      	str	r0, [r7, #28]
 800bf04:	e008      	b.n	800bf18 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d105      	bne.n	800bf18 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	68b9      	ldr	r1, [r7, #8]
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f000 f9df 	bl	800c2d4 <xQueueGenericCreate>
 800bf16:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00c      	beq.n	800bf38 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d003      	beq.n	800bf2c <osMessageQueueNew+0xd0>
        name = attr->name;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	617b      	str	r3, [r7, #20]
 800bf2a:	e001      	b.n	800bf30 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bf30:	6979      	ldr	r1, [r7, #20]
 800bf32:	69f8      	ldr	r0, [r7, #28]
 800bf34:	f000 fdb6 	bl	800caa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bf38:	69fb      	ldr	r3, [r7, #28]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	4a07      	ldr	r2, [pc, #28]	; (800bf70 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	4a06      	ldr	r2, [pc, #24]	; (800bf74 <vApplicationGetIdleTaskMemory+0x30>)
 800bf5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf62:	601a      	str	r2, [r3, #0]
}
 800bf64:	bf00      	nop
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	200008a0 	.word	0x200008a0
 800bf74:	2000090c 	.word	0x2000090c

0800bf78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	4a07      	ldr	r2, [pc, #28]	; (800bfa4 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	4a06      	ldr	r2, [pc, #24]	; (800bfa8 <vApplicationGetTimerTaskMemory+0x30>)
 800bf8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf96:	601a      	str	r2, [r3, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	20000d0c 	.word	0x20000d0c
 800bfa8:	20000d78 	.word	0x20000d78

0800bfac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f103 0208 	add.w	r2, r3, #8
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f103 0208 	add.w	r2, r3, #8
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f103 0208 	add.w	r2, r3, #8
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bffa:	bf00      	nop
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c006:	b480      	push	{r7}
 800c008:	b085      	sub	sp, #20
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	601a      	str	r2, [r3, #0]
}
 800c042:	bf00      	nop
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c04e:	b480      	push	{r7}
 800c050:	b085      	sub	sp, #20
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c064:	d103      	bne.n	800c06e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	e00c      	b.n	800c088 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3308      	adds	r3, #8
 800c072:	60fb      	str	r3, [r7, #12]
 800c074:	e002      	b.n	800c07c <vListInsert+0x2e>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	429a      	cmp	r2, r3
 800c086:	d2f6      	bcs.n	800c076 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	1c5a      	adds	r2, r3, #1
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	601a      	str	r2, [r3, #0]
}
 800c0b4:	bf00      	nop
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	6892      	ldr	r2, [r2, #8]
 800c0d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	6852      	ldr	r2, [r2, #4]
 800c0e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d103      	bne.n	800c0f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	689a      	ldr	r2, [r3, #8]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	1e5a      	subs	r2, r3, #1
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c13e:	f002 f991 	bl	800e464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c14a:	68f9      	ldr	r1, [r7, #12]
 800c14c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c14e:	fb01 f303 	mul.w	r3, r1, r3
 800c152:	441a      	add	r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16e:	3b01      	subs	r3, #1
 800c170:	68f9      	ldr	r1, [r7, #12]
 800c172:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c174:	fb01 f303 	mul.w	r3, r1, r3
 800c178:	441a      	add	r2, r3
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	22ff      	movs	r2, #255	; 0xff
 800c182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	22ff      	movs	r2, #255	; 0xff
 800c18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d114      	bne.n	800c1be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d01a      	beq.n	800c1d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3310      	adds	r3, #16
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f001 fa43 	bl	800d62c <xTaskRemoveFromEventList>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d012      	beq.n	800c1d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1ac:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <xQueueGenericReset+0xcc>)
 800c1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	e009      	b.n	800c1d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3310      	adds	r3, #16
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff fef2 	bl	800bfac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3324      	adds	r3, #36	; 0x24
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7ff feed 	bl	800bfac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c1d2:	f002 f977 	bl	800e4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c1d6:	2301      	movs	r3, #1
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	e000ed04 	.word	0xe000ed04

0800c1e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08e      	sub	sp, #56	; 0x38
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <xQueueGenericCreateStatic+0x52>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <xQueueGenericCreateStatic+0x56>
 800c236:	2301      	movs	r3, #1
 800c238:	e000      	b.n	800c23c <xQueueGenericCreateStatic+0x58>
 800c23a:	2300      	movs	r3, #0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	623b      	str	r3, [r7, #32]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <xQueueGenericCreateStatic+0x7e>
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <xQueueGenericCreateStatic+0x82>
 800c262:	2301      	movs	r3, #1
 800c264:	e000      	b.n	800c268 <xQueueGenericCreateStatic+0x84>
 800c266:	2300      	movs	r3, #0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10a      	bne.n	800c282 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	61fb      	str	r3, [r7, #28]
}
 800c27e:	bf00      	nop
 800c280:	e7fe      	b.n	800c280 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c282:	2350      	movs	r3, #80	; 0x50
 800c284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2b50      	cmp	r3, #80	; 0x50
 800c28a:	d00a      	beq.n	800c2a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	61bb      	str	r3, [r7, #24]
}
 800c29e:	bf00      	nop
 800c2a0:	e7fe      	b.n	800c2a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00d      	beq.n	800c2ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	68b9      	ldr	r1, [r7, #8]
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f000 f83f 	bl	800c348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3730      	adds	r7, #48	; 0x30
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08a      	sub	sp, #40	; 0x28
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10a      	bne.n	800c2fe <xQueueGenericCreate+0x2a>
	__asm volatile
 800c2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	613b      	str	r3, [r7, #16]
}
 800c2fa:	bf00      	nop
 800c2fc:	e7fe      	b.n	800c2fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	fb02 f303 	mul.w	r3, r2, r3
 800c306:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	3350      	adds	r3, #80	; 0x50
 800c30c:	4618      	mov	r0, r3
 800c30e:	f002 f9cb 	bl	800e6a8 <pvPortMalloc>
 800c312:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d011      	beq.n	800c33e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	3350      	adds	r3, #80	; 0x50
 800c322:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c32c:	79fa      	ldrb	r2, [r7, #7]
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4613      	mov	r3, r2
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f000 f805 	bl	800c348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c33e:	69bb      	ldr	r3, [r7, #24]
	}
 800c340:	4618      	mov	r0, r3
 800c342:	3720      	adds	r7, #32
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d103      	bne.n	800c364 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	69ba      	ldr	r2, [r7, #24]
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	e002      	b.n	800c36a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c376:	2101      	movs	r1, #1
 800c378:	69b8      	ldr	r0, [r7, #24]
 800c37a:	f7ff fecb 	bl	800c114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	78fa      	ldrb	r2, [r7, #3]
 800c382:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
	...

0800c390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b08e      	sub	sp, #56	; 0x38
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xQueueGenericSend+0x32>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d103      	bne.n	800c3d0 <xQueueGenericSend+0x40>
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <xQueueGenericSend+0x44>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e000      	b.n	800c3d6 <xQueueGenericSend+0x46>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10a      	bne.n	800c3f0 <xQueueGenericSend+0x60>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3ec:	bf00      	nop
 800c3ee:	e7fe      	b.n	800c3ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d103      	bne.n	800c3fe <xQueueGenericSend+0x6e>
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d101      	bne.n	800c402 <xQueueGenericSend+0x72>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <xQueueGenericSend+0x74>
 800c402:	2300      	movs	r3, #0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10a      	bne.n	800c41e <xQueueGenericSend+0x8e>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	623b      	str	r3, [r7, #32]
}
 800c41a:	bf00      	nop
 800c41c:	e7fe      	b.n	800c41c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c41e:	f001 fac3 	bl	800d9a8 <xTaskGetSchedulerState>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <xQueueGenericSend+0x9e>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <xQueueGenericSend+0xa2>
 800c42e:	2301      	movs	r3, #1
 800c430:	e000      	b.n	800c434 <xQueueGenericSend+0xa4>
 800c432:	2300      	movs	r3, #0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <xQueueGenericSend+0xbe>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	61fb      	str	r3, [r7, #28]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c44e:	f002 f809 	bl	800e464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d302      	bcc.n	800c464 <xQueueGenericSend+0xd4>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b02      	cmp	r3, #2
 800c462:	d129      	bne.n	800c4b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c46a:	f000 fa0b 	bl	800c884 <prvCopyDataToQueue>
 800c46e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c474:	2b00      	cmp	r3, #0
 800c476:	d010      	beq.n	800c49a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	3324      	adds	r3, #36	; 0x24
 800c47c:	4618      	mov	r0, r3
 800c47e:	f001 f8d5 	bl	800d62c <xTaskRemoveFromEventList>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d013      	beq.n	800c4b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c488:	4b3f      	ldr	r3, [pc, #252]	; (800c588 <xQueueGenericSend+0x1f8>)
 800c48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	e00a      	b.n	800c4b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d007      	beq.n	800c4b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c4a0:	4b39      	ldr	r3, [pc, #228]	; (800c588 <xQueueGenericSend+0x1f8>)
 800c4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c4b0:	f002 f808 	bl	800e4c4 <vPortExitCritical>
				return pdPASS;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e063      	b.n	800c580 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4be:	f002 f801 	bl	800e4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e05c      	b.n	800c580 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d106      	bne.n	800c4da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4cc:	f107 0314 	add.w	r3, r7, #20
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f001 f90f 	bl	800d6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4da:	f001 fff3 	bl	800e4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4de:	f000 fe81 	bl	800d1e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4e2:	f001 ffbf 	bl	800e464 <vPortEnterCritical>
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4ec:	b25b      	sxtb	r3, r3
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f2:	d103      	bne.n	800c4fc <xQueueGenericSend+0x16c>
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c502:	b25b      	sxtb	r3, r3
 800c504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c508:	d103      	bne.n	800c512 <xQueueGenericSend+0x182>
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c512:	f001 ffd7 	bl	800e4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c516:	1d3a      	adds	r2, r7, #4
 800c518:	f107 0314 	add.w	r3, r7, #20
 800c51c:	4611      	mov	r1, r2
 800c51e:	4618      	mov	r0, r3
 800c520:	f001 f8fe 	bl	800d720 <xTaskCheckForTimeOut>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d124      	bne.n	800c574 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c52a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c52c:	f000 faa2 	bl	800ca74 <prvIsQueueFull>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d018      	beq.n	800c568 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	3310      	adds	r3, #16
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	4611      	mov	r1, r2
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 f824 	bl	800d58c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c546:	f000 fa2d 	bl	800c9a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c54a:	f000 fe59 	bl	800d200 <xTaskResumeAll>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	f47f af7c 	bne.w	800c44e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <xQueueGenericSend+0x1f8>)
 800c558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	e772      	b.n	800c44e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c56a:	f000 fa1b 	bl	800c9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c56e:	f000 fe47 	bl	800d200 <xTaskResumeAll>
 800c572:	e76c      	b.n	800c44e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c576:	f000 fa15 	bl	800c9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c57a:	f000 fe41 	bl	800d200 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c57e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c580:	4618      	mov	r0, r3
 800c582:	3738      	adds	r7, #56	; 0x38
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	e000ed04 	.word	0xe000ed04

0800c58c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b090      	sub	sp, #64	; 0x40
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <xQueueGenericSendFromISR+0x3c>
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d101      	bne.n	800c5cc <xQueueGenericSendFromISR+0x40>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e000      	b.n	800c5ce <xQueueGenericSendFromISR+0x42>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10a      	bne.n	800c5e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d103      	bne.n	800c5f6 <xQueueGenericSendFromISR+0x6a>
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d101      	bne.n	800c5fa <xQueueGenericSendFromISR+0x6e>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e000      	b.n	800c5fc <xQueueGenericSendFromISR+0x70>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10a      	bne.n	800c616 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	623b      	str	r3, [r7, #32]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c616:	f002 f807 	bl	800e628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c61a:	f3ef 8211 	mrs	r2, BASEPRI
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	61fa      	str	r2, [r7, #28]
 800c630:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c632:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c634:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c63e:	429a      	cmp	r2, r3
 800c640:	d302      	bcc.n	800c648 <xQueueGenericSendFromISR+0xbc>
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b02      	cmp	r3, #2
 800c646:	d12f      	bne.n	800c6a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c65e:	f000 f911 	bl	800c884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c662:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66a:	d112      	bne.n	800c692 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	2b00      	cmp	r3, #0
 800c672:	d016      	beq.n	800c6a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	3324      	adds	r3, #36	; 0x24
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 ffd7 	bl	800d62c <xTaskRemoveFromEventList>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00e      	beq.n	800c6a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00b      	beq.n	800c6a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	e007      	b.n	800c6a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c696:	3301      	adds	r3, #1
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	b25a      	sxtb	r2, r3
 800c69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c6a6:	e001      	b.n	800c6ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c6b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3740      	adds	r7, #64	; 0x40
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08c      	sub	sp, #48	; 0x30
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10a      	bne.n	800c6f4 <xQueueReceive+0x30>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	623b      	str	r3, [r7, #32]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d103      	bne.n	800c702 <xQueueReceive+0x3e>
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <xQueueReceive+0x42>
 800c702:	2301      	movs	r3, #1
 800c704:	e000      	b.n	800c708 <xQueueReceive+0x44>
 800c706:	2300      	movs	r3, #0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10a      	bne.n	800c722 <xQueueReceive+0x5e>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	61fb      	str	r3, [r7, #28]
}
 800c71e:	bf00      	nop
 800c720:	e7fe      	b.n	800c720 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c722:	f001 f941 	bl	800d9a8 <xTaskGetSchedulerState>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d102      	bne.n	800c732 <xQueueReceive+0x6e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <xQueueReceive+0x72>
 800c732:	2301      	movs	r3, #1
 800c734:	e000      	b.n	800c738 <xQueueReceive+0x74>
 800c736:	2300      	movs	r3, #0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10a      	bne.n	800c752 <xQueueReceive+0x8e>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	61bb      	str	r3, [r7, #24]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c752:	f001 fe87 	bl	800e464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d01f      	beq.n	800c7a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c766:	f000 f8f7 	bl	800c958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	1e5a      	subs	r2, r3, #1
 800c76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c770:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00f      	beq.n	800c79a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77c:	3310      	adds	r3, #16
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 ff54 	bl	800d62c <xTaskRemoveFromEventList>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d007      	beq.n	800c79a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c78a:	4b3d      	ldr	r3, [pc, #244]	; (800c880 <xQueueReceive+0x1bc>)
 800c78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c79a:	f001 fe93 	bl	800e4c4 <vPortExitCritical>
				return pdPASS;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e069      	b.n	800c876 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d103      	bne.n	800c7b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7a8:	f001 fe8c 	bl	800e4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	e062      	b.n	800c876 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d106      	bne.n	800c7c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7b6:	f107 0310 	add.w	r3, r7, #16
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 ff9a 	bl	800d6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7c4:	f001 fe7e 	bl	800e4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7c8:	f000 fd0c 	bl	800d1e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7cc:	f001 fe4a 	bl	800e464 <vPortEnterCritical>
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7d6:	b25b      	sxtb	r3, r3
 800c7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7dc:	d103      	bne.n	800c7e6 <xQueueReceive+0x122>
 800c7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ec:	b25b      	sxtb	r3, r3
 800c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f2:	d103      	bne.n	800c7fc <xQueueReceive+0x138>
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7fc:	f001 fe62 	bl	800e4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c800:	1d3a      	adds	r2, r7, #4
 800c802:	f107 0310 	add.w	r3, r7, #16
 800c806:	4611      	mov	r1, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 ff89 	bl	800d720 <xTaskCheckForTimeOut>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d123      	bne.n	800c85c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c816:	f000 f917 	bl	800ca48 <prvIsQueueEmpty>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d017      	beq.n	800c850 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	3324      	adds	r3, #36	; 0x24
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	4611      	mov	r1, r2
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 feaf 	bl	800d58c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c830:	f000 f8b8 	bl	800c9a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c834:	f000 fce4 	bl	800d200 <xTaskResumeAll>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d189      	bne.n	800c752 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c83e:	4b10      	ldr	r3, [pc, #64]	; (800c880 <xQueueReceive+0x1bc>)
 800c840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c844:	601a      	str	r2, [r3, #0]
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	e780      	b.n	800c752 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c852:	f000 f8a7 	bl	800c9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c856:	f000 fcd3 	bl	800d200 <xTaskResumeAll>
 800c85a:	e77a      	b.n	800c752 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85e:	f000 f8a1 	bl	800c9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c862:	f000 fccd 	bl	800d200 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c868:	f000 f8ee 	bl	800ca48 <prvIsQueueEmpty>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f43f af6f 	beq.w	800c752 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c876:	4618      	mov	r0, r3
 800c878:	3730      	adds	r7, #48	; 0x30
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	e000ed04 	.word	0xe000ed04

0800c884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c890:	2300      	movs	r3, #0
 800c892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10d      	bne.n	800c8be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d14d      	bne.n	800c946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f001 f898 	bl	800d9e4 <xTaskPriorityDisinherit>
 800c8b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	609a      	str	r2, [r3, #8]
 800c8bc:	e043      	b.n	800c946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d119      	bne.n	800c8f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6858      	ldr	r0, [r3, #4]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	68b9      	ldr	r1, [r7, #8]
 800c8d0:	f002 fe1e 	bl	800f510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8dc:	441a      	add	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d32b      	bcc.n	800c946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	605a      	str	r2, [r3, #4]
 800c8f6:	e026      	b.n	800c946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68d8      	ldr	r0, [r3, #12]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c900:	461a      	mov	r2, r3
 800c902:	68b9      	ldr	r1, [r7, #8]
 800c904:	f002 fe04 	bl	800f510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	68da      	ldr	r2, [r3, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c910:	425b      	negs	r3, r3
 800c912:	441a      	add	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	429a      	cmp	r2, r3
 800c922:	d207      	bcs.n	800c934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92c:	425b      	negs	r3, r3
 800c92e:	441a      	add	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b02      	cmp	r3, #2
 800c938:	d105      	bne.n	800c946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	3b01      	subs	r3, #1
 800c944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c94e:	697b      	ldr	r3, [r7, #20]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d018      	beq.n	800c99c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68da      	ldr	r2, [r3, #12]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c972:	441a      	add	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68da      	ldr	r2, [r3, #12]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	429a      	cmp	r2, r3
 800c982:	d303      	bcc.n	800c98c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68d9      	ldr	r1, [r3, #12]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	461a      	mov	r2, r3
 800c996:	6838      	ldr	r0, [r7, #0]
 800c998:	f002 fdba 	bl	800f510 <memcpy>
	}
}
 800c99c:	bf00      	nop
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9ac:	f001 fd5a 	bl	800e464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9b8:	e011      	b.n	800c9de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d012      	beq.n	800c9e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3324      	adds	r3, #36	; 0x24
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 fe30 	bl	800d62c <xTaskRemoveFromEventList>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9d2:	f000 ff07 	bl	800d7e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9d6:	7bfb      	ldrb	r3, [r7, #15]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dce9      	bgt.n	800c9ba <prvUnlockQueue+0x16>
 800c9e6:	e000      	b.n	800c9ea <prvUnlockQueue+0x46>
					break;
 800c9e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	22ff      	movs	r2, #255	; 0xff
 800c9ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c9f2:	f001 fd67 	bl	800e4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9f6:	f001 fd35 	bl	800e464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca02:	e011      	b.n	800ca28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d012      	beq.n	800ca32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3310      	adds	r3, #16
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 fe0b 	bl	800d62c <xTaskRemoveFromEventList>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca1c:	f000 fee2 	bl	800d7e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	dce9      	bgt.n	800ca04 <prvUnlockQueue+0x60>
 800ca30:	e000      	b.n	800ca34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	22ff      	movs	r2, #255	; 0xff
 800ca38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca3c:	f001 fd42 	bl	800e4c4 <vPortExitCritical>
}
 800ca40:	bf00      	nop
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca50:	f001 fd08 	bl	800e464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d102      	bne.n	800ca62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	e001      	b.n	800ca66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca66:	f001 fd2d 	bl	800e4c4 <vPortExitCritical>

	return xReturn;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca7c:	f001 fcf2 	bl	800e464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d102      	bne.n	800ca92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	e001      	b.n	800ca96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca92:	2300      	movs	r3, #0
 800ca94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca96:	f001 fd15 	bl	800e4c4 <vPortExitCritical>

	return xReturn;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800caae:	2300      	movs	r3, #0
 800cab0:	60fb      	str	r3, [r7, #12]
 800cab2:	e014      	b.n	800cade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cab4:	4a0f      	ldr	r2, [pc, #60]	; (800caf4 <vQueueAddToRegistry+0x50>)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10b      	bne.n	800cad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cac0:	490c      	ldr	r1, [pc, #48]	; (800caf4 <vQueueAddToRegistry+0x50>)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	683a      	ldr	r2, [r7, #0]
 800cac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800caca:	4a0a      	ldr	r2, [pc, #40]	; (800caf4 <vQueueAddToRegistry+0x50>)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	4413      	add	r3, r2
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cad6:	e006      	b.n	800cae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3301      	adds	r3, #1
 800cadc:	60fb      	str	r3, [r7, #12]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b07      	cmp	r3, #7
 800cae2:	d9e7      	bls.n	800cab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	20001578 	.word	0x20001578

0800caf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb08:	f001 fcac 	bl	800e464 <vPortEnterCritical>
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb12:	b25b      	sxtb	r3, r3
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb18:	d103      	bne.n	800cb22 <vQueueWaitForMessageRestricted+0x2a>
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb28:	b25b      	sxtb	r3, r3
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d103      	bne.n	800cb38 <vQueueWaitForMessageRestricted+0x40>
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb38:	f001 fcc4 	bl	800e4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d106      	bne.n	800cb52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	3324      	adds	r3, #36	; 0x24
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	68b9      	ldr	r1, [r7, #8]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 fd41 	bl	800d5d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb52:	6978      	ldr	r0, [r7, #20]
 800cb54:	f7ff ff26 	bl	800c9a4 <prvUnlockQueue>
	}
 800cb58:	bf00      	nop
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08e      	sub	sp, #56	; 0x38
 800cb64:	af04      	add	r7, sp, #16
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
 800cb6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10a      	bne.n	800cb8a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	623b      	str	r3, [r7, #32]
}
 800cb86:	bf00      	nop
 800cb88:	e7fe      	b.n	800cb88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10a      	bne.n	800cba6 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	61fb      	str	r3, [r7, #28]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cba6:	236c      	movs	r3, #108	; 0x6c
 800cba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2b6c      	cmp	r3, #108	; 0x6c
 800cbae:	d00a      	beq.n	800cbc6 <xTaskCreateStatic+0x66>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	61bb      	str	r3, [r7, #24]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d01e      	beq.n	800cc0c <xTaskCreateStatic+0xac>
 800cbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d01b      	beq.n	800cc0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9303      	str	r3, [sp, #12]
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	9302      	str	r3, [sp, #8]
 800cbee:	f107 0314 	add.w	r3, r7, #20
 800cbf2:	9301      	str	r3, [sp, #4]
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f000 f850 	bl	800cca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc06:	f000 f8dd 	bl	800cdc4 <prvAddNewTaskToReadyList>
 800cc0a:	e001      	b.n	800cc10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc10:	697b      	ldr	r3, [r7, #20]
	}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	; 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b08c      	sub	sp, #48	; 0x30
 800cc1e:	af04      	add	r7, sp, #16
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	603b      	str	r3, [r7, #0]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc2a:	88fb      	ldrh	r3, [r7, #6]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f001 fd3a 	bl	800e6a8 <pvPortMalloc>
 800cc34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00e      	beq.n	800cc5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc3c:	206c      	movs	r0, #108	; 0x6c
 800cc3e:	f001 fd33 	bl	800e6a8 <pvPortMalloc>
 800cc42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	631a      	str	r2, [r3, #48]	; 0x30
 800cc50:	e005      	b.n	800cc5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc52:	6978      	ldr	r0, [r7, #20]
 800cc54:	f001 fdf4 	bl	800e840 <vPortFree>
 800cc58:	e001      	b.n	800cc5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d017      	beq.n	800cc94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc6c:	88fa      	ldrh	r2, [r7, #6]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	9303      	str	r3, [sp, #12]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	9302      	str	r3, [sp, #8]
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	9301      	str	r3, [sp, #4]
 800cc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68b9      	ldr	r1, [r7, #8]
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f000 f80e 	bl	800cca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc88:	69f8      	ldr	r0, [r7, #28]
 800cc8a:	f000 f89b 	bl	800cdc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	61bb      	str	r3, [r7, #24]
 800cc92:	e002      	b.n	800cc9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc94:	f04f 33ff 	mov.w	r3, #4294967295
 800cc98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
	}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3720      	adds	r7, #32
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	461a      	mov	r2, r3
 800ccbc:	21a5      	movs	r1, #165	; 0xa5
 800ccbe:	f002 fc35 	bl	800f52c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cccc:	3b01      	subs	r3, #1
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	f023 0307 	bic.w	r3, r3, #7
 800ccda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	f003 0307 	and.w	r3, r3, #7
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <prvInitialiseNewTask+0x58>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	617b      	str	r3, [r7, #20]
}
 800ccf8:	bf00      	nop
 800ccfa:	e7fe      	b.n	800ccfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d01f      	beq.n	800cd42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd02:	2300      	movs	r3, #0
 800cd04:	61fb      	str	r3, [r7, #28]
 800cd06:	e012      	b.n	800cd2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	7819      	ldrb	r1, [r3, #0]
 800cd10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	4413      	add	r3, r2
 800cd16:	3334      	adds	r3, #52	; 0x34
 800cd18:	460a      	mov	r2, r1
 800cd1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	4413      	add	r3, r2
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d006      	beq.n	800cd36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	61fb      	str	r3, [r7, #28]
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	2b1d      	cmp	r3, #29
 800cd32:	d9e9      	bls.n	800cd08 <prvInitialiseNewTask+0x64>
 800cd34:	e000      	b.n	800cd38 <prvInitialiseNewTask+0x94>
			{
				break;
 800cd36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800cd40:	e003      	b.n	800cd4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	2b37      	cmp	r3, #55	; 0x37
 800cd4e:	d901      	bls.n	800cd54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd50:	2337      	movs	r3, #55	; 0x37
 800cd52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd5e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	2200      	movs	r2, #0
 800cd64:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	3304      	adds	r3, #4
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff f93e 	bl	800bfec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	3318      	adds	r3, #24
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff f939 	bl	800bfec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	2200      	movs	r2, #0
 800cd94:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	68f9      	ldr	r1, [r7, #12]
 800cda2:	69b8      	ldr	r0, [r7, #24]
 800cda4:	f001 fa2e 	bl	800e204 <pxPortInitialiseStack>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d002      	beq.n	800cdba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdba:	bf00      	nop
 800cdbc:	3720      	adds	r7, #32
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
	...

0800cdc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdcc:	f001 fb4a 	bl	800e464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cdd0:	4b2d      	ldr	r3, [pc, #180]	; (800ce88 <prvAddNewTaskToReadyList+0xc4>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	4a2c      	ldr	r2, [pc, #176]	; (800ce88 <prvAddNewTaskToReadyList+0xc4>)
 800cdd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdda:	4b2c      	ldr	r3, [pc, #176]	; (800ce8c <prvAddNewTaskToReadyList+0xc8>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d109      	bne.n	800cdf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cde2:	4a2a      	ldr	r2, [pc, #168]	; (800ce8c <prvAddNewTaskToReadyList+0xc8>)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cde8:	4b27      	ldr	r3, [pc, #156]	; (800ce88 <prvAddNewTaskToReadyList+0xc4>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d110      	bne.n	800ce12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cdf0:	f000 fd1c 	bl	800d82c <prvInitialiseTaskLists>
 800cdf4:	e00d      	b.n	800ce12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdf6:	4b26      	ldr	r3, [pc, #152]	; (800ce90 <prvAddNewTaskToReadyList+0xcc>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d109      	bne.n	800ce12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdfe:	4b23      	ldr	r3, [pc, #140]	; (800ce8c <prvAddNewTaskToReadyList+0xc8>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d802      	bhi.n	800ce12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce0c:	4a1f      	ldr	r2, [pc, #124]	; (800ce8c <prvAddNewTaskToReadyList+0xc8>)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce12:	4b20      	ldr	r3, [pc, #128]	; (800ce94 <prvAddNewTaskToReadyList+0xd0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3301      	adds	r3, #1
 800ce18:	4a1e      	ldr	r2, [pc, #120]	; (800ce94 <prvAddNewTaskToReadyList+0xd0>)
 800ce1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce1c:	4b1d      	ldr	r3, [pc, #116]	; (800ce94 <prvAddNewTaskToReadyList+0xd0>)
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce28:	4b1b      	ldr	r3, [pc, #108]	; (800ce98 <prvAddNewTaskToReadyList+0xd4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d903      	bls.n	800ce38 <prvAddNewTaskToReadyList+0x74>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	4a18      	ldr	r2, [pc, #96]	; (800ce98 <prvAddNewTaskToReadyList+0xd4>)
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4a15      	ldr	r2, [pc, #84]	; (800ce9c <prvAddNewTaskToReadyList+0xd8>)
 800ce46:	441a      	add	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4610      	mov	r0, r2
 800ce50:	f7ff f8d9 	bl	800c006 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce54:	f001 fb36 	bl	800e4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce58:	4b0d      	ldr	r3, [pc, #52]	; (800ce90 <prvAddNewTaskToReadyList+0xcc>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00e      	beq.n	800ce7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce60:	4b0a      	ldr	r3, [pc, #40]	; (800ce8c <prvAddNewTaskToReadyList+0xc8>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d207      	bcs.n	800ce7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce6e:	4b0c      	ldr	r3, [pc, #48]	; (800cea0 <prvAddNewTaskToReadyList+0xdc>)
 800ce70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce7e:	bf00      	nop
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20001a8c 	.word	0x20001a8c
 800ce8c:	200015b8 	.word	0x200015b8
 800ce90:	20001a98 	.word	0x20001a98
 800ce94:	20001aa8 	.word	0x20001aa8
 800ce98:	20001a94 	.word	0x20001a94
 800ce9c:	200015bc 	.word	0x200015bc
 800cea0:	e000ed04 	.word	0xe000ed04

0800cea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ceac:	2300      	movs	r3, #0
 800ceae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d017      	beq.n	800cee6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ceb6:	4b13      	ldr	r3, [pc, #76]	; (800cf04 <vTaskDelay+0x60>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00a      	beq.n	800ced4 <vTaskDelay+0x30>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	60bb      	str	r3, [r7, #8]
}
 800ced0:	bf00      	nop
 800ced2:	e7fe      	b.n	800ced2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ced4:	f000 f986 	bl	800d1e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ced8:	2100      	movs	r1, #0
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fdf0 	bl	800dac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cee0:	f000 f98e 	bl	800d200 <xTaskResumeAll>
 800cee4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d107      	bne.n	800cefc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ceec:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <vTaskDelay+0x64>)
 800ceee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cefc:	bf00      	nop
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	20001ab4 	.word	0x20001ab4
 800cf08:	e000ed04 	.word	0xe000ed04

0800cf0c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cf14:	f001 faa6 	bl	800e464 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d102      	bne.n	800cf24 <vTaskSuspend+0x18>
 800cf1e:	4b30      	ldr	r3, [pc, #192]	; (800cfe0 <vTaskSuspend+0xd4>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	e000      	b.n	800cf26 <vTaskSuspend+0x1a>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff f8c7 	bl	800c0c0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	3318      	adds	r3, #24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff f8be 	bl	800c0c0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	3304      	adds	r3, #4
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4826      	ldr	r0, [pc, #152]	; (800cfe4 <vTaskSuspend+0xd8>)
 800cf4c:	f7ff f85b 	bl	800c006 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d103      	bne.n	800cf64 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800cf64:	f001 faae 	bl	800e4c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800cf68:	4b1f      	ldr	r3, [pc, #124]	; (800cfe8 <vTaskSuspend+0xdc>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d005      	beq.n	800cf7c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800cf70:	f001 fa78 	bl	800e464 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800cf74:	f000 fcf8 	bl	800d968 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800cf78:	f001 faa4 	bl	800e4c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800cf7c:	4b18      	ldr	r3, [pc, #96]	; (800cfe0 <vTaskSuspend+0xd4>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d127      	bne.n	800cfd6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800cf86:	4b18      	ldr	r3, [pc, #96]	; (800cfe8 <vTaskSuspend+0xdc>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d017      	beq.n	800cfbe <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800cf8e:	4b17      	ldr	r3, [pc, #92]	; (800cfec <vTaskSuspend+0xe0>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00a      	beq.n	800cfac <vTaskSuspend+0xa0>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	60bb      	str	r3, [r7, #8]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800cfac:	4b10      	ldr	r3, [pc, #64]	; (800cff0 <vTaskSuspend+0xe4>)
 800cfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfbc:	e00b      	b.n	800cfd6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800cfbe:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <vTaskSuspend+0xd8>)
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	4b0c      	ldr	r3, [pc, #48]	; (800cff4 <vTaskSuspend+0xe8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d103      	bne.n	800cfd2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800cfca:	4b05      	ldr	r3, [pc, #20]	; (800cfe0 <vTaskSuspend+0xd4>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]
	}
 800cfd0:	e001      	b.n	800cfd6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800cfd2:	f000 fa7d 	bl	800d4d0 <vTaskSwitchContext>
	}
 800cfd6:	bf00      	nop
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	200015b8 	.word	0x200015b8
 800cfe4:	20001a78 	.word	0x20001a78
 800cfe8:	20001a98 	.word	0x20001a98
 800cfec:	20001ab4 	.word	0x20001ab4
 800cff0:	e000ed04 	.word	0xe000ed04
 800cff4:	20001a8c 	.word	0x20001a8c

0800cff8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800cff8:	b480      	push	{r7}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d000:	2300      	movs	r3, #0
 800d002:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10a      	bne.n	800d024 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	60fb      	str	r3, [r7, #12]
}
 800d020:	bf00      	nop
 800d022:	e7fe      	b.n	800d022 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	4a0a      	ldr	r2, [pc, #40]	; (800d054 <prvTaskIsTaskSuspended+0x5c>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d10a      	bne.n	800d044 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d032:	4a09      	ldr	r2, [pc, #36]	; (800d058 <prvTaskIsTaskSuspended+0x60>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d005      	beq.n	800d044 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d101      	bne.n	800d044 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800d040:	2301      	movs	r3, #1
 800d042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d044:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d046:	4618      	mov	r0, r3
 800d048:	371c      	adds	r7, #28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	20001a78 	.word	0x20001a78
 800d058:	20001a4c 	.word	0x20001a4c

0800d05c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10a      	bne.n	800d084 <vTaskResume+0x28>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	60bb      	str	r3, [r7, #8]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d084:	4b20      	ldr	r3, [pc, #128]	; (800d108 <vTaskResume+0xac>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d038      	beq.n	800d100 <vTaskResume+0xa4>
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d035      	beq.n	800d100 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800d094:	f001 f9e6 	bl	800e464 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f7ff ffad 	bl	800cff8 <prvTaskIsTaskSuspended>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d02b      	beq.n	800d0fc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff f809 	bl	800c0c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b2:	4b16      	ldr	r3, [pc, #88]	; (800d10c <vTaskResume+0xb0>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d903      	bls.n	800d0c2 <vTaskResume+0x66>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0be:	4a13      	ldr	r2, [pc, #76]	; (800d10c <vTaskResume+0xb0>)
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	4413      	add	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4a10      	ldr	r2, [pc, #64]	; (800d110 <vTaskResume+0xb4>)
 800d0d0:	441a      	add	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4610      	mov	r0, r2
 800d0da:	f7fe ff94 	bl	800c006 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e2:	4b09      	ldr	r3, [pc, #36]	; (800d108 <vTaskResume+0xac>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d307      	bcc.n	800d0fc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d0ec:	4b09      	ldr	r3, [pc, #36]	; (800d114 <vTaskResume+0xb8>)
 800d0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d0fc:	f001 f9e2 	bl	800e4c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d100:	bf00      	nop
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	200015b8 	.word	0x200015b8
 800d10c:	20001a94 	.word	0x20001a94
 800d110:	200015bc 	.word	0x200015bc
 800d114:	e000ed04 	.word	0xe000ed04

0800d118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08a      	sub	sp, #40	; 0x28
 800d11c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d11e:	2300      	movs	r3, #0
 800d120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d126:	463a      	mov	r2, r7
 800d128:	1d39      	adds	r1, r7, #4
 800d12a:	f107 0308 	add.w	r3, r7, #8
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fe ff08 	bl	800bf44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	9202      	str	r2, [sp, #8]
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	2300      	movs	r3, #0
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	2300      	movs	r3, #0
 800d144:	460a      	mov	r2, r1
 800d146:	4921      	ldr	r1, [pc, #132]	; (800d1cc <vTaskStartScheduler+0xb4>)
 800d148:	4821      	ldr	r0, [pc, #132]	; (800d1d0 <vTaskStartScheduler+0xb8>)
 800d14a:	f7ff fd09 	bl	800cb60 <xTaskCreateStatic>
 800d14e:	4603      	mov	r3, r0
 800d150:	4a20      	ldr	r2, [pc, #128]	; (800d1d4 <vTaskStartScheduler+0xbc>)
 800d152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d154:	4b1f      	ldr	r3, [pc, #124]	; (800d1d4 <vTaskStartScheduler+0xbc>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d15c:	2301      	movs	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	e001      	b.n	800d166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d102      	bne.n	800d172 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d16c:	f000 fcfc 	bl	800db68 <xTimerCreateTimerTask>
 800d170:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d116      	bne.n	800d1a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	613b      	str	r3, [r7, #16]
}
 800d18a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d18c:	4b12      	ldr	r3, [pc, #72]	; (800d1d8 <vTaskStartScheduler+0xc0>)
 800d18e:	f04f 32ff 	mov.w	r2, #4294967295
 800d192:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d194:	4b11      	ldr	r3, [pc, #68]	; (800d1dc <vTaskStartScheduler+0xc4>)
 800d196:	2201      	movs	r2, #1
 800d198:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d19a:	4b11      	ldr	r3, [pc, #68]	; (800d1e0 <vTaskStartScheduler+0xc8>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d1a0:	f001 f8be 	bl	800e320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d1a4:	e00e      	b.n	800d1c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ac:	d10a      	bne.n	800d1c4 <vTaskStartScheduler+0xac>
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	60fb      	str	r3, [r7, #12]
}
 800d1c0:	bf00      	nop
 800d1c2:	e7fe      	b.n	800d1c2 <vTaskStartScheduler+0xaa>
}
 800d1c4:	bf00      	nop
 800d1c6:	3718      	adds	r7, #24
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	08010030 	.word	0x08010030
 800d1d0:	0800d7fd 	.word	0x0800d7fd
 800d1d4:	20001ab0 	.word	0x20001ab0
 800d1d8:	20001aac 	.word	0x20001aac
 800d1dc:	20001a98 	.word	0x20001a98
 800d1e0:	20001a90 	.word	0x20001a90

0800d1e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d1e8:	4b04      	ldr	r3, [pc, #16]	; (800d1fc <vTaskSuspendAll+0x18>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	4a03      	ldr	r2, [pc, #12]	; (800d1fc <vTaskSuspendAll+0x18>)
 800d1f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1f2:	bf00      	nop
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	20001ab4 	.word	0x20001ab4

0800d200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d20e:	4b42      	ldr	r3, [pc, #264]	; (800d318 <xTaskResumeAll+0x118>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10a      	bne.n	800d22c <xTaskResumeAll+0x2c>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	603b      	str	r3, [r7, #0]
}
 800d228:	bf00      	nop
 800d22a:	e7fe      	b.n	800d22a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d22c:	f001 f91a 	bl	800e464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d230:	4b39      	ldr	r3, [pc, #228]	; (800d318 <xTaskResumeAll+0x118>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3b01      	subs	r3, #1
 800d236:	4a38      	ldr	r2, [pc, #224]	; (800d318 <xTaskResumeAll+0x118>)
 800d238:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d23a:	4b37      	ldr	r3, [pc, #220]	; (800d318 <xTaskResumeAll+0x118>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d162      	bne.n	800d308 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d242:	4b36      	ldr	r3, [pc, #216]	; (800d31c <xTaskResumeAll+0x11c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d05e      	beq.n	800d308 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d24a:	e02f      	b.n	800d2ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d24c:	4b34      	ldr	r3, [pc, #208]	; (800d320 <xTaskResumeAll+0x120>)
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3318      	adds	r3, #24
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe ff31 	bl	800c0c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3304      	adds	r3, #4
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe ff2c 	bl	800c0c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26c:	4b2d      	ldr	r3, [pc, #180]	; (800d324 <xTaskResumeAll+0x124>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	d903      	bls.n	800d27c <xTaskResumeAll+0x7c>
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d278:	4a2a      	ldr	r2, [pc, #168]	; (800d324 <xTaskResumeAll+0x124>)
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d280:	4613      	mov	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	4413      	add	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4a27      	ldr	r2, [pc, #156]	; (800d328 <xTaskResumeAll+0x128>)
 800d28a:	441a      	add	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	3304      	adds	r3, #4
 800d290:	4619      	mov	r1, r3
 800d292:	4610      	mov	r0, r2
 800d294:	f7fe feb7 	bl	800c006 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29c:	4b23      	ldr	r3, [pc, #140]	; (800d32c <xTaskResumeAll+0x12c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d302      	bcc.n	800d2ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d2a6:	4b22      	ldr	r3, [pc, #136]	; (800d330 <xTaskResumeAll+0x130>)
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2ac:	4b1c      	ldr	r3, [pc, #112]	; (800d320 <xTaskResumeAll+0x120>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1cb      	bne.n	800d24c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d2ba:	f000 fb55 	bl	800d968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2be:	4b1d      	ldr	r3, [pc, #116]	; (800d334 <xTaskResumeAll+0x134>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d010      	beq.n	800d2ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d2ca:	f000 f847 	bl	800d35c <xTaskIncrementTick>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d002      	beq.n	800d2da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d2d4:	4b16      	ldr	r3, [pc, #88]	; (800d330 <xTaskResumeAll+0x130>)
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1f1      	bne.n	800d2ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d2e6:	4b13      	ldr	r3, [pc, #76]	; (800d334 <xTaskResumeAll+0x134>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2ec:	4b10      	ldr	r3, [pc, #64]	; (800d330 <xTaskResumeAll+0x130>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d009      	beq.n	800d308 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2f8:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <xTaskResumeAll+0x138>)
 800d2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d308:	f001 f8dc 	bl	800e4c4 <vPortExitCritical>

	return xAlreadyYielded;
 800d30c:	68bb      	ldr	r3, [r7, #8]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20001ab4 	.word	0x20001ab4
 800d31c:	20001a8c 	.word	0x20001a8c
 800d320:	20001a4c 	.word	0x20001a4c
 800d324:	20001a94 	.word	0x20001a94
 800d328:	200015bc 	.word	0x200015bc
 800d32c:	200015b8 	.word	0x200015b8
 800d330:	20001aa0 	.word	0x20001aa0
 800d334:	20001a9c 	.word	0x20001a9c
 800d338:	e000ed04 	.word	0xe000ed04

0800d33c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d342:	4b05      	ldr	r3, [pc, #20]	; (800d358 <xTaskGetTickCount+0x1c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d348:	687b      	ldr	r3, [r7, #4]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	20001a90 	.word	0x20001a90

0800d35c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d362:	2300      	movs	r3, #0
 800d364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d366:	4b4f      	ldr	r3, [pc, #316]	; (800d4a4 <xTaskIncrementTick+0x148>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f040 808f 	bne.w	800d48e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d370:	4b4d      	ldr	r3, [pc, #308]	; (800d4a8 <xTaskIncrementTick+0x14c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3301      	adds	r3, #1
 800d376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d378:	4a4b      	ldr	r2, [pc, #300]	; (800d4a8 <xTaskIncrementTick+0x14c>)
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d120      	bne.n	800d3c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d384:	4b49      	ldr	r3, [pc, #292]	; (800d4ac <xTaskIncrementTick+0x150>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00a      	beq.n	800d3a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	603b      	str	r3, [r7, #0]
}
 800d3a0:	bf00      	nop
 800d3a2:	e7fe      	b.n	800d3a2 <xTaskIncrementTick+0x46>
 800d3a4:	4b41      	ldr	r3, [pc, #260]	; (800d4ac <xTaskIncrementTick+0x150>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	4b41      	ldr	r3, [pc, #260]	; (800d4b0 <xTaskIncrementTick+0x154>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a3f      	ldr	r2, [pc, #252]	; (800d4ac <xTaskIncrementTick+0x150>)
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	4a3f      	ldr	r2, [pc, #252]	; (800d4b0 <xTaskIncrementTick+0x154>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	4b3e      	ldr	r3, [pc, #248]	; (800d4b4 <xTaskIncrementTick+0x158>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	4a3d      	ldr	r2, [pc, #244]	; (800d4b4 <xTaskIncrementTick+0x158>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	f000 fad1 	bl	800d968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d3c6:	4b3c      	ldr	r3, [pc, #240]	; (800d4b8 <xTaskIncrementTick+0x15c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d349      	bcc.n	800d464 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3d0:	4b36      	ldr	r3, [pc, #216]	; (800d4ac <xTaskIncrementTick+0x150>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d104      	bne.n	800d3e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3da:	4b37      	ldr	r3, [pc, #220]	; (800d4b8 <xTaskIncrementTick+0x15c>)
 800d3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e0:	601a      	str	r2, [r3, #0]
					break;
 800d3e2:	e03f      	b.n	800d464 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3e4:	4b31      	ldr	r3, [pc, #196]	; (800d4ac <xTaskIncrementTick+0x150>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d203      	bcs.n	800d404 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3fc:	4a2e      	ldr	r2, [pc, #184]	; (800d4b8 <xTaskIncrementTick+0x15c>)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d402:	e02f      	b.n	800d464 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	3304      	adds	r3, #4
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe fe59 	bl	800c0c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d412:	2b00      	cmp	r3, #0
 800d414:	d004      	beq.n	800d420 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	3318      	adds	r3, #24
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fe fe50 	bl	800c0c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d424:	4b25      	ldr	r3, [pc, #148]	; (800d4bc <xTaskIncrementTick+0x160>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d903      	bls.n	800d434 <xTaskIncrementTick+0xd8>
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d430:	4a22      	ldr	r2, [pc, #136]	; (800d4bc <xTaskIncrementTick+0x160>)
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d438:	4613      	mov	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4a1f      	ldr	r2, [pc, #124]	; (800d4c0 <xTaskIncrementTick+0x164>)
 800d442:	441a      	add	r2, r3
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	3304      	adds	r3, #4
 800d448:	4619      	mov	r1, r3
 800d44a:	4610      	mov	r0, r2
 800d44c:	f7fe fddb 	bl	800c006 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d454:	4b1b      	ldr	r3, [pc, #108]	; (800d4c4 <xTaskIncrementTick+0x168>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d3b8      	bcc.n	800d3d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d45e:	2301      	movs	r3, #1
 800d460:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d462:	e7b5      	b.n	800d3d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d464:	4b17      	ldr	r3, [pc, #92]	; (800d4c4 <xTaskIncrementTick+0x168>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46a:	4915      	ldr	r1, [pc, #84]	; (800d4c0 <xTaskIncrementTick+0x164>)
 800d46c:	4613      	mov	r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	4413      	add	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	440b      	add	r3, r1
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d901      	bls.n	800d480 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d480:	4b11      	ldr	r3, [pc, #68]	; (800d4c8 <xTaskIncrementTick+0x16c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d007      	beq.n	800d498 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d488:	2301      	movs	r3, #1
 800d48a:	617b      	str	r3, [r7, #20]
 800d48c:	e004      	b.n	800d498 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d48e:	4b0f      	ldr	r3, [pc, #60]	; (800d4cc <xTaskIncrementTick+0x170>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	3301      	adds	r3, #1
 800d494:	4a0d      	ldr	r2, [pc, #52]	; (800d4cc <xTaskIncrementTick+0x170>)
 800d496:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d498:	697b      	ldr	r3, [r7, #20]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20001ab4 	.word	0x20001ab4
 800d4a8:	20001a90 	.word	0x20001a90
 800d4ac:	20001a44 	.word	0x20001a44
 800d4b0:	20001a48 	.word	0x20001a48
 800d4b4:	20001aa4 	.word	0x20001aa4
 800d4b8:	20001aac 	.word	0x20001aac
 800d4bc:	20001a94 	.word	0x20001a94
 800d4c0:	200015bc 	.word	0x200015bc
 800d4c4:	200015b8 	.word	0x200015b8
 800d4c8:	20001aa0 	.word	0x20001aa0
 800d4cc:	20001a9c 	.word	0x20001a9c

0800d4d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4d6:	4b28      	ldr	r3, [pc, #160]	; (800d578 <vTaskSwitchContext+0xa8>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d003      	beq.n	800d4e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d4de:	4b27      	ldr	r3, [pc, #156]	; (800d57c <vTaskSwitchContext+0xac>)
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4e4:	e041      	b.n	800d56a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d4e6:	4b25      	ldr	r3, [pc, #148]	; (800d57c <vTaskSwitchContext+0xac>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ec:	4b24      	ldr	r3, [pc, #144]	; (800d580 <vTaskSwitchContext+0xb0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	e010      	b.n	800d516 <vTaskSwitchContext+0x46>
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10a      	bne.n	800d510 <vTaskSwitchContext+0x40>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	607b      	str	r3, [r7, #4]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <vTaskSwitchContext+0x3e>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3b01      	subs	r3, #1
 800d514:	60fb      	str	r3, [r7, #12]
 800d516:	491b      	ldr	r1, [pc, #108]	; (800d584 <vTaskSwitchContext+0xb4>)
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4613      	mov	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4413      	add	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	440b      	add	r3, r1
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d0e4      	beq.n	800d4f4 <vTaskSwitchContext+0x24>
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	4613      	mov	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	4413      	add	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4a13      	ldr	r2, [pc, #76]	; (800d584 <vTaskSwitchContext+0xb4>)
 800d536:	4413      	add	r3, r2
 800d538:	60bb      	str	r3, [r7, #8]
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	605a      	str	r2, [r3, #4]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	3308      	adds	r3, #8
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d104      	bne.n	800d55a <vTaskSwitchContext+0x8a>
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	605a      	str	r2, [r3, #4]
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	4a09      	ldr	r2, [pc, #36]	; (800d588 <vTaskSwitchContext+0xb8>)
 800d562:	6013      	str	r3, [r2, #0]
 800d564:	4a06      	ldr	r2, [pc, #24]	; (800d580 <vTaskSwitchContext+0xb0>)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6013      	str	r3, [r2, #0]
}
 800d56a:	bf00      	nop
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	20001ab4 	.word	0x20001ab4
 800d57c:	20001aa0 	.word	0x20001aa0
 800d580:	20001a94 	.word	0x20001a94
 800d584:	200015bc 	.word	0x200015bc
 800d588:	200015b8 	.word	0x200015b8

0800d58c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10a      	bne.n	800d5b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	60fb      	str	r3, [r7, #12]
}
 800d5ae:	bf00      	nop
 800d5b0:	e7fe      	b.n	800d5b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5b2:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <vTaskPlaceOnEventList+0x44>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3318      	adds	r3, #24
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7fe fd47 	bl	800c04e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	6838      	ldr	r0, [r7, #0]
 800d5c4:	f000 fa7c 	bl	800dac0 <prvAddCurrentTaskToDelayedList>
}
 800d5c8:	bf00      	nop
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	200015b8 	.word	0x200015b8

0800d5d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d10a      	bne.n	800d5fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	617b      	str	r3, [r7, #20]
}
 800d5f8:	bf00      	nop
 800d5fa:	e7fe      	b.n	800d5fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5fc:	4b0a      	ldr	r3, [pc, #40]	; (800d628 <vTaskPlaceOnEventListRestricted+0x54>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3318      	adds	r3, #24
 800d602:	4619      	mov	r1, r3
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f7fe fcfe 	bl	800c006 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d610:	f04f 33ff 	mov.w	r3, #4294967295
 800d614:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	68b8      	ldr	r0, [r7, #8]
 800d61a:	f000 fa51 	bl	800dac0 <prvAddCurrentTaskToDelayedList>
	}
 800d61e:	bf00      	nop
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	200015b8 	.word	0x200015b8

0800d62c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10a      	bne.n	800d658 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	60fb      	str	r3, [r7, #12]
}
 800d654:	bf00      	nop
 800d656:	e7fe      	b.n	800d656 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	3318      	adds	r3, #24
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fe fd2f 	bl	800c0c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d662:	4b1e      	ldr	r3, [pc, #120]	; (800d6dc <xTaskRemoveFromEventList+0xb0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d11d      	bne.n	800d6a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	3304      	adds	r3, #4
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fd26 	bl	800c0c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d678:	4b19      	ldr	r3, [pc, #100]	; (800d6e0 <xTaskRemoveFromEventList+0xb4>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d903      	bls.n	800d688 <xTaskRemoveFromEventList+0x5c>
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d684:	4a16      	ldr	r2, [pc, #88]	; (800d6e0 <xTaskRemoveFromEventList+0xb4>)
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	4613      	mov	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4413      	add	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	4a13      	ldr	r2, [pc, #76]	; (800d6e4 <xTaskRemoveFromEventList+0xb8>)
 800d696:	441a      	add	r2, r3
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	3304      	adds	r3, #4
 800d69c:	4619      	mov	r1, r3
 800d69e:	4610      	mov	r0, r2
 800d6a0:	f7fe fcb1 	bl	800c006 <vListInsertEnd>
 800d6a4:	e005      	b.n	800d6b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	3318      	adds	r3, #24
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	480e      	ldr	r0, [pc, #56]	; (800d6e8 <xTaskRemoveFromEventList+0xbc>)
 800d6ae:	f7fe fcaa 	bl	800c006 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <xTaskRemoveFromEventList+0xc0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d905      	bls.n	800d6cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6c4:	4b0a      	ldr	r3, [pc, #40]	; (800d6f0 <xTaskRemoveFromEventList+0xc4>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	601a      	str	r2, [r3, #0]
 800d6ca:	e001      	b.n	800d6d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6d0:	697b      	ldr	r3, [r7, #20]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3718      	adds	r7, #24
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20001ab4 	.word	0x20001ab4
 800d6e0:	20001a94 	.word	0x20001a94
 800d6e4:	200015bc 	.word	0x200015bc
 800d6e8:	20001a4c 	.word	0x20001a4c
 800d6ec:	200015b8 	.word	0x200015b8
 800d6f0:	20001aa0 	.word	0x20001aa0

0800d6f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6fc:	4b06      	ldr	r3, [pc, #24]	; (800d718 <vTaskInternalSetTimeOutState+0x24>)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d704:	4b05      	ldr	r3, [pc, #20]	; (800d71c <vTaskInternalSetTimeOutState+0x28>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	605a      	str	r2, [r3, #4]
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	20001aa4 	.word	0x20001aa4
 800d71c:	20001a90 	.word	0x20001a90

0800d720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10a      	bne.n	800d746 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	613b      	str	r3, [r7, #16]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10a      	bne.n	800d762 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	60fb      	str	r3, [r7, #12]
}
 800d75e:	bf00      	nop
 800d760:	e7fe      	b.n	800d760 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d762:	f000 fe7f 	bl	800e464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d766:	4b1d      	ldr	r3, [pc, #116]	; (800d7dc <xTaskCheckForTimeOut+0xbc>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	69ba      	ldr	r2, [r7, #24]
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d77e:	d102      	bne.n	800d786 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d780:	2300      	movs	r3, #0
 800d782:	61fb      	str	r3, [r7, #28]
 800d784:	e023      	b.n	800d7ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	4b15      	ldr	r3, [pc, #84]	; (800d7e0 <xTaskCheckForTimeOut+0xc0>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d007      	beq.n	800d7a2 <xTaskCheckForTimeOut+0x82>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	69ba      	ldr	r2, [r7, #24]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d302      	bcc.n	800d7a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d79c:	2301      	movs	r3, #1
 800d79e:	61fb      	str	r3, [r7, #28]
 800d7a0:	e015      	b.n	800d7ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	697a      	ldr	r2, [r7, #20]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d20b      	bcs.n	800d7c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	1ad2      	subs	r2, r2, r3
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff ff9b 	bl	800d6f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	61fb      	str	r3, [r7, #28]
 800d7c2:	e004      	b.n	800d7ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7ce:	f000 fe79 	bl	800e4c4 <vPortExitCritical>

	return xReturn;
 800d7d2:	69fb      	ldr	r3, [r7, #28]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3720      	adds	r7, #32
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20001a90 	.word	0x20001a90
 800d7e0:	20001aa4 	.word	0x20001aa4

0800d7e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7e8:	4b03      	ldr	r3, [pc, #12]	; (800d7f8 <vTaskMissedYield+0x14>)
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	601a      	str	r2, [r3, #0]
}
 800d7ee:	bf00      	nop
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	20001aa0 	.word	0x20001aa0

0800d7fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d804:	f000 f852 	bl	800d8ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d808:	4b06      	ldr	r3, [pc, #24]	; (800d824 <prvIdleTask+0x28>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d9f9      	bls.n	800d804 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d810:	4b05      	ldr	r3, [pc, #20]	; (800d828 <prvIdleTask+0x2c>)
 800d812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d816:	601a      	str	r2, [r3, #0]
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d820:	e7f0      	b.n	800d804 <prvIdleTask+0x8>
 800d822:	bf00      	nop
 800d824:	200015bc 	.word	0x200015bc
 800d828:	e000ed04 	.word	0xe000ed04

0800d82c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d832:	2300      	movs	r3, #0
 800d834:	607b      	str	r3, [r7, #4]
 800d836:	e00c      	b.n	800d852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	4613      	mov	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4a12      	ldr	r2, [pc, #72]	; (800d88c <prvInitialiseTaskLists+0x60>)
 800d844:	4413      	add	r3, r2
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe fbb0 	bl	800bfac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3301      	adds	r3, #1
 800d850:	607b      	str	r3, [r7, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b37      	cmp	r3, #55	; 0x37
 800d856:	d9ef      	bls.n	800d838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d858:	480d      	ldr	r0, [pc, #52]	; (800d890 <prvInitialiseTaskLists+0x64>)
 800d85a:	f7fe fba7 	bl	800bfac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d85e:	480d      	ldr	r0, [pc, #52]	; (800d894 <prvInitialiseTaskLists+0x68>)
 800d860:	f7fe fba4 	bl	800bfac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d864:	480c      	ldr	r0, [pc, #48]	; (800d898 <prvInitialiseTaskLists+0x6c>)
 800d866:	f7fe fba1 	bl	800bfac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d86a:	480c      	ldr	r0, [pc, #48]	; (800d89c <prvInitialiseTaskLists+0x70>)
 800d86c:	f7fe fb9e 	bl	800bfac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d870:	480b      	ldr	r0, [pc, #44]	; (800d8a0 <prvInitialiseTaskLists+0x74>)
 800d872:	f7fe fb9b 	bl	800bfac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d876:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <prvInitialiseTaskLists+0x78>)
 800d878:	4a05      	ldr	r2, [pc, #20]	; (800d890 <prvInitialiseTaskLists+0x64>)
 800d87a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d87c:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <prvInitialiseTaskLists+0x7c>)
 800d87e:	4a05      	ldr	r2, [pc, #20]	; (800d894 <prvInitialiseTaskLists+0x68>)
 800d880:	601a      	str	r2, [r3, #0]
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	200015bc 	.word	0x200015bc
 800d890:	20001a1c 	.word	0x20001a1c
 800d894:	20001a30 	.word	0x20001a30
 800d898:	20001a4c 	.word	0x20001a4c
 800d89c:	20001a60 	.word	0x20001a60
 800d8a0:	20001a78 	.word	0x20001a78
 800d8a4:	20001a44 	.word	0x20001a44
 800d8a8:	20001a48 	.word	0x20001a48

0800d8ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8b2:	e019      	b.n	800d8e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d8b4:	f000 fdd6 	bl	800e464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8b8:	4b10      	ldr	r3, [pc, #64]	; (800d8fc <prvCheckTasksWaitingTermination+0x50>)
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	3304      	adds	r3, #4
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe fbfb 	bl	800c0c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8ca:	4b0d      	ldr	r3, [pc, #52]	; (800d900 <prvCheckTasksWaitingTermination+0x54>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	4a0b      	ldr	r2, [pc, #44]	; (800d900 <prvCheckTasksWaitingTermination+0x54>)
 800d8d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8d4:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <prvCheckTasksWaitingTermination+0x58>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	4a0a      	ldr	r2, [pc, #40]	; (800d904 <prvCheckTasksWaitingTermination+0x58>)
 800d8dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8de:	f000 fdf1 	bl	800e4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f810 	bl	800d908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8e8:	4b06      	ldr	r3, [pc, #24]	; (800d904 <prvCheckTasksWaitingTermination+0x58>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1e1      	bne.n	800d8b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8f0:	bf00      	nop
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20001a60 	.word	0x20001a60
 800d900:	20001a8c 	.word	0x20001a8c
 800d904:	20001a74 	.word	0x20001a74

0800d908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d916:	2b00      	cmp	r3, #0
 800d918:	d108      	bne.n	800d92c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 ff8e 	bl	800e840 <vPortFree>
				vPortFree( pxTCB );
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 ff8b 	bl	800e840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d92a:	e018      	b.n	800d95e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d932:	2b01      	cmp	r3, #1
 800d934:	d103      	bne.n	800d93e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 ff82 	bl	800e840 <vPortFree>
	}
 800d93c:	e00f      	b.n	800d95e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d944:	2b02      	cmp	r3, #2
 800d946:	d00a      	beq.n	800d95e <prvDeleteTCB+0x56>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94c:	f383 8811 	msr	BASEPRI, r3
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	60fb      	str	r3, [r7, #12]
}
 800d95a:	bf00      	nop
 800d95c:	e7fe      	b.n	800d95c <prvDeleteTCB+0x54>
	}
 800d95e:	bf00      	nop
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d96e:	4b0c      	ldr	r3, [pc, #48]	; (800d9a0 <prvResetNextTaskUnblockTime+0x38>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d104      	bne.n	800d982 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d978:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800d97a:	f04f 32ff 	mov.w	r2, #4294967295
 800d97e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d980:	e008      	b.n	800d994 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d982:	4b07      	ldr	r3, [pc, #28]	; (800d9a0 <prvResetNextTaskUnblockTime+0x38>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	4a04      	ldr	r2, [pc, #16]	; (800d9a4 <prvResetNextTaskUnblockTime+0x3c>)
 800d992:	6013      	str	r3, [r2, #0]
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	20001a44 	.word	0x20001a44
 800d9a4:	20001aac 	.word	0x20001aac

0800d9a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d9ae:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <xTaskGetSchedulerState+0x34>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d102      	bne.n	800d9bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	607b      	str	r3, [r7, #4]
 800d9ba:	e008      	b.n	800d9ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9bc:	4b08      	ldr	r3, [pc, #32]	; (800d9e0 <xTaskGetSchedulerState+0x38>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d102      	bne.n	800d9ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	607b      	str	r3, [r7, #4]
 800d9c8:	e001      	b.n	800d9ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9ce:	687b      	ldr	r3, [r7, #4]
	}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	20001a98 	.word	0x20001a98
 800d9e0:	20001ab4 	.word	0x20001ab4

0800d9e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d056      	beq.n	800daa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9fa:	4b2e      	ldr	r3, [pc, #184]	; (800dab4 <xTaskPriorityDisinherit+0xd0>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	429a      	cmp	r2, r3
 800da02:	d00a      	beq.n	800da1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	60fb      	str	r3, [r7, #12]
}
 800da16:	bf00      	nop
 800da18:	e7fe      	b.n	800da18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10a      	bne.n	800da38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	60bb      	str	r3, [r7, #8]
}
 800da34:	bf00      	nop
 800da36:	e7fe      	b.n	800da36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da3c:	1e5a      	subs	r2, r3, #1
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d02c      	beq.n	800daa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da52:	2b00      	cmp	r3, #0
 800da54:	d128      	bne.n	800daa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	3304      	adds	r3, #4
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fb30 	bl	800c0c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da78:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <xTaskPriorityDisinherit+0xd4>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d903      	bls.n	800da88 <xTaskPriorityDisinherit+0xa4>
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da84:	4a0c      	ldr	r2, [pc, #48]	; (800dab8 <xTaskPriorityDisinherit+0xd4>)
 800da86:	6013      	str	r3, [r2, #0]
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8c:	4613      	mov	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4413      	add	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4a09      	ldr	r2, [pc, #36]	; (800dabc <xTaskPriorityDisinherit+0xd8>)
 800da96:	441a      	add	r2, r3
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	3304      	adds	r3, #4
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7fe fab1 	bl	800c006 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800daa4:	2301      	movs	r3, #1
 800daa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800daa8:	697b      	ldr	r3, [r7, #20]
	}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	200015b8 	.word	0x200015b8
 800dab8:	20001a94 	.word	0x20001a94
 800dabc:	200015bc 	.word	0x200015bc

0800dac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800daca:	4b21      	ldr	r3, [pc, #132]	; (800db50 <prvAddCurrentTaskToDelayedList+0x90>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dad0:	4b20      	ldr	r3, [pc, #128]	; (800db54 <prvAddCurrentTaskToDelayedList+0x94>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fe faf2 	bl	800c0c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae2:	d10a      	bne.n	800dafa <prvAddCurrentTaskToDelayedList+0x3a>
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d007      	beq.n	800dafa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daea:	4b1a      	ldr	r3, [pc, #104]	; (800db54 <prvAddCurrentTaskToDelayedList+0x94>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3304      	adds	r3, #4
 800daf0:	4619      	mov	r1, r3
 800daf2:	4819      	ldr	r0, [pc, #100]	; (800db58 <prvAddCurrentTaskToDelayedList+0x98>)
 800daf4:	f7fe fa87 	bl	800c006 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800daf8:	e026      	b.n	800db48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4413      	add	r3, r2
 800db00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db02:	4b14      	ldr	r3, [pc, #80]	; (800db54 <prvAddCurrentTaskToDelayedList+0x94>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d209      	bcs.n	800db26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db12:	4b12      	ldr	r3, [pc, #72]	; (800db5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <prvAddCurrentTaskToDelayedList+0x94>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f7fe fa95 	bl	800c04e <vListInsert>
}
 800db24:	e010      	b.n	800db48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db26:	4b0e      	ldr	r3, [pc, #56]	; (800db60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <prvAddCurrentTaskToDelayedList+0x94>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	3304      	adds	r3, #4
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7fe fa8b 	bl	800c04e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db38:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d202      	bcs.n	800db48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db42:	4a08      	ldr	r2, [pc, #32]	; (800db64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	6013      	str	r3, [r2, #0]
}
 800db48:	bf00      	nop
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	20001a90 	.word	0x20001a90
 800db54:	200015b8 	.word	0x200015b8
 800db58:	20001a78 	.word	0x20001a78
 800db5c:	20001a48 	.word	0x20001a48
 800db60:	20001a44 	.word	0x20001a44
 800db64:	20001aac 	.word	0x20001aac

0800db68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08a      	sub	sp, #40	; 0x28
 800db6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db6e:	2300      	movs	r3, #0
 800db70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db72:	f000 fb07 	bl	800e184 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db76:	4b1c      	ldr	r3, [pc, #112]	; (800dbe8 <xTimerCreateTimerTask+0x80>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d021      	beq.n	800dbc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db7e:	2300      	movs	r3, #0
 800db80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db86:	1d3a      	adds	r2, r7, #4
 800db88:	f107 0108 	add.w	r1, r7, #8
 800db8c:	f107 030c 	add.w	r3, r7, #12
 800db90:	4618      	mov	r0, r3
 800db92:	f7fe f9f1 	bl	800bf78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	9202      	str	r2, [sp, #8]
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	2302      	movs	r3, #2
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	2300      	movs	r3, #0
 800dba6:	460a      	mov	r2, r1
 800dba8:	4910      	ldr	r1, [pc, #64]	; (800dbec <xTimerCreateTimerTask+0x84>)
 800dbaa:	4811      	ldr	r0, [pc, #68]	; (800dbf0 <xTimerCreateTimerTask+0x88>)
 800dbac:	f7fe ffd8 	bl	800cb60 <xTaskCreateStatic>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	4a10      	ldr	r2, [pc, #64]	; (800dbf4 <xTimerCreateTimerTask+0x8c>)
 800dbb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <xTimerCreateTimerTask+0x8c>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10a      	bne.n	800dbde <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	613b      	str	r3, [r7, #16]
}
 800dbda:	bf00      	nop
 800dbdc:	e7fe      	b.n	800dbdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbde:	697b      	ldr	r3, [r7, #20]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20001ae8 	.word	0x20001ae8
 800dbec:	08010038 	.word	0x08010038
 800dbf0:	0800dd2d 	.word	0x0800dd2d
 800dbf4:	20001aec 	.word	0x20001aec

0800dbf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08a      	sub	sp, #40	; 0x28
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc06:	2300      	movs	r3, #0
 800dc08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10a      	bne.n	800dc26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	623b      	str	r3, [r7, #32]
}
 800dc22:	bf00      	nop
 800dc24:	e7fe      	b.n	800dc24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc26:	4b1a      	ldr	r3, [pc, #104]	; (800dc90 <xTimerGenericCommand+0x98>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d02a      	beq.n	800dc84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2b05      	cmp	r3, #5
 800dc3e:	dc18      	bgt.n	800dc72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc40:	f7ff feb2 	bl	800d9a8 <xTaskGetSchedulerState>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d109      	bne.n	800dc5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc4a:	4b11      	ldr	r3, [pc, #68]	; (800dc90 <xTimerGenericCommand+0x98>)
 800dc4c:	6818      	ldr	r0, [r3, #0]
 800dc4e:	f107 0110 	add.w	r1, r7, #16
 800dc52:	2300      	movs	r3, #0
 800dc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc56:	f7fe fb9b 	bl	800c390 <xQueueGenericSend>
 800dc5a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc5c:	e012      	b.n	800dc84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc5e:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <xTimerGenericCommand+0x98>)
 800dc60:	6818      	ldr	r0, [r3, #0]
 800dc62:	f107 0110 	add.w	r1, r7, #16
 800dc66:	2300      	movs	r3, #0
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f7fe fb91 	bl	800c390 <xQueueGenericSend>
 800dc6e:	6278      	str	r0, [r7, #36]	; 0x24
 800dc70:	e008      	b.n	800dc84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc72:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <xTimerGenericCommand+0x98>)
 800dc74:	6818      	ldr	r0, [r3, #0]
 800dc76:	f107 0110 	add.w	r1, r7, #16
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	f7fe fc85 	bl	800c58c <xQueueGenericSendFromISR>
 800dc82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3728      	adds	r7, #40	; 0x28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20001ae8 	.word	0x20001ae8

0800dc94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b088      	sub	sp, #32
 800dc98:	af02      	add	r7, sp, #8
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc9e:	4b22      	ldr	r3, [pc, #136]	; (800dd28 <prvProcessExpiredTimer+0x94>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fe fa07 	bl	800c0c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcb8:	f003 0304 	and.w	r3, r3, #4
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d022      	beq.n	800dd06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	699a      	ldr	r2, [r3, #24]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	18d1      	adds	r1, r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	6978      	ldr	r0, [r7, #20]
 800dcce:	f000 f8d1 	bl	800de74 <prvInsertTimerInActiveList>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d01f      	beq.n	800dd18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9300      	str	r3, [sp, #0]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	2100      	movs	r1, #0
 800dce2:	6978      	ldr	r0, [r7, #20]
 800dce4:	f7ff ff88 	bl	800dbf8 <xTimerGenericCommand>
 800dce8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d113      	bne.n	800dd18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	60fb      	str	r3, [r7, #12]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd0c:	f023 0301 	bic.w	r3, r3, #1
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	6a1b      	ldr	r3, [r3, #32]
 800dd1c:	6978      	ldr	r0, [r7, #20]
 800dd1e:	4798      	blx	r3
}
 800dd20:	bf00      	nop
 800dd22:	3718      	adds	r7, #24
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	20001ae0 	.word	0x20001ae0

0800dd2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd34:	f107 0308 	add.w	r3, r7, #8
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 f857 	bl	800ddec <prvGetNextExpireTime>
 800dd3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	4619      	mov	r1, r3
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f000 f803 	bl	800dd50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd4a:	f000 f8d5 	bl	800def8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd4e:	e7f1      	b.n	800dd34 <prvTimerTask+0x8>

0800dd50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd5a:	f7ff fa43 	bl	800d1e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd5e:	f107 0308 	add.w	r3, r7, #8
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 f866 	bl	800de34 <prvSampleTimeNow>
 800dd68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d130      	bne.n	800ddd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10a      	bne.n	800dd8c <prvProcessTimerOrBlockTask+0x3c>
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d806      	bhi.n	800dd8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd7e:	f7ff fa3f 	bl	800d200 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd82:	68f9      	ldr	r1, [r7, #12]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7ff ff85 	bl	800dc94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd8a:	e024      	b.n	800ddd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d008      	beq.n	800dda4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd92:	4b13      	ldr	r3, [pc, #76]	; (800dde0 <prvProcessTimerOrBlockTask+0x90>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <prvProcessTimerOrBlockTask+0x50>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e000      	b.n	800dda2 <prvProcessTimerOrBlockTask+0x52>
 800dda0:	2300      	movs	r3, #0
 800dda2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dda4:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <prvProcessTimerOrBlockTask+0x94>)
 800dda6:	6818      	ldr	r0, [r3, #0]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	f7fe fea1 	bl	800caf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddb6:	f7ff fa23 	bl	800d200 <xTaskResumeAll>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ddc0:	4b09      	ldr	r3, [pc, #36]	; (800dde8 <prvProcessTimerOrBlockTask+0x98>)
 800ddc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	f3bf 8f6f 	isb	sy
}
 800ddd0:	e001      	b.n	800ddd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddd2:	f7ff fa15 	bl	800d200 <xTaskResumeAll>
}
 800ddd6:	bf00      	nop
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	20001ae4 	.word	0x20001ae4
 800dde4:	20001ae8 	.word	0x20001ae8
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ddf4:	4b0e      	ldr	r3, [pc, #56]	; (800de30 <prvGetNextExpireTime+0x44>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d101      	bne.n	800de02 <prvGetNextExpireTime+0x16>
 800ddfe:	2201      	movs	r2, #1
 800de00:	e000      	b.n	800de04 <prvGetNextExpireTime+0x18>
 800de02:	2200      	movs	r2, #0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d105      	bne.n	800de1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de10:	4b07      	ldr	r3, [pc, #28]	; (800de30 <prvGetNextExpireTime+0x44>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	60fb      	str	r3, [r7, #12]
 800de1a:	e001      	b.n	800de20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de1c:	2300      	movs	r3, #0
 800de1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de20:	68fb      	ldr	r3, [r7, #12]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	20001ae0 	.word	0x20001ae0

0800de34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de3c:	f7ff fa7e 	bl	800d33c <xTaskGetTickCount>
 800de40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de42:	4b0b      	ldr	r3, [pc, #44]	; (800de70 <prvSampleTimeNow+0x3c>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d205      	bcs.n	800de58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de4c:	f000 f936 	bl	800e0bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	601a      	str	r2, [r3, #0]
 800de56:	e002      	b.n	800de5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de5e:	4a04      	ldr	r2, [pc, #16]	; (800de70 <prvSampleTimeNow+0x3c>)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de64:	68fb      	ldr	r3, [r7, #12]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20001af0 	.word	0x20001af0

0800de74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
 800de80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de82:	2300      	movs	r3, #0
 800de84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	429a      	cmp	r2, r3
 800de98:	d812      	bhi.n	800dec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d302      	bcc.n	800deae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dea8:	2301      	movs	r3, #1
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	e01b      	b.n	800dee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800deae:	4b10      	ldr	r3, [pc, #64]	; (800def0 <prvInsertTimerInActiveList+0x7c>)
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3304      	adds	r3, #4
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f7fe f8c8 	bl	800c04e <vListInsert>
 800debe:	e012      	b.n	800dee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d206      	bcs.n	800ded6 <prvInsertTimerInActiveList+0x62>
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d302      	bcc.n	800ded6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ded0:	2301      	movs	r3, #1
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	e007      	b.n	800dee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ded6:	4b07      	ldr	r3, [pc, #28]	; (800def4 <prvInsertTimerInActiveList+0x80>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3304      	adds	r3, #4
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f7fe f8b4 	bl	800c04e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dee6:	697b      	ldr	r3, [r7, #20]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	20001ae4 	.word	0x20001ae4
 800def4:	20001ae0 	.word	0x20001ae0

0800def8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08e      	sub	sp, #56	; 0x38
 800defc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800defe:	e0ca      	b.n	800e096 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	da18      	bge.n	800df38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df06:	1d3b      	adds	r3, r7, #4
 800df08:	3304      	adds	r3, #4
 800df0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	61fb      	str	r3, [r7, #28]
}
 800df24:	bf00      	nop
 800df26:	e7fe      	b.n	800df26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df2e:	6850      	ldr	r0, [r2, #4]
 800df30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df32:	6892      	ldr	r2, [r2, #8]
 800df34:	4611      	mov	r1, r2
 800df36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f2c0 80aa 	blt.w	800e094 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	695b      	ldr	r3, [r3, #20]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d004      	beq.n	800df56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4e:	3304      	adds	r3, #4
 800df50:	4618      	mov	r0, r3
 800df52:	f7fe f8b5 	bl	800c0c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df56:	463b      	mov	r3, r7
 800df58:	4618      	mov	r0, r3
 800df5a:	f7ff ff6b 	bl	800de34 <prvSampleTimeNow>
 800df5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b09      	cmp	r3, #9
 800df64:	f200 8097 	bhi.w	800e096 <prvProcessReceivedCommands+0x19e>
 800df68:	a201      	add	r2, pc, #4	; (adr r2, 800df70 <prvProcessReceivedCommands+0x78>)
 800df6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6e:	bf00      	nop
 800df70:	0800df99 	.word	0x0800df99
 800df74:	0800df99 	.word	0x0800df99
 800df78:	0800df99 	.word	0x0800df99
 800df7c:	0800e00d 	.word	0x0800e00d
 800df80:	0800e021 	.word	0x0800e021
 800df84:	0800e06b 	.word	0x0800e06b
 800df88:	0800df99 	.word	0x0800df99
 800df8c:	0800df99 	.word	0x0800df99
 800df90:	0800e00d 	.word	0x0800e00d
 800df94:	0800e021 	.word	0x0800e021
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df9e:	f043 0301 	orr.w	r3, r3, #1
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	699b      	ldr	r3, [r3, #24]
 800dfb0:	18d1      	adds	r1, r2, r3
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfb8:	f7ff ff5c 	bl	800de74 <prvInsertTimerInActiveList>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d069      	beq.n	800e096 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d05e      	beq.n	800e096 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfdc:	699b      	ldr	r3, [r3, #24]
 800dfde:	441a      	add	r2, r3
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfea:	f7ff fe05 	bl	800dbf8 <xTimerGenericCommand>
 800dfee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d14f      	bne.n	800e096 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	61bb      	str	r3, [r7, #24]
}
 800e008:	bf00      	nop
 800e00a:	e7fe      	b.n	800e00a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e012:	f023 0301 	bic.w	r3, r3, #1
 800e016:	b2da      	uxtb	r2, r3
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e01e:	e03a      	b.n	800e096 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e026:	f043 0301 	orr.w	r3, r3, #1
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e032:	68ba      	ldr	r2, [r7, #8]
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10a      	bne.n	800e056 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	617b      	str	r3, [r7, #20]
}
 800e052:	bf00      	nop
 800e054:	e7fe      	b.n	800e054 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e058:	699a      	ldr	r2, [r3, #24]
 800e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05c:	18d1      	adds	r1, r2, r3
 800e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e064:	f7ff ff06 	bl	800de74 <prvInsertTimerInActiveList>
					break;
 800e068:	e015      	b.n	800e096 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e070:	f003 0302 	and.w	r3, r3, #2
 800e074:	2b00      	cmp	r3, #0
 800e076:	d103      	bne.n	800e080 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e07a:	f000 fbe1 	bl	800e840 <vPortFree>
 800e07e:	e00a      	b.n	800e096 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e086:	f023 0301 	bic.w	r3, r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e092:	e000      	b.n	800e096 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e094:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e096:	4b08      	ldr	r3, [pc, #32]	; (800e0b8 <prvProcessReceivedCommands+0x1c0>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	1d39      	adds	r1, r7, #4
 800e09c:	2200      	movs	r2, #0
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fb10 	bl	800c6c4 <xQueueReceive>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f47f af2a 	bne.w	800df00 <prvProcessReceivedCommands+0x8>
	}
}
 800e0ac:	bf00      	nop
 800e0ae:	bf00      	nop
 800e0b0:	3730      	adds	r7, #48	; 0x30
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	20001ae8 	.word	0x20001ae8

0800e0bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0c2:	e048      	b.n	800e156 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0c4:	4b2d      	ldr	r3, [pc, #180]	; (800e17c <prvSwitchTimerLists+0xc0>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ce:	4b2b      	ldr	r3, [pc, #172]	; (800e17c <prvSwitchTimerLists+0xc0>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	3304      	adds	r3, #4
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fd ffef 	bl	800c0c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6a1b      	ldr	r3, [r3, #32]
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0f0:	f003 0304 	and.w	r3, r3, #4
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d02e      	beq.n	800e156 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	699b      	ldr	r3, [r3, #24]
 800e0fc:	693a      	ldr	r2, [r7, #16]
 800e0fe:	4413      	add	r3, r2
 800e100:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	429a      	cmp	r2, r3
 800e108:	d90e      	bls.n	800e128 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e116:	4b19      	ldr	r3, [pc, #100]	; (800e17c <prvSwitchTimerLists+0xc0>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	3304      	adds	r3, #4
 800e11e:	4619      	mov	r1, r3
 800e120:	4610      	mov	r0, r2
 800e122:	f7fd ff94 	bl	800c04e <vListInsert>
 800e126:	e016      	b.n	800e156 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e128:	2300      	movs	r3, #0
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	2300      	movs	r3, #0
 800e12e:	693a      	ldr	r2, [r7, #16]
 800e130:	2100      	movs	r1, #0
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f7ff fd60 	bl	800dbf8 <xTimerGenericCommand>
 800e138:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10a      	bne.n	800e156 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	603b      	str	r3, [r7, #0]
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e156:	4b09      	ldr	r3, [pc, #36]	; (800e17c <prvSwitchTimerLists+0xc0>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1b1      	bne.n	800e0c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e160:	4b06      	ldr	r3, [pc, #24]	; (800e17c <prvSwitchTimerLists+0xc0>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e166:	4b06      	ldr	r3, [pc, #24]	; (800e180 <prvSwitchTimerLists+0xc4>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a04      	ldr	r2, [pc, #16]	; (800e17c <prvSwitchTimerLists+0xc0>)
 800e16c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e16e:	4a04      	ldr	r2, [pc, #16]	; (800e180 <prvSwitchTimerLists+0xc4>)
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	6013      	str	r3, [r2, #0]
}
 800e174:	bf00      	nop
 800e176:	3718      	adds	r7, #24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	20001ae0 	.word	0x20001ae0
 800e180:	20001ae4 	.word	0x20001ae4

0800e184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e18a:	f000 f96b 	bl	800e464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e18e:	4b15      	ldr	r3, [pc, #84]	; (800e1e4 <prvCheckForValidListAndQueue+0x60>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d120      	bne.n	800e1d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e196:	4814      	ldr	r0, [pc, #80]	; (800e1e8 <prvCheckForValidListAndQueue+0x64>)
 800e198:	f7fd ff08 	bl	800bfac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e19c:	4813      	ldr	r0, [pc, #76]	; (800e1ec <prvCheckForValidListAndQueue+0x68>)
 800e19e:	f7fd ff05 	bl	800bfac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <prvCheckForValidListAndQueue+0x6c>)
 800e1a4:	4a10      	ldr	r2, [pc, #64]	; (800e1e8 <prvCheckForValidListAndQueue+0x64>)
 800e1a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1a8:	4b12      	ldr	r3, [pc, #72]	; (800e1f4 <prvCheckForValidListAndQueue+0x70>)
 800e1aa:	4a10      	ldr	r2, [pc, #64]	; (800e1ec <prvCheckForValidListAndQueue+0x68>)
 800e1ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	4b11      	ldr	r3, [pc, #68]	; (800e1f8 <prvCheckForValidListAndQueue+0x74>)
 800e1b4:	4a11      	ldr	r2, [pc, #68]	; (800e1fc <prvCheckForValidListAndQueue+0x78>)
 800e1b6:	2110      	movs	r1, #16
 800e1b8:	200a      	movs	r0, #10
 800e1ba:	f7fe f813 	bl	800c1e4 <xQueueGenericCreateStatic>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	4a08      	ldr	r2, [pc, #32]	; (800e1e4 <prvCheckForValidListAndQueue+0x60>)
 800e1c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1c4:	4b07      	ldr	r3, [pc, #28]	; (800e1e4 <prvCheckForValidListAndQueue+0x60>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d005      	beq.n	800e1d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1cc:	4b05      	ldr	r3, [pc, #20]	; (800e1e4 <prvCheckForValidListAndQueue+0x60>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	490b      	ldr	r1, [pc, #44]	; (800e200 <prvCheckForValidListAndQueue+0x7c>)
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fc66 	bl	800caa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1d8:	f000 f974 	bl	800e4c4 <vPortExitCritical>
}
 800e1dc:	bf00      	nop
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	20001ae8 	.word	0x20001ae8
 800e1e8:	20001ab8 	.word	0x20001ab8
 800e1ec:	20001acc 	.word	0x20001acc
 800e1f0:	20001ae0 	.word	0x20001ae0
 800e1f4:	20001ae4 	.word	0x20001ae4
 800e1f8:	20001b94 	.word	0x20001b94
 800e1fc:	20001af4 	.word	0x20001af4
 800e200:	08010040 	.word	0x08010040

0800e204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	3b04      	subs	r3, #4
 800e214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e21c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	3b04      	subs	r3, #4
 800e222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	f023 0201 	bic.w	r2, r3, #1
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3b04      	subs	r3, #4
 800e232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e234:	4a0c      	ldr	r2, [pc, #48]	; (800e268 <pxPortInitialiseStack+0x64>)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3b14      	subs	r3, #20
 800e23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3b04      	subs	r3, #4
 800e24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f06f 0202 	mvn.w	r2, #2
 800e252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3b20      	subs	r3, #32
 800e258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e25a:	68fb      	ldr	r3, [r7, #12]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3714      	adds	r7, #20
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	0800e26d 	.word	0x0800e26d

0800e26c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e276:	4b12      	ldr	r3, [pc, #72]	; (800e2c0 <prvTaskExitError+0x54>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27e:	d00a      	beq.n	800e296 <prvTaskExitError+0x2a>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	60fb      	str	r3, [r7, #12]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <prvTaskExitError+0x28>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	60bb      	str	r3, [r7, #8]
}
 800e2a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2aa:	bf00      	nop
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d0fc      	beq.n	800e2ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e2b2:	bf00      	nop
 800e2b4:	bf00      	nop
 800e2b6:	3714      	adds	r7, #20
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr
 800e2c0:	20000598 	.word	0x20000598
	...

0800e2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e2d0:	4b07      	ldr	r3, [pc, #28]	; (800e2f0 <pxCurrentTCBConst2>)
 800e2d2:	6819      	ldr	r1, [r3, #0]
 800e2d4:	6808      	ldr	r0, [r1, #0]
 800e2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2da:	f380 8809 	msr	PSP, r0
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f04f 0000 	mov.w	r0, #0
 800e2e6:	f380 8811 	msr	BASEPRI, r0
 800e2ea:	4770      	bx	lr
 800e2ec:	f3af 8000 	nop.w

0800e2f0 <pxCurrentTCBConst2>:
 800e2f0:	200015b8 	.word	0x200015b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e2f4:	bf00      	nop
 800e2f6:	bf00      	nop

0800e2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e2f8:	4808      	ldr	r0, [pc, #32]	; (800e31c <prvPortStartFirstTask+0x24>)
 800e2fa:	6800      	ldr	r0, [r0, #0]
 800e2fc:	6800      	ldr	r0, [r0, #0]
 800e2fe:	f380 8808 	msr	MSP, r0
 800e302:	f04f 0000 	mov.w	r0, #0
 800e306:	f380 8814 	msr	CONTROL, r0
 800e30a:	b662      	cpsie	i
 800e30c:	b661      	cpsie	f
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	df00      	svc	0
 800e318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e31a:	bf00      	nop
 800e31c:	e000ed08 	.word	0xe000ed08

0800e320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e326:	4b46      	ldr	r3, [pc, #280]	; (800e440 <xPortStartScheduler+0x120>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a46      	ldr	r2, [pc, #280]	; (800e444 <xPortStartScheduler+0x124>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d10a      	bne.n	800e346 <xPortStartScheduler+0x26>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	613b      	str	r3, [r7, #16]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e346:	4b3e      	ldr	r3, [pc, #248]	; (800e440 <xPortStartScheduler+0x120>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a3f      	ldr	r2, [pc, #252]	; (800e448 <xPortStartScheduler+0x128>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d10a      	bne.n	800e366 <xPortStartScheduler+0x46>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	60fb      	str	r3, [r7, #12]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e366:	4b39      	ldr	r3, [pc, #228]	; (800e44c <xPortStartScheduler+0x12c>)
 800e368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	22ff      	movs	r2, #255	; 0xff
 800e376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	4b31      	ldr	r3, [pc, #196]	; (800e450 <xPortStartScheduler+0x130>)
 800e38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e38e:	4b31      	ldr	r3, [pc, #196]	; (800e454 <xPortStartScheduler+0x134>)
 800e390:	2207      	movs	r2, #7
 800e392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e394:	e009      	b.n	800e3aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e396:	4b2f      	ldr	r3, [pc, #188]	; (800e454 <xPortStartScheduler+0x134>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3b01      	subs	r3, #1
 800e39c:	4a2d      	ldr	r2, [pc, #180]	; (800e454 <xPortStartScheduler+0x134>)
 800e39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3aa:	78fb      	ldrb	r3, [r7, #3]
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b2:	2b80      	cmp	r3, #128	; 0x80
 800e3b4:	d0ef      	beq.n	800e396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3b6:	4b27      	ldr	r3, [pc, #156]	; (800e454 <xPortStartScheduler+0x134>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f1c3 0307 	rsb	r3, r3, #7
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d00a      	beq.n	800e3d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c6:	f383 8811 	msr	BASEPRI, r3
 800e3ca:	f3bf 8f6f 	isb	sy
 800e3ce:	f3bf 8f4f 	dsb	sy
 800e3d2:	60bb      	str	r3, [r7, #8]
}
 800e3d4:	bf00      	nop
 800e3d6:	e7fe      	b.n	800e3d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3d8:	4b1e      	ldr	r3, [pc, #120]	; (800e454 <xPortStartScheduler+0x134>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	021b      	lsls	r3, r3, #8
 800e3de:	4a1d      	ldr	r2, [pc, #116]	; (800e454 <xPortStartScheduler+0x134>)
 800e3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3e2:	4b1c      	ldr	r3, [pc, #112]	; (800e454 <xPortStartScheduler+0x134>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3ea:	4a1a      	ldr	r2, [pc, #104]	; (800e454 <xPortStartScheduler+0x134>)
 800e3ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e3f6:	4b18      	ldr	r3, [pc, #96]	; (800e458 <xPortStartScheduler+0x138>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a17      	ldr	r2, [pc, #92]	; (800e458 <xPortStartScheduler+0x138>)
 800e3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e402:	4b15      	ldr	r3, [pc, #84]	; (800e458 <xPortStartScheduler+0x138>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a14      	ldr	r2, [pc, #80]	; (800e458 <xPortStartScheduler+0x138>)
 800e408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e40c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e40e:	f000 f8dd 	bl	800e5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e412:	4b12      	ldr	r3, [pc, #72]	; (800e45c <xPortStartScheduler+0x13c>)
 800e414:	2200      	movs	r2, #0
 800e416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e418:	f000 f8fc 	bl	800e614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e41c:	4b10      	ldr	r3, [pc, #64]	; (800e460 <xPortStartScheduler+0x140>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a0f      	ldr	r2, [pc, #60]	; (800e460 <xPortStartScheduler+0x140>)
 800e422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e428:	f7ff ff66 	bl	800e2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e42c:	f7ff f850 	bl	800d4d0 <vTaskSwitchContext>
	prvTaskExitError();
 800e430:	f7ff ff1c 	bl	800e26c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	e000ed00 	.word	0xe000ed00
 800e444:	410fc271 	.word	0x410fc271
 800e448:	410fc270 	.word	0x410fc270
 800e44c:	e000e400 	.word	0xe000e400
 800e450:	20001be4 	.word	0x20001be4
 800e454:	20001be8 	.word	0x20001be8
 800e458:	e000ed20 	.word	0xe000ed20
 800e45c:	20000598 	.word	0x20000598
 800e460:	e000ef34 	.word	0xe000ef34

0800e464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
	__asm volatile
 800e46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	607b      	str	r3, [r7, #4]
}
 800e47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e47e:	4b0f      	ldr	r3, [pc, #60]	; (800e4bc <vPortEnterCritical+0x58>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	3301      	adds	r3, #1
 800e484:	4a0d      	ldr	r2, [pc, #52]	; (800e4bc <vPortEnterCritical+0x58>)
 800e486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e488:	4b0c      	ldr	r3, [pc, #48]	; (800e4bc <vPortEnterCritical+0x58>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d10f      	bne.n	800e4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e490:	4b0b      	ldr	r3, [pc, #44]	; (800e4c0 <vPortEnterCritical+0x5c>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	b2db      	uxtb	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00a      	beq.n	800e4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	603b      	str	r3, [r7, #0]
}
 800e4ac:	bf00      	nop
 800e4ae:	e7fe      	b.n	800e4ae <vPortEnterCritical+0x4a>
	}
}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	20000598 	.word	0x20000598
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4ca:	4b12      	ldr	r3, [pc, #72]	; (800e514 <vPortExitCritical+0x50>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10a      	bne.n	800e4e8 <vPortExitCritical+0x24>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	607b      	str	r3, [r7, #4]
}
 800e4e4:	bf00      	nop
 800e4e6:	e7fe      	b.n	800e4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e4e8:	4b0a      	ldr	r3, [pc, #40]	; (800e514 <vPortExitCritical+0x50>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	4a09      	ldr	r2, [pc, #36]	; (800e514 <vPortExitCritical+0x50>)
 800e4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e4f2:	4b08      	ldr	r3, [pc, #32]	; (800e514 <vPortExitCritical+0x50>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d105      	bne.n	800e506 <vPortExitCritical+0x42>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	f383 8811 	msr	BASEPRI, r3
}
 800e504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e506:	bf00      	nop
 800e508:	370c      	adds	r7, #12
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	20000598 	.word	0x20000598
	...

0800e520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e520:	f3ef 8009 	mrs	r0, PSP
 800e524:	f3bf 8f6f 	isb	sy
 800e528:	4b15      	ldr	r3, [pc, #84]	; (800e580 <pxCurrentTCBConst>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	f01e 0f10 	tst.w	lr, #16
 800e530:	bf08      	it	eq
 800e532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53a:	6010      	str	r0, [r2, #0]
 800e53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e544:	f380 8811 	msr	BASEPRI, r0
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f7fe ffbe 	bl	800d4d0 <vTaskSwitchContext>
 800e554:	f04f 0000 	mov.w	r0, #0
 800e558:	f380 8811 	msr	BASEPRI, r0
 800e55c:	bc09      	pop	{r0, r3}
 800e55e:	6819      	ldr	r1, [r3, #0]
 800e560:	6808      	ldr	r0, [r1, #0]
 800e562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e566:	f01e 0f10 	tst.w	lr, #16
 800e56a:	bf08      	it	eq
 800e56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e570:	f380 8809 	msr	PSP, r0
 800e574:	f3bf 8f6f 	isb	sy
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	f3af 8000 	nop.w

0800e580 <pxCurrentTCBConst>:
 800e580:	200015b8 	.word	0x200015b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e584:	bf00      	nop
 800e586:	bf00      	nop

0800e588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
	__asm volatile
 800e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	607b      	str	r3, [r7, #4]
}
 800e5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5a2:	f7fe fedb 	bl	800d35c <xTaskIncrementTick>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d003      	beq.n	800e5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5ac:	4b06      	ldr	r3, [pc, #24]	; (800e5c8 <xPortSysTickHandler+0x40>)
 800e5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b2:	601a      	str	r2, [r3, #0]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	f383 8811 	msr	BASEPRI, r3
}
 800e5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5c0:	bf00      	nop
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	; (800e600 <vPortSetupTimerInterrupt+0x34>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5d6:	4b0b      	ldr	r3, [pc, #44]	; (800e604 <vPortSetupTimerInterrupt+0x38>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5dc:	4b0a      	ldr	r3, [pc, #40]	; (800e608 <vPortSetupTimerInterrupt+0x3c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a0a      	ldr	r2, [pc, #40]	; (800e60c <vPortSetupTimerInterrupt+0x40>)
 800e5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5e6:	099b      	lsrs	r3, r3, #6
 800e5e8:	4a09      	ldr	r2, [pc, #36]	; (800e610 <vPortSetupTimerInterrupt+0x44>)
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5ee:	4b04      	ldr	r3, [pc, #16]	; (800e600 <vPortSetupTimerInterrupt+0x34>)
 800e5f0:	2207      	movs	r2, #7
 800e5f2:	601a      	str	r2, [r3, #0]
}
 800e5f4:	bf00      	nop
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	e000e010 	.word	0xe000e010
 800e604:	e000e018 	.word	0xe000e018
 800e608:	200004ec 	.word	0x200004ec
 800e60c:	10624dd3 	.word	0x10624dd3
 800e610:	e000e014 	.word	0xe000e014

0800e614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e624 <vPortEnableVFP+0x10>
 800e618:	6801      	ldr	r1, [r0, #0]
 800e61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e61e:	6001      	str	r1, [r0, #0]
 800e620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e622:	bf00      	nop
 800e624:	e000ed88 	.word	0xe000ed88

0800e628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e62e:	f3ef 8305 	mrs	r3, IPSR
 800e632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b0f      	cmp	r3, #15
 800e638:	d914      	bls.n	800e664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e63a:	4a17      	ldr	r2, [pc, #92]	; (800e698 <vPortValidateInterruptPriority+0x70>)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4413      	add	r3, r2
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e644:	4b15      	ldr	r3, [pc, #84]	; (800e69c <vPortValidateInterruptPriority+0x74>)
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	7afa      	ldrb	r2, [r7, #11]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d20a      	bcs.n	800e664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	607b      	str	r3, [r7, #4]
}
 800e660:	bf00      	nop
 800e662:	e7fe      	b.n	800e662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e664:	4b0e      	ldr	r3, [pc, #56]	; (800e6a0 <vPortValidateInterruptPriority+0x78>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e66c:	4b0d      	ldr	r3, [pc, #52]	; (800e6a4 <vPortValidateInterruptPriority+0x7c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	429a      	cmp	r2, r3
 800e672:	d90a      	bls.n	800e68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	603b      	str	r3, [r7, #0]
}
 800e686:	bf00      	nop
 800e688:	e7fe      	b.n	800e688 <vPortValidateInterruptPriority+0x60>
	}
 800e68a:	bf00      	nop
 800e68c:	3714      	adds	r7, #20
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	e000e3f0 	.word	0xe000e3f0
 800e69c:	20001be4 	.word	0x20001be4
 800e6a0:	e000ed0c 	.word	0xe000ed0c
 800e6a4:	20001be8 	.word	0x20001be8

0800e6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08a      	sub	sp, #40	; 0x28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6b4:	f7fe fd96 	bl	800d1e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6b8:	4b5b      	ldr	r3, [pc, #364]	; (800e828 <pvPortMalloc+0x180>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6c0:	f000 f920 	bl	800e904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6c4:	4b59      	ldr	r3, [pc, #356]	; (800e82c <pvPortMalloc+0x184>)
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4013      	ands	r3, r2
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f040 8093 	bne.w	800e7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d01d      	beq.n	800e714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e6d8:	2208      	movs	r2, #8
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4413      	add	r3, r2
 800e6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f003 0307 	and.w	r3, r3, #7
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d014      	beq.n	800e714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f023 0307 	bic.w	r3, r3, #7
 800e6f0:	3308      	adds	r3, #8
 800e6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00a      	beq.n	800e714 <pvPortMalloc+0x6c>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	617b      	str	r3, [r7, #20]
}
 800e710:	bf00      	nop
 800e712:	e7fe      	b.n	800e712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d06e      	beq.n	800e7f8 <pvPortMalloc+0x150>
 800e71a:	4b45      	ldr	r3, [pc, #276]	; (800e830 <pvPortMalloc+0x188>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	d869      	bhi.n	800e7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e724:	4b43      	ldr	r3, [pc, #268]	; (800e834 <pvPortMalloc+0x18c>)
 800e726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e728:	4b42      	ldr	r3, [pc, #264]	; (800e834 <pvPortMalloc+0x18c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e72e:	e004      	b.n	800e73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	429a      	cmp	r2, r3
 800e742:	d903      	bls.n	800e74c <pvPortMalloc+0xa4>
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1f1      	bne.n	800e730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e74c:	4b36      	ldr	r3, [pc, #216]	; (800e828 <pvPortMalloc+0x180>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e752:	429a      	cmp	r2, r3
 800e754:	d050      	beq.n	800e7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2208      	movs	r2, #8
 800e75c:	4413      	add	r3, r2
 800e75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	1ad2      	subs	r2, r2, r3
 800e770:	2308      	movs	r3, #8
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	429a      	cmp	r2, r3
 800e776:	d91f      	bls.n	800e7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4413      	add	r3, r2
 800e77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	f003 0307 	and.w	r3, r3, #7
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00a      	beq.n	800e7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800e78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78e:	f383 8811 	msr	BASEPRI, r3
 800e792:	f3bf 8f6f 	isb	sy
 800e796:	f3bf 8f4f 	dsb	sy
 800e79a:	613b      	str	r3, [r7, #16]
}
 800e79c:	bf00      	nop
 800e79e:	e7fe      	b.n	800e79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	1ad2      	subs	r2, r2, r3
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7b2:	69b8      	ldr	r0, [r7, #24]
 800e7b4:	f000 f908 	bl	800e9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7b8:	4b1d      	ldr	r3, [pc, #116]	; (800e830 <pvPortMalloc+0x188>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	4a1b      	ldr	r2, [pc, #108]	; (800e830 <pvPortMalloc+0x188>)
 800e7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7c6:	4b1a      	ldr	r3, [pc, #104]	; (800e830 <pvPortMalloc+0x188>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	4b1b      	ldr	r3, [pc, #108]	; (800e838 <pvPortMalloc+0x190>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d203      	bcs.n	800e7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7d2:	4b17      	ldr	r3, [pc, #92]	; (800e830 <pvPortMalloc+0x188>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a18      	ldr	r2, [pc, #96]	; (800e838 <pvPortMalloc+0x190>)
 800e7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	4b13      	ldr	r3, [pc, #76]	; (800e82c <pvPortMalloc+0x184>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	431a      	orrs	r2, r3
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e7ee:	4b13      	ldr	r3, [pc, #76]	; (800e83c <pvPortMalloc+0x194>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	4a11      	ldr	r2, [pc, #68]	; (800e83c <pvPortMalloc+0x194>)
 800e7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e7f8:	f7fe fd02 	bl	800d200 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	f003 0307 	and.w	r3, r3, #7
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00a      	beq.n	800e81c <pvPortMalloc+0x174>
	__asm volatile
 800e806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	60fb      	str	r3, [r7, #12]
}
 800e818:	bf00      	nop
 800e81a:	e7fe      	b.n	800e81a <pvPortMalloc+0x172>
	return pvReturn;
 800e81c:	69fb      	ldr	r3, [r7, #28]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3728      	adds	r7, #40	; 0x28
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	200057f4 	.word	0x200057f4
 800e82c:	20005808 	.word	0x20005808
 800e830:	200057f8 	.word	0x200057f8
 800e834:	200057ec 	.word	0x200057ec
 800e838:	200057fc 	.word	0x200057fc
 800e83c:	20005800 	.word	0x20005800

0800e840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d04d      	beq.n	800e8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e852:	2308      	movs	r3, #8
 800e854:	425b      	negs	r3, r3
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	4413      	add	r3, r2
 800e85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	4b24      	ldr	r3, [pc, #144]	; (800e8f8 <vPortFree+0xb8>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4013      	ands	r3, r2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10a      	bne.n	800e884 <vPortFree+0x44>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	60fb      	str	r3, [r7, #12]
}
 800e880:	bf00      	nop
 800e882:	e7fe      	b.n	800e882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00a      	beq.n	800e8a2 <vPortFree+0x62>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	60bb      	str	r3, [r7, #8]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	685a      	ldr	r2, [r3, #4]
 800e8a6:	4b14      	ldr	r3, [pc, #80]	; (800e8f8 <vPortFree+0xb8>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4013      	ands	r3, r2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d01e      	beq.n	800e8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d11a      	bne.n	800e8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	4b0e      	ldr	r3, [pc, #56]	; (800e8f8 <vPortFree+0xb8>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	43db      	mvns	r3, r3
 800e8c2:	401a      	ands	r2, r3
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8c8:	f7fe fc8c 	bl	800d1e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	685a      	ldr	r2, [r3, #4]
 800e8d0:	4b0a      	ldr	r3, [pc, #40]	; (800e8fc <vPortFree+0xbc>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	4a09      	ldr	r2, [pc, #36]	; (800e8fc <vPortFree+0xbc>)
 800e8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8da:	6938      	ldr	r0, [r7, #16]
 800e8dc:	f000 f874 	bl	800e9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e8e0:	4b07      	ldr	r3, [pc, #28]	; (800e900 <vPortFree+0xc0>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	4a06      	ldr	r2, [pc, #24]	; (800e900 <vPortFree+0xc0>)
 800e8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e8ea:	f7fe fc89 	bl	800d200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8ee:	bf00      	nop
 800e8f0:	3718      	adds	r7, #24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20005808 	.word	0x20005808
 800e8fc:	200057f8 	.word	0x200057f8
 800e900:	20005804 	.word	0x20005804

0800e904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e90a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e910:	4b27      	ldr	r3, [pc, #156]	; (800e9b0 <prvHeapInit+0xac>)
 800e912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f003 0307 	and.w	r3, r3, #7
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00c      	beq.n	800e938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3307      	adds	r3, #7
 800e922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f023 0307 	bic.w	r3, r3, #7
 800e92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	4a1f      	ldr	r2, [pc, #124]	; (800e9b0 <prvHeapInit+0xac>)
 800e934:	4413      	add	r3, r2
 800e936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e93c:	4a1d      	ldr	r2, [pc, #116]	; (800e9b4 <prvHeapInit+0xb0>)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e942:	4b1c      	ldr	r3, [pc, #112]	; (800e9b4 <prvHeapInit+0xb0>)
 800e944:	2200      	movs	r2, #0
 800e946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	4413      	add	r3, r2
 800e94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e950:	2208      	movs	r2, #8
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 0307 	bic.w	r3, r3, #7
 800e95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	4a15      	ldr	r2, [pc, #84]	; (800e9b8 <prvHeapInit+0xb4>)
 800e964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e966:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <prvHeapInit+0xb4>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2200      	movs	r2, #0
 800e96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e96e:	4b12      	ldr	r3, [pc, #72]	; (800e9b8 <prvHeapInit+0xb4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	1ad2      	subs	r2, r2, r3
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e984:	4b0c      	ldr	r3, [pc, #48]	; (800e9b8 <prvHeapInit+0xb4>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	4a0a      	ldr	r2, [pc, #40]	; (800e9bc <prvHeapInit+0xb8>)
 800e992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	4a09      	ldr	r2, [pc, #36]	; (800e9c0 <prvHeapInit+0xbc>)
 800e99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e99c:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <prvHeapInit+0xc0>)
 800e99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e9a2:	601a      	str	r2, [r3, #0]
}
 800e9a4:	bf00      	nop
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	20001bec 	.word	0x20001bec
 800e9b4:	200057ec 	.word	0x200057ec
 800e9b8:	200057f4 	.word	0x200057f4
 800e9bc:	200057fc 	.word	0x200057fc
 800e9c0:	200057f8 	.word	0x200057f8
 800e9c4:	20005808 	.word	0x20005808

0800e9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9d0:	4b28      	ldr	r3, [pc, #160]	; (800ea74 <prvInsertBlockIntoFreeList+0xac>)
 800e9d2:	60fb      	str	r3, [r7, #12]
 800e9d4:	e002      	b.n	800e9dc <prvInsertBlockIntoFreeList+0x14>
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d8f7      	bhi.n	800e9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d108      	bne.n	800ea0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	441a      	add	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	441a      	add	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d118      	bne.n	800ea50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	4b15      	ldr	r3, [pc, #84]	; (800ea78 <prvInsertBlockIntoFreeList+0xb0>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d00d      	beq.n	800ea46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	441a      	add	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	e008      	b.n	800ea58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea46:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <prvInsertBlockIntoFreeList+0xb0>)
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	e003      	b.n	800ea58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d002      	beq.n	800ea66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea66:	bf00      	nop
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	200057ec 	.word	0x200057ec
 800ea78:	200057f4 	.word	0x200057f4

0800ea7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ea80:	2200      	movs	r2, #0
 800ea82:	4912      	ldr	r1, [pc, #72]	; (800eacc <MX_USB_DEVICE_Init+0x50>)
 800ea84:	4812      	ldr	r0, [pc, #72]	; (800ead0 <MX_USB_DEVICE_Init+0x54>)
 800ea86:	f7fa ffe3 	bl	8009a50 <USBD_Init>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ea90:	f7f3 fcee 	bl	8002470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ea94:	490f      	ldr	r1, [pc, #60]	; (800ead4 <MX_USB_DEVICE_Init+0x58>)
 800ea96:	480e      	ldr	r0, [pc, #56]	; (800ead0 <MX_USB_DEVICE_Init+0x54>)
 800ea98:	f7fb f80a 	bl	8009ab0 <USBD_RegisterClass>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d001      	beq.n	800eaa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eaa2:	f7f3 fce5 	bl	8002470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eaa6:	490c      	ldr	r1, [pc, #48]	; (800ead8 <MX_USB_DEVICE_Init+0x5c>)
 800eaa8:	4809      	ldr	r0, [pc, #36]	; (800ead0 <MX_USB_DEVICE_Init+0x54>)
 800eaaa:	f7fa fefb 	bl	80098a4 <USBD_CDC_RegisterInterface>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d001      	beq.n	800eab8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eab4:	f7f3 fcdc 	bl	8002470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eab8:	4805      	ldr	r0, [pc, #20]	; (800ead0 <MX_USB_DEVICE_Init+0x54>)
 800eaba:	f7fb f82f 	bl	8009b1c <USBD_Start>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eac4:	f7f3 fcd4 	bl	8002470 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eac8:	bf00      	nop
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	200005b0 	.word	0x200005b0
 800ead0:	2000580c 	.word	0x2000580c
 800ead4:	20000518 	.word	0x20000518
 800ead8:	2000059c 	.word	0x2000059c

0800eadc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eae0:	2200      	movs	r2, #0
 800eae2:	4905      	ldr	r1, [pc, #20]	; (800eaf8 <CDC_Init_FS+0x1c>)
 800eae4:	4805      	ldr	r0, [pc, #20]	; (800eafc <CDC_Init_FS+0x20>)
 800eae6:	f7fa fef7 	bl	80098d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eaea:	4905      	ldr	r1, [pc, #20]	; (800eb00 <CDC_Init_FS+0x24>)
 800eaec:	4803      	ldr	r0, [pc, #12]	; (800eafc <CDC_Init_FS+0x20>)
 800eaee:	f7fa ff15 	bl	800991c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eaf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	20005ee8 	.word	0x20005ee8
 800eafc:	2000580c 	.word	0x2000580c
 800eb00:	20005ae8 	.word	0x20005ae8

0800eb04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eb04:	b480      	push	{r7}
 800eb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eb08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	6039      	str	r1, [r7, #0]
 800eb1e:	71fb      	strb	r3, [r7, #7]
 800eb20:	4613      	mov	r3, r2
 800eb22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	2b23      	cmp	r3, #35	; 0x23
 800eb28:	d84a      	bhi.n	800ebc0 <CDC_Control_FS+0xac>
 800eb2a:	a201      	add	r2, pc, #4	; (adr r2, 800eb30 <CDC_Control_FS+0x1c>)
 800eb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb30:	0800ebc1 	.word	0x0800ebc1
 800eb34:	0800ebc1 	.word	0x0800ebc1
 800eb38:	0800ebc1 	.word	0x0800ebc1
 800eb3c:	0800ebc1 	.word	0x0800ebc1
 800eb40:	0800ebc1 	.word	0x0800ebc1
 800eb44:	0800ebc1 	.word	0x0800ebc1
 800eb48:	0800ebc1 	.word	0x0800ebc1
 800eb4c:	0800ebc1 	.word	0x0800ebc1
 800eb50:	0800ebc1 	.word	0x0800ebc1
 800eb54:	0800ebc1 	.word	0x0800ebc1
 800eb58:	0800ebc1 	.word	0x0800ebc1
 800eb5c:	0800ebc1 	.word	0x0800ebc1
 800eb60:	0800ebc1 	.word	0x0800ebc1
 800eb64:	0800ebc1 	.word	0x0800ebc1
 800eb68:	0800ebc1 	.word	0x0800ebc1
 800eb6c:	0800ebc1 	.word	0x0800ebc1
 800eb70:	0800ebc1 	.word	0x0800ebc1
 800eb74:	0800ebc1 	.word	0x0800ebc1
 800eb78:	0800ebc1 	.word	0x0800ebc1
 800eb7c:	0800ebc1 	.word	0x0800ebc1
 800eb80:	0800ebc1 	.word	0x0800ebc1
 800eb84:	0800ebc1 	.word	0x0800ebc1
 800eb88:	0800ebc1 	.word	0x0800ebc1
 800eb8c:	0800ebc1 	.word	0x0800ebc1
 800eb90:	0800ebc1 	.word	0x0800ebc1
 800eb94:	0800ebc1 	.word	0x0800ebc1
 800eb98:	0800ebc1 	.word	0x0800ebc1
 800eb9c:	0800ebc1 	.word	0x0800ebc1
 800eba0:	0800ebc1 	.word	0x0800ebc1
 800eba4:	0800ebc1 	.word	0x0800ebc1
 800eba8:	0800ebc1 	.word	0x0800ebc1
 800ebac:	0800ebc1 	.word	0x0800ebc1
 800ebb0:	0800ebc1 	.word	0x0800ebc1
 800ebb4:	0800ebc1 	.word	0x0800ebc1
 800ebb8:	0800ebc1 	.word	0x0800ebc1
 800ebbc:	0800ebc1 	.word	0x0800ebc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ebc0:	bf00      	nop
  }

  return (USBD_OK);
 800ebc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ebda:	6879      	ldr	r1, [r7, #4]
 800ebdc:	4805      	ldr	r0, [pc, #20]	; (800ebf4 <CDC_Receive_FS+0x24>)
 800ebde:	f7fa fe9d 	bl	800991c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ebe2:	4804      	ldr	r0, [pc, #16]	; (800ebf4 <CDC_Receive_FS+0x24>)
 800ebe4:	f7fa fefe 	bl	80099e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ebe8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	2000580c 	.word	0x2000580c

0800ebf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ec08:	4b0d      	ldr	r3, [pc, #52]	; (800ec40 <CDC_Transmit_FS+0x48>)
 800ec0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d001      	beq.n	800ec1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e00b      	b.n	800ec36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ec1e:	887b      	ldrh	r3, [r7, #2]
 800ec20:	461a      	mov	r2, r3
 800ec22:	6879      	ldr	r1, [r7, #4]
 800ec24:	4806      	ldr	r0, [pc, #24]	; (800ec40 <CDC_Transmit_FS+0x48>)
 800ec26:	f7fa fe57 	bl	80098d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ec2a:	4805      	ldr	r0, [pc, #20]	; (800ec40 <CDC_Transmit_FS+0x48>)
 800ec2c:	f7fa fe94 	bl	8009958 <USBD_CDC_TransmitPacket>
 800ec30:	4603      	mov	r3, r0
 800ec32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	2000580c 	.word	0x2000580c

0800ec44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b087      	sub	sp, #28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ec56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	371c      	adds	r7, #28
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr
	...

0800ec68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	4603      	mov	r3, r0
 800ec70:	6039      	str	r1, [r7, #0]
 800ec72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	2212      	movs	r2, #18
 800ec78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ec7a:	4b03      	ldr	r3, [pc, #12]	; (800ec88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	200005cc 	.word	0x200005cc

0800ec8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	6039      	str	r1, [r7, #0]
 800ec96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	2204      	movs	r2, #4
 800ec9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec9e:	4b03      	ldr	r3, [pc, #12]	; (800ecac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	200005e0 	.word	0x200005e0

0800ecb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	6039      	str	r1, [r7, #0]
 800ecba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ecbc:	79fb      	ldrb	r3, [r7, #7]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d105      	bne.n	800ecce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ecc2:	683a      	ldr	r2, [r7, #0]
 800ecc4:	4907      	ldr	r1, [pc, #28]	; (800ece4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ecc6:	4808      	ldr	r0, [pc, #32]	; (800ece8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ecc8:	f7fc f8d4 	bl	800ae74 <USBD_GetString>
 800eccc:	e004      	b.n	800ecd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	4904      	ldr	r1, [pc, #16]	; (800ece4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ecd2:	4805      	ldr	r0, [pc, #20]	; (800ece8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ecd4:	f7fc f8ce 	bl	800ae74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecd8:	4b02      	ldr	r3, [pc, #8]	; (800ece4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	200062e8 	.word	0x200062e8
 800ece8:	08010048 	.word	0x08010048

0800ecec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	6039      	str	r1, [r7, #0]
 800ecf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	4904      	ldr	r1, [pc, #16]	; (800ed0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ecfc:	4804      	ldr	r0, [pc, #16]	; (800ed10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ecfe:	f7fc f8b9 	bl	800ae74 <USBD_GetString>
  return USBD_StrDesc;
 800ed02:	4b02      	ldr	r3, [pc, #8]	; (800ed0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	200062e8 	.word	0x200062e8
 800ed10:	08010060 	.word	0x08010060

0800ed14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	6039      	str	r1, [r7, #0]
 800ed1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	221a      	movs	r2, #26
 800ed24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ed26:	f000 f843 	bl	800edb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ed2a:	4b02      	ldr	r3, [pc, #8]	; (800ed34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	200005e4 	.word	0x200005e4

0800ed38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	6039      	str	r1, [r7, #0]
 800ed42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ed44:	79fb      	ldrb	r3, [r7, #7]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d105      	bne.n	800ed56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	4907      	ldr	r1, [pc, #28]	; (800ed6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ed4e:	4808      	ldr	r0, [pc, #32]	; (800ed70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ed50:	f7fc f890 	bl	800ae74 <USBD_GetString>
 800ed54:	e004      	b.n	800ed60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	4904      	ldr	r1, [pc, #16]	; (800ed6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ed5a:	4805      	ldr	r0, [pc, #20]	; (800ed70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ed5c:	f7fc f88a 	bl	800ae74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed60:	4b02      	ldr	r3, [pc, #8]	; (800ed6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	200062e8 	.word	0x200062e8
 800ed70:	08010074 	.word	0x08010074

0800ed74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	6039      	str	r1, [r7, #0]
 800ed7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d105      	bne.n	800ed92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed86:	683a      	ldr	r2, [r7, #0]
 800ed88:	4907      	ldr	r1, [pc, #28]	; (800eda8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed8a:	4808      	ldr	r0, [pc, #32]	; (800edac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed8c:	f7fc f872 	bl	800ae74 <USBD_GetString>
 800ed90:	e004      	b.n	800ed9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	4904      	ldr	r1, [pc, #16]	; (800eda8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed96:	4805      	ldr	r0, [pc, #20]	; (800edac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed98:	f7fc f86c 	bl	800ae74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed9c:	4b02      	ldr	r3, [pc, #8]	; (800eda8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	200062e8 	.word	0x200062e8
 800edac:	08010080 	.word	0x08010080

0800edb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800edb6:	4b0f      	ldr	r3, [pc, #60]	; (800edf4 <Get_SerialNum+0x44>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800edbc:	4b0e      	ldr	r3, [pc, #56]	; (800edf8 <Get_SerialNum+0x48>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800edc2:	4b0e      	ldr	r3, [pc, #56]	; (800edfc <Get_SerialNum+0x4c>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4413      	add	r3, r2
 800edce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d009      	beq.n	800edea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800edd6:	2208      	movs	r2, #8
 800edd8:	4909      	ldr	r1, [pc, #36]	; (800ee00 <Get_SerialNum+0x50>)
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f000 f814 	bl	800ee08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ede0:	2204      	movs	r2, #4
 800ede2:	4908      	ldr	r1, [pc, #32]	; (800ee04 <Get_SerialNum+0x54>)
 800ede4:	68b8      	ldr	r0, [r7, #8]
 800ede6:	f000 f80f 	bl	800ee08 <IntToUnicode>
  }
}
 800edea:	bf00      	nop
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	1fff7a10 	.word	0x1fff7a10
 800edf8:	1fff7a14 	.word	0x1fff7a14
 800edfc:	1fff7a18 	.word	0x1fff7a18
 800ee00:	200005e6 	.word	0x200005e6
 800ee04:	200005f6 	.word	0x200005f6

0800ee08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b087      	sub	sp, #28
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	4613      	mov	r3, r2
 800ee14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	75fb      	strb	r3, [r7, #23]
 800ee1e:	e027      	b.n	800ee70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	0f1b      	lsrs	r3, r3, #28
 800ee24:	2b09      	cmp	r3, #9
 800ee26:	d80b      	bhi.n	800ee40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	0f1b      	lsrs	r3, r3, #28
 800ee2c:	b2da      	uxtb	r2, r3
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	005b      	lsls	r3, r3, #1
 800ee32:	4619      	mov	r1, r3
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	440b      	add	r3, r1
 800ee38:	3230      	adds	r2, #48	; 0x30
 800ee3a:	b2d2      	uxtb	r2, r2
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	e00a      	b.n	800ee56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	0f1b      	lsrs	r3, r3, #28
 800ee44:	b2da      	uxtb	r2, r3
 800ee46:	7dfb      	ldrb	r3, [r7, #23]
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	440b      	add	r3, r1
 800ee50:	3237      	adds	r2, #55	; 0x37
 800ee52:	b2d2      	uxtb	r2, r2
 800ee54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	011b      	lsls	r3, r3, #4
 800ee5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ee5c:	7dfb      	ldrb	r3, [r7, #23]
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	3301      	adds	r3, #1
 800ee62:	68ba      	ldr	r2, [r7, #8]
 800ee64:	4413      	add	r3, r2
 800ee66:	2200      	movs	r2, #0
 800ee68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ee6a:	7dfb      	ldrb	r3, [r7, #23]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	75fb      	strb	r3, [r7, #23]
 800ee70:	7dfa      	ldrb	r2, [r7, #23]
 800ee72:	79fb      	ldrb	r3, [r7, #7]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d3d3      	bcc.n	800ee20 <IntToUnicode+0x18>
  }
}
 800ee78:	bf00      	nop
 800ee7a:	bf00      	nop
 800ee7c:	371c      	adds	r7, #28
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
	...

0800ee88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b08a      	sub	sp, #40	; 0x28
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee90:	f107 0314 	add.w	r3, r7, #20
 800ee94:	2200      	movs	r2, #0
 800ee96:	601a      	str	r2, [r3, #0]
 800ee98:	605a      	str	r2, [r3, #4]
 800ee9a:	609a      	str	r2, [r3, #8]
 800ee9c:	60da      	str	r2, [r3, #12]
 800ee9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eea8:	d13a      	bne.n	800ef20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eeaa:	2300      	movs	r3, #0
 800eeac:	613b      	str	r3, [r7, #16]
 800eeae:	4b1e      	ldr	r3, [pc, #120]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800eeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb2:	4a1d      	ldr	r2, [pc, #116]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800eeb4:	f043 0301 	orr.w	r3, r3, #1
 800eeb8:	6313      	str	r3, [r2, #48]	; 0x30
 800eeba:	4b1b      	ldr	r3, [pc, #108]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800eebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eebe:	f003 0301 	and.w	r3, r3, #1
 800eec2:	613b      	str	r3, [r7, #16]
 800eec4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eec6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eeca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eecc:	2302      	movs	r3, #2
 800eece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eed0:	2300      	movs	r3, #0
 800eed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eed4:	2303      	movs	r3, #3
 800eed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eed8:	230a      	movs	r3, #10
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eedc:	f107 0314 	add.w	r3, r7, #20
 800eee0:	4619      	mov	r1, r3
 800eee2:	4812      	ldr	r0, [pc, #72]	; (800ef2c <HAL_PCD_MspInit+0xa4>)
 800eee4:	f7f3 fe8a 	bl	8002bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eee8:	4b0f      	ldr	r3, [pc, #60]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800eeea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeec:	4a0e      	ldr	r2, [pc, #56]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800eeee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef2:	6353      	str	r3, [r2, #52]	; 0x34
 800eef4:	2300      	movs	r3, #0
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	4b0b      	ldr	r3, [pc, #44]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800eefa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eefc:	4a0a      	ldr	r2, [pc, #40]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800eefe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef02:	6453      	str	r3, [r2, #68]	; 0x44
 800ef04:	4b08      	ldr	r3, [pc, #32]	; (800ef28 <HAL_PCD_MspInit+0xa0>)
 800ef06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef0c:	60fb      	str	r3, [r7, #12]
 800ef0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ef10:	2200      	movs	r2, #0
 800ef12:	2105      	movs	r1, #5
 800ef14:	2043      	movs	r0, #67	; 0x43
 800ef16:	f7f3 fe47 	bl	8002ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ef1a:	2043      	movs	r0, #67	; 0x43
 800ef1c:	f7f3 fe60 	bl	8002be0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ef20:	bf00      	nop
 800ef22:	3728      	adds	r7, #40	; 0x28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	40023800 	.word	0x40023800
 800ef2c:	40020000 	.word	0x40020000

0800ef30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ef44:	4619      	mov	r1, r3
 800ef46:	4610      	mov	r0, r2
 800ef48:	f7fa fe35 	bl	8009bb6 <USBD_LL_SetupStage>
}
 800ef4c:	bf00      	nop
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ef66:	78fa      	ldrb	r2, [r7, #3]
 800ef68:	6879      	ldr	r1, [r7, #4]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	00db      	lsls	r3, r3, #3
 800ef6e:	4413      	add	r3, r2
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	440b      	add	r3, r1
 800ef74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	78fb      	ldrb	r3, [r7, #3]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	f7fa fe6f 	bl	8009c60 <USBD_LL_DataOutStage>
}
 800ef82:	bf00      	nop
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b082      	sub	sp, #8
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	460b      	mov	r3, r1
 800ef94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ef9c:	78fa      	ldrb	r2, [r7, #3]
 800ef9e:	6879      	ldr	r1, [r7, #4]
 800efa0:	4613      	mov	r3, r2
 800efa2:	00db      	lsls	r3, r3, #3
 800efa4:	4413      	add	r3, r2
 800efa6:	009b      	lsls	r3, r3, #2
 800efa8:	440b      	add	r3, r1
 800efaa:	334c      	adds	r3, #76	; 0x4c
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	78fb      	ldrb	r3, [r7, #3]
 800efb0:	4619      	mov	r1, r3
 800efb2:	f7fa ff08 	bl	8009dc6 <USBD_LL_DataInStage>
}
 800efb6:	bf00      	nop
 800efb8:	3708      	adds	r7, #8
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}

0800efbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b082      	sub	sp, #8
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fb f83c 	bl	800a04a <USBD_LL_SOF>
}
 800efd2:	bf00      	nop
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b084      	sub	sp, #16
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800efe2:	2301      	movs	r3, #1
 800efe4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	2b02      	cmp	r3, #2
 800efec:	d001      	beq.n	800eff2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800efee:	f7f3 fa3f 	bl	8002470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eff8:	7bfa      	ldrb	r2, [r7, #15]
 800effa:	4611      	mov	r1, r2
 800effc:	4618      	mov	r0, r3
 800effe:	f7fa ffe6 	bl	8009fce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fa ff8e 	bl	8009f2a <USBD_LL_Reset>
}
 800f00e:	bf00      	nop
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
	...

0800f018 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f026:	4618      	mov	r0, r3
 800f028:	f7fa ffe1 	bl	8009fee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	6812      	ldr	r2, [r2, #0]
 800f03a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f03e:	f043 0301 	orr.w	r3, r3, #1
 800f042:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d005      	beq.n	800f058 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f04c:	4b04      	ldr	r3, [pc, #16]	; (800f060 <HAL_PCD_SuspendCallback+0x48>)
 800f04e:	691b      	ldr	r3, [r3, #16]
 800f050:	4a03      	ldr	r2, [pc, #12]	; (800f060 <HAL_PCD_SuspendCallback+0x48>)
 800f052:	f043 0306 	orr.w	r3, r3, #6
 800f056:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f058:	bf00      	nop
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	e000ed00 	.word	0xe000ed00

0800f064 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f072:	4618      	mov	r0, r3
 800f074:	f7fa ffd1 	bl	800a01a <USBD_LL_Resume>
}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	460b      	mov	r3, r1
 800f08a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f092:	78fa      	ldrb	r2, [r7, #3]
 800f094:	4611      	mov	r1, r2
 800f096:	4618      	mov	r0, r3
 800f098:	f7fb f829 	bl	800a0ee <USBD_LL_IsoOUTIncomplete>
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f0b6:	78fa      	ldrb	r2, [r7, #3]
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fa ffe5 	bl	800a08a <USBD_LL_IsoINIncomplete>
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fb f83b 	bl	800a152 <USBD_LL_DevConnected>
}
 800f0dc:	bf00      	nop
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fb f838 	bl	800a168 <USBD_LL_DevDisconnected>
}
 800f0f8:	bf00      	nop
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d13c      	bne.n	800f18a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f110:	4a20      	ldr	r2, [pc, #128]	; (800f194 <USBD_LL_Init+0x94>)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4a1e      	ldr	r2, [pc, #120]	; (800f194 <USBD_LL_Init+0x94>)
 800f11c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f120:	4b1c      	ldr	r3, [pc, #112]	; (800f194 <USBD_LL_Init+0x94>)
 800f122:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f126:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f128:	4b1a      	ldr	r3, [pc, #104]	; (800f194 <USBD_LL_Init+0x94>)
 800f12a:	2204      	movs	r2, #4
 800f12c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f12e:	4b19      	ldr	r3, [pc, #100]	; (800f194 <USBD_LL_Init+0x94>)
 800f130:	2202      	movs	r2, #2
 800f132:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f134:	4b17      	ldr	r3, [pc, #92]	; (800f194 <USBD_LL_Init+0x94>)
 800f136:	2200      	movs	r2, #0
 800f138:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f13a:	4b16      	ldr	r3, [pc, #88]	; (800f194 <USBD_LL_Init+0x94>)
 800f13c:	2202      	movs	r2, #2
 800f13e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f140:	4b14      	ldr	r3, [pc, #80]	; (800f194 <USBD_LL_Init+0x94>)
 800f142:	2200      	movs	r2, #0
 800f144:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f146:	4b13      	ldr	r3, [pc, #76]	; (800f194 <USBD_LL_Init+0x94>)
 800f148:	2200      	movs	r2, #0
 800f14a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f14c:	4b11      	ldr	r3, [pc, #68]	; (800f194 <USBD_LL_Init+0x94>)
 800f14e:	2200      	movs	r2, #0
 800f150:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f152:	4b10      	ldr	r3, [pc, #64]	; (800f194 <USBD_LL_Init+0x94>)
 800f154:	2200      	movs	r2, #0
 800f156:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f158:	4b0e      	ldr	r3, [pc, #56]	; (800f194 <USBD_LL_Init+0x94>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f15e:	480d      	ldr	r0, [pc, #52]	; (800f194 <USBD_LL_Init+0x94>)
 800f160:	f7f4 fec1 	bl	8003ee6 <HAL_PCD_Init>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d001      	beq.n	800f16e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f16a:	f7f3 f981 	bl	8002470 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f16e:	2180      	movs	r1, #128	; 0x80
 800f170:	4808      	ldr	r0, [pc, #32]	; (800f194 <USBD_LL_Init+0x94>)
 800f172:	f7f6 f918 	bl	80053a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f176:	2240      	movs	r2, #64	; 0x40
 800f178:	2100      	movs	r1, #0
 800f17a:	4806      	ldr	r0, [pc, #24]	; (800f194 <USBD_LL_Init+0x94>)
 800f17c:	f7f6 f8cc 	bl	8005318 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f180:	2280      	movs	r2, #128	; 0x80
 800f182:	2101      	movs	r1, #1
 800f184:	4803      	ldr	r0, [pc, #12]	; (800f194 <USBD_LL_Init+0x94>)
 800f186:	f7f6 f8c7 	bl	8005318 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	200064e8 	.word	0x200064e8

0800f198 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7f4 ffb6 	bl	8004120 <HAL_PCD_Start>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f000 f942 	bl	800f444 <USBD_Get_USB_Status>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3710      	adds	r7, #16
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b084      	sub	sp, #16
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
 800f1d6:	4608      	mov	r0, r1
 800f1d8:	4611      	mov	r1, r2
 800f1da:	461a      	mov	r2, r3
 800f1dc:	4603      	mov	r3, r0
 800f1de:	70fb      	strb	r3, [r7, #3]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	70bb      	strb	r3, [r7, #2]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1f6:	78bb      	ldrb	r3, [r7, #2]
 800f1f8:	883a      	ldrh	r2, [r7, #0]
 800f1fa:	78f9      	ldrb	r1, [r7, #3]
 800f1fc:	f7f5 fc87 	bl	8004b0e <HAL_PCD_EP_Open>
 800f200:	4603      	mov	r3, r0
 800f202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f204:	7bfb      	ldrb	r3, [r7, #15]
 800f206:	4618      	mov	r0, r3
 800f208:	f000 f91c 	bl	800f444 <USBD_Get_USB_Status>
 800f20c:	4603      	mov	r3, r0
 800f20e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f210:	7bbb      	ldrb	r3, [r7, #14]
}
 800f212:	4618      	mov	r0, r3
 800f214:	3710      	adds	r7, #16
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b084      	sub	sp, #16
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	460b      	mov	r3, r1
 800f224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f226:	2300      	movs	r3, #0
 800f228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f22a:	2300      	movs	r3, #0
 800f22c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f234:	78fa      	ldrb	r2, [r7, #3]
 800f236:	4611      	mov	r1, r2
 800f238:	4618      	mov	r0, r3
 800f23a:	f7f5 fcd0 	bl	8004bde <HAL_PCD_EP_Close>
 800f23e:	4603      	mov	r3, r0
 800f240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	4618      	mov	r0, r3
 800f246:	f000 f8fd 	bl	800f444 <USBD_Get_USB_Status>
 800f24a:	4603      	mov	r3, r0
 800f24c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f24e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f264:	2300      	movs	r3, #0
 800f266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f268:	2300      	movs	r3, #0
 800f26a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f272:	78fa      	ldrb	r2, [r7, #3]
 800f274:	4611      	mov	r1, r2
 800f276:	4618      	mov	r0, r3
 800f278:	f7f5 fda8 	bl	8004dcc <HAL_PCD_EP_SetStall>
 800f27c:	4603      	mov	r3, r0
 800f27e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f280:	7bfb      	ldrb	r3, [r7, #15]
 800f282:	4618      	mov	r0, r3
 800f284:	f000 f8de 	bl	800f444 <USBD_Get_USB_Status>
 800f288:	4603      	mov	r3, r0
 800f28a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f28c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
 800f29e:	460b      	mov	r3, r1
 800f2a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2b0:	78fa      	ldrb	r2, [r7, #3]
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7f5 fded 	bl	8004e94 <HAL_PCD_EP_ClrStall>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2be:	7bfb      	ldrb	r3, [r7, #15]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 f8bf 	bl	800f444 <USBD_Get_USB_Status>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f2e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	da0b      	bge.n	800f308 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f2f0:	78fb      	ldrb	r3, [r7, #3]
 800f2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2f6:	68f9      	ldr	r1, [r7, #12]
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	00db      	lsls	r3, r3, #3
 800f2fc:	4413      	add	r3, r2
 800f2fe:	009b      	lsls	r3, r3, #2
 800f300:	440b      	add	r3, r1
 800f302:	333e      	adds	r3, #62	; 0x3e
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	e00b      	b.n	800f320 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f308:	78fb      	ldrb	r3, [r7, #3]
 800f30a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f30e:	68f9      	ldr	r1, [r7, #12]
 800f310:	4613      	mov	r3, r2
 800f312:	00db      	lsls	r3, r3, #3
 800f314:	4413      	add	r3, r2
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	440b      	add	r3, r1
 800f31a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f31e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f320:	4618      	mov	r0, r3
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	460b      	mov	r3, r1
 800f336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f338:	2300      	movs	r3, #0
 800f33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f346:	78fa      	ldrb	r2, [r7, #3]
 800f348:	4611      	mov	r1, r2
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7f5 fbba 	bl	8004ac4 <HAL_PCD_SetAddress>
 800f350:	4603      	mov	r3, r0
 800f352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f354:	7bfb      	ldrb	r3, [r7, #15]
 800f356:	4618      	mov	r0, r3
 800f358:	f000 f874 	bl	800f444 <USBD_Get_USB_Status>
 800f35c:	4603      	mov	r3, r0
 800f35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f360:	7bbb      	ldrb	r3, [r7, #14]
}
 800f362:	4618      	mov	r0, r3
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}

0800f36a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b086      	sub	sp, #24
 800f36e:	af00      	add	r7, sp, #0
 800f370:	60f8      	str	r0, [r7, #12]
 800f372:	607a      	str	r2, [r7, #4]
 800f374:	603b      	str	r3, [r7, #0]
 800f376:	460b      	mov	r3, r1
 800f378:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f37e:	2300      	movs	r3, #0
 800f380:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f388:	7af9      	ldrb	r1, [r7, #11]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	f7f5 fcd3 	bl	8004d38 <HAL_PCD_EP_Transmit>
 800f392:	4603      	mov	r3, r0
 800f394:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f396:	7dfb      	ldrb	r3, [r7, #23]
 800f398:	4618      	mov	r0, r3
 800f39a:	f000 f853 	bl	800f444 <USBD_Get_USB_Status>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f3a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3718      	adds	r7, #24
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	607a      	str	r2, [r7, #4]
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f3ca:	7af9      	ldrb	r1, [r7, #11]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	f7f5 fc4f 	bl	8004c72 <HAL_PCD_EP_Receive>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3d8:	7dfb      	ldrb	r3, [r7, #23]
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f000 f832 	bl	800f444 <USBD_Get_USB_Status>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f3e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}

0800f3ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b082      	sub	sp, #8
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f400:	78fa      	ldrb	r2, [r7, #3]
 800f402:	4611      	mov	r1, r2
 800f404:	4618      	mov	r0, r3
 800f406:	f7f5 fc7f 	bl	8004d08 <HAL_PCD_EP_GetRxCount>
 800f40a:	4603      	mov	r3, r0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f41c:	4b03      	ldr	r3, [pc, #12]	; (800f42c <USBD_static_malloc+0x18>)
}
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	200069f4 	.word	0x200069f4

0800f430 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]

}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	4603      	mov	r3, r0
 800f44c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f452:	79fb      	ldrb	r3, [r7, #7]
 800f454:	2b03      	cmp	r3, #3
 800f456:	d817      	bhi.n	800f488 <USBD_Get_USB_Status+0x44>
 800f458:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <USBD_Get_USB_Status+0x1c>)
 800f45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45e:	bf00      	nop
 800f460:	0800f471 	.word	0x0800f471
 800f464:	0800f477 	.word	0x0800f477
 800f468:	0800f47d 	.word	0x0800f47d
 800f46c:	0800f483 	.word	0x0800f483
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f470:	2300      	movs	r3, #0
 800f472:	73fb      	strb	r3, [r7, #15]
    break;
 800f474:	e00b      	b.n	800f48e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f476:	2303      	movs	r3, #3
 800f478:	73fb      	strb	r3, [r7, #15]
    break;
 800f47a:	e008      	b.n	800f48e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f47c:	2301      	movs	r3, #1
 800f47e:	73fb      	strb	r3, [r7, #15]
    break;
 800f480:	e005      	b.n	800f48e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f482:	2303      	movs	r3, #3
 800f484:	73fb      	strb	r3, [r7, #15]
    break;
 800f486:	e002      	b.n	800f48e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f488:	2303      	movs	r3, #3
 800f48a:	73fb      	strb	r3, [r7, #15]
    break;
 800f48c:	bf00      	nop
  }
  return usb_status;
 800f48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <__errno>:
 800f49c:	4b01      	ldr	r3, [pc, #4]	; (800f4a4 <__errno+0x8>)
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop
 800f4a4:	20000600 	.word	0x20000600

0800f4a8 <__libc_init_array>:
 800f4a8:	b570      	push	{r4, r5, r6, lr}
 800f4aa:	4d0d      	ldr	r5, [pc, #52]	; (800f4e0 <__libc_init_array+0x38>)
 800f4ac:	4c0d      	ldr	r4, [pc, #52]	; (800f4e4 <__libc_init_array+0x3c>)
 800f4ae:	1b64      	subs	r4, r4, r5
 800f4b0:	10a4      	asrs	r4, r4, #2
 800f4b2:	2600      	movs	r6, #0
 800f4b4:	42a6      	cmp	r6, r4
 800f4b6:	d109      	bne.n	800f4cc <__libc_init_array+0x24>
 800f4b8:	4d0b      	ldr	r5, [pc, #44]	; (800f4e8 <__libc_init_array+0x40>)
 800f4ba:	4c0c      	ldr	r4, [pc, #48]	; (800f4ec <__libc_init_array+0x44>)
 800f4bc:	f000 fcb2 	bl	800fe24 <_init>
 800f4c0:	1b64      	subs	r4, r4, r5
 800f4c2:	10a4      	asrs	r4, r4, #2
 800f4c4:	2600      	movs	r6, #0
 800f4c6:	42a6      	cmp	r6, r4
 800f4c8:	d105      	bne.n	800f4d6 <__libc_init_array+0x2e>
 800f4ca:	bd70      	pop	{r4, r5, r6, pc}
 800f4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4d0:	4798      	blx	r3
 800f4d2:	3601      	adds	r6, #1
 800f4d4:	e7ee      	b.n	800f4b4 <__libc_init_array+0xc>
 800f4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4da:	4798      	blx	r3
 800f4dc:	3601      	adds	r6, #1
 800f4de:	e7f2      	b.n	800f4c6 <__libc_init_array+0x1e>
 800f4e0:	08010444 	.word	0x08010444
 800f4e4:	08010444 	.word	0x08010444
 800f4e8:	08010444 	.word	0x08010444
 800f4ec:	08010448 	.word	0x08010448

0800f4f0 <malloc>:
 800f4f0:	4b02      	ldr	r3, [pc, #8]	; (800f4fc <malloc+0xc>)
 800f4f2:	4601      	mov	r1, r0
 800f4f4:	6818      	ldr	r0, [r3, #0]
 800f4f6:	f000 b88d 	b.w	800f614 <_malloc_r>
 800f4fa:	bf00      	nop
 800f4fc:	20000600 	.word	0x20000600

0800f500 <free>:
 800f500:	4b02      	ldr	r3, [pc, #8]	; (800f50c <free+0xc>)
 800f502:	4601      	mov	r1, r0
 800f504:	6818      	ldr	r0, [r3, #0]
 800f506:	f000 b819 	b.w	800f53c <_free_r>
 800f50a:	bf00      	nop
 800f50c:	20000600 	.word	0x20000600

0800f510 <memcpy>:
 800f510:	440a      	add	r2, r1
 800f512:	4291      	cmp	r1, r2
 800f514:	f100 33ff 	add.w	r3, r0, #4294967295
 800f518:	d100      	bne.n	800f51c <memcpy+0xc>
 800f51a:	4770      	bx	lr
 800f51c:	b510      	push	{r4, lr}
 800f51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f522:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f526:	4291      	cmp	r1, r2
 800f528:	d1f9      	bne.n	800f51e <memcpy+0xe>
 800f52a:	bd10      	pop	{r4, pc}

0800f52c <memset>:
 800f52c:	4402      	add	r2, r0
 800f52e:	4603      	mov	r3, r0
 800f530:	4293      	cmp	r3, r2
 800f532:	d100      	bne.n	800f536 <memset+0xa>
 800f534:	4770      	bx	lr
 800f536:	f803 1b01 	strb.w	r1, [r3], #1
 800f53a:	e7f9      	b.n	800f530 <memset+0x4>

0800f53c <_free_r>:
 800f53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f53e:	2900      	cmp	r1, #0
 800f540:	d044      	beq.n	800f5cc <_free_r+0x90>
 800f542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f546:	9001      	str	r0, [sp, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f1a1 0404 	sub.w	r4, r1, #4
 800f54e:	bfb8      	it	lt
 800f550:	18e4      	addlt	r4, r4, r3
 800f552:	f000 f917 	bl	800f784 <__malloc_lock>
 800f556:	4a1e      	ldr	r2, [pc, #120]	; (800f5d0 <_free_r+0x94>)
 800f558:	9801      	ldr	r0, [sp, #4]
 800f55a:	6813      	ldr	r3, [r2, #0]
 800f55c:	b933      	cbnz	r3, 800f56c <_free_r+0x30>
 800f55e:	6063      	str	r3, [r4, #4]
 800f560:	6014      	str	r4, [r2, #0]
 800f562:	b003      	add	sp, #12
 800f564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f568:	f000 b912 	b.w	800f790 <__malloc_unlock>
 800f56c:	42a3      	cmp	r3, r4
 800f56e:	d908      	bls.n	800f582 <_free_r+0x46>
 800f570:	6825      	ldr	r5, [r4, #0]
 800f572:	1961      	adds	r1, r4, r5
 800f574:	428b      	cmp	r3, r1
 800f576:	bf01      	itttt	eq
 800f578:	6819      	ldreq	r1, [r3, #0]
 800f57a:	685b      	ldreq	r3, [r3, #4]
 800f57c:	1949      	addeq	r1, r1, r5
 800f57e:	6021      	streq	r1, [r4, #0]
 800f580:	e7ed      	b.n	800f55e <_free_r+0x22>
 800f582:	461a      	mov	r2, r3
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	b10b      	cbz	r3, 800f58c <_free_r+0x50>
 800f588:	42a3      	cmp	r3, r4
 800f58a:	d9fa      	bls.n	800f582 <_free_r+0x46>
 800f58c:	6811      	ldr	r1, [r2, #0]
 800f58e:	1855      	adds	r5, r2, r1
 800f590:	42a5      	cmp	r5, r4
 800f592:	d10b      	bne.n	800f5ac <_free_r+0x70>
 800f594:	6824      	ldr	r4, [r4, #0]
 800f596:	4421      	add	r1, r4
 800f598:	1854      	adds	r4, r2, r1
 800f59a:	42a3      	cmp	r3, r4
 800f59c:	6011      	str	r1, [r2, #0]
 800f59e:	d1e0      	bne.n	800f562 <_free_r+0x26>
 800f5a0:	681c      	ldr	r4, [r3, #0]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	6053      	str	r3, [r2, #4]
 800f5a6:	4421      	add	r1, r4
 800f5a8:	6011      	str	r1, [r2, #0]
 800f5aa:	e7da      	b.n	800f562 <_free_r+0x26>
 800f5ac:	d902      	bls.n	800f5b4 <_free_r+0x78>
 800f5ae:	230c      	movs	r3, #12
 800f5b0:	6003      	str	r3, [r0, #0]
 800f5b2:	e7d6      	b.n	800f562 <_free_r+0x26>
 800f5b4:	6825      	ldr	r5, [r4, #0]
 800f5b6:	1961      	adds	r1, r4, r5
 800f5b8:	428b      	cmp	r3, r1
 800f5ba:	bf04      	itt	eq
 800f5bc:	6819      	ldreq	r1, [r3, #0]
 800f5be:	685b      	ldreq	r3, [r3, #4]
 800f5c0:	6063      	str	r3, [r4, #4]
 800f5c2:	bf04      	itt	eq
 800f5c4:	1949      	addeq	r1, r1, r5
 800f5c6:	6021      	streq	r1, [r4, #0]
 800f5c8:	6054      	str	r4, [r2, #4]
 800f5ca:	e7ca      	b.n	800f562 <_free_r+0x26>
 800f5cc:	b003      	add	sp, #12
 800f5ce:	bd30      	pop	{r4, r5, pc}
 800f5d0:	20006c14 	.word	0x20006c14

0800f5d4 <sbrk_aligned>:
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	4e0e      	ldr	r6, [pc, #56]	; (800f610 <sbrk_aligned+0x3c>)
 800f5d8:	460c      	mov	r4, r1
 800f5da:	6831      	ldr	r1, [r6, #0]
 800f5dc:	4605      	mov	r5, r0
 800f5de:	b911      	cbnz	r1, 800f5e6 <sbrk_aligned+0x12>
 800f5e0:	f000 f88c 	bl	800f6fc <_sbrk_r>
 800f5e4:	6030      	str	r0, [r6, #0]
 800f5e6:	4621      	mov	r1, r4
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	f000 f887 	bl	800f6fc <_sbrk_r>
 800f5ee:	1c43      	adds	r3, r0, #1
 800f5f0:	d00a      	beq.n	800f608 <sbrk_aligned+0x34>
 800f5f2:	1cc4      	adds	r4, r0, #3
 800f5f4:	f024 0403 	bic.w	r4, r4, #3
 800f5f8:	42a0      	cmp	r0, r4
 800f5fa:	d007      	beq.n	800f60c <sbrk_aligned+0x38>
 800f5fc:	1a21      	subs	r1, r4, r0
 800f5fe:	4628      	mov	r0, r5
 800f600:	f000 f87c 	bl	800f6fc <_sbrk_r>
 800f604:	3001      	adds	r0, #1
 800f606:	d101      	bne.n	800f60c <sbrk_aligned+0x38>
 800f608:	f04f 34ff 	mov.w	r4, #4294967295
 800f60c:	4620      	mov	r0, r4
 800f60e:	bd70      	pop	{r4, r5, r6, pc}
 800f610:	20006c18 	.word	0x20006c18

0800f614 <_malloc_r>:
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f618:	1ccd      	adds	r5, r1, #3
 800f61a:	f025 0503 	bic.w	r5, r5, #3
 800f61e:	3508      	adds	r5, #8
 800f620:	2d0c      	cmp	r5, #12
 800f622:	bf38      	it	cc
 800f624:	250c      	movcc	r5, #12
 800f626:	2d00      	cmp	r5, #0
 800f628:	4607      	mov	r7, r0
 800f62a:	db01      	blt.n	800f630 <_malloc_r+0x1c>
 800f62c:	42a9      	cmp	r1, r5
 800f62e:	d905      	bls.n	800f63c <_malloc_r+0x28>
 800f630:	230c      	movs	r3, #12
 800f632:	603b      	str	r3, [r7, #0]
 800f634:	2600      	movs	r6, #0
 800f636:	4630      	mov	r0, r6
 800f638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63c:	4e2e      	ldr	r6, [pc, #184]	; (800f6f8 <_malloc_r+0xe4>)
 800f63e:	f000 f8a1 	bl	800f784 <__malloc_lock>
 800f642:	6833      	ldr	r3, [r6, #0]
 800f644:	461c      	mov	r4, r3
 800f646:	bb34      	cbnz	r4, 800f696 <_malloc_r+0x82>
 800f648:	4629      	mov	r1, r5
 800f64a:	4638      	mov	r0, r7
 800f64c:	f7ff ffc2 	bl	800f5d4 <sbrk_aligned>
 800f650:	1c43      	adds	r3, r0, #1
 800f652:	4604      	mov	r4, r0
 800f654:	d14d      	bne.n	800f6f2 <_malloc_r+0xde>
 800f656:	6834      	ldr	r4, [r6, #0]
 800f658:	4626      	mov	r6, r4
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	d140      	bne.n	800f6e0 <_malloc_r+0xcc>
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	4631      	mov	r1, r6
 800f662:	4638      	mov	r0, r7
 800f664:	eb04 0803 	add.w	r8, r4, r3
 800f668:	f000 f848 	bl	800f6fc <_sbrk_r>
 800f66c:	4580      	cmp	r8, r0
 800f66e:	d13a      	bne.n	800f6e6 <_malloc_r+0xd2>
 800f670:	6821      	ldr	r1, [r4, #0]
 800f672:	3503      	adds	r5, #3
 800f674:	1a6d      	subs	r5, r5, r1
 800f676:	f025 0503 	bic.w	r5, r5, #3
 800f67a:	3508      	adds	r5, #8
 800f67c:	2d0c      	cmp	r5, #12
 800f67e:	bf38      	it	cc
 800f680:	250c      	movcc	r5, #12
 800f682:	4629      	mov	r1, r5
 800f684:	4638      	mov	r0, r7
 800f686:	f7ff ffa5 	bl	800f5d4 <sbrk_aligned>
 800f68a:	3001      	adds	r0, #1
 800f68c:	d02b      	beq.n	800f6e6 <_malloc_r+0xd2>
 800f68e:	6823      	ldr	r3, [r4, #0]
 800f690:	442b      	add	r3, r5
 800f692:	6023      	str	r3, [r4, #0]
 800f694:	e00e      	b.n	800f6b4 <_malloc_r+0xa0>
 800f696:	6822      	ldr	r2, [r4, #0]
 800f698:	1b52      	subs	r2, r2, r5
 800f69a:	d41e      	bmi.n	800f6da <_malloc_r+0xc6>
 800f69c:	2a0b      	cmp	r2, #11
 800f69e:	d916      	bls.n	800f6ce <_malloc_r+0xba>
 800f6a0:	1961      	adds	r1, r4, r5
 800f6a2:	42a3      	cmp	r3, r4
 800f6a4:	6025      	str	r5, [r4, #0]
 800f6a6:	bf18      	it	ne
 800f6a8:	6059      	strne	r1, [r3, #4]
 800f6aa:	6863      	ldr	r3, [r4, #4]
 800f6ac:	bf08      	it	eq
 800f6ae:	6031      	streq	r1, [r6, #0]
 800f6b0:	5162      	str	r2, [r4, r5]
 800f6b2:	604b      	str	r3, [r1, #4]
 800f6b4:	4638      	mov	r0, r7
 800f6b6:	f104 060b 	add.w	r6, r4, #11
 800f6ba:	f000 f869 	bl	800f790 <__malloc_unlock>
 800f6be:	f026 0607 	bic.w	r6, r6, #7
 800f6c2:	1d23      	adds	r3, r4, #4
 800f6c4:	1af2      	subs	r2, r6, r3
 800f6c6:	d0b6      	beq.n	800f636 <_malloc_r+0x22>
 800f6c8:	1b9b      	subs	r3, r3, r6
 800f6ca:	50a3      	str	r3, [r4, r2]
 800f6cc:	e7b3      	b.n	800f636 <_malloc_r+0x22>
 800f6ce:	6862      	ldr	r2, [r4, #4]
 800f6d0:	42a3      	cmp	r3, r4
 800f6d2:	bf0c      	ite	eq
 800f6d4:	6032      	streq	r2, [r6, #0]
 800f6d6:	605a      	strne	r2, [r3, #4]
 800f6d8:	e7ec      	b.n	800f6b4 <_malloc_r+0xa0>
 800f6da:	4623      	mov	r3, r4
 800f6dc:	6864      	ldr	r4, [r4, #4]
 800f6de:	e7b2      	b.n	800f646 <_malloc_r+0x32>
 800f6e0:	4634      	mov	r4, r6
 800f6e2:	6876      	ldr	r6, [r6, #4]
 800f6e4:	e7b9      	b.n	800f65a <_malloc_r+0x46>
 800f6e6:	230c      	movs	r3, #12
 800f6e8:	603b      	str	r3, [r7, #0]
 800f6ea:	4638      	mov	r0, r7
 800f6ec:	f000 f850 	bl	800f790 <__malloc_unlock>
 800f6f0:	e7a1      	b.n	800f636 <_malloc_r+0x22>
 800f6f2:	6025      	str	r5, [r4, #0]
 800f6f4:	e7de      	b.n	800f6b4 <_malloc_r+0xa0>
 800f6f6:	bf00      	nop
 800f6f8:	20006c14 	.word	0x20006c14

0800f6fc <_sbrk_r>:
 800f6fc:	b538      	push	{r3, r4, r5, lr}
 800f6fe:	4d06      	ldr	r5, [pc, #24]	; (800f718 <_sbrk_r+0x1c>)
 800f700:	2300      	movs	r3, #0
 800f702:	4604      	mov	r4, r0
 800f704:	4608      	mov	r0, r1
 800f706:	602b      	str	r3, [r5, #0]
 800f708:	f7f3 f8be 	bl	8002888 <_sbrk>
 800f70c:	1c43      	adds	r3, r0, #1
 800f70e:	d102      	bne.n	800f716 <_sbrk_r+0x1a>
 800f710:	682b      	ldr	r3, [r5, #0]
 800f712:	b103      	cbz	r3, 800f716 <_sbrk_r+0x1a>
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	bd38      	pop	{r3, r4, r5, pc}
 800f718:	20006c1c 	.word	0x20006c1c

0800f71c <siprintf>:
 800f71c:	b40e      	push	{r1, r2, r3}
 800f71e:	b500      	push	{lr}
 800f720:	b09c      	sub	sp, #112	; 0x70
 800f722:	ab1d      	add	r3, sp, #116	; 0x74
 800f724:	9002      	str	r0, [sp, #8]
 800f726:	9006      	str	r0, [sp, #24]
 800f728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f72c:	4809      	ldr	r0, [pc, #36]	; (800f754 <siprintf+0x38>)
 800f72e:	9107      	str	r1, [sp, #28]
 800f730:	9104      	str	r1, [sp, #16]
 800f732:	4909      	ldr	r1, [pc, #36]	; (800f758 <siprintf+0x3c>)
 800f734:	f853 2b04 	ldr.w	r2, [r3], #4
 800f738:	9105      	str	r1, [sp, #20]
 800f73a:	6800      	ldr	r0, [r0, #0]
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	a902      	add	r1, sp, #8
 800f740:	f000 f888 	bl	800f854 <_svfiprintf_r>
 800f744:	9b02      	ldr	r3, [sp, #8]
 800f746:	2200      	movs	r2, #0
 800f748:	701a      	strb	r2, [r3, #0]
 800f74a:	b01c      	add	sp, #112	; 0x70
 800f74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f750:	b003      	add	sp, #12
 800f752:	4770      	bx	lr
 800f754:	20000600 	.word	0x20000600
 800f758:	ffff0208 	.word	0xffff0208

0800f75c <strncpy>:
 800f75c:	b510      	push	{r4, lr}
 800f75e:	3901      	subs	r1, #1
 800f760:	4603      	mov	r3, r0
 800f762:	b132      	cbz	r2, 800f772 <strncpy+0x16>
 800f764:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f768:	f803 4b01 	strb.w	r4, [r3], #1
 800f76c:	3a01      	subs	r2, #1
 800f76e:	2c00      	cmp	r4, #0
 800f770:	d1f7      	bne.n	800f762 <strncpy+0x6>
 800f772:	441a      	add	r2, r3
 800f774:	2100      	movs	r1, #0
 800f776:	4293      	cmp	r3, r2
 800f778:	d100      	bne.n	800f77c <strncpy+0x20>
 800f77a:	bd10      	pop	{r4, pc}
 800f77c:	f803 1b01 	strb.w	r1, [r3], #1
 800f780:	e7f9      	b.n	800f776 <strncpy+0x1a>
	...

0800f784 <__malloc_lock>:
 800f784:	4801      	ldr	r0, [pc, #4]	; (800f78c <__malloc_lock+0x8>)
 800f786:	f000 baf9 	b.w	800fd7c <__retarget_lock_acquire_recursive>
 800f78a:	bf00      	nop
 800f78c:	20006c20 	.word	0x20006c20

0800f790 <__malloc_unlock>:
 800f790:	4801      	ldr	r0, [pc, #4]	; (800f798 <__malloc_unlock+0x8>)
 800f792:	f000 baf4 	b.w	800fd7e <__retarget_lock_release_recursive>
 800f796:	bf00      	nop
 800f798:	20006c20 	.word	0x20006c20

0800f79c <__ssputs_r>:
 800f79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a0:	688e      	ldr	r6, [r1, #8]
 800f7a2:	429e      	cmp	r6, r3
 800f7a4:	4682      	mov	sl, r0
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	4690      	mov	r8, r2
 800f7aa:	461f      	mov	r7, r3
 800f7ac:	d838      	bhi.n	800f820 <__ssputs_r+0x84>
 800f7ae:	898a      	ldrh	r2, [r1, #12]
 800f7b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7b4:	d032      	beq.n	800f81c <__ssputs_r+0x80>
 800f7b6:	6825      	ldr	r5, [r4, #0]
 800f7b8:	6909      	ldr	r1, [r1, #16]
 800f7ba:	eba5 0901 	sub.w	r9, r5, r1
 800f7be:	6965      	ldr	r5, [r4, #20]
 800f7c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	444b      	add	r3, r9
 800f7cc:	106d      	asrs	r5, r5, #1
 800f7ce:	429d      	cmp	r5, r3
 800f7d0:	bf38      	it	cc
 800f7d2:	461d      	movcc	r5, r3
 800f7d4:	0553      	lsls	r3, r2, #21
 800f7d6:	d531      	bpl.n	800f83c <__ssputs_r+0xa0>
 800f7d8:	4629      	mov	r1, r5
 800f7da:	f7ff ff1b 	bl	800f614 <_malloc_r>
 800f7de:	4606      	mov	r6, r0
 800f7e0:	b950      	cbnz	r0, 800f7f8 <__ssputs_r+0x5c>
 800f7e2:	230c      	movs	r3, #12
 800f7e4:	f8ca 3000 	str.w	r3, [sl]
 800f7e8:	89a3      	ldrh	r3, [r4, #12]
 800f7ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7ee:	81a3      	strh	r3, [r4, #12]
 800f7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7f8:	6921      	ldr	r1, [r4, #16]
 800f7fa:	464a      	mov	r2, r9
 800f7fc:	f7ff fe88 	bl	800f510 <memcpy>
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f80a:	81a3      	strh	r3, [r4, #12]
 800f80c:	6126      	str	r6, [r4, #16]
 800f80e:	6165      	str	r5, [r4, #20]
 800f810:	444e      	add	r6, r9
 800f812:	eba5 0509 	sub.w	r5, r5, r9
 800f816:	6026      	str	r6, [r4, #0]
 800f818:	60a5      	str	r5, [r4, #8]
 800f81a:	463e      	mov	r6, r7
 800f81c:	42be      	cmp	r6, r7
 800f81e:	d900      	bls.n	800f822 <__ssputs_r+0x86>
 800f820:	463e      	mov	r6, r7
 800f822:	6820      	ldr	r0, [r4, #0]
 800f824:	4632      	mov	r2, r6
 800f826:	4641      	mov	r1, r8
 800f828:	f000 faaa 	bl	800fd80 <memmove>
 800f82c:	68a3      	ldr	r3, [r4, #8]
 800f82e:	1b9b      	subs	r3, r3, r6
 800f830:	60a3      	str	r3, [r4, #8]
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	4433      	add	r3, r6
 800f836:	6023      	str	r3, [r4, #0]
 800f838:	2000      	movs	r0, #0
 800f83a:	e7db      	b.n	800f7f4 <__ssputs_r+0x58>
 800f83c:	462a      	mov	r2, r5
 800f83e:	f000 fab9 	bl	800fdb4 <_realloc_r>
 800f842:	4606      	mov	r6, r0
 800f844:	2800      	cmp	r0, #0
 800f846:	d1e1      	bne.n	800f80c <__ssputs_r+0x70>
 800f848:	6921      	ldr	r1, [r4, #16]
 800f84a:	4650      	mov	r0, sl
 800f84c:	f7ff fe76 	bl	800f53c <_free_r>
 800f850:	e7c7      	b.n	800f7e2 <__ssputs_r+0x46>
	...

0800f854 <_svfiprintf_r>:
 800f854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f858:	4698      	mov	r8, r3
 800f85a:	898b      	ldrh	r3, [r1, #12]
 800f85c:	061b      	lsls	r3, r3, #24
 800f85e:	b09d      	sub	sp, #116	; 0x74
 800f860:	4607      	mov	r7, r0
 800f862:	460d      	mov	r5, r1
 800f864:	4614      	mov	r4, r2
 800f866:	d50e      	bpl.n	800f886 <_svfiprintf_r+0x32>
 800f868:	690b      	ldr	r3, [r1, #16]
 800f86a:	b963      	cbnz	r3, 800f886 <_svfiprintf_r+0x32>
 800f86c:	2140      	movs	r1, #64	; 0x40
 800f86e:	f7ff fed1 	bl	800f614 <_malloc_r>
 800f872:	6028      	str	r0, [r5, #0]
 800f874:	6128      	str	r0, [r5, #16]
 800f876:	b920      	cbnz	r0, 800f882 <_svfiprintf_r+0x2e>
 800f878:	230c      	movs	r3, #12
 800f87a:	603b      	str	r3, [r7, #0]
 800f87c:	f04f 30ff 	mov.w	r0, #4294967295
 800f880:	e0d1      	b.n	800fa26 <_svfiprintf_r+0x1d2>
 800f882:	2340      	movs	r3, #64	; 0x40
 800f884:	616b      	str	r3, [r5, #20]
 800f886:	2300      	movs	r3, #0
 800f888:	9309      	str	r3, [sp, #36]	; 0x24
 800f88a:	2320      	movs	r3, #32
 800f88c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f890:	f8cd 800c 	str.w	r8, [sp, #12]
 800f894:	2330      	movs	r3, #48	; 0x30
 800f896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fa40 <_svfiprintf_r+0x1ec>
 800f89a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f89e:	f04f 0901 	mov.w	r9, #1
 800f8a2:	4623      	mov	r3, r4
 800f8a4:	469a      	mov	sl, r3
 800f8a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8aa:	b10a      	cbz	r2, 800f8b0 <_svfiprintf_r+0x5c>
 800f8ac:	2a25      	cmp	r2, #37	; 0x25
 800f8ae:	d1f9      	bne.n	800f8a4 <_svfiprintf_r+0x50>
 800f8b0:	ebba 0b04 	subs.w	fp, sl, r4
 800f8b4:	d00b      	beq.n	800f8ce <_svfiprintf_r+0x7a>
 800f8b6:	465b      	mov	r3, fp
 800f8b8:	4622      	mov	r2, r4
 800f8ba:	4629      	mov	r1, r5
 800f8bc:	4638      	mov	r0, r7
 800f8be:	f7ff ff6d 	bl	800f79c <__ssputs_r>
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	f000 80aa 	beq.w	800fa1c <_svfiprintf_r+0x1c8>
 800f8c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8ca:	445a      	add	r2, fp
 800f8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f000 80a2 	beq.w	800fa1c <_svfiprintf_r+0x1c8>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	f04f 32ff 	mov.w	r2, #4294967295
 800f8de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8e2:	f10a 0a01 	add.w	sl, sl, #1
 800f8e6:	9304      	str	r3, [sp, #16]
 800f8e8:	9307      	str	r3, [sp, #28]
 800f8ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8ee:	931a      	str	r3, [sp, #104]	; 0x68
 800f8f0:	4654      	mov	r4, sl
 800f8f2:	2205      	movs	r2, #5
 800f8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8f8:	4851      	ldr	r0, [pc, #324]	; (800fa40 <_svfiprintf_r+0x1ec>)
 800f8fa:	f7f0 fc79 	bl	80001f0 <memchr>
 800f8fe:	9a04      	ldr	r2, [sp, #16]
 800f900:	b9d8      	cbnz	r0, 800f93a <_svfiprintf_r+0xe6>
 800f902:	06d0      	lsls	r0, r2, #27
 800f904:	bf44      	itt	mi
 800f906:	2320      	movmi	r3, #32
 800f908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f90c:	0711      	lsls	r1, r2, #28
 800f90e:	bf44      	itt	mi
 800f910:	232b      	movmi	r3, #43	; 0x2b
 800f912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f916:	f89a 3000 	ldrb.w	r3, [sl]
 800f91a:	2b2a      	cmp	r3, #42	; 0x2a
 800f91c:	d015      	beq.n	800f94a <_svfiprintf_r+0xf6>
 800f91e:	9a07      	ldr	r2, [sp, #28]
 800f920:	4654      	mov	r4, sl
 800f922:	2000      	movs	r0, #0
 800f924:	f04f 0c0a 	mov.w	ip, #10
 800f928:	4621      	mov	r1, r4
 800f92a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f92e:	3b30      	subs	r3, #48	; 0x30
 800f930:	2b09      	cmp	r3, #9
 800f932:	d94e      	bls.n	800f9d2 <_svfiprintf_r+0x17e>
 800f934:	b1b0      	cbz	r0, 800f964 <_svfiprintf_r+0x110>
 800f936:	9207      	str	r2, [sp, #28]
 800f938:	e014      	b.n	800f964 <_svfiprintf_r+0x110>
 800f93a:	eba0 0308 	sub.w	r3, r0, r8
 800f93e:	fa09 f303 	lsl.w	r3, r9, r3
 800f942:	4313      	orrs	r3, r2
 800f944:	9304      	str	r3, [sp, #16]
 800f946:	46a2      	mov	sl, r4
 800f948:	e7d2      	b.n	800f8f0 <_svfiprintf_r+0x9c>
 800f94a:	9b03      	ldr	r3, [sp, #12]
 800f94c:	1d19      	adds	r1, r3, #4
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	9103      	str	r1, [sp, #12]
 800f952:	2b00      	cmp	r3, #0
 800f954:	bfbb      	ittet	lt
 800f956:	425b      	neglt	r3, r3
 800f958:	f042 0202 	orrlt.w	r2, r2, #2
 800f95c:	9307      	strge	r3, [sp, #28]
 800f95e:	9307      	strlt	r3, [sp, #28]
 800f960:	bfb8      	it	lt
 800f962:	9204      	strlt	r2, [sp, #16]
 800f964:	7823      	ldrb	r3, [r4, #0]
 800f966:	2b2e      	cmp	r3, #46	; 0x2e
 800f968:	d10c      	bne.n	800f984 <_svfiprintf_r+0x130>
 800f96a:	7863      	ldrb	r3, [r4, #1]
 800f96c:	2b2a      	cmp	r3, #42	; 0x2a
 800f96e:	d135      	bne.n	800f9dc <_svfiprintf_r+0x188>
 800f970:	9b03      	ldr	r3, [sp, #12]
 800f972:	1d1a      	adds	r2, r3, #4
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	9203      	str	r2, [sp, #12]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	bfb8      	it	lt
 800f97c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f980:	3402      	adds	r4, #2
 800f982:	9305      	str	r3, [sp, #20]
 800f984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa50 <_svfiprintf_r+0x1fc>
 800f988:	7821      	ldrb	r1, [r4, #0]
 800f98a:	2203      	movs	r2, #3
 800f98c:	4650      	mov	r0, sl
 800f98e:	f7f0 fc2f 	bl	80001f0 <memchr>
 800f992:	b140      	cbz	r0, 800f9a6 <_svfiprintf_r+0x152>
 800f994:	2340      	movs	r3, #64	; 0x40
 800f996:	eba0 000a 	sub.w	r0, r0, sl
 800f99a:	fa03 f000 	lsl.w	r0, r3, r0
 800f99e:	9b04      	ldr	r3, [sp, #16]
 800f9a0:	4303      	orrs	r3, r0
 800f9a2:	3401      	adds	r4, #1
 800f9a4:	9304      	str	r3, [sp, #16]
 800f9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9aa:	4826      	ldr	r0, [pc, #152]	; (800fa44 <_svfiprintf_r+0x1f0>)
 800f9ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9b0:	2206      	movs	r2, #6
 800f9b2:	f7f0 fc1d 	bl	80001f0 <memchr>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d038      	beq.n	800fa2c <_svfiprintf_r+0x1d8>
 800f9ba:	4b23      	ldr	r3, [pc, #140]	; (800fa48 <_svfiprintf_r+0x1f4>)
 800f9bc:	bb1b      	cbnz	r3, 800fa06 <_svfiprintf_r+0x1b2>
 800f9be:	9b03      	ldr	r3, [sp, #12]
 800f9c0:	3307      	adds	r3, #7
 800f9c2:	f023 0307 	bic.w	r3, r3, #7
 800f9c6:	3308      	adds	r3, #8
 800f9c8:	9303      	str	r3, [sp, #12]
 800f9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9cc:	4433      	add	r3, r6
 800f9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f9d0:	e767      	b.n	800f8a2 <_svfiprintf_r+0x4e>
 800f9d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	2001      	movs	r0, #1
 800f9da:	e7a5      	b.n	800f928 <_svfiprintf_r+0xd4>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	3401      	adds	r4, #1
 800f9e0:	9305      	str	r3, [sp, #20]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	f04f 0c0a 	mov.w	ip, #10
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9ee:	3a30      	subs	r2, #48	; 0x30
 800f9f0:	2a09      	cmp	r2, #9
 800f9f2:	d903      	bls.n	800f9fc <_svfiprintf_r+0x1a8>
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d0c5      	beq.n	800f984 <_svfiprintf_r+0x130>
 800f9f8:	9105      	str	r1, [sp, #20]
 800f9fa:	e7c3      	b.n	800f984 <_svfiprintf_r+0x130>
 800f9fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa00:	4604      	mov	r4, r0
 800fa02:	2301      	movs	r3, #1
 800fa04:	e7f0      	b.n	800f9e8 <_svfiprintf_r+0x194>
 800fa06:	ab03      	add	r3, sp, #12
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	462a      	mov	r2, r5
 800fa0c:	4b0f      	ldr	r3, [pc, #60]	; (800fa4c <_svfiprintf_r+0x1f8>)
 800fa0e:	a904      	add	r1, sp, #16
 800fa10:	4638      	mov	r0, r7
 800fa12:	f3af 8000 	nop.w
 800fa16:	1c42      	adds	r2, r0, #1
 800fa18:	4606      	mov	r6, r0
 800fa1a:	d1d6      	bne.n	800f9ca <_svfiprintf_r+0x176>
 800fa1c:	89ab      	ldrh	r3, [r5, #12]
 800fa1e:	065b      	lsls	r3, r3, #25
 800fa20:	f53f af2c 	bmi.w	800f87c <_svfiprintf_r+0x28>
 800fa24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa26:	b01d      	add	sp, #116	; 0x74
 800fa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2c:	ab03      	add	r3, sp, #12
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	462a      	mov	r2, r5
 800fa32:	4b06      	ldr	r3, [pc, #24]	; (800fa4c <_svfiprintf_r+0x1f8>)
 800fa34:	a904      	add	r1, sp, #16
 800fa36:	4638      	mov	r0, r7
 800fa38:	f000 f87a 	bl	800fb30 <_printf_i>
 800fa3c:	e7eb      	b.n	800fa16 <_svfiprintf_r+0x1c2>
 800fa3e:	bf00      	nop
 800fa40:	08010406 	.word	0x08010406
 800fa44:	08010410 	.word	0x08010410
 800fa48:	00000000 	.word	0x00000000
 800fa4c:	0800f79d 	.word	0x0800f79d
 800fa50:	0801040c 	.word	0x0801040c

0800fa54 <_printf_common>:
 800fa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa58:	4616      	mov	r6, r2
 800fa5a:	4699      	mov	r9, r3
 800fa5c:	688a      	ldr	r2, [r1, #8]
 800fa5e:	690b      	ldr	r3, [r1, #16]
 800fa60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa64:	4293      	cmp	r3, r2
 800fa66:	bfb8      	it	lt
 800fa68:	4613      	movlt	r3, r2
 800fa6a:	6033      	str	r3, [r6, #0]
 800fa6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa70:	4607      	mov	r7, r0
 800fa72:	460c      	mov	r4, r1
 800fa74:	b10a      	cbz	r2, 800fa7a <_printf_common+0x26>
 800fa76:	3301      	adds	r3, #1
 800fa78:	6033      	str	r3, [r6, #0]
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	0699      	lsls	r1, r3, #26
 800fa7e:	bf42      	ittt	mi
 800fa80:	6833      	ldrmi	r3, [r6, #0]
 800fa82:	3302      	addmi	r3, #2
 800fa84:	6033      	strmi	r3, [r6, #0]
 800fa86:	6825      	ldr	r5, [r4, #0]
 800fa88:	f015 0506 	ands.w	r5, r5, #6
 800fa8c:	d106      	bne.n	800fa9c <_printf_common+0x48>
 800fa8e:	f104 0a19 	add.w	sl, r4, #25
 800fa92:	68e3      	ldr	r3, [r4, #12]
 800fa94:	6832      	ldr	r2, [r6, #0]
 800fa96:	1a9b      	subs	r3, r3, r2
 800fa98:	42ab      	cmp	r3, r5
 800fa9a:	dc26      	bgt.n	800faea <_printf_common+0x96>
 800fa9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800faa0:	1e13      	subs	r3, r2, #0
 800faa2:	6822      	ldr	r2, [r4, #0]
 800faa4:	bf18      	it	ne
 800faa6:	2301      	movne	r3, #1
 800faa8:	0692      	lsls	r2, r2, #26
 800faaa:	d42b      	bmi.n	800fb04 <_printf_common+0xb0>
 800faac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fab0:	4649      	mov	r1, r9
 800fab2:	4638      	mov	r0, r7
 800fab4:	47c0      	blx	r8
 800fab6:	3001      	adds	r0, #1
 800fab8:	d01e      	beq.n	800faf8 <_printf_common+0xa4>
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	68e5      	ldr	r5, [r4, #12]
 800fabe:	6832      	ldr	r2, [r6, #0]
 800fac0:	f003 0306 	and.w	r3, r3, #6
 800fac4:	2b04      	cmp	r3, #4
 800fac6:	bf08      	it	eq
 800fac8:	1aad      	subeq	r5, r5, r2
 800faca:	68a3      	ldr	r3, [r4, #8]
 800facc:	6922      	ldr	r2, [r4, #16]
 800face:	bf0c      	ite	eq
 800fad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fad4:	2500      	movne	r5, #0
 800fad6:	4293      	cmp	r3, r2
 800fad8:	bfc4      	itt	gt
 800fada:	1a9b      	subgt	r3, r3, r2
 800fadc:	18ed      	addgt	r5, r5, r3
 800fade:	2600      	movs	r6, #0
 800fae0:	341a      	adds	r4, #26
 800fae2:	42b5      	cmp	r5, r6
 800fae4:	d11a      	bne.n	800fb1c <_printf_common+0xc8>
 800fae6:	2000      	movs	r0, #0
 800fae8:	e008      	b.n	800fafc <_printf_common+0xa8>
 800faea:	2301      	movs	r3, #1
 800faec:	4652      	mov	r2, sl
 800faee:	4649      	mov	r1, r9
 800faf0:	4638      	mov	r0, r7
 800faf2:	47c0      	blx	r8
 800faf4:	3001      	adds	r0, #1
 800faf6:	d103      	bne.n	800fb00 <_printf_common+0xac>
 800faf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb00:	3501      	adds	r5, #1
 800fb02:	e7c6      	b.n	800fa92 <_printf_common+0x3e>
 800fb04:	18e1      	adds	r1, r4, r3
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	2030      	movs	r0, #48	; 0x30
 800fb0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb0e:	4422      	add	r2, r4
 800fb10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb18:	3302      	adds	r3, #2
 800fb1a:	e7c7      	b.n	800faac <_printf_common+0x58>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	4622      	mov	r2, r4
 800fb20:	4649      	mov	r1, r9
 800fb22:	4638      	mov	r0, r7
 800fb24:	47c0      	blx	r8
 800fb26:	3001      	adds	r0, #1
 800fb28:	d0e6      	beq.n	800faf8 <_printf_common+0xa4>
 800fb2a:	3601      	adds	r6, #1
 800fb2c:	e7d9      	b.n	800fae2 <_printf_common+0x8e>
	...

0800fb30 <_printf_i>:
 800fb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb34:	7e0f      	ldrb	r7, [r1, #24]
 800fb36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb38:	2f78      	cmp	r7, #120	; 0x78
 800fb3a:	4691      	mov	r9, r2
 800fb3c:	4680      	mov	r8, r0
 800fb3e:	460c      	mov	r4, r1
 800fb40:	469a      	mov	sl, r3
 800fb42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb46:	d807      	bhi.n	800fb58 <_printf_i+0x28>
 800fb48:	2f62      	cmp	r7, #98	; 0x62
 800fb4a:	d80a      	bhi.n	800fb62 <_printf_i+0x32>
 800fb4c:	2f00      	cmp	r7, #0
 800fb4e:	f000 80d8 	beq.w	800fd02 <_printf_i+0x1d2>
 800fb52:	2f58      	cmp	r7, #88	; 0x58
 800fb54:	f000 80a3 	beq.w	800fc9e <_printf_i+0x16e>
 800fb58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb60:	e03a      	b.n	800fbd8 <_printf_i+0xa8>
 800fb62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb66:	2b15      	cmp	r3, #21
 800fb68:	d8f6      	bhi.n	800fb58 <_printf_i+0x28>
 800fb6a:	a101      	add	r1, pc, #4	; (adr r1, 800fb70 <_printf_i+0x40>)
 800fb6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb70:	0800fbc9 	.word	0x0800fbc9
 800fb74:	0800fbdd 	.word	0x0800fbdd
 800fb78:	0800fb59 	.word	0x0800fb59
 800fb7c:	0800fb59 	.word	0x0800fb59
 800fb80:	0800fb59 	.word	0x0800fb59
 800fb84:	0800fb59 	.word	0x0800fb59
 800fb88:	0800fbdd 	.word	0x0800fbdd
 800fb8c:	0800fb59 	.word	0x0800fb59
 800fb90:	0800fb59 	.word	0x0800fb59
 800fb94:	0800fb59 	.word	0x0800fb59
 800fb98:	0800fb59 	.word	0x0800fb59
 800fb9c:	0800fce9 	.word	0x0800fce9
 800fba0:	0800fc0d 	.word	0x0800fc0d
 800fba4:	0800fccb 	.word	0x0800fccb
 800fba8:	0800fb59 	.word	0x0800fb59
 800fbac:	0800fb59 	.word	0x0800fb59
 800fbb0:	0800fd0b 	.word	0x0800fd0b
 800fbb4:	0800fb59 	.word	0x0800fb59
 800fbb8:	0800fc0d 	.word	0x0800fc0d
 800fbbc:	0800fb59 	.word	0x0800fb59
 800fbc0:	0800fb59 	.word	0x0800fb59
 800fbc4:	0800fcd3 	.word	0x0800fcd3
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	1d1a      	adds	r2, r3, #4
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	602a      	str	r2, [r5, #0]
 800fbd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e0a3      	b.n	800fd24 <_printf_i+0x1f4>
 800fbdc:	6820      	ldr	r0, [r4, #0]
 800fbde:	6829      	ldr	r1, [r5, #0]
 800fbe0:	0606      	lsls	r6, r0, #24
 800fbe2:	f101 0304 	add.w	r3, r1, #4
 800fbe6:	d50a      	bpl.n	800fbfe <_printf_i+0xce>
 800fbe8:	680e      	ldr	r6, [r1, #0]
 800fbea:	602b      	str	r3, [r5, #0]
 800fbec:	2e00      	cmp	r6, #0
 800fbee:	da03      	bge.n	800fbf8 <_printf_i+0xc8>
 800fbf0:	232d      	movs	r3, #45	; 0x2d
 800fbf2:	4276      	negs	r6, r6
 800fbf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbf8:	485e      	ldr	r0, [pc, #376]	; (800fd74 <_printf_i+0x244>)
 800fbfa:	230a      	movs	r3, #10
 800fbfc:	e019      	b.n	800fc32 <_printf_i+0x102>
 800fbfe:	680e      	ldr	r6, [r1, #0]
 800fc00:	602b      	str	r3, [r5, #0]
 800fc02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fc06:	bf18      	it	ne
 800fc08:	b236      	sxthne	r6, r6
 800fc0a:	e7ef      	b.n	800fbec <_printf_i+0xbc>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	6820      	ldr	r0, [r4, #0]
 800fc10:	1d19      	adds	r1, r3, #4
 800fc12:	6029      	str	r1, [r5, #0]
 800fc14:	0601      	lsls	r1, r0, #24
 800fc16:	d501      	bpl.n	800fc1c <_printf_i+0xec>
 800fc18:	681e      	ldr	r6, [r3, #0]
 800fc1a:	e002      	b.n	800fc22 <_printf_i+0xf2>
 800fc1c:	0646      	lsls	r6, r0, #25
 800fc1e:	d5fb      	bpl.n	800fc18 <_printf_i+0xe8>
 800fc20:	881e      	ldrh	r6, [r3, #0]
 800fc22:	4854      	ldr	r0, [pc, #336]	; (800fd74 <_printf_i+0x244>)
 800fc24:	2f6f      	cmp	r7, #111	; 0x6f
 800fc26:	bf0c      	ite	eq
 800fc28:	2308      	moveq	r3, #8
 800fc2a:	230a      	movne	r3, #10
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc32:	6865      	ldr	r5, [r4, #4]
 800fc34:	60a5      	str	r5, [r4, #8]
 800fc36:	2d00      	cmp	r5, #0
 800fc38:	bfa2      	ittt	ge
 800fc3a:	6821      	ldrge	r1, [r4, #0]
 800fc3c:	f021 0104 	bicge.w	r1, r1, #4
 800fc40:	6021      	strge	r1, [r4, #0]
 800fc42:	b90e      	cbnz	r6, 800fc48 <_printf_i+0x118>
 800fc44:	2d00      	cmp	r5, #0
 800fc46:	d04d      	beq.n	800fce4 <_printf_i+0x1b4>
 800fc48:	4615      	mov	r5, r2
 800fc4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc4e:	fb03 6711 	mls	r7, r3, r1, r6
 800fc52:	5dc7      	ldrb	r7, [r0, r7]
 800fc54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc58:	4637      	mov	r7, r6
 800fc5a:	42bb      	cmp	r3, r7
 800fc5c:	460e      	mov	r6, r1
 800fc5e:	d9f4      	bls.n	800fc4a <_printf_i+0x11a>
 800fc60:	2b08      	cmp	r3, #8
 800fc62:	d10b      	bne.n	800fc7c <_printf_i+0x14c>
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	07de      	lsls	r6, r3, #31
 800fc68:	d508      	bpl.n	800fc7c <_printf_i+0x14c>
 800fc6a:	6923      	ldr	r3, [r4, #16]
 800fc6c:	6861      	ldr	r1, [r4, #4]
 800fc6e:	4299      	cmp	r1, r3
 800fc70:	bfde      	ittt	le
 800fc72:	2330      	movle	r3, #48	; 0x30
 800fc74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc7c:	1b52      	subs	r2, r2, r5
 800fc7e:	6122      	str	r2, [r4, #16]
 800fc80:	f8cd a000 	str.w	sl, [sp]
 800fc84:	464b      	mov	r3, r9
 800fc86:	aa03      	add	r2, sp, #12
 800fc88:	4621      	mov	r1, r4
 800fc8a:	4640      	mov	r0, r8
 800fc8c:	f7ff fee2 	bl	800fa54 <_printf_common>
 800fc90:	3001      	adds	r0, #1
 800fc92:	d14c      	bne.n	800fd2e <_printf_i+0x1fe>
 800fc94:	f04f 30ff 	mov.w	r0, #4294967295
 800fc98:	b004      	add	sp, #16
 800fc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9e:	4835      	ldr	r0, [pc, #212]	; (800fd74 <_printf_i+0x244>)
 800fca0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fca4:	6829      	ldr	r1, [r5, #0]
 800fca6:	6823      	ldr	r3, [r4, #0]
 800fca8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fcac:	6029      	str	r1, [r5, #0]
 800fcae:	061d      	lsls	r5, r3, #24
 800fcb0:	d514      	bpl.n	800fcdc <_printf_i+0x1ac>
 800fcb2:	07df      	lsls	r7, r3, #31
 800fcb4:	bf44      	itt	mi
 800fcb6:	f043 0320 	orrmi.w	r3, r3, #32
 800fcba:	6023      	strmi	r3, [r4, #0]
 800fcbc:	b91e      	cbnz	r6, 800fcc6 <_printf_i+0x196>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	f023 0320 	bic.w	r3, r3, #32
 800fcc4:	6023      	str	r3, [r4, #0]
 800fcc6:	2310      	movs	r3, #16
 800fcc8:	e7b0      	b.n	800fc2c <_printf_i+0xfc>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	f043 0320 	orr.w	r3, r3, #32
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	2378      	movs	r3, #120	; 0x78
 800fcd4:	4828      	ldr	r0, [pc, #160]	; (800fd78 <_printf_i+0x248>)
 800fcd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fcda:	e7e3      	b.n	800fca4 <_printf_i+0x174>
 800fcdc:	0659      	lsls	r1, r3, #25
 800fcde:	bf48      	it	mi
 800fce0:	b2b6      	uxthmi	r6, r6
 800fce2:	e7e6      	b.n	800fcb2 <_printf_i+0x182>
 800fce4:	4615      	mov	r5, r2
 800fce6:	e7bb      	b.n	800fc60 <_printf_i+0x130>
 800fce8:	682b      	ldr	r3, [r5, #0]
 800fcea:	6826      	ldr	r6, [r4, #0]
 800fcec:	6961      	ldr	r1, [r4, #20]
 800fcee:	1d18      	adds	r0, r3, #4
 800fcf0:	6028      	str	r0, [r5, #0]
 800fcf2:	0635      	lsls	r5, r6, #24
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	d501      	bpl.n	800fcfc <_printf_i+0x1cc>
 800fcf8:	6019      	str	r1, [r3, #0]
 800fcfa:	e002      	b.n	800fd02 <_printf_i+0x1d2>
 800fcfc:	0670      	lsls	r0, r6, #25
 800fcfe:	d5fb      	bpl.n	800fcf8 <_printf_i+0x1c8>
 800fd00:	8019      	strh	r1, [r3, #0]
 800fd02:	2300      	movs	r3, #0
 800fd04:	6123      	str	r3, [r4, #16]
 800fd06:	4615      	mov	r5, r2
 800fd08:	e7ba      	b.n	800fc80 <_printf_i+0x150>
 800fd0a:	682b      	ldr	r3, [r5, #0]
 800fd0c:	1d1a      	adds	r2, r3, #4
 800fd0e:	602a      	str	r2, [r5, #0]
 800fd10:	681d      	ldr	r5, [r3, #0]
 800fd12:	6862      	ldr	r2, [r4, #4]
 800fd14:	2100      	movs	r1, #0
 800fd16:	4628      	mov	r0, r5
 800fd18:	f7f0 fa6a 	bl	80001f0 <memchr>
 800fd1c:	b108      	cbz	r0, 800fd22 <_printf_i+0x1f2>
 800fd1e:	1b40      	subs	r0, r0, r5
 800fd20:	6060      	str	r0, [r4, #4]
 800fd22:	6863      	ldr	r3, [r4, #4]
 800fd24:	6123      	str	r3, [r4, #16]
 800fd26:	2300      	movs	r3, #0
 800fd28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd2c:	e7a8      	b.n	800fc80 <_printf_i+0x150>
 800fd2e:	6923      	ldr	r3, [r4, #16]
 800fd30:	462a      	mov	r2, r5
 800fd32:	4649      	mov	r1, r9
 800fd34:	4640      	mov	r0, r8
 800fd36:	47d0      	blx	sl
 800fd38:	3001      	adds	r0, #1
 800fd3a:	d0ab      	beq.n	800fc94 <_printf_i+0x164>
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	079b      	lsls	r3, r3, #30
 800fd40:	d413      	bmi.n	800fd6a <_printf_i+0x23a>
 800fd42:	68e0      	ldr	r0, [r4, #12]
 800fd44:	9b03      	ldr	r3, [sp, #12]
 800fd46:	4298      	cmp	r0, r3
 800fd48:	bfb8      	it	lt
 800fd4a:	4618      	movlt	r0, r3
 800fd4c:	e7a4      	b.n	800fc98 <_printf_i+0x168>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	4632      	mov	r2, r6
 800fd52:	4649      	mov	r1, r9
 800fd54:	4640      	mov	r0, r8
 800fd56:	47d0      	blx	sl
 800fd58:	3001      	adds	r0, #1
 800fd5a:	d09b      	beq.n	800fc94 <_printf_i+0x164>
 800fd5c:	3501      	adds	r5, #1
 800fd5e:	68e3      	ldr	r3, [r4, #12]
 800fd60:	9903      	ldr	r1, [sp, #12]
 800fd62:	1a5b      	subs	r3, r3, r1
 800fd64:	42ab      	cmp	r3, r5
 800fd66:	dcf2      	bgt.n	800fd4e <_printf_i+0x21e>
 800fd68:	e7eb      	b.n	800fd42 <_printf_i+0x212>
 800fd6a:	2500      	movs	r5, #0
 800fd6c:	f104 0619 	add.w	r6, r4, #25
 800fd70:	e7f5      	b.n	800fd5e <_printf_i+0x22e>
 800fd72:	bf00      	nop
 800fd74:	08010417 	.word	0x08010417
 800fd78:	08010428 	.word	0x08010428

0800fd7c <__retarget_lock_acquire_recursive>:
 800fd7c:	4770      	bx	lr

0800fd7e <__retarget_lock_release_recursive>:
 800fd7e:	4770      	bx	lr

0800fd80 <memmove>:
 800fd80:	4288      	cmp	r0, r1
 800fd82:	b510      	push	{r4, lr}
 800fd84:	eb01 0402 	add.w	r4, r1, r2
 800fd88:	d902      	bls.n	800fd90 <memmove+0x10>
 800fd8a:	4284      	cmp	r4, r0
 800fd8c:	4623      	mov	r3, r4
 800fd8e:	d807      	bhi.n	800fda0 <memmove+0x20>
 800fd90:	1e43      	subs	r3, r0, #1
 800fd92:	42a1      	cmp	r1, r4
 800fd94:	d008      	beq.n	800fda8 <memmove+0x28>
 800fd96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd9e:	e7f8      	b.n	800fd92 <memmove+0x12>
 800fda0:	4402      	add	r2, r0
 800fda2:	4601      	mov	r1, r0
 800fda4:	428a      	cmp	r2, r1
 800fda6:	d100      	bne.n	800fdaa <memmove+0x2a>
 800fda8:	bd10      	pop	{r4, pc}
 800fdaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdb2:	e7f7      	b.n	800fda4 <memmove+0x24>

0800fdb4 <_realloc_r>:
 800fdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb8:	4680      	mov	r8, r0
 800fdba:	4614      	mov	r4, r2
 800fdbc:	460e      	mov	r6, r1
 800fdbe:	b921      	cbnz	r1, 800fdca <_realloc_r+0x16>
 800fdc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc4:	4611      	mov	r1, r2
 800fdc6:	f7ff bc25 	b.w	800f614 <_malloc_r>
 800fdca:	b92a      	cbnz	r2, 800fdd8 <_realloc_r+0x24>
 800fdcc:	f7ff fbb6 	bl	800f53c <_free_r>
 800fdd0:	4625      	mov	r5, r4
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd8:	f000 f81b 	bl	800fe12 <_malloc_usable_size_r>
 800fddc:	4284      	cmp	r4, r0
 800fdde:	4607      	mov	r7, r0
 800fde0:	d802      	bhi.n	800fde8 <_realloc_r+0x34>
 800fde2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fde6:	d812      	bhi.n	800fe0e <_realloc_r+0x5a>
 800fde8:	4621      	mov	r1, r4
 800fdea:	4640      	mov	r0, r8
 800fdec:	f7ff fc12 	bl	800f614 <_malloc_r>
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d0ed      	beq.n	800fdd2 <_realloc_r+0x1e>
 800fdf6:	42bc      	cmp	r4, r7
 800fdf8:	4622      	mov	r2, r4
 800fdfa:	4631      	mov	r1, r6
 800fdfc:	bf28      	it	cs
 800fdfe:	463a      	movcs	r2, r7
 800fe00:	f7ff fb86 	bl	800f510 <memcpy>
 800fe04:	4631      	mov	r1, r6
 800fe06:	4640      	mov	r0, r8
 800fe08:	f7ff fb98 	bl	800f53c <_free_r>
 800fe0c:	e7e1      	b.n	800fdd2 <_realloc_r+0x1e>
 800fe0e:	4635      	mov	r5, r6
 800fe10:	e7df      	b.n	800fdd2 <_realloc_r+0x1e>

0800fe12 <_malloc_usable_size_r>:
 800fe12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe16:	1f18      	subs	r0, r3, #4
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	bfbc      	itt	lt
 800fe1c:	580b      	ldrlt	r3, [r1, r0]
 800fe1e:	18c0      	addlt	r0, r0, r3
 800fe20:	4770      	bx	lr
	...

0800fe24 <_init>:
 800fe24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe26:	bf00      	nop
 800fe28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe2a:	bc08      	pop	{r3}
 800fe2c:	469e      	mov	lr, r3
 800fe2e:	4770      	bx	lr

0800fe30 <_fini>:
 800fe30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe32:	bf00      	nop
 800fe34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe36:	bc08      	pop	{r3}
 800fe38:	469e      	mov	lr, r3
 800fe3a:	4770      	bx	lr
