
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f04c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800f1ec  0800f1ec  0001f1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f78c  0800f78c  00020664  2**0
                  CONTENTS
  4 .ARM          00000008  0800f78c  0800f78c  0001f78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f794  0800f794  00020664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f794  0800f794  0001f794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f798  0800f798  0001f798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  0800f79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065bc  20000664  0800fe00  00020664  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c20  0800fe00  00026c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020664  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002749a  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ac0  00000000  00000000  00047b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b0  00000000  00000000  0004d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e60  00000000  00000000  0004f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dec4  00000000  00000000  00051500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a50  00000000  00000000  0006f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f110  00000000  00000000  00096e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135f24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d24  00000000  00000000  00135f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000664 	.word	0x20000664
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1d4 	.word	0x0800f1d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000668 	.word	0x20000668
 80001dc:	0800f1d4 	.word	0x0800f1d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fd84 	bl	80030cc <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000684 	.word	0x20000684

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fe5f 	bl	80032c0 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000684 	.word	0x20000684

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fd41 	bl	80030cc <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 f939 	bl	80028cc <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000684 	.word	0x20000684

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fe0d 	bl	80032c0 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 f90b 	bl	80028cc <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000684 	.word	0x20000684

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 f89b 	bl	80028cc <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fb15 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fb10 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 f86b 	bl	80028cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fb08 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 f863 	bl	80028cc <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 f80d 	bl	80028cc <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d ff66 	bl	800e8c0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00d ff13 	bl	800e8c0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 fee9 	bl	80028cc <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 fede 	bl	80028cc <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 fed7 	bl	80028cc <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 fece 	bl	80028cc <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f00d fe4a 	bl	800e8c0 <memcpy>
	CDC_Transmit_FS((uint8_t*)send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f00d f9b5 	bl	800dfa8 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fe44 	bl	80028cc <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fe26 	bl	80028cc <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0020 	add.w	r0, r7, #32
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f00d fef0 	bl	800eacc <siprintf>
						Print(mess);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8000d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fdc8 	bl	80028cc <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fdc3 	bl	80028cc <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f00d fe8d 	bl	800eacc <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	; 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000680 	.word	0x20000680
 8000dec:	0800f1ec 	.word	0x0800f1ec
 8000df0:	0800f204 	.word	0x0800f204
 8000df4:	0800f210 	.word	0x0800f210
 8000df8:	0800f21c 	.word	0x0800f21c
 8000dfc:	0800f228 	.word	0x0800f228

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00d fd63 	bl	800e8dc <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f001 ffe8 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f001 ffe3 	bl	8002e10 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f004 ff6e 	bl	8005d36 <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f001 ffd3 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fd2e 	bl	80028cc <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f001 ffc9 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fd24 	bl	80028cc <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006d8 	.word	0x200006d8

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f001 ffaf 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f001 ffaa 	bl	8002e10 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 ff35 	bl	8005d36 <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f001 ff9a 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f001 ff95 	bl	8002e10 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f001 ff8e 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f001 ff89 	bl	8002e10 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006d8 	.word	0x200006d8

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <OLED_INIT+0xc8>)
 8000f88:	f001 ff42 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2108      	movs	r1, #8
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <OLED_INIT+0xc8>)
 8000f92:	f001 ff3d 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <OLED_INIT+0xcc>)
 8000f9c:	f001 ff38 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f001 fc93 	bl	80028cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <OLED_INIT+0xc8>)
 8000fac:	f001 ff30 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f001 fc8b 	bl	80028cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <OLED_INIT+0xc8>)
 8000fbc:	f001 ff28 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f001 fc83 	bl	80028cc <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <OLED_INIT+0xd0>)
 8000fc8:	463c      	mov	r4, r7
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd4:	c403      	stmia	r4!, {r0, r1}
 8000fd6:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	e00c      	b.n	8000ff8 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000fde:	463a      	mov	r2, r7
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff1e 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f001 fc6d 	bl	80028cc <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	ddef      	ble.n	8000fde <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ffe:	20a7      	movs	r0, #167	; 0xa7
 8001000:	f7ff ff12 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <OLED_INIT+0xd4>)
 8001006:	f7ff ff85 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 800100a:	20af      	movs	r0, #175	; 0xaf
 800100c:	f7ff ff0c 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f001 fc5a 	bl	80028cc <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001018:	20ae      	movs	r0, #174	; 0xae
 800101a:	f7ff ff05 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 fc54 	bl	80028cc <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8001024:	20a6      	movs	r0, #166	; 0xa6
 8001026:	f7ff feff 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 fc4e 	bl	80028cc <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001030:	20af      	movs	r0, #175	; 0xaf
 8001032:	f7ff fef9 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 8001036:	f7ff fee3 	bl	8000e00 <OLED_Clear>
	return HAL_OK;
 800103a:	2300      	movs	r3, #0

}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	0800f23c 	.word	0x0800f23c
 8001050:	20000000 	.word	0x20000000

08001054 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001060:	2005      	movs	r0, #5
 8001062:	f00d fc1d 	bl	800e8a0 <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e013      	b.n	8001098 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f1a3 0220 	sub.w	r2, r3, #32
 8001076:	4910      	ldr	r1, [pc, #64]	; (80010b8 <OLED_InvChar+0x64>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	18ca      	adds	r2, r1, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	440b      	add	r3, r1
 800108c:	43d2      	mvns	r2, r2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b05      	cmp	r3, #5
 800109c:	dde8      	ble.n	8001070 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 800109e:	2205      	movs	r2, #5
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f00d fc0c 	bl	800e8c0 <memcpy>
	free(temp);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f00d fc01 	bl	800e8b0 <free>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800f400 	.word	0x0800f400

080010bc <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b50      	subs	r3, #80	; 0x50
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fea1 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe9a 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe91 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 8001106:	2006      	movs	r0, #6
 8001108:	f00d fbca 	bl	800e8a0 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	f1a3 0220 	sub.w	r2, r3, #32
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <OLED_drawChar+0xa0>)
 8001124:	4413      	add	r3, r2
 8001126:	2205      	movs	r2, #5
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f00d fbc8 	bl	800e8c0 <memcpy>
 8001130:	e004      	b.n	800113c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff8c 	bl	8001054 <OLED_InvChar>
	}

	*(data+5)=0x00;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3305      	adds	r3, #5
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001144:	2106      	movs	r1, #6
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fea8 	bl	8000e9c <OLED_data>
	free(data);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f00d fbaf 	bl	800e8b0 <free>
	}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	0800f400 	.word	0x0800f400

08001160 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e014      	b.n	80011a6 <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4413      	add	r3, r2
 800118e:	b2d9      	uxtb	r1, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	79f8      	ldrb	r0, [r7, #7]
 800119c:	f7ff ff8e 	bl	80010bc <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8e3      	bhi.n	800117c <OLED_Printlin+0x1c>


	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff f806 	bl	80001e0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	0fda      	lsrs	r2, r3, #31
 80011dc:	4413      	add	r3, r2
 80011de:	105b      	asrs	r3, r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	3340      	adds	r3, #64	; 0x40
 80011ee:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	79f8      	ldrb	r0, [r7, #7]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	f7ff ffb1 	bl	8001160 <OLED_Printlin>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001206:	b580      	push	{r7, lr}
 8001208:	b094      	sub	sp, #80	; 0x50
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 800120e:	2320      	movs	r3, #32
 8001210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001218:	2300      	movs	r3, #0
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
 8001228:	e018      	b.n	800125c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 800122a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800122e:	4413      	add	r3, r2
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d10b      	bne.n	8001254 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 800123c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800123e:	b2d9      	uxtb	r1, r3
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
	                i++;
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	3301      	adds	r3, #1
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001252:	e000      	b.n	8001256 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001254:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001258:	3301      	adds	r3, #1
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
 800125c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800125e:	2b15      	cmp	r3, #21
 8001260:	dde3      	ble.n	800122a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d102      	bne.n	8001274 <OLED_Print+0x6e>
	            last_ind++;
 800126e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001270:	3301      	adds	r3, #1
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	2b15      	cmp	r3, #21
 8001284:	d828      	bhi.n	80012d8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ffa7 	bl	80001e0 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f00d fc32 	bl	800eb0c <strncpy>
	            memset(thisline+linend,fill,21-linend);
 80012a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012aa:	f107 0220 	add.w	r2, r7, #32
 80012ae:	18d0      	adds	r0, r2, r3
 80012b0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80012b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b6:	f1c3 0315 	rsb	r3, r3, #21
 80012ba:	461a      	mov	r2, r3
 80012bc:	f00d fb0e 	bl	800e8dc <memset>
	            thisline[21]=' ';
 80012c0:	2320      	movs	r3, #32
 80012c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 80012c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2300      	movs	r3, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	f7ff ff45 	bl	8001160 <OLED_Printlin>




	    }
}
 80012d6:	e05e      	b.n	8001396 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80012d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012da:	3314      	adds	r3, #20
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d03a      	beq.n	800135c <OLED_Print+0x156>
 80012e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e8:	3315      	adds	r3, #21
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d033      	beq.n	800135c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80012f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fc:	3b01      	subs	r3, #1
 80012fe:	3350      	adds	r3, #80	; 0x50
 8001300:	443b      	add	r3, r7
 8001302:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001306:	461a      	mov	r2, r3
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f00d fbfd 	bl	800eb0c <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001314:	3b01      	subs	r3, #1
 8001316:	3350      	adds	r3, #80	; 0x50
 8001318:	443b      	add	r3, r7
 800131a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800131e:	461a      	mov	r2, r3
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	1898      	adds	r0, r3, r2
 8001326:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	3b01      	subs	r3, #1
 800132e:	3350      	adds	r3, #80	; 0x50
 8001330:	443b      	add	r3, r7
 8001332:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001336:	f1c3 0315 	rsb	r3, r3, #21
 800133a:	461a      	mov	r2, r3
 800133c:	f00d face 	bl	800e8dc <memset>
	            thisline[21]=' ';
 8001340:	2320      	movs	r3, #32
 8001342:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	3b01      	subs	r3, #1
 800134a:	3350      	adds	r3, #80	; 0x50
 800134c:	443b      	add	r3, r7
 800134e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001352:	461a      	mov	r2, r3
 8001354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001356:	4413      	add	r3, r2
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
 800135a:	e00e      	b.n	800137a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	18d1      	adds	r1, r2, r3
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2215      	movs	r2, #21
 8001368:	4618      	mov	r0, r3
 800136a:	f00d fbcf 	bl	800eb0c <strncpy>
	            thisline[21]=' ';
 800136e:	2320      	movs	r3, #32
 8001370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001376:	3315      	adds	r3, #21
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800137a:	2300      	movs	r3, #0
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	2300      	movs	r3, #0
 8001388:	2102      	movs	r1, #2
 800138a:	f7ff fee9 	bl	8001160 <OLED_Printlin>
	        line++;
 800138e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001390:	3301      	adds	r3, #1
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001394:	e746      	b.n	8001224 <OLED_Print+0x1e>
}
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 80013a8:	f7ff fd2a 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff01 	bl	80011be <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e01a      	b.n	80013f8 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	7859      	ldrb	r1, [r3, #1]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	f7ff feb7 	bl	8001160 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbde      	blt.n	80013c2 <OLED_SCREEN+0x26>
	}
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	460b      	mov	r3, r1
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3302      	adds	r3, #2
 800143e:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	b2d9      	uxtb	r1, r3
 8001450:	2300      	movs	r3, #0
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	f7ff fe84 	bl	8001160 <OLED_Printlin>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	460b      	mov	r3, r1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 800146e:	4a40      	ldr	r2, [pc, #256]	; (8001570 <OLED_SELECT+0x110>)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	8019      	strh	r1, [r3, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	0c12      	lsrs	r2, r2, #16
 800147e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d116      	bne.n	80014b4 <OLED_SELECT+0x54>
			if(selopt==0){
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10b      	bne.n	80014a4 <OLED_SELECT+0x44>
			rest=(char*)screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001498:	3b01      	subs	r3, #1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e009      	b.n	80014b8 <OLED_SELECT+0x58>
			}
			else{
				rest=(char*)screen->data[selopt];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e001      	b.n	80014b8 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <OLED_SELECT+0x114>)
 80014b6:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d124      	bne.n	8001508 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014ca:	3b01      	subs	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014e0:	3b01      	subs	r3, #1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	773b      	strb	r3, [r7, #28]
 8001506:	e021      	b.n	800154c <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001512:	3b01      	subs	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001526:	3b01      	subs	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	7afb      	ldrb	r3, [r7, #11]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 800154c:	7fb9      	ldrb	r1, [r7, #30]
 800154e:	7ff8      	ldrb	r0, [r7, #31]
 8001550:	2300      	movs	r3, #0
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	f7ff fe04 	bl	8001160 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001558:	f107 0214 	add.w	r2, r7, #20
 800155c:	7f39      	ldrb	r1, [r7, #28]
 800155e:	7f78      	ldrb	r0, [r7, #29]
 8001560:	2300      	movs	r3, #0
 8001562:	f7ff fdfd 	bl	8001160 <OLED_Printlin>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	0800f25c 	.word	0x0800f25c
 8001574:	0800f258 	.word	0x0800f258

08001578 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT,addr,0x00};
 8001582:	230f      	movs	r3, #15
 8001584:	733b      	strb	r3, [r7, #12]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	737b      	strb	r3, [r7, #13]
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <STAT_READ+0x54>)
 8001596:	f001 fc3b 	bl	8002e10 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800159a:	bf00      	nop
 800159c:	f107 0208 	add.w	r2, r7, #8
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2303      	movs	r3, #3
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <STAT_READ+0x58>)
 80015ac:	f004 fcff 	bl	8005fae <HAL_SPI_TransmitReceive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f2      	bne.n	800159c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <STAT_READ+0x54>)
 80015be:	f001 fc27 	bl	8002e10 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80015c2:	7abb      	ldrb	r3, [r7, #10]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000
 80015d0:	20000730 	.word	0x20000730

080015d4 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80015e4:	231f      	movs	r3, #31
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	737b      	strb	r3, [r7, #13]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <STAT_WRITE+0x4c>)
 80015f8:	f001 fc0a 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80015fc:	f107 010c 	add.w	r1, r7, #12
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	2203      	movs	r2, #3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <STAT_WRITE+0x50>)
 8001606:	f004 fb96 	bl	8005d36 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <STAT_WRITE+0x4c>)
 8001612:	f001 fbfd 	bl	8002e10 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020000 	.word	0x40020000
 8001624:	20000730 	.word	0x20000730

08001628 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800162e:	2306      	movs	r3, #6
 8001630:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 8001632:	f000 f825 	bl	8001680 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001636:	e011      	b.n	800165c <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <WRIT_EN+0x50>)
 8001640:	f001 fbe6 	bl	8002e10 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001644:	1df9      	adds	r1, r7, #7
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <WRIT_EN+0x54>)
 800164c:	f004 fb73 	bl	8005d36 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <WRIT_EN+0x50>)
 8001658:	f001 fbda 	bl	8002e10 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800165c:	20c0      	movs	r0, #192	; 0xc0
 800165e:	f7ff ff8b 	bl	8001578 <STAT_READ>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d1e5      	bne.n	8001638 <WRIT_EN+0x10>
	}


}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000
 800167c:	20000730 	.word	0x20000730

08001680 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001686:	2304      	movs	r3, #4
 8001688:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800168a:	e011      	b.n	80016b0 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <WRITE_DIS+0x4c>)
 8001694:	f001 fbbc 	bl	8002e10 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001698:	1df9      	adds	r1, r7, #7
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <WRITE_DIS+0x50>)
 80016a0:	f004 fb49 	bl	8005d36 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <WRITE_DIS+0x4c>)
 80016ac:	f001 fbb0 	bl	8002e10 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80016b0:	20c0      	movs	r0, #192	; 0xc0
 80016b2:	f7ff ff61 	bl	8001578 <STAT_READ>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d0e5      	beq.n	800168c <WRITE_DIS+0xc>
		}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000
 80016d0:	20000730 	.word	0x20000730

080016d4 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param page_addr - Page address to begin erasing from
 * */
void block_erase(uint16_t page_addr) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction [] = {BLOCK_ERS, 0x00, page_addr>>8, page_addr};
 80016de:	23d8      	movs	r3, #216	; 0xd8
 80016e0:	733b      	strb	r3, [r7, #12]
 80016e2:	2300      	movs	r3, #0
 80016e4:	737b      	strb	r3, [r7, #13]
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	73bb      	strb	r3, [r7, #14]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	73fb      	strb	r3, [r7, #15]
	WRIT_EN();
 80016f6:	f7ff ff97 	bl	8001628 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <block_erase+0x68>)
 8001702:	f001 fb85 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, 4, 100);
 8001706:	f107 010c 	add.w	r1, r7, #12
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	2204      	movs	r2, #4
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <block_erase+0x6c>)
 8001710:	f004 fb11 	bl	8005d36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <block_erase+0x68>)
 800171c:	f001 fb78 	bl	8002e10 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001720:	bf00      	nop
 8001722:	20c0      	movs	r0, #192	; 0xc0
 8001724:	f7ff ff28 	bl	8001578 <STAT_READ>
 8001728:	4603      	mov	r3, r0
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d0f7      	beq.n	8001722 <block_erase+0x4e>
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	20000730 	.word	0x20000730

08001744 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	480a      	ldr	r0, [pc, #40]	; (8001778 <MEM_INIT+0x34>)
 8001750:	f001 fb5e 	bl	8002e10 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001754:	2100      	movs	r1, #0
 8001756:	20a0      	movs	r0, #160	; 0xa0
 8001758:	f7ff ff3c 	bl	80015d4 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 800175c:	20a0      	movs	r0, #160	; 0xa0
 800175e:	f7ff ff0b 	bl	8001578 <STAT_READ>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MEM_INIT+0x28>
		return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e002      	b.n	8001772 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 800176c:	f7ff ff88 	bl	8001680 <WRITE_DIS>
	return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000

0800177c <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 800177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001780:	b091      	sub	sp, #68	; 0x44
 8001782:	af02      	add	r7, sp, #8
 8001784:	613a      	str	r2, [r7, #16]
 8001786:	461a      	mov	r2, r3
 8001788:	4603      	mov	r3, r0
 800178a:	82fb      	strh	r3, [r7, #22]
 800178c:	460b      	mov	r3, r1
 800178e:	82bb      	strh	r3, [r7, #20]
 8001790:	4613      	mov	r3, r2
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	466b      	mov	r3, sp
 8001796:	461e      	mov	r6, r3
	uint8_t transaction[]={READ_PAGE,0x00,page_addr>>8,page_addr};
 8001798:	2313      	movs	r3, #19
 800179a:	773b      	strb	r3, [r7, #28]
 800179c:	2300      	movs	r3, #0
 800179e:	777b      	strb	r3, [r7, #29]
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	77bb      	strb	r3, [r7, #30]
 80017aa:	8afb      	ldrh	r3, [r7, #22]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	77fb      	strb	r3, [r7, #31]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 80017b0:	2304      	movs	r3, #4
 80017b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t read_data[bytes+transaction_size];
 80017b6:	89fa      	ldrh	r2, [r7, #14]
 80017b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017bc:	18d1      	adds	r1, r2, r3
 80017be:	1e4b      	subs	r3, r1, #1
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c2:	460a      	mov	r2, r1
 80017c4:	2300      	movs	r3, #0
 80017c6:	603a      	str	r2, [r7, #0]
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	00c3      	lsls	r3, r0, #3
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	00c2      	lsls	r2, r0, #3
 80017e0:	460a      	mov	r2, r1
 80017e2:	2300      	movs	r3, #0
 80017e4:	4692      	mov	sl, r2
 80017e6:	469b      	mov	fp, r3
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017fc:	460b      	mov	r3, r1
 80017fe:	3307      	adds	r3, #7
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	ebad 0d03 	sub.w	sp, sp, r3
 8001808:	ab02      	add	r3, sp, #8
 800180a:	3300      	adds	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t rec_data[bytes+transaction_size];
 800180e:	89fa      	ldrh	r2, [r7, #14]
 8001810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001814:	18d1      	adds	r1, r2, r3
 8001816:	1e4b      	subs	r3, r1, #1
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	460a      	mov	r2, r1
 800181c:	2300      	movs	r3, #0
 800181e:	4690      	mov	r8, r2
 8001820:	4699      	mov	r9, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001836:	460a      	mov	r2, r1
 8001838:	2300      	movs	r3, #0
 800183a:	4614      	mov	r4, r2
 800183c:	461d      	mov	r5, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	00eb      	lsls	r3, r5, #3
 8001848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184c:	00e2      	lsls	r2, r4, #3
 800184e:	460b      	mov	r3, r1
 8001850:	3307      	adds	r3, #7
 8001852:	08db      	lsrs	r3, r3, #3
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	ebad 0d03 	sub.w	sp, sp, r3
 800185a:	ab02      	add	r3, sp, #8
 800185c:	3300      	adds	r3, #0
 800185e:	623b      	str	r3, [r7, #32]

	memset(read_data, 0, bytes+transaction_size); //Fill our read_data command array for dummy data while getting actual data
 8001860:	89fa      	ldrh	r2, [r7, #14]
 8001862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001866:	4413      	add	r3, r2
 8001868:	461a      	mov	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800186e:	f00d f835 	bl	800e8dc <memset>
	read_data[0]=READ_BUF;
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2203      	movs	r2, #3
 8001876:	701a      	strb	r2, [r3, #0]
	read_data[1]= col_addr>>8;
 8001878:	8abb      	ldrh	r3, [r7, #20]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b29b      	uxth	r3, r3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	705a      	strb	r2, [r3, #1]
	read_data[2] = col_addr;
 8001884:	8abb      	ldrh	r3, [r7, #20]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	709a      	strb	r2, [r3, #2]
	read_data[3] = 0x00; //dummy
 800188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188e:	2200      	movs	r2, #0
 8001890:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	4838      	ldr	r0, [pc, #224]	; (800197c <MEM_READPAGE+0x200>)
 800189a:	f001 fab9 	bl	8002e10 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 800189e:	f107 011c 	add.w	r1, r7, #28
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	2204      	movs	r2, #4
 80018a6:	4836      	ldr	r0, [pc, #216]	; (8001980 <MEM_READPAGE+0x204>)
 80018a8:	f004 fa45 	bl	8005d36 <HAL_SPI_Transmit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <MEM_READPAGE+0x146>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b8:	4830      	ldr	r0, [pc, #192]	; (800197c <MEM_READPAGE+0x200>)
 80018ba:	f001 faa9 	bl	8002e10 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80018be:	2301      	movs	r3, #1
 80018c0:	e056      	b.n	8001970 <MEM_READPAGE+0x1f4>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c8:	482c      	ldr	r0, [pc, #176]	; (800197c <MEM_READPAGE+0x200>)
 80018ca:	f001 faa1 	bl	8002e10 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 80018ce:	bf00      	nop
 80018d0:	20c0      	movs	r0, #192	; 0xc0
 80018d2:	f7ff fe51 	bl	8001578 <STAT_READ>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d0f7      	beq.n	80018d0 <MEM_READPAGE+0x154>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	4825      	ldr	r0, [pc, #148]	; (800197c <MEM_READPAGE+0x200>)
 80018e8:	f001 fa92 	bl	8002e10 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_data, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 80018ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	89fb      	ldrh	r3, [r7, #14]
 80018f4:	4413      	add	r3, r2
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2264      	movs	r2, #100	; 0x64
 80018fa:	9200      	str	r2, [sp, #0]
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001900:	481f      	ldr	r0, [pc, #124]	; (8001980 <MEM_READPAGE+0x204>)
 8001902:	f004 fb54 	bl	8005fae <HAL_SPI_TransmitReceive>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <MEM_READPAGE+0x1a0>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	481a      	ldr	r0, [pc, #104]	; (800197c <MEM_READPAGE+0x200>)
 8001914:	f001 fa7c 	bl	8002e10 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001918:	2301      	movs	r3, #1
 800191a:	e029      	b.n	8001970 <MEM_READPAGE+0x1f4>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	4816      	ldr	r0, [pc, #88]	; (800197c <MEM_READPAGE+0x200>)
 8001924:	f001 fa74 	bl	8002e10 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001928:	bf00      	nop
 800192a:	20c0      	movs	r0, #192	; 0xc0
 800192c:	f7ff fe24 	bl	8001578 <STAT_READ>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d0f7      	beq.n	800192a <MEM_READPAGE+0x1ae>

	if (bytes == 1) {
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <MEM_READPAGE+0x1ce>
		*data = rec_data[4];
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	791a      	ldrb	r2, [r3, #4]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e011      	b.n	800196e <MEM_READPAGE+0x1f2>
	} else {
		for(int i = 0; i < bytes; i++){
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
 800194e:	e00a      	b.n	8001966 <MEM_READPAGE+0x1ea>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8001950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001956:	6939      	ldr	r1, [r7, #16]
 8001958:	440b      	add	r3, r1
 800195a:	6a39      	ldr	r1, [r7, #32]
 800195c:	5c8a      	ldrb	r2, [r1, r2]
 800195e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	3301      	adds	r3, #1
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800196a:	429a      	cmp	r2, r3
 800196c:	dbf0      	blt.n	8001950 <MEM_READPAGE+0x1d4>
		}
	}

	return(HAL_OK);
 800196e:	2300      	movs	r3, #0
 8001970:	46b5      	mov	sp, r6

}
 8001972:	4618      	mov	r0, r3
 8001974:	373c      	adds	r7, #60	; 0x3c
 8001976:	46bd      	mov	sp, r7
 8001978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197c:	40020000 	.word	0x40020000
 8001980:	20000730 	.word	0x20000730

08001984 <mem_init>:
 * 									FATFS Section
 *
 * Following functions are added in order to make this driver compatible with the FATFS package
 * */

DSTATUS mem_init (BYTE pdrv) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	if (MEM_INIT() != HAL_OK) {
 800198e:	f7ff fed9 	bl	8001744 <MEM_INIT>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <mem_init+0x18>
		return STA_NOINIT;
 8001998:	2301      	movs	r3, #1
 800199a:	e005      	b.n	80019a8 <mem_init+0x24>
	}
	MEM_STATUS = MEM_OK;
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <mem_init+0x2c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	return (MEM_STATUS); //Inidicates successful init
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <mem_init+0x2c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000400 	.word	0x20000400

080019b4 <mem_getstatus>:

DSTATUS mem_getstatus (BYTE prdv) {
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	return MEM_STATUS;
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <mem_getstatus+0x1c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000400 	.word	0x20000400

080019d4 <mem_read>:

DRESULT mem_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
	 if (!count) { //0 count, invalid parameter
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <mem_read+0x1a>
		 return RES_PARERR;
 80019ea:	2304      	movs	r3, #4
 80019ec:	e021      	b.n	8001a32 <mem_read+0x5e>
	 }

	 if (MEM_STATUS) { //Memory not initialised
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <mem_read+0x68>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <mem_read+0x28>
		 return RES_NOTRDY;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e01a      	b.n	8001a32 <mem_read+0x5e>
	 }

	 for (int i = 0; i < count; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e012      	b.n	8001a28 <mem_read+0x54>
		 if (MEM_READPAGE(sector+i, 0x0000, (uint8_t*) buff, 1) != HAL_OK) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b298      	uxth	r0, r3
 8001a0e:	2301      	movs	r3, #1
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	2100      	movs	r1, #0
 8001a14:	f7ff feb2 	bl	800177c <MEM_READPAGE>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <mem_read+0x4e>
			 return RES_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e007      	b.n	8001a32 <mem_read+0x5e>
	 for (int i = 0; i < count; i++) {
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8e8      	bhi.n	8001a02 <mem_read+0x2e>
		 }
	 }

	 return RES_OK;
 8001a30:	2300      	movs	r3, #0

}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000400 	.word	0x20000400

08001a40 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001a44:	2108      	movs	r1, #8
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <BUZZ+0x20>)
 8001a48:	f004 feac 	bl	80067a4 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a50:	f000 ff3c 	bl	80028cc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001a54:	2108      	movs	r1, #8
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <BUZZ+0x20>)
 8001a58:	f004 ff54 	bl	8006904 <HAL_TIM_PWM_Stop>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000788 	.word	0x20000788

08001a64 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a72:	2102      	movs	r1, #2
 8001a74:	4820      	ldr	r0, [pc, #128]	; (8001af8 <choose+0x94>)
 8001a76:	f001 f9b3 	bl	8002de0 <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d136      	bne.n	8001aee <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <choose+0x98>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a88:	e012      	b.n	8001ab0 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001a8a:	481c      	ldr	r0, [pc, #112]	; (8001afc <choose+0x98>)
 8001a8c:	f004 fd4c 	bl	8006528 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <choose+0x98>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d108      	bne.n	8001ab0 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001a9e:	4817      	ldr	r0, [pc, #92]	; (8001afc <choose+0x98>)
 8001aa0:	f004 fd9c 	bl	80065dc <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	e01e      	b.n	8001aee <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4811      	ldr	r0, [pc, #68]	; (8001af8 <choose+0x94>)
 8001ab4:	f001 f994 	bl	8002de0 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0e5      	beq.n	8001a8a <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d102      	bne.n	8001ad8 <choose+0x74>
	 	    	*count = 0;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f7ff fcbc 	bl	8001460 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <choose+0x98>)
 8001aea:	f004 fd77 	bl	80065dc <HAL_TIM_Base_Stop>
	 	}
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40020000 	.word	0x40020000
 8001afc:	200007d0 	.word	0x200007d0

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f000 fea0 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f866 	bl	8001bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0c:	f000 fa2e 	bl	8001f6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b10:	f000 f8cc 	bl	8001cac <MX_I2C1_Init>
  MX_SPI1_Init();
 8001b14:	f000 f8f8 	bl	8001d08 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001b18:	f000 f92e 	bl	8001d78 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001b1c:	f000 f962 	bl	8001de4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b20:	f000 f9d6 	bl	8001ed0 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001b24:	f007 f9a8 	bl	8008e78 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b28:	f009 fa7c 	bl	800b024 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 8001b2c:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <main+0x94>)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	2001      	movs	r0, #1
 8001b32:	f009 fb6f 	bl	800b214 <osMessageQueueNew>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <main+0x98>)
 8001b3a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001b3c:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <main+0x9c>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <main+0xa0>)
 8001b42:	f009 fab9 	bl	800b0b8 <osThreadNew>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <main+0xa4>)
 8001b4a:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <main+0xa8>)
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4816      	ldr	r0, [pc, #88]	; (8001bac <main+0xac>)
 8001b52:	f009 fab1 	bl	800b0b8 <osThreadNew>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <main+0xb0>)
 8001b5a:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001b5c:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <main+0xb4>)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <main+0xb8>)
 8001b62:	f009 faa9 	bl	800b0b8 <osThreadNew>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <main+0xbc>)
 8001b6a:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <main+0xc0>)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <main+0xc4>)
 8001b72:	f009 faa1 	bl	800b0b8 <osThreadNew>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <main+0xc8>)
 8001b7a:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <main+0xcc>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <main+0xd0>)
 8001b82:	f009 fa99 	bl	800b0b8 <osThreadNew>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <main+0xd4>)
 8001b8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b8c:	f009 fa6e 	bl	800b06c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <main+0x90>
 8001b92:	bf00      	nop
 8001b94:	0800f694 	.word	0x0800f694
 8001b98:	2000082c 	.word	0x2000082c
 8001b9c:	0800f5e0 	.word	0x0800f5e0
 8001ba0:	08002055 	.word	0x08002055
 8001ba4:	20000818 	.word	0x20000818
 8001ba8:	0800f604 	.word	0x0800f604
 8001bac:	080020f9 	.word	0x080020f9
 8001bb0:	2000081c 	.word	0x2000081c
 8001bb4:	0800f628 	.word	0x0800f628
 8001bb8:	080021ad 	.word	0x080021ad
 8001bbc:	20000820 	.word	0x20000820
 8001bc0:	0800f64c 	.word	0x0800f64c
 8001bc4:	080021d9 	.word	0x080021d9
 8001bc8:	20000824 	.word	0x20000824
 8001bcc:	0800f670 	.word	0x0800f670
 8001bd0:	08002265 	.word	0x08002265
 8001bd4:	20000828 	.word	0x20000828

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	; 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	; 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00c fe78 	bl	800e8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <SystemClock_Config+0xcc>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <SystemClock_Config+0xcc>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <SystemClock_Config+0xcc>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <SystemClock_Config+0xd0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <SystemClock_Config+0xd0>)
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <SystemClock_Config+0xd0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c50:	23a8      	movs	r3, #168	; 0xa8
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c54:	2304      	movs	r3, #4
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fb2b 	bl	80052bc <HAL_RCC_OscConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c6c:	f000 fb6e 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c70:	230f      	movs	r3, #15
 8001c72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c74:	2302      	movs	r3, #2
 8001c76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fd8d 	bl	80057ac <HAL_RCC_ClockConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c98:	f000 fb58 	bl	800234c <Error_Handler>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3750      	adds	r7, #80	; 0x50
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000

08001cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <MX_I2C1_Init+0x54>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x58>)
 8001cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cea:	f001 f8ab 	bl	8002e44 <HAL_I2C_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cf4:	f000 fb2a 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000684 	.word	0x20000684
 8001d00:	40005400 	.word	0x40005400
 8001d04:	000186a0 	.word	0x000186a0

08001d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d0e:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <MX_SPI1_Init+0x6c>)
 8001d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d20:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d3e:	2218      	movs	r2, #24
 8001d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d56:	220a      	movs	r2, #10
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_SPI1_Init+0x68>)
 8001d5c:	f003 ff62 	bl	8005c24 <HAL_SPI_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d66:	f000 faf1 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200006d8 	.word	0x200006d8
 8001d74:	40013000 	.word	0x40013000

08001d78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <MX_SPI2_Init+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_SPI2_Init+0x64>)
 8001dca:	f003 ff2b 	bl	8005c24 <HAL_SPI_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dd4:	f000 faba 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000730 	.word	0x20000730
 8001de0:	40003800 	.word	0x40003800

08001de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e1e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e2c:	2231      	movs	r2, #49	; 0x31
 8001e2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e3e:	f004 fb23 	bl	8006488 <HAL_TIM_Base_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e48:	f000 fa80 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	4619      	mov	r1, r3
 8001e58:	481c      	ldr	r0, [pc, #112]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e5a:	f004 ff81 	bl	8006d60 <HAL_TIM_ConfigClockSource>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e64:	f000 fa72 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e68:	4818      	ldr	r0, [pc, #96]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e6a:	f004 fc41 	bl	80066f0 <HAL_TIM_PWM_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e74:	f000 fa6a 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4619      	mov	r1, r3
 8001e86:	4811      	ldr	r0, [pc, #68]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001e88:	f005 fb26 	bl	80074d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e92:	f000 fa5b 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	; 0x60
 8001e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001e9a:	2318      	movs	r3, #24
 8001e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001eae:	f004 fe95 	bl	8006bdc <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001eb8:	f000 fa48 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <MX_TIM2_Init+0xe8>)
 8001ebe:	f000 fb73 	bl	80025a8 <HAL_TIM_MspPostInit>

}
 8001ec2:	bf00      	nop
 8001ec4:	3738      	adds	r7, #56	; 0x38
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000788 	.word	0x20000788

08001ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <MX_TIM3_Init+0x98>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001ef4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f16:	f004 fab7 	bl	8006488 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f20:	f000 fa14 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f32:	f004 ff15 	bl	8006d60 <HAL_TIM_ConfigClockSource>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f3c:	f000 fa06 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_TIM3_Init+0x94>)
 8001f4e:	f005 fac3 	bl	80074d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f58:	f000 f9f8 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200007d0 	.word	0x200007d0
 8001f68:	40000400 	.word	0x40000400

08001f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b29      	ldr	r3, [pc, #164]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a28      	ldr	r2, [pc, #160]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_GPIO_Init+0xdc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001fdc:	481b      	ldr	r0, [pc, #108]	; (800204c <MX_GPIO_Init+0xe0>)
 8001fde:	f000 ff17 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2122      	movs	r1, #34	; 0x22
 8001fe6:	481a      	ldr	r0, [pc, #104]	; (8002050 <MX_GPIO_Init+0xe4>)
 8001fe8:	f000 ff12 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001fec:	2302      	movs	r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4813      	ldr	r0, [pc, #76]	; (800204c <MX_GPIO_Init+0xe0>)
 8002000:	f000 fd6a 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002004:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <MX_GPIO_Init+0xe0>)
 800201e:	f000 fd5b 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002022:	2322      	movs	r3, #34	; 0x22
 8002024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_GPIO_Init+0xe4>)
 800203a:	f000 fd4d 	bl	8002ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400

08002054 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800205c:	f00b fee6 	bl	800de2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t* sector = malloc(SECTOR_SIZE*sizeof(uint8_t));
 8002060:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002064:	f00c fc1c 	bl	800e8a0 <malloc>
 8002068:	4603      	mov	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
	vTaskSuspend(ReadCardHandle);
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <Start_Init+0x8c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f00a f927 	bl	800c2c4 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <Start_Init+0x90>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f00a f922 	bl	800c2c4 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <Start_Init+0x94>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f00a f91d 	bl	800c2c4 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <Start_Init+0x98>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f00a f918 	bl	800c2c4 <vTaskSuspend>

    MFRC_INIT();
 8002094:	f7fe fba0 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8002098:	f7fe fb56 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 800209c:	f7fe ff6e 	bl	8000f7c <OLED_INIT>
    OLED_Print(TC);
 80020a0:	4813      	ldr	r0, [pc, #76]	; (80020f0 <Start_Init+0x9c>)
 80020a2:	f7ff f8b0 	bl	8001206 <OLED_Print>
    mem_init(0);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fc6c 	bl	8001984 <mem_init>
    block_erase(0x0000);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fb11 	bl	80016d4 <block_erase>
    while(1) {
    	if(USER_read(0, sector, 0, SECTOR_SIZE) != RES_OK) {
 80020b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020b6:	2200      	movs	r2, #0
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	2000      	movs	r0, #0
 80020bc:	f006 ff0a 	bl	8008ed4 <USER_read>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <Start_Init+0x7a>
    	    	Print("Error");
 80020c6:	480b      	ldr	r0, [pc, #44]	; (80020f4 <Start_Init+0xa0>)
 80020c8:	f7fe fd79 	bl	8000bbe <Print>
 80020cc:	e003      	b.n	80020d6 <Start_Init+0x82>
    	} else {
    		CDC_Transmit_FS(sector, 1);
 80020ce:	2101      	movs	r1, #1
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f00b ff69 	bl	800dfa8 <CDC_Transmit_FS>
    	}
    	HAL_Delay(100);
 80020d6:	2064      	movs	r0, #100	; 0x64
 80020d8:	f000 fbf8 	bl	80028cc <HAL_Delay>
    	if(USER_read(0, sector, 0, SECTOR_SIZE) != RES_OK) {
 80020dc:	e7e9      	b.n	80020b2 <Start_Init+0x5e>
 80020de:	bf00      	nop
 80020e0:	2000081c 	.word	0x2000081c
 80020e4:	20000820 	.word	0x20000820
 80020e8:	20000824 	.word	0x20000824
 80020ec:	20000828 	.word	0x20000828
 80020f0:	20000404 	.word	0x20000404
 80020f4:	0800f2a8 	.word	0x0800f2a8

080020f8 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	b091      	sub	sp, #68	; 0x44
 80020fc:	af06      	add	r7, sp, #24
 80020fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 8002100:	201a      	movs	r0, #26
 8002102:	f00c fbcd 	bl	800e8a0 <malloc>
 8002106:	4603      	mov	r3, r0
 8002108:	60bb      	str	r3, [r7, #8]
	int ranonce = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
	MFRC_ANTON();
 8002112:	f7fe fadf 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d106      	bne.n	800212a <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 800211c:	2100      	movs	r1, #0
 800211e:	481f      	ldr	r0, [pc, #124]	; (800219c <StartReadCard+0xa4>)
 8002120:	f7ff f93c 	bl	800139c <OLED_SCREEN>
		ranonce++;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(DumpINFO(cardinf)==PCD_OK){
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fd8e 	bl	8000c50 <DumpINFO>
 8002134:	4603      	mov	r3, r0
 8002136:	2bcc      	cmp	r3, #204	; 0xcc
 8002138:	d121      	bne.n	800217e <StartReadCard+0x86>
			BUZZ();
 800213a:	f7ff fc81 	bl	8001a40 <BUZZ>
			MFRC_ANTOFF();
 800213e:	f7fe fb03 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 8002142:	68b8      	ldr	r0, [r7, #8]
 8002144:	7b3b      	ldrb	r3, [r7, #12]
 8002146:	461e      	mov	r6, r3
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	469c      	mov	ip, r3
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	7c39      	ldrb	r1, [r7, #16]
 8002152:	7c7c      	ldrb	r4, [r7, #17]
 8002154:	7cbd      	ldrb	r5, [r7, #18]
 8002156:	9504      	str	r5, [sp, #16]
 8002158:	9403      	str	r4, [sp, #12]
 800215a:	9102      	str	r1, [sp, #8]
 800215c:	9201      	str	r2, [sp, #4]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4663      	mov	r3, ip
 8002162:	4632      	mov	r2, r6
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <StartReadCard+0xa8>)
 8002166:	f00c fcb1 	bl	800eacc <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0); //Send a pointer to our string to the Card Found task to use
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <StartReadCard+0xac>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	f107 0108 	add.w	r1, r7, #8
 8002172:	2300      	movs	r3, #0
 8002174:	2200      	movs	r2, #0
 8002176:	f009 fae7 	bl	800b748 <xQueueGenericSend>
			suspend = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	623b      	str	r3, [r7, #32]
		}
	if (suspend == 1) {
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d1c4      	bne.n	800210e <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <StartReadCard+0xb0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f00a f943 	bl	800c414 <vTaskResume>
		ranonce = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
		vTaskSuspend(NULL);
 8002192:	2000      	movs	r0, #0
 8002194:	f00a f896 	bl	800c2c4 <vTaskSuspend>
  {
 8002198:	e7b9      	b.n	800210e <StartReadCard+0x16>
 800219a:	bf00      	nop
 800219c:	0800f704 	.word	0x0800f704
 80021a0:	0800f2b0 	.word	0x0800f2b0
 80021a4:	2000082c 	.word	0x2000082c
 80021a8:	20000828 	.word	0x20000828

080021ac <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 80021be:	2100      	movs	r1, #0
 80021c0:	4804      	ldr	r0, [pc, #16]	; (80021d4 <StartWriteCard+0x28>)
 80021c2:	f7ff f8eb 	bl	800139c <OLED_SCREEN>
	  	ranonce++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3301      	adds	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f009 f806 	bl	800b1de <osDelay>
	  if (ranonce == 0){
 80021d2:	e7f1      	b.n	80021b8 <StartWriteCard+0xc>
 80021d4:	0800f72c 	.word	0x0800f72c

080021d8 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af02      	add	r7, sp, #8
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 80021f2:	2100      	movs	r1, #0
 80021f4:	4818      	ldr	r0, [pc, #96]	; (8002258 <StartHome+0x80>)
 80021f6:	f7ff f8d1 	bl	800139c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	4619      	mov	r1, r3
 8002202:	4815      	ldr	r0, [pc, #84]	; (8002258 <StartHome+0x80>)
 8002204:	f7ff f92c 	bl	8001460 <OLED_SELECT>
		  ranonce++;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 800220e:	f107 0210 	add.w	r2, r7, #16
 8002212:	f107 010c 	add.w	r1, r7, #12
 8002216:	2301      	movs	r3, #1
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2306      	movs	r3, #6
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <StartHome+0x80>)
 800221e:	f7ff fc21 	bl	8001a64 <choose>
	  if (suspend == 1) {
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d1df      	bne.n	80021e8 <StartHome+0x10>
		switch(count) {
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <StartHome+0x5c>
 800222e:	2b01      	cmp	r3, #1
 8002230:	d006      	beq.n	8002240 <StartHome+0x68>
 8002232:	e00b      	b.n	800224c <StartHome+0x74>
			case 0:
				vTaskResume(ReadCardHandle);
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <StartHome+0x84>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f00a f8eb 	bl	800c414 <vTaskResume>
				break;
 800223e:	e005      	b.n	800224c <StartHome+0x74>
			case 1:
				vTaskResume(WriteCardHandle);
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <StartHome+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f00a f8e5 	bl	800c414 <vTaskResume>
				break;
 800224a:	bf00      	nop
		}
		ranonce = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8002250:	2000      	movs	r0, #0
 8002252:	f00a f837 	bl	800c2c4 <vTaskSuspend>
  {
 8002256:	e7c7      	b.n	80021e8 <StartHome+0x10>
 8002258:	0800f6f0 	.word	0x0800f6f0
 800225c:	2000081c 	.word	0x2000081c
 8002260:	20000820 	.word	0x20000820

08002264 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b08e      	sub	sp, #56	; 0x38
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
	 int ranonce = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <CardFoundStart+0xb4>)
 8002276:	f107 0410 	add.w	r4, r7, #16
 800227a:	461d      	mov	r5, r3
 800227c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800227e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d126      	bne.n	80022dc <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 800228e:	bf00      	nop
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <CardFoundStart+0xb8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002298:	2200      	movs	r2, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f009 fbee 	bl	800ba7c <xQueueReceive>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d1f4      	bne.n	8002290 <CardFoundStart+0x2c>
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 80022a6:	2100      	movs	r1, #0
 80022a8:	481d      	ldr	r0, [pc, #116]	; (8002320 <CardFoundStart+0xbc>)
 80022aa:	f7ff f877 	bl	800139c <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, 1, cardinf);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	461a      	mov	r2, r3
 80022b2:	2101      	movs	r1, #1
 80022b4:	481a      	ldr	r0, [pc, #104]	; (8002320 <CardFoundStart+0xbc>)
 80022b6:	f7ff f8aa 	bl	800140e <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, 2, type);
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	461a      	mov	r2, r3
 80022c0:	2102      	movs	r1, #2
 80022c2:	4817      	ldr	r0, [pc, #92]	; (8002320 <CardFoundStart+0xbc>)
 80022c4:	f7ff f8a3 	bl	800140e <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2200      	movs	r2, #0
 80022ce:	4619      	mov	r1, r3
 80022d0:	4813      	ldr	r0, [pc, #76]	; (8002320 <CardFoundStart+0xbc>)
 80022d2:	f7ff f8c5 	bl	8001460 <OLED_SELECT>
		ranonce++;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	3301      	adds	r3, #1
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	choose(&SCRN_CardFound,&suspend,&count,2,OLED_NORESTORE);
 80022dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022e0:	f107 010c 	add.w	r1, r7, #12
 80022e4:	2300      	movs	r3, #0
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2302      	movs	r3, #2
 80022ea:	480d      	ldr	r0, [pc, #52]	; (8002320 <CardFoundStart+0xbc>)
 80022ec:	f7ff fbba 	bl	8001a64 <choose>
 	if((suspend == 1) && (count == 1)){
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d1c6      	bne.n	8002284 <CardFoundStart+0x20>
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d1c3      	bne.n	8002284 <CardFoundStart+0x20>
 		vTaskResume(HomeHandle);
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <CardFoundStart+0xc0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f00a f887 	bl	800c414 <vTaskResume>
 		ranonce = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 		count = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 		vTaskSuspend(NULL);
 800230e:	2000      	movs	r0, #0
 8002310:	f009 ffd8 	bl	800c2c4 <vTaskSuspend>
  {
 8002314:	e7b6      	b.n	8002284 <CardFoundStart+0x20>
 8002316:	bf00      	nop
 8002318:	0800f2c0 	.word	0x0800f2c0
 800231c:	2000082c 	.word	0x2000082c
 8002320:	0800f718 	.word	0x0800f718
 8002324:	20000824 	.word	0x20000824

08002328 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800233a:	f000 faa7 	bl	800288c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40000c00 	.word	0x40000c00

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002354:	e7fe      	b.n	8002354 <Error_Handler+0x8>
	...

08002358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_MspInit+0x54>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a11      	ldr	r2, [pc, #68]	; (80023ac <HAL_MspInit+0x54>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_MspInit+0x54>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_MspInit+0x54>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_MspInit+0x54>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_MspInit+0x54>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	210f      	movs	r1, #15
 800239a:	f06f 0001 	mvn.w	r0, #1
 800239e:	f000 fb71 	bl	8002a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_I2C_MspInit+0x84>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d12b      	bne.n	800242a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_I2C_MspInit+0x88>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_I2C_MspInit+0x88>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_I2C_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ee:	23c0      	movs	r3, #192	; 0xc0
 80023f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f2:	2312      	movs	r3, #18
 80023f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023fe:	2304      	movs	r3, #4
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	480c      	ldr	r0, [pc, #48]	; (800243c <HAL_I2C_MspInit+0x8c>)
 800240a:	f000 fb65 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_I2C_MspInit+0x88>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_I2C_MspInit+0x88>)
 8002418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_I2C_MspInit+0x88>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40005400 	.word	0x40005400
 8002438:	40023800 	.word	0x40023800
 800243c:	40020400 	.word	0x40020400

08002440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	; 0x30
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a32      	ldr	r2, [pc, #200]	; (8002528 <HAL_SPI_MspInit+0xe8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12c      	bne.n	80024bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_SPI_MspInit+0xec>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_SPI_MspInit+0xec>)
 800246c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_SPI_MspInit+0xec>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_SPI_MspInit+0xec>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a29      	ldr	r2, [pc, #164]	; (800252c <HAL_SPI_MspInit+0xec>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_SPI_MspInit+0xec>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800249a:	23a0      	movs	r3, #160	; 0xa0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024aa:	2305      	movs	r3, #5
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	4619      	mov	r1, r3
 80024b4:	481e      	ldr	r0, [pc, #120]	; (8002530 <HAL_SPI_MspInit+0xf0>)
 80024b6:	f000 fb0f 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024ba:	e031      	b.n	8002520 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <HAL_SPI_MspInit+0xf4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d12c      	bne.n	8002520 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_SPI_MspInit+0xec>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_SPI_MspInit+0xec>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_SPI_MspInit+0xec>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_SPI_MspInit+0xec>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_SPI_MspInit+0xec>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_SPI_MspInit+0xec>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80024fe:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002510:	2305      	movs	r3, #5
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	4807      	ldr	r0, [pc, #28]	; (8002538 <HAL_SPI_MspInit+0xf8>)
 800251c:	f000 fadc 	bl	8002ad8 <HAL_GPIO_Init>
}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	; 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40013000 	.word	0x40013000
 800252c:	40023800 	.word	0x40023800
 8002530:	40020000 	.word	0x40020000
 8002534:	40003800 	.word	0x40003800
 8002538:	40020400 	.word	0x40020400

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d10e      	bne.n	800256c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_TIM_Base_MspInit+0x64>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_TIM_Base_MspInit+0x64>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_TIM_Base_MspInit+0x64>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800256a:	e012      	b.n	8002592 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10d      	bne.n	8002592 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_TIM_Base_MspInit+0x64>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_TIM_Base_MspInit+0x64>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_TIM_Base_MspInit+0x64>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40000400 	.word	0x40000400

080025a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d11d      	bne.n	8002606 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_TIM_MspPostInit+0x68>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <HAL_TIM_MspPostInit+0x68>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_TIM_MspPostInit+0x68>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025e6:	2304      	movs	r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	4619      	mov	r1, r3
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <HAL_TIM_MspPostInit+0x6c>)
 8002602:	f000 fa69 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002606:	bf00      	nop
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000

08002618 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_InitTick+0xe4>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a32      	ldr	r2, [pc, #200]	; (80026fc <HAL_InitTick+0xe4>)
 8002632:	f043 0308 	orr.w	r3, r3, #8
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_InitTick+0xe4>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002644:	f107 0210 	add.w	r2, r7, #16
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fab6 	bl	8005bc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800265e:	f003 fa9b 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 8002662:	6378      	str	r0, [r7, #52]	; 0x34
 8002664:	e004      	b.n	8002670 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002666:	f003 fa97 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 800266a:	4603      	mov	r3, r0
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002672:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_InitTick+0xe8>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	3b01      	subs	r3, #1
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_InitTick+0xec>)
 8002680:	4a21      	ldr	r2, [pc, #132]	; (8002708 <HAL_InitTick+0xf0>)
 8002682:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HAL_InitTick+0xec>)
 8002686:	f240 32e7 	movw	r2, #999	; 0x3e7
 800268a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800268c:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <HAL_InitTick+0xec>)
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_InitTick+0xec>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_InitTick+0xec>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_InitTick+0xec>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80026a4:	4817      	ldr	r0, [pc, #92]	; (8002704 <HAL_InitTick+0xec>)
 80026a6:	f003 feef 	bl	8006488 <HAL_TIM_Base_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80026b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11b      	bne.n	80026f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80026b8:	4812      	ldr	r0, [pc, #72]	; (8002704 <HAL_InitTick+0xec>)
 80026ba:	f003 ffb7 	bl	800662c <HAL_TIM_Base_Start_IT>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026cc:	2032      	movs	r0, #50	; 0x32
 80026ce:	f000 f9f5 	bl	8002abc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d808      	bhi.n	80026ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	2032      	movs	r0, #50	; 0x32
 80026de:	f000 f9d1 	bl	8002a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_InitTick+0xf4>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e002      	b.n	80026f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3738      	adds	r7, #56	; 0x38
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	431bde83 	.word	0x431bde83
 8002704:	20000830 	.word	0x20000830
 8002708:	40000c00 	.word	0x40000c00
 800270c:	200004f0 	.word	0x200004f0

08002710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <NMI_Handler+0x4>

08002716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <HardFault_Handler+0x4>

0800271c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <MemManage_Handler+0x4>

08002722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <BusFault_Handler+0x4>

08002728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <UsageFault_Handler+0x4>

0800272e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM5_IRQHandler+0x10>)
 8002742:	f004 f943 	bl	80069cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000830 	.word	0x20000830

08002750 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <OTG_FS_IRQHandler+0x10>)
 8002756:	f001 fc84 	bl	8004062 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200064e4 	.word	0x200064e4

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_sbrk+0x5c>)
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <_sbrk+0x60>)
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <_sbrk+0x64>)
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <_sbrk+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d207      	bcs.n	80027a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002794:	f00c f85a 	bl	800e84c <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	220c      	movs	r2, #12
 800279c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	e009      	b.n	80027b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <_sbrk+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <_sbrk+0x64>)
 80027b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20010000 	.word	0x20010000
 80027c4:	00000400 	.word	0x00000400
 80027c8:	20000878 	.word	0x20000878
 80027cc:	20006c20 	.word	0x20006c20

080027d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <SystemInit+0x20>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <SystemInit+0x20>)
 80027dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800282c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027fa:	490e      	ldr	r1, [pc, #56]	; (8002834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002800:	e002      	b.n	8002808 <LoopCopyDataInit>

08002802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002806:	3304      	adds	r3, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800280c:	d3f9      	bcc.n	8002802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002810:	4c0b      	ldr	r4, [pc, #44]	; (8002840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002814:	e001      	b.n	800281a <LoopFillZerobss>

08002816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002818:	3204      	adds	r2, #4

0800281a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800281c:	d3fb      	bcc.n	8002816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800281e:	f7ff ffd7 	bl	80027d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002822:	f00c f819 	bl	800e858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002826:	f7ff f96b 	bl	8001b00 <main>
  bx  lr    
 800282a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800282c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 8002838:	0800f79c 	.word	0x0800f79c
  ldr r2, =_sbss
 800283c:	20000664 	.word	0x20000664
  ldr r4, =_ebss
 8002840:	20006c20 	.word	0x20006c20

08002844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_Init+0x40>)
 8002852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_Init+0x40>)
 800285e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <HAL_Init+0x40>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002870:	2003      	movs	r0, #3
 8002872:	f000 f8fc 	bl	8002a6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002876:	200f      	movs	r0, #15
 8002878:	f7ff fece 	bl	8002618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287c:	f7ff fd6c 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x20>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x24>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_IncTick+0x24>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	200004f4 	.word	0x200004f4
 80028b0:	2000087c 	.word	0x2000087c

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_GetTick+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	2000087c 	.word	0x2000087c

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff ffee 	bl	80028b4 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_Delay+0x44>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffde 	bl	80028b4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200004f4 	.word	0x200004f4

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff4c 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a96:	f7ff ff61 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff ffb1 	bl	8002a08 <NVIC_EncodePriority>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff80 	bl	80029b4 <__NVIC_SetPriority>
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff54 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e159      	b.n	8002da8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8148 	bne.w	8002da2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a2 	beq.w	8002da2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a56      	ldr	r2, [pc, #344]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_GPIO_Init+0x2ec>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_GPIO_Init+0x2f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x202>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <HAL_GPIO_Init+0x2f4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x1fe>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a47      	ldr	r2, [pc, #284]	; (8002dd0 <HAL_GPIO_Init+0x2f8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x1fa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a46      	ldr	r2, [pc, #280]	; (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x1f6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a45      	ldr	r2, [pc, #276]	; (8002dd8 <HAL_GPIO_Init+0x300>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x1f2>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e008      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e004      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	f002 0203 	and.w	r2, r2, #3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cec:	4935      	ldr	r1, [pc, #212]	; (8002dc4 <HAL_GPIO_Init+0x2ec>)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfa:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1e:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d72:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3301      	adds	r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	f67f aea2 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40020800 	.word	0x40020800
 8002dd4:	40020c00 	.word	0x40020c00
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12b      	b.n	80030ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff faa0 	bl	80023b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f002 fe76 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a81      	ldr	r2, [pc, #516]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d807      	bhi.n	8002ec8 <HAL_I2C_Init+0x84>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a80      	ldr	r2, [pc, #512]	; (80030bc <HAL_I2C_Init+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e006      	b.n	8002ed6 <HAL_I2C_Init+0x92>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_I2C_Init+0x27c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e7      	b.n	80030ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a78      	ldr	r2, [pc, #480]	; (80030c4 <HAL_I2C_Init+0x280>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <HAL_I2C_Init+0xd4>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	e009      	b.n	8002f2c <HAL_I2C_Init+0xe8>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <HAL_I2C_Init+0x284>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	495c      	ldr	r1, [pc, #368]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d819      	bhi.n	8002f80 <HAL_I2C_Init+0x13c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_I2C_Init+0x138>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e59      	subs	r1, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	e051      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	e04f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <HAL_I2C_Init+0x168>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e012      	b.n	8002fd2 <HAL_I2C_Init+0x18e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x196>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e022      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_I2C_Init+0x1bc>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e58      	subs	r0, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6911      	ldr	r1, [r2, #16]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68d2      	ldr	r2, [r2, #12]
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	000186a0 	.word	0x000186a0
 80030bc:	001e847f 	.word	0x001e847f
 80030c0:	003d08ff 	.word	0x003d08ff
 80030c4:	431bde83 	.word	0x431bde83
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e6:	f7ff fbe5 	bl	80028b4 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	f040 80d9 	bne.w	80032ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2319      	movs	r3, #25
 8003100:	2201      	movs	r2, #1
 8003102:	496d      	ldr	r1, [pc, #436]	; (80032b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fc7f 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
 8003112:	e0cc      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Mem_Write+0x56>
 800311e:	2302      	movs	r3, #2
 8003120:	e0c5      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d007      	beq.n	8003148 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	; 0x21
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2240      	movs	r2, #64	; 0x40
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_I2C_Mem_Write+0x1f0>)
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800318a:	88f8      	ldrh	r0, [r7, #6]
 800318c:	893a      	ldrh	r2, [r7, #8]
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4603      	mov	r3, r0
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fab6 	bl	800370c <I2C_RequestMemoryWrite>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d052      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e081      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fd00 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d107      	bne.n	80031d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06b      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_I2C_Mem_Write+0x180>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d017      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1aa      	bne.n	80031aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fcec 	bl	8003c36 <I2C_WaitOnBTFFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e016      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00100002 	.word	0x00100002
 80032bc:	ffff0000 	.word	0xffff0000

080032c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	817b      	strh	r3, [r7, #10]
 80032d2:	460b      	mov	r3, r1
 80032d4:	813b      	strh	r3, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032da:	f7ff faeb 	bl	80028b4 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	f040 8208 	bne.w	80036fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2319      	movs	r3, #25
 80032f4:	2201      	movs	r2, #1
 80032f6:	497b      	ldr	r1, [pc, #492]	; (80034e4 <HAL_I2C_Mem_Read+0x224>)
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fb85 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	e1fb      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Mem_Read+0x56>
 8003312:	2302      	movs	r3, #2
 8003314:	e1f4      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d007      	beq.n	800333c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2222      	movs	r2, #34	; 0x22
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a5b      	ldr	r2, [pc, #364]	; (80034e8 <HAL_I2C_Mem_Read+0x228>)
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800337e:	88f8      	ldrh	r0, [r7, #6]
 8003380:	893a      	ldrh	r2, [r7, #8]
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	4603      	mov	r3, r0
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fa52 	bl	8003838 <I2C_RequestMemoryRead>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1b0      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d113      	bne.n	80033ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	623b      	str	r3, [r7, #32]
 80033ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e184      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d11b      	bne.n	800340e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e164      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	2b02      	cmp	r3, #2
 8003414:	d11b      	bne.n	800344e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003424:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	e144      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003464:	e138      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b03      	cmp	r3, #3
 800346c:	f200 80f1 	bhi.w	8003652 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	2b01      	cmp	r3, #1
 8003476:	d123      	bne.n	80034c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fc1b 	bl	8003cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e139      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034be:	e10b      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d14e      	bne.n	8003566 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	2200      	movs	r2, #0
 80034d0:	4906      	ldr	r1, [pc, #24]	; (80034ec <HAL_I2C_Mem_Read+0x22c>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa98 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e10e      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
 80034e2:	bf00      	nop
 80034e4:	00100002 	.word	0x00100002
 80034e8:	ffff0000 	.word	0xffff0000
 80034ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003564:	e0b8      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2200      	movs	r2, #0
 800356e:	4966      	ldr	r1, [pc, #408]	; (8003708 <HAL_I2C_Mem_Read+0x448>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fa49 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0bf      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2200      	movs	r2, #0
 80035ca:	494f      	ldr	r1, [pc, #316]	; (8003708 <HAL_I2C_Mem_Read+0x448>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fa1b 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e091      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003650:	e042      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fb2e 	bl	8003cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e04c      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d118      	bne.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f47f aec2 	bne.w	8003466 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00010004 	.word	0x00010004

0800370c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2200      	movs	r2, #0
 800373e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f960 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375c:	d103      	bne.n	8003766 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e05f      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	492d      	ldr	r1, [pc, #180]	; (8003834 <I2C_RequestMemoryWrite+0x128>)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f998 	bl	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e04c      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa02 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d107      	bne.n	80037ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e02b      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d8:	893b      	ldrh	r3, [r7, #8]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	611a      	str	r2, [r3, #16]
 80037e2:	e021      	b.n	8003828 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037e4:	893b      	ldrh	r3, [r7, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	6a39      	ldr	r1, [r7, #32]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f9dc 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b04      	cmp	r3, #4
 8003808:	d107      	bne.n	800381a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e005      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800381e:	893b      	ldrh	r3, [r7, #8]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	00010002 	.word	0x00010002

08003838 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	461a      	mov	r2, r3
 8003846:	4603      	mov	r3, r0
 8003848:	817b      	strh	r3, [r7, #10]
 800384a:	460b      	mov	r3, r1
 800384c:	813b      	strh	r3, [r7, #8]
 800384e:	4613      	mov	r3, r2
 8003850:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003860:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003870:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2200      	movs	r2, #0
 800387a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8c2 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003898:	d103      	bne.n	80038a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0aa      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	4952      	ldr	r1, [pc, #328]	; (8003a04 <I2C_RequestMemoryRead+0x1cc>)
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f8fa 	bl	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e097      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e4:	6a39      	ldr	r1, [r7, #32]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f964 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d107      	bne.n	800390a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003908:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e076      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003914:	893b      	ldrh	r3, [r7, #8]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e021      	b.n	8003964 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	b29b      	uxth	r3, r3
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f93e 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	2b04      	cmp	r3, #4
 8003944:	d107      	bne.n	8003956 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e050      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800395a:	893b      	ldrh	r3, [r7, #8]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003966:	6a39      	ldr	r1, [r7, #32]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f923 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	2b04      	cmp	r3, #4
 800397a:	d107      	bne.n	800398c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e035      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f82b 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d103      	bne.n	80039d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e013      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039d4:	897b      	ldrh	r3, [r7, #10]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	6a3a      	ldr	r2, [r7, #32]
 80039e8:	4906      	ldr	r1, [pc, #24]	; (8003a04 <I2C_RequestMemoryRead+0x1cc>)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f863 	bl	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	00010002 	.word	0x00010002

08003a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a18:	e025      	b.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d021      	beq.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe ff47 	bl	80028b4 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e023      	b.n	8003aae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10d      	bne.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	e00c      	b.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d0b6      	beq.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac4:	e051      	b.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d123      	bne.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0204 	orr.w	r2, r3, #4
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e046      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d021      	beq.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fe fec5 	bl	80028b4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e020      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10c      	bne.n	8003b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf14      	ite	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e00b      	b.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	43da      	mvns	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d18d      	bne.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc0:	e02d      	b.n	8003c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f8ce 	bl	8003d64 <I2C_IsAcknowledgeFailed>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02d      	b.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d021      	beq.n	8003c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fe6b 	bl	80028b4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d116      	bne.n	8003c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d1ca      	bne.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c42:	e02d      	b.n	8003ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f88d 	bl	8003d64 <I2C_IsAcknowledgeFailed>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e02d      	b.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d021      	beq.n	8003ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5c:	f7fe fe2a 	bl	80028b4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d302      	bcc.n	8003c72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d116      	bne.n	8003ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e007      	b.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d1ca      	bne.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc4:	e042      	b.n	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d119      	bne.n	8003d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e029      	b.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d08:	f7fe fdd4 	bl	80028b4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e007      	b.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d1b5      	bne.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d11b      	bne.n	8003db4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc4:	b08f      	sub	sp, #60	; 0x3c
 8003dc6:	af0a      	add	r7, sp, #40	; 0x28
 8003dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e10f      	b.n	8003ff4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f00a fa22 	bl	800e238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2203      	movs	r2, #3
 8003df8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 fcf7 	bl	8007806 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	687e      	ldr	r6, [r7, #4]
 8003e20:	466d      	mov	r5, sp
 8003e22:	f106 0410 	add.w	r4, r6, #16
 8003e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e36:	1d33      	adds	r3, r6, #4
 8003e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e3a:	6838      	ldr	r0, [r7, #0]
 8003e3c:	f003 fbce 	bl	80075dc <USB_CoreInit>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0d0      	b.n	8003ff4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 fce5 	bl	8007828 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	e04a      	b.n	8003efa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	333d      	adds	r3, #61	; 0x3d
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	333c      	adds	r3, #60	; 0x3c
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	b298      	uxth	r0, r3
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3344      	adds	r3, #68	; 0x44
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3340      	adds	r3, #64	; 0x40
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3348      	adds	r3, #72	; 0x48
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	334c      	adds	r3, #76	; 0x4c
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3354      	adds	r3, #84	; 0x54
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d3af      	bcc.n	8003e64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e044      	b.n	8003f94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	3301      	adds	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3b5      	bcc.n	8003f0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	687e      	ldr	r6, [r7, #4]
 8003fa6:	466d      	mov	r5, sp
 8003fa8:	f106 0410 	add.w	r4, r6, #16
 8003fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fbc:	1d33      	adds	r3, r6, #4
 8003fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc0:	6838      	ldr	r0, [r7, #0]
 8003fc2:	f003 fc7d 	bl	80078c0 <USB_DevInit>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e00d      	b.n	8003ff4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f004 fdcc 	bl	8008b8a <USB_DevDisconnect>

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ffc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_PCD_Start+0x1c>
 8004014:	2302      	movs	r3, #2
 8004016:	e020      	b.n	800405a <HAL_PCD_Start+0x5e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	2b01      	cmp	r3, #1
 8004026:	d109      	bne.n	800403c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800402c:	2b01      	cmp	r3, #1
 800402e:	d005      	beq.n	800403c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f003 fbcf 	bl	80077e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f004 fd7c 	bl	8008b48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004062:	b590      	push	{r4, r7, lr}
 8004064:	b08d      	sub	sp, #52	; 0x34
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f004 fe3a 	bl	8008cf2 <USB_GetMode>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 848a 	bne.w	800499a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f004 fd9e 	bl	8008bcc <USB_ReadInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8480 	beq.w	8004998 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f004 fd8b 	bl	8008bcc <USB_ReadInterrupts>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d107      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f002 0202 	and.w	r2, r2, #2
 80040ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 fd79 	bl	8008bcc <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d161      	bne.n	80041a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0210 	bic.w	r2, r2, #16
 80040f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f003 020f 	and.w	r2, r3, #15
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	0c5b      	lsrs	r3, r3, #17
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	2b02      	cmp	r3, #2
 800411e:	d124      	bne.n	800416a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d035      	beq.n	8004198 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	6a38      	ldr	r0, [r7, #32]
 8004140:	f004 fbb0 	bl	80088a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004150:	441a      	add	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004162:	441a      	add	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	621a      	str	r2, [r3, #32]
 8004168:	e016      	b.n	8004198 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	0c5b      	lsrs	r3, r3, #17
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	2b06      	cmp	r3, #6
 8004174:	d110      	bne.n	8004198 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800417c:	2208      	movs	r2, #8
 800417e:	4619      	mov	r1, r3
 8004180:	6a38      	ldr	r0, [r7, #32]
 8004182:	f004 fb8f 	bl	80088a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004192:	441a      	add	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0210 	orr.w	r2, r2, #16
 80041a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f004 fd0d 	bl	8008bcc <USB_ReadInterrupts>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041bc:	f040 80a7 	bne.w	800430e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f004 fd12 	bl	8008bf2 <USB_ReadDevAllOutEpInterrupt>
 80041ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80041d0:	e099      	b.n	8004306 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 808e 	beq.w	80042fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 fd36 	bl	8008c5a <USB_ReadDevOutEPInterrupt>
 80041ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00c      	beq.n	8004214 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	461a      	mov	r2, r3
 8004208:	2301      	movs	r3, #1
 800420a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800420c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fec2 	bl	8004f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	461a      	mov	r2, r3
 800422c:	2308      	movs	r3, #8
 800422e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 ff98 	bl	8005168 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	461a      	mov	r2, r3
 8004250:	2310      	movs	r3, #16
 8004252:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d030      	beq.n	80042c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d109      	bne.n	800427e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800427c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	78db      	ldrb	r3, [r3, #3]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d108      	bne.n	80042ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f00a f8c1 	bl	800e430 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	461a      	mov	r2, r3
 80042bc:	2302      	movs	r3, #2
 80042be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	2320      	movs	r3, #32
 80042da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	461a      	mov	r2, r3
 80042f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	3301      	adds	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	f47f af62 	bne.w	80041d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f004 fc5a 	bl	8008bcc <USB_ReadInterrupts>
 8004318:	4603      	mov	r3, r0
 800431a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004322:	f040 80db 	bne.w	80044dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f004 fc7b 	bl	8008c26 <USB_ReadDevAllInEpInterrupt>
 8004330:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004336:	e0cd      	b.n	80044d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80c2 	beq.w	80044c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f004 fca1 	bl	8008c96 <USB_ReadDevInEPInterrupt>
 8004354:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d057      	beq.n	8004410 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	2201      	movs	r2, #1
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	43db      	mvns	r3, r3
 800437a:	69f9      	ldr	r1, [r7, #28]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4013      	ands	r3, r2
 8004382:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2301      	movs	r3, #1
 8004394:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d132      	bne.n	8004404 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	334c      	adds	r3, #76	; 0x4c
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4403      	add	r3, r0
 80043be:	3348      	adds	r3, #72	; 0x48
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4419      	add	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4403      	add	r3, r0
 80043d2:	334c      	adds	r3, #76	; 0x4c
 80043d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d113      	bne.n	8004404 <HAL_PCD_IRQHandler+0x3a2>
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	3354      	adds	r3, #84	; 0x54
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d108      	bne.n	8004404 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043fc:	461a      	mov	r2, r3
 80043fe:	2101      	movs	r1, #1
 8004400:	f004 fca8 	bl	8008d54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f009 ff95 	bl	800e33a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	461a      	mov	r2, r3
 8004428:	2308      	movs	r3, #8
 800442a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	461a      	mov	r2, r3
 8004444:	2310      	movs	r3, #16
 8004446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	461a      	mov	r2, r3
 8004460:	2340      	movs	r3, #64	; 0x40
 8004462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d023      	beq.n	80044b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800446e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004470:	6a38      	ldr	r0, [r7, #32]
 8004472:	f003 fb89 	bl	8007b88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3338      	adds	r3, #56	; 0x38
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	78db      	ldrb	r3, [r3, #3]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d108      	bne.n	80044a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	b2db      	uxtb	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f009 ffd8 	bl	800e454 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	461a      	mov	r2, r3
 80044b2:	2302      	movs	r3, #2
 80044b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fcdb 	bl	8004e7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	3301      	adds	r3, #1
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f47f af2e 	bne.w	8004338 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f004 fb73 	bl	8008bcc <USB_ReadInterrupts>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f0:	d122      	bne.n	8004538 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800450c:	2b01      	cmp	r3, #1
 800450e:	d108      	bne.n	8004522 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004518:	2100      	movs	r1, #0
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fec2 	bl	80052a4 <HAL_PCDEx_LPM_Callback>
 8004520:	e002      	b.n	8004528 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f009 ff76 	bl	800e414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f004 fb45 	bl	8008bcc <USB_ReadInterrupts>
 8004542:	4603      	mov	r3, r0
 8004544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454c:	d112      	bne.n	8004574 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d102      	bne.n	8004564 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f009 ff32 	bl	800e3c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004572:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f004 fb27 	bl	8008bcc <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004588:	f040 80b7 	bne.w	80046fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2110      	movs	r1, #16
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 faee 	bl	8007b88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	e046      	b.n	8004640 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	461a      	mov	r2, r3
 80045c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004614:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004618:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	440a      	add	r2, r1
 8004630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004634:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004638:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	3301      	adds	r3, #1
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004646:	429a      	cmp	r2, r3
 8004648:	d3b3      	bcc.n	80045b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004658:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800465c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004676:	f043 030b 	orr.w	r3, r3, #11
 800467a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468c:	f043 030b 	orr.w	r3, r3, #11
 8004690:	6453      	str	r3, [r2, #68]	; 0x44
 8004692:	e015      	b.n	80046c0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80046aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ba:	f043 030b 	orr.w	r3, r3, #11
 80046be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046e4:	461a      	mov	r2, r3
 80046e6:	f004 fb35 	bl	8008d54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fa64 	bl	8008bcc <USB_ReadInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470e:	d124      	bne.n	800475a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f004 fafa 	bl	8008d0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f003 faaf 	bl	8007c82 <USB_GetDevSpeed>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681c      	ldr	r4, [r3, #0]
 8004730:	f001 fa26 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8004734:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	4620      	mov	r0, r4
 8004740:	f002 ffae 	bl	80076a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f009 fe20 	bl	800e38a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004758:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f004 fa34 	bl	8008bcc <USB_ReadInterrupts>
 8004764:	4603      	mov	r3, r0
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b08      	cmp	r3, #8
 800476c:	d10a      	bne.n	8004784 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f009 fdfd 	bl	800e36e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f002 0208 	and.w	r2, r2, #8
 8004782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f004 fa1f 	bl	8008bcc <USB_ReadInterrupts>
 800478e:	4603      	mov	r3, r0
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d122      	bne.n	80047de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a4:	2301      	movs	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e014      	b.n	80047d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fb27 	bl	8004e1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	3301      	adds	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3e5      	bcc.n	80047aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 f9f2 	bl	8008bcc <USB_ReadInterrupts>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f2:	d13b      	bne.n	800486c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f4:	2301      	movs	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	e02b      	b.n	8004852 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3340      	adds	r3, #64	; 0x40
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d115      	bne.n	800484c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004820:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004822:	2b00      	cmp	r3, #0
 8004824:	da12      	bge.n	800484c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	333f      	adds	r3, #63	; 0x3f
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004842:	b2db      	uxtb	r3, r3
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fae8 	bl	8004e1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	3301      	adds	r3, #1
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	429a      	cmp	r2, r3
 800485a:	d3ce      	bcc.n	80047fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800486a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f004 f9ab 	bl	8008bcc <USB_ReadInterrupts>
 8004876:	4603      	mov	r3, r0
 8004878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004880:	d155      	bne.n	800492e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004882:	2301      	movs	r3, #1
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	e045      	b.n	8004914 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d12e      	bne.n	800490e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	da2b      	bge.n	800490e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d121      	bne.n	800490e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800490a:	6053      	str	r3, [r2, #4]
            break;
 800490c:	e007      	b.n	800491e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	3301      	adds	r3, #1
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491a:	429a      	cmp	r2, r3
 800491c:	d3b4      	bcc.n	8004888 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800492c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f004 f94a 	bl	8008bcc <USB_ReadInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d10a      	bne.n	800495a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f009 fd97 	bl	800e478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f004 f934 	bl	8008bcc <USB_ReadInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b04      	cmp	r3, #4
 800496c:	d115      	bne.n	800499a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f009 fd87 	bl	800e494 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	e000      	b.n	800499a <HAL_PCD_IRQHandler+0x938>
      return;
 8004998:	bf00      	nop
    }
  }
}
 800499a:	3734      	adds	r7, #52	; 0x34
 800499c:	46bd      	mov	sp, r7
 800499e:	bd90      	pop	{r4, r7, pc}

080049a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_PCD_SetAddress+0x1a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e013      	b.n	80049e2 <HAL_PCD_SetAddress+0x42>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f004 f892 	bl	8008afc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	4608      	mov	r0, r1
 80049f4:	4611      	mov	r1, r2
 80049f6:	461a      	mov	r2, r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	70fb      	strb	r3, [r7, #3]
 80049fc:	460b      	mov	r3, r1
 80049fe:	803b      	strh	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da0f      	bge.n	8004a30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	3338      	adds	r3, #56	; 0x38
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	3304      	adds	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	705a      	strb	r2, [r3, #1]
 8004a2e:	e00f      	b.n	8004a50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	f003 020f 	and.w	r2, r3, #15
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	3304      	adds	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a5c:	883a      	ldrh	r2, [r7, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	78ba      	ldrb	r2, [r7, #2]
 8004a66:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a7a:	78bb      	ldrb	r3, [r7, #2]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d102      	bne.n	8004a86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_PCD_EP_Open+0xaa>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e00e      	b.n	8004ab2 <HAL_PCD_EP_Open+0xc8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f003 f912 	bl	8007ccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	da0f      	bge.n	8004aee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	3338      	adds	r3, #56	; 0x38
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	705a      	strb	r2, [r3, #1]
 8004aec:	e00f      	b.n	8004b0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	f003 020f 	and.w	r2, r3, #15
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	3304      	adds	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_PCD_EP_Close+0x6e>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e00e      	b.n	8004b46 <HAL_PCD_EP_Close+0x8c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68f9      	ldr	r1, [r7, #12]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f003 f950 	bl	8007ddc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5e:	7afb      	ldrb	r3, [r7, #11]
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	3304      	adds	r3, #4
 8004b76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b90:	7afb      	ldrb	r3, [r7, #11]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d102      	bne.n	8004baa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004baa:	7afb      	ldrb	r3, [r7, #11]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6979      	ldr	r1, [r7, #20]
 8004bc2:	f003 fc2f 	bl	8008424 <USB_EP0StartXfer>
 8004bc6:	e008      	b.n	8004bda <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6979      	ldr	r1, [r7, #20]
 8004bd6:	f003 f9dd 	bl	8007f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	f003 020f 	and.w	r2, r3, #15
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	460b      	mov	r3, r1
 8004c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c24:	7afb      	ldrb	r3, [r7, #11]
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	3338      	adds	r3, #56	; 0x38
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2201      	movs	r2, #1
 8004c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c54:	7afb      	ldrb	r3, [r7, #11]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d102      	bne.n	8004c6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c6e:	7afb      	ldrb	r3, [r7, #11]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	6979      	ldr	r1, [r7, #20]
 8004c86:	f003 fbcd 	bl	8008424 <USB_EP0StartXfer>
 8004c8a:	e008      	b.n	8004c9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	6979      	ldr	r1, [r7, #20]
 8004c9a:	f003 f97b 	bl	8007f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	f003 020f 	and.w	r2, r3, #15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d901      	bls.n	8004cc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e050      	b.n	8004d68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da0f      	bge.n	8004cee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	f003 020f 	and.w	r2, r3, #15
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	3338      	adds	r3, #56	; 0x38
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	705a      	strb	r2, [r3, #1]
 8004cec:	e00d      	b.n	8004d0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4413      	add	r3, r2
 8004d00:	3304      	adds	r3, #4
 8004d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_PCD_EP_SetStall+0x82>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e01e      	b.n	8004d68 <HAL_PCD_EP_SetStall+0xc0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f003 fe0b 	bl	8008954 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	b2d9      	uxtb	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f003 fffb 	bl	8008d54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d901      	bls.n	8004d8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e042      	b.n	8004e14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da0f      	bge.n	8004db6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	f003 020f 	and.w	r2, r3, #15
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	3338      	adds	r3, #56	; 0x38
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	3304      	adds	r3, #4
 8004dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	705a      	strb	r2, [r3, #1]
 8004db4:	e00f      	b.n	8004dd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	f003 020f 	and.w	r2, r3, #15
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	3304      	adds	r3, #4
 8004dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_PCD_EP_ClrStall+0x86>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e00e      	b.n	8004e14 <HAL_PCD_EP_ClrStall+0xa4>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f003 fe13 	bl	8008a30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	da0c      	bge.n	8004e4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	f003 020f 	and.w	r2, r3, #15
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	3338      	adds	r3, #56	; 0x38
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4413      	add	r3, r2
 8004e44:	3304      	adds	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e00c      	b.n	8004e64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	f003 020f 	and.w	r2, r3, #15
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4413      	add	r3, r2
 8004e60:	3304      	adds	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68f9      	ldr	r1, [r7, #12]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f003 fc32 	bl	80086d4 <USB_EPStopXfer>
 8004e70:	4603      	mov	r3, r0
 8004e72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e74:	7afb      	ldrb	r3, [r7, #11]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b08a      	sub	sp, #40	; 0x28
 8004e82:	af02      	add	r7, sp, #8
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	3338      	adds	r3, #56	; 0x38
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d901      	bls.n	8004eb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e06c      	b.n	8004f90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d902      	bls.n	8004ed2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3303      	adds	r3, #3
 8004ed6:	089b      	lsrs	r3, r3, #2
 8004ed8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eda:	e02b      	b.n	8004f34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d902      	bls.n	8004ef8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3303      	adds	r3, #3
 8004efc:	089b      	lsrs	r3, r3, #2
 8004efe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6919      	ldr	r1, [r3, #16]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4603      	mov	r3, r0
 8004f16:	6978      	ldr	r0, [r7, #20]
 8004f18:	f003 fc86 	bl	8008828 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	441a      	add	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	441a      	add	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d809      	bhi.n	8004f5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d203      	bcs.n	8004f5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1be      	bne.n	8004edc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d811      	bhi.n	8004f8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	2201      	movs	r2, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	6939      	ldr	r1, [r7, #16]
 8004f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	333c      	adds	r3, #60	; 0x3c
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d17b      	bne.n	80050c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d015      	beq.n	8005004 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4a61      	ldr	r2, [pc, #388]	; (8005160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	f240 80b9 	bls.w	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80b3 	beq.w	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005000:	6093      	str	r3, [r2, #8]
 8005002:	e0a7      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	461a      	mov	r2, r3
 800501c:	2320      	movs	r3, #32
 800501e:	6093      	str	r3, [r2, #8]
 8005020:	e098      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 8093 	bne.w	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	4a4b      	ldr	r2, [pc, #300]	; (8005160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d90f      	bls.n	8005056 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	461a      	mov	r2, r3
 800504e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005052:	6093      	str	r3, [r2, #8]
 8005054:	e07e      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	3304      	adds	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	0159      	lsls	r1, r3, #5
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	440b      	add	r3, r1
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005082:	1ad2      	subs	r2, r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d114      	bne.n	80050b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050a0:	461a      	mov	r2, r3
 80050a2:	2101      	movs	r1, #1
 80050a4:	f003 fe56 	bl	8008d54 <USB_EP0_OutStart>
 80050a8:	e006      	b.n	80050b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	441a      	add	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f009 f920 	bl	800e304 <HAL_PCD_DataOutStageCallback>
 80050c4:	e046      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d124      	bne.n	8005118 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e4:	461a      	mov	r2, r3
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	6093      	str	r3, [r2, #8]
 80050ec:	e032      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	461a      	mov	r2, r3
 8005106:	2320      	movs	r3, #32
 8005108:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f009 f8f7 	bl	800e304 <HAL_PCD_DataOutStageCallback>
 8005116:	e01d      	b.n	8005154 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d114      	bne.n	8005148 <PCD_EP_OutXfrComplete_int+0x1b0>
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d108      	bne.n	8005148 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005140:	461a      	mov	r2, r3
 8005142:	2100      	movs	r1, #0
 8005144:	f003 fe06 	bl	8008d54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f009 f8d8 	bl	800e304 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	4f54300a 	.word	0x4f54300a
 8005164:	4f54310a 	.word	0x4f54310a

08005168 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	333c      	adds	r3, #60	; 0x3c
 8005180:	3304      	adds	r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d90e      	bls.n	80051bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f009 f88f 	bl	800e2e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d90c      	bls.n	80051e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d108      	bne.n	80051e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051dc:	461a      	mov	r2, r3
 80051de:	2101      	movs	r1, #1
 80051e0:	f003 fdb8 	bl	8008d54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	4f54300a 	.word	0x4f54300a

080051f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
 8005200:	4613      	mov	r3, r2
 8005202:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d107      	bne.n	8005222 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005212:	883b      	ldrh	r3, [r7, #0]
 8005214:	0419      	lsls	r1, r3, #16
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	430a      	orrs	r2, r1
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
 8005220:	e028      	b.n	8005274 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	4413      	add	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]
 8005234:	e00d      	b.n	8005252 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	3340      	adds	r3, #64	; 0x40
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4413      	add	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	3301      	adds	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	7bfa      	ldrb	r2, [r7, #15]
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	3b01      	subs	r3, #1
 8005258:	429a      	cmp	r2, r3
 800525a:	d3ec      	bcc.n	8005236 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800525c:	883b      	ldrh	r3, [r7, #0]
 800525e:	0418      	lsls	r0, r3, #16
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	3b01      	subs	r3, #1
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	4302      	orrs	r2, r0
 800526c:	3340      	adds	r3, #64	; 0x40
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e267      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d075      	beq.n	80053c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052da:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d00c      	beq.n	8005300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e6:	4b85      	ldr	r3, [pc, #532]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d112      	bne.n	8005318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f2:	4b82      	ldr	r3, [pc, #520]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fe:	d10b      	bne.n	8005318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005300:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d05b      	beq.n	80053c4 <HAL_RCC_OscConfig+0x108>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d157      	bne.n	80053c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e242      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d106      	bne.n	8005330 <HAL_RCC_OscConfig+0x74>
 8005322:	4b76      	ldr	r3, [pc, #472]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a75      	ldr	r2, [pc, #468]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e01d      	b.n	800536c <HAL_RCC_OscConfig+0xb0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005338:	d10c      	bne.n	8005354 <HAL_RCC_OscConfig+0x98>
 800533a:	4b70      	ldr	r3, [pc, #448]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6f      	ldr	r2, [pc, #444]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6c      	ldr	r2, [pc, #432]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e00b      	b.n	800536c <HAL_RCC_OscConfig+0xb0>
 8005354:	4b69      	ldr	r3, [pc, #420]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a68      	ldr	r2, [pc, #416]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800535a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	4b66      	ldr	r3, [pc, #408]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a65      	ldr	r2, [pc, #404]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7fd fa9e 	bl	80028b4 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537c:	f7fd fa9a 	bl	80028b4 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e207      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538e:	4b5b      	ldr	r3, [pc, #364]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0xc0>
 800539a:	e014      	b.n	80053c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7fd fa8a 	bl	80028b4 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fd fa86 	bl	80028b4 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1f3      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b6:	4b51      	ldr	r3, [pc, #324]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0xe8>
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d063      	beq.n	800549a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053d2:	4b4a      	ldr	r3, [pc, #296]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053de:	4b47      	ldr	r3, [pc, #284]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d11c      	bne.n	8005424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ea:	4b44      	ldr	r3, [pc, #272]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d116      	bne.n	8005424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_RCC_OscConfig+0x152>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d001      	beq.n	800540e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e1c7      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540e:	4b3b      	ldr	r3, [pc, #236]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4937      	ldr	r1, [pc, #220]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005422:	e03a      	b.n	800549a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d020      	beq.n	800546e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800542c:	4b34      	ldr	r3, [pc, #208]	; (8005500 <HAL_RCC_OscConfig+0x244>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fd fa3f 	bl	80028b4 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543a:	f7fd fa3b 	bl	80028b4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e1a8      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4925      	ldr	r1, [pc, #148]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]
 800546c:	e015      	b.n	800549a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_OscConfig+0x244>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fd fa1e 	bl	80028b4 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547c:	f7fd fa1a 	bl	80028b4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e187      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548e:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d036      	beq.n	8005514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_RCC_OscConfig+0x248>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7fd f9fe 	bl	80028b4 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054bc:	f7fd f9fa 	bl	80028b4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e167      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80054d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x200>
 80054da:	e01b      	b.n	8005514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCC_OscConfig+0x248>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e2:	f7fd f9e7 	bl	80028b4 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e8:	e00e      	b.n	8005508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ea:	f7fd f9e3 	bl	80028b4 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d907      	bls.n	8005508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e150      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
 80054fc:	40023800 	.word	0x40023800
 8005500:	42470000 	.word	0x42470000
 8005504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005508:	4b88      	ldr	r3, [pc, #544]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1ea      	bne.n	80054ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8097 	beq.w	8005650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005526:	4b81      	ldr	r3, [pc, #516]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	4b7d      	ldr	r3, [pc, #500]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	4a7c      	ldr	r2, [pc, #496]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005540:	6413      	str	r3, [r2, #64]	; 0x40
 8005542:	4b7a      	ldr	r3, [pc, #488]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b77      	ldr	r3, [pc, #476]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d118      	bne.n	8005590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800555e:	4b74      	ldr	r3, [pc, #464]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a73      	ldr	r2, [pc, #460]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556a:	f7fd f9a3 	bl	80028b4 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7fd f99f 	bl	80028b4 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e10c      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x2ea>
 8005598:	4b64      	ldr	r3, [pc, #400]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a63      	ldr	r2, [pc, #396]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
 80055a4:	e01c      	b.n	80055e0 <HAL_RCC_OscConfig+0x324>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x30c>
 80055ae:	4b5f      	ldr	r3, [pc, #380]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a5e      	ldr	r2, [pc, #376]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ba:	4b5c      	ldr	r3, [pc, #368]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a5b      	ldr	r2, [pc, #364]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0x324>
 80055c8:	4b58      	ldr	r3, [pc, #352]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a57      	ldr	r2, [pc, #348]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
 80055d4:	4b55      	ldr	r3, [pc, #340]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	4a54      	ldr	r2, [pc, #336]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055da:	f023 0304 	bic.w	r3, r3, #4
 80055de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fd f964 	bl	80028b4 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fd f960 	bl	80028b4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e0cb      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005606:	4b49      	ldr	r3, [pc, #292]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ee      	beq.n	80055f0 <HAL_RCC_OscConfig+0x334>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005614:	f7fd f94e 	bl	80028b4 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fd f94a 	bl	80028b4 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e0b5      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005632:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ee      	bne.n	800561c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d105      	bne.n	8005650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005644:	4b39      	ldr	r3, [pc, #228]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	4a38      	ldr	r2, [pc, #224]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800564a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80a1 	beq.w	800579c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b08      	cmp	r3, #8
 8005664:	d05c      	beq.n	8005720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d141      	bne.n	80056f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b31      	ldr	r3, [pc, #196]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fd f91e 	bl	80028b4 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567c:	f7fd f91a 	bl	80028b4 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e087      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69da      	ldr	r2, [r3, #28]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	3b01      	subs	r3, #1
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	491b      	ldr	r1, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fd f8f3 	bl	80028b4 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fd f8ef 	bl	80028b4 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e05c      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x416>
 80056f0:	e054      	b.n	800579c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fd f8dc 	bl	80028b4 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fd f8d8 	bl	80028b4 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e045      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x444>
 800571e:	e03d      	b.n	800579c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e038      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
 800572c:	40023800 	.word	0x40023800
 8005730:	40007000 	.word	0x40007000
 8005734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_RCC_OscConfig+0x4ec>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d028      	beq.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d121      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d11a      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005768:	4013      	ands	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005770:	4293      	cmp	r3, r2
 8005772:	d111      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	3b01      	subs	r3, #1
 8005782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d107      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800

080057ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0cc      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c0:	4b68      	ldr	r3, [pc, #416]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d90c      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b65      	ldr	r3, [pc, #404]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	4b63      	ldr	r3, [pc, #396]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0b8      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005800:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4a58      	ldr	r2, [pc, #352]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800580a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005818:	4b53      	ldr	r3, [pc, #332]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a52      	ldr	r2, [pc, #328]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005824:	4b50      	ldr	r3, [pc, #320]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	494d      	ldr	r1, [pc, #308]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d044      	beq.n	80058cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	4b47      	ldr	r3, [pc, #284]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d119      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e07f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d003      	beq.n	800586a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005866:	2b03      	cmp	r3, #3
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586a:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e06f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587a:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e067      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588a:	4b37      	ldr	r3, [pc, #220]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f023 0203 	bic.w	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4934      	ldr	r1, [pc, #208]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800589c:	f7fd f80a 	bl	80028b4 <HAL_GetTick>
 80058a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a4:	f7fd f806 	bl	80028b4 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e04f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 020c 	and.w	r2, r3, #12
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d1eb      	bne.n	80058a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058cc:	4b25      	ldr	r3, [pc, #148]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d20c      	bcs.n	80058f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b22      	ldr	r3, [pc, #136]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b20      	ldr	r3, [pc, #128]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e032      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4916      	ldr	r1, [pc, #88]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	490e      	ldr	r1, [pc, #56]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005932:	f000 f821 	bl	8005978 <HAL_RCC_GetSysClockFreq>
 8005936:	4602      	mov	r2, r0
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	490a      	ldr	r1, [pc, #40]	; (800596c <HAL_RCC_ClockConfig+0x1c0>)
 8005944:	5ccb      	ldrb	r3, [r1, r3]
 8005946:	fa22 f303 	lsr.w	r3, r2, r3
 800594a:	4a09      	ldr	r2, [pc, #36]	; (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7fc fe60 	bl	8002618 <HAL_InitTick>

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40023c00 	.word	0x40023c00
 8005968:	40023800 	.word	0x40023800
 800596c:	0800f740 	.word	0x0800f740
 8005970:	200004ec 	.word	0x200004ec
 8005974:	200004f0 	.word	0x200004f0

08005978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800597c:	b094      	sub	sp, #80	; 0x50
 800597e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	647b      	str	r3, [r7, #68]	; 0x44
 8005984:	2300      	movs	r3, #0
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	2300      	movs	r3, #0
 800598a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005990:	4b79      	ldr	r3, [pc, #484]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 030c 	and.w	r3, r3, #12
 8005998:	2b08      	cmp	r3, #8
 800599a:	d00d      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x40>
 800599c:	2b08      	cmp	r3, #8
 800599e:	f200 80e1 	bhi.w	8005b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x34>
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d003      	beq.n	80059b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80059aa:	e0db      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4b73      	ldr	r3, [pc, #460]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059b0:	e0db      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b2:	4b72      	ldr	r3, [pc, #456]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80059b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059b6:	e0d8      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b8:	4b6f      	ldr	r3, [pc, #444]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c2:	4b6d      	ldr	r3, [pc, #436]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d063      	beq.n	8005a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ce:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	099b      	lsrs	r3, r3, #6
 80059d4:	2200      	movs	r2, #0
 80059d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30
 80059e2:	2300      	movs	r3, #0
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
 80059e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	0159      	lsls	r1, r3, #5
 80059f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059fc:	0150      	lsls	r0, r2, #5
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4621      	mov	r1, r4
 8005a04:	1a51      	subs	r1, r2, r1
 8005a06:	6139      	str	r1, [r7, #16]
 8005a08:	4629      	mov	r1, r5
 8005a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a1c:	4659      	mov	r1, fp
 8005a1e:	018b      	lsls	r3, r1, #6
 8005a20:	4651      	mov	r1, sl
 8005a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a26:	4651      	mov	r1, sl
 8005a28:	018a      	lsls	r2, r1, #6
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a30:	4659      	mov	r1, fp
 8005a32:	eb63 0901 	sbc.w	r9, r3, r1
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a4a:	4690      	mov	r8, r2
 8005a4c:	4699      	mov	r9, r3
 8005a4e:	4623      	mov	r3, r4
 8005a50:	eb18 0303 	adds.w	r3, r8, r3
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	462b      	mov	r3, r5
 8005a58:	eb49 0303 	adc.w	r3, r9, r3
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	028b      	lsls	r3, r1, #10
 8005a6e:	4621      	mov	r1, r4
 8005a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a74:	4621      	mov	r1, r4
 8005a76:	028a      	lsls	r2, r1, #10
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	2200      	movs	r2, #0
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a88:	f7fa fc02 	bl	8000290 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	e058      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a96:	4b38      	ldr	r3, [pc, #224]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	099b      	lsrs	r3, r3, #6
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	0159      	lsls	r1, r3, #5
 8005abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac2:	0150      	lsls	r0, r2, #5
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4641      	mov	r1, r8
 8005aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ace:	4649      	mov	r1, r9
 8005ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8005aec:	eb63 050b 	sbc.w	r5, r3, fp
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	00eb      	lsls	r3, r5, #3
 8005afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afe:	00e2      	lsls	r2, r4, #3
 8005b00:	4614      	mov	r4, r2
 8005b02:	461d      	mov	r5, r3
 8005b04:	4643      	mov	r3, r8
 8005b06:	18e3      	adds	r3, r4, r3
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	eb45 0303 	adc.w	r3, r5, r3
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b1e:	4629      	mov	r1, r5
 8005b20:	028b      	lsls	r3, r1, #10
 8005b22:	4621      	mov	r1, r4
 8005b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b28:	4621      	mov	r1, r4
 8005b2a:	028a      	lsls	r2, r1, #10
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b32:	2200      	movs	r2, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	61fa      	str	r2, [r7, #28]
 8005b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b3c:	f7fa fba8 	bl	8000290 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	3301      	adds	r3, #1
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b62:	e002      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3750      	adds	r7, #80	; 0x50
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	00f42400 	.word	0x00f42400

08005b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b86:	681b      	ldr	r3, [r3, #0]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	200004ec 	.word	0x200004ec

08005b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b9c:	f7ff fff0 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	0a9b      	lsrs	r3, r3, #10
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	4903      	ldr	r1, [pc, #12]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	0800f750 	.word	0x0800f750

08005bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	220f      	movs	r2, #15
 8005bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bd0:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0203 	and.w	r2, r3, #3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCC_GetClockConfig+0x5c>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	08db      	lsrs	r3, r3, #3
 8005bfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <HAL_RCC_GetClockConfig+0x60>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0207 	and.w	r2, r3, #7
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40023c00 	.word	0x40023c00

08005c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e07b      	b.n	8005d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d108      	bne.n	8005c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c46:	d009      	beq.n	8005c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	61da      	str	r2, [r3, #28]
 8005c4e:	e005      	b.n	8005c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fc fbe2 	bl	8002440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce0:	ea42 0103 	orr.w	r1, r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	f003 0104 	and.w	r1, r3, #4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f003 0210 	and.w	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b088      	sub	sp, #32
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_SPI_Transmit+0x22>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e126      	b.n	8005fa6 <HAL_SPI_Transmit+0x270>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d60:	f7fc fda8 	bl	80028b4 <HAL_GetTick>
 8005d64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d002      	beq.n	8005d7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d76:	2302      	movs	r3, #2
 8005d78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d7a:	e10b      	b.n	8005f94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_SPI_Transmit+0x52>
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d8c:	e102      	b.n	8005f94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2203      	movs	r2, #3
 8005d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd4:	d10f      	bne.n	8005df6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005df4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d007      	beq.n	8005e14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1c:	d14b      	bne.n	8005eb6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_SPI_Transmit+0xf6>
 8005e26:	8afb      	ldrh	r3, [r7, #22]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d13e      	bne.n	8005eaa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e50:	e02b      	b.n	8005eaa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d112      	bne.n	8005e86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	881a      	ldrh	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e84:	e011      	b.n	8005eaa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e86:	f7fc fd15 	bl	80028b4 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d803      	bhi.n	8005e9e <HAL_SPI_Transmit+0x168>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d102      	bne.n	8005ea4 <HAL_SPI_Transmit+0x16e>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ea8:	e074      	b.n	8005f94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1ce      	bne.n	8005e52 <HAL_SPI_Transmit+0x11c>
 8005eb4:	e04c      	b.n	8005f50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0x18e>
 8005ebe:	8afb      	ldrh	r3, [r7, #22]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d140      	bne.n	8005f46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005eea:	e02c      	b.n	8005f46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d113      	bne.n	8005f22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f20:	e011      	b.n	8005f46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f22:	f7fc fcc7 	bl	80028b4 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d803      	bhi.n	8005f3a <HAL_SPI_Transmit+0x204>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d102      	bne.n	8005f40 <HAL_SPI_Transmit+0x20a>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d102      	bne.n	8005f46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f44:	e026      	b.n	8005f94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1cd      	bne.n	8005eec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fa55 	bl	8006404 <SPI_EndRxTxTransaction>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e000      	b.n	8005f94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b08c      	sub	sp, #48	; 0x30
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
 8005fba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_SPI_TransmitReceive+0x26>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e18a      	b.n	80062ea <HAL_SPI_TransmitReceive+0x33c>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fdc:	f7fc fc6a 	bl	80028b4 <HAL_GetTick>
 8005fe0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ff2:	887b      	ldrh	r3, [r7, #2]
 8005ff4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d00f      	beq.n	800601e <HAL_SPI_TransmitReceive+0x70>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006004:	d107      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x68>
 800600e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006012:	2b04      	cmp	r3, #4
 8006014:	d003      	beq.n	800601e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006016:	2302      	movs	r3, #2
 8006018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800601c:	e15b      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_SPI_TransmitReceive+0x82>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_SPI_TransmitReceive+0x82>
 800602a:	887b      	ldrh	r3, [r7, #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d103      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006036:	e14e      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b04      	cmp	r3, #4
 8006042:	d003      	beq.n	800604c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2205      	movs	r2, #5
 8006048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	887a      	ldrh	r2, [r7, #2]
 800605c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	887a      	ldrh	r2, [r7, #2]
 8006062:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	887a      	ldrh	r2, [r7, #2]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	887a      	ldrh	r2, [r7, #2]
 8006074:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d007      	beq.n	80060a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800609e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a8:	d178      	bne.n	800619c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x10a>
 80060b2:	8b7b      	ldrh	r3, [r7, #26]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d166      	bne.n	8006186 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	881a      	ldrh	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	1c9a      	adds	r2, r3, #2
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060dc:	e053      	b.n	8006186 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d11b      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x176>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_SPI_TransmitReceive+0x176>
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d113      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	881a      	ldrh	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d119      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x1b8>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d014      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	b292      	uxth	r2, r2
 8006148:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	1c9a      	adds	r2, r3, #2
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006162:	2301      	movs	r3, #1
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006166:	f7fc fba5 	bl	80028b4 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006172:	429a      	cmp	r2, r3
 8006174:	d807      	bhi.n	8006186 <HAL_SPI_TransmitReceive+0x1d8>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d003      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006184:	e0a7      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1a6      	bne.n	80060de <HAL_SPI_TransmitReceive+0x130>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1a1      	bne.n	80060de <HAL_SPI_TransmitReceive+0x130>
 800619a:	e07c      	b.n	8006296 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x1fc>
 80061a4:	8b7b      	ldrh	r3, [r7, #26]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d16b      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d0:	e057      	b.n	8006282 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d11c      	bne.n	800621a <HAL_SPI_TransmitReceive+0x26c>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d017      	beq.n	800621a <HAL_SPI_TransmitReceive+0x26c>
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d114      	bne.n	800621a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d119      	bne.n	800625c <HAL_SPI_TransmitReceive+0x2ae>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d014      	beq.n	800625c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006258:	2301      	movs	r3, #1
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800625c:	f7fc fb2a 	bl	80028b4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006268:	429a      	cmp	r2, r3
 800626a:	d803      	bhi.n	8006274 <HAL_SPI_TransmitReceive+0x2c6>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d102      	bne.n	800627a <HAL_SPI_TransmitReceive+0x2cc>
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006280:	e029      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1a2      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x224>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d19d      	bne.n	80061d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f8b2 	bl	8006404 <SPI_EndRxTxTransaction>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d006      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062b2:	e010      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	e000      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80062d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3730      	adds	r7, #48	; 0x30
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4613      	mov	r3, r2
 8006302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006304:	f7fc fad6 	bl	80028b4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	4413      	add	r3, r2
 8006312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006314:	f7fc face 	bl	80028b4 <HAL_GetTick>
 8006318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800631a:	4b39      	ldr	r3, [pc, #228]	; (8006400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	015b      	lsls	r3, r3, #5
 8006320:	0d1b      	lsrs	r3, r3, #20
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632a:	e054      	b.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d050      	beq.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006334:	f7fc fabe 	bl	80028b4 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	429a      	cmp	r2, r3
 8006342:	d902      	bls.n	800634a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d13d      	bne.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006362:	d111      	bne.n	8006388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636c:	d004      	beq.n	8006378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006376:	d107      	bne.n	8006388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006390:	d10f      	bne.n	80063b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e017      	b.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4013      	ands	r3, r2
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d19b      	bne.n	800632c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200004ec 	.word	0x200004ec

08006404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <SPI_EndRxTxTransaction+0x7c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1b      	ldr	r2, [pc, #108]	; (8006484 <SPI_EndRxTxTransaction+0x80>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	0d5b      	lsrs	r3, r3, #21
 800641c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006420:	fb02 f303 	mul.w	r3, r2, r3
 8006424:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642e:	d112      	bne.n	8006456 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2200      	movs	r2, #0
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff ff5a 	bl	80062f4 <SPI_WaitFlagStateUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e00f      	b.n	8006476 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3b01      	subs	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d0f2      	beq.n	8006456 <SPI_EndRxTxTransaction+0x52>
 8006470:	e000      	b.n	8006474 <SPI_EndRxTxTransaction+0x70>
        break;
 8006472:	bf00      	nop
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	200004ec 	.word	0x200004ec
 8006484:	165e9f81 	.word	0x165e9f81

08006488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e041      	b.n	800651e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fc f844 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f000 fd3a 	bl	8006f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e03c      	b.n	80065ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <HAL_TIM_Base_Start+0xa0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_TIM_Base_Start+0x5c>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655a:	d013      	beq.n	8006584 <HAL_TIM_Base_Start+0x5c>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <HAL_TIM_Base_Start+0xa4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_TIM_Base_Start+0x5c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <HAL_TIM_Base_Start+0xa8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_TIM_Base_Start+0x5c>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <HAL_TIM_Base_Start+0xac>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_TIM_Base_Start+0x5c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a16      	ldr	r2, [pc, #88]	; (80065d8 <HAL_TIM_Base_Start+0xb0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d111      	bne.n	80065a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b06      	cmp	r3, #6
 8006594:	d010      	beq.n	80065b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a6:	e007      	b.n	80065b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40010000 	.word	0x40010000
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	40014000 	.word	0x40014000

080065dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a1a      	ldr	r2, [r3, #32]
 80065ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10f      	bne.n	8006614 <HAL_TIM_Base_Stop+0x38>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6a1a      	ldr	r2, [r3, #32]
 80065fa:	f240 4344 	movw	r3, #1092	; 0x444
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d107      	bne.n	8006614 <HAL_TIM_Base_Stop+0x38>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0201 	bic.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	d001      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e044      	b.n	80066ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <HAL_TIM_Base_Start_IT+0xb0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d018      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x6c>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d013      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x6c>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x6c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x6c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x6c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a16      	ldr	r2, [pc, #88]	; (80066ec <HAL_TIM_Base_Start_IT+0xc0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d111      	bne.n	80066bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b06      	cmp	r3, #6
 80066a8:	d010      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ba:	e007      	b.n	80066cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00
 80066ec:	40014000 	.word	0x40014000

080066f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e041      	b.n	8006786 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f839 	bl	800678e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3304      	adds	r3, #4
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f000 fc06 	bl	8006f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_TIM_PWM_Start+0x24>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e022      	b.n	800680e <HAL_TIM_PWM_Start+0x6a>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d109      	bne.n	80067e2 <HAL_TIM_PWM_Start+0x3e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	e015      	b.n	800680e <HAL_TIM_PWM_Start+0x6a>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d109      	bne.n	80067fc <HAL_TIM_PWM_Start+0x58>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	bf14      	ite	ne
 80067f4:	2301      	movne	r3, #1
 80067f6:	2300      	moveq	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	e008      	b.n	800680e <HAL_TIM_PWM_Start+0x6a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e068      	b.n	80068e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <HAL_TIM_PWM_Start+0x82>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006824:	e013      	b.n	800684e <HAL_TIM_PWM_Start+0xaa>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b04      	cmp	r3, #4
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0x92>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006834:	e00b      	b.n	800684e <HAL_TIM_PWM_Start+0xaa>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0xa2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006844:	e003      	b.n	800684e <HAL_TIM_PWM_Start+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2201      	movs	r2, #1
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fe18 	bl	800748c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <HAL_TIM_PWM_Start+0x14c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d107      	bne.n	8006876 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <HAL_TIM_PWM_Start+0x14c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d018      	beq.n	80068b2 <HAL_TIM_PWM_Start+0x10e>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006888:	d013      	beq.n	80068b2 <HAL_TIM_PWM_Start+0x10e>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <HAL_TIM_PWM_Start+0x150>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00e      	beq.n	80068b2 <HAL_TIM_PWM_Start+0x10e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <HAL_TIM_PWM_Start+0x154>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d009      	beq.n	80068b2 <HAL_TIM_PWM_Start+0x10e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a16      	ldr	r2, [pc, #88]	; (80068fc <HAL_TIM_PWM_Start+0x158>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <HAL_TIM_PWM_Start+0x10e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a14      	ldr	r2, [pc, #80]	; (8006900 <HAL_TIM_PWM_Start+0x15c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d111      	bne.n	80068d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b06      	cmp	r3, #6
 80068c2:	d010      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d4:	e007      	b.n	80068e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0201 	orr.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40000c00 	.word	0x40000c00
 8006900:	40014000 	.word	0x40014000

08006904 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fdb8 	bl	800748c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a29      	ldr	r2, [pc, #164]	; (80069c8 <HAL_TIM_PWM_Stop+0xc4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d117      	bne.n	8006956 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10f      	bne.n	8006956 <HAL_TIM_PWM_Stop+0x52>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	f240 4344 	movw	r3, #1092	; 0x444
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <HAL_TIM_PWM_Stop+0x52>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6a1a      	ldr	r2, [r3, #32]
 800695c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006960:	4013      	ands	r3, r2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10f      	bne.n	8006986 <HAL_TIM_PWM_Stop+0x82>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	f240 4344 	movw	r3, #1092	; 0x444
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d107      	bne.n	8006986 <HAL_TIM_PWM_Stop+0x82>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_TIM_PWM_Stop+0x92>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006994:	e013      	b.n	80069be <HAL_TIM_PWM_Stop+0xba>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_PWM_Stop+0xa2>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a4:	e00b      	b.n	80069be <HAL_TIM_PWM_Stop+0xba>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_PWM_Stop+0xb2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b4:	e003      	b.n	80069be <HAL_TIM_PWM_Stop+0xba>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40010000 	.word	0x40010000

080069cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0202 	mvn.w	r2, #2
 80069f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa77 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa69 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa7a 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d122      	bne.n	8006a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d11b      	bne.n	8006a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0204 	mvn.w	r2, #4
 8006a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa4d 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa3f 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fa50 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d122      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d11b      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0208 	mvn.w	r2, #8
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa23 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa15 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa26 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b10      	cmp	r3, #16
 8006adc:	d122      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d11b      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0210 	mvn.w	r2, #16
 8006af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2208      	movs	r2, #8
 8006afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9f9 	bl	8006f02 <HAL_TIM_IC_CaptureCallback>
 8006b10:	e005      	b.n	8006b1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f9eb 	bl	8006eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9fc 	bl	8006f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d10e      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d107      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0201 	mvn.w	r2, #1
 8006b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fb fbec 	bl	8002328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b80      	cmp	r3, #128	; 0x80
 8006b5c:	d10e      	bne.n	8006b7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b68:	2b80      	cmp	r3, #128	; 0x80
 8006b6a:	d107      	bne.n	8006b7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fd26 	bl	80075c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b40      	cmp	r3, #64	; 0x40
 8006b88:	d10e      	bne.n	8006ba8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b94:	2b40      	cmp	r3, #64	; 0x40
 8006b96:	d107      	bne.n	8006ba8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f9c1 	bl	8006f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d10e      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d107      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0220 	mvn.w	r2, #32
 8006bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fcf0 	bl	80075b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e0ae      	b.n	8006d58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b0c      	cmp	r3, #12
 8006c06:	f200 809f 	bhi.w	8006d48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006d49 	.word	0x08006d49
 8006c18:	08006d49 	.word	0x08006d49
 8006c1c:	08006d49 	.word	0x08006d49
 8006c20:	08006c85 	.word	0x08006c85
 8006c24:	08006d49 	.word	0x08006d49
 8006c28:	08006d49 	.word	0x08006d49
 8006c2c:	08006d49 	.word	0x08006d49
 8006c30:	08006cc7 	.word	0x08006cc7
 8006c34:	08006d49 	.word	0x08006d49
 8006c38:	08006d49 	.word	0x08006d49
 8006c3c:	08006d49 	.word	0x08006d49
 8006c40:	08006d07 	.word	0x08006d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 f9f8 	bl	8007040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0208 	orr.w	r2, r2, #8
 8006c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0204 	bic.w	r2, r2, #4
 8006c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6999      	ldr	r1, [r3, #24]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	619a      	str	r2, [r3, #24]
      break;
 8006c82:	e064      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fa3e 	bl	800710c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6999      	ldr	r1, [r3, #24]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	021a      	lsls	r2, r3, #8
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	619a      	str	r2, [r3, #24]
      break;
 8006cc4:	e043      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fa89 	bl	80071e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0208 	orr.w	r2, r2, #8
 8006ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0204 	bic.w	r2, r2, #4
 8006cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69d9      	ldr	r1, [r3, #28]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	61da      	str	r2, [r3, #28]
      break;
 8006d04:	e023      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68b9      	ldr	r1, [r7, #8]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fad3 	bl	80072b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69d9      	ldr	r1, [r3, #28]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	021a      	lsls	r2, r3, #8
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	61da      	str	r2, [r3, #28]
      break;
 8006d46:	e002      	b.n	8006d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIM_ConfigClockSource+0x1c>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e0b4      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x186>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db4:	d03e      	beq.n	8006e34 <HAL_TIM_ConfigClockSource+0xd4>
 8006db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dba:	f200 8087 	bhi.w	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc2:	f000 8086 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x172>
 8006dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dca:	d87f      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b70      	cmp	r3, #112	; 0x70
 8006dce:	d01a      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xa6>
 8006dd0:	2b70      	cmp	r3, #112	; 0x70
 8006dd2:	d87b      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b60      	cmp	r3, #96	; 0x60
 8006dd6:	d050      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x11a>
 8006dd8:	2b60      	cmp	r3, #96	; 0x60
 8006dda:	d877      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b50      	cmp	r3, #80	; 0x50
 8006dde:	d03c      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0xfa>
 8006de0:	2b50      	cmp	r3, #80	; 0x50
 8006de2:	d873      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d058      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x13a>
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d86f      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b30      	cmp	r3, #48	; 0x30
 8006dee:	d064      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	2b30      	cmp	r3, #48	; 0x30
 8006df2:	d86b      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d060      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d867      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05c      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	d05a      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006e04:	e062      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6899      	ldr	r1, [r3, #8]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f000 fb19 	bl	800744c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	609a      	str	r2, [r3, #8]
      break;
 8006e32:	e04f      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6899      	ldr	r1, [r3, #8]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f000 fb02 	bl	800744c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e56:	609a      	str	r2, [r3, #8]
      break;
 8006e58:	e03c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6859      	ldr	r1, [r3, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f000 fa76 	bl	8007358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2150      	movs	r1, #80	; 0x50
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 facf 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006e78:	e02c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6859      	ldr	r1, [r3, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f000 fa95 	bl	80073b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2160      	movs	r1, #96	; 0x60
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fabf 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006e98:	e01c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f000 fa56 	bl	8007358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2140      	movs	r1, #64	; 0x40
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 faaf 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006eb8:	e00c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f000 faa6 	bl	8007416 <TIM_ITRx_SetConfig>
      break;
 8006eca:	e003      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e000      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a34      	ldr	r2, [pc, #208]	; (8007024 <TIM_Base_SetConfig+0xe4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00f      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5e:	d00b      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a31      	ldr	r2, [pc, #196]	; (8007028 <TIM_Base_SetConfig+0xe8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d007      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a30      	ldr	r2, [pc, #192]	; (800702c <TIM_Base_SetConfig+0xec>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d003      	beq.n	8006f78 <TIM_Base_SetConfig+0x38>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a2f      	ldr	r2, [pc, #188]	; (8007030 <TIM_Base_SetConfig+0xf0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d108      	bne.n	8006f8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a25      	ldr	r2, [pc, #148]	; (8007024 <TIM_Base_SetConfig+0xe4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01b      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f98:	d017      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a22      	ldr	r2, [pc, #136]	; (8007028 <TIM_Base_SetConfig+0xe8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <TIM_Base_SetConfig+0xec>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00f      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a20      	ldr	r2, [pc, #128]	; (8007030 <TIM_Base_SetConfig+0xf0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00b      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <TIM_Base_SetConfig+0xf4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d007      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <TIM_Base_SetConfig+0xf8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d003      	beq.n	8006fca <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	; (800703c <TIM_Base_SetConfig+0xfc>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d108      	bne.n	8006fdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a08      	ldr	r2, [pc, #32]	; (8007024 <TIM_Base_SetConfig+0xe4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d103      	bne.n	8007010 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	615a      	str	r2, [r3, #20]
}
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40014000 	.word	0x40014000
 8007038:	40014400 	.word	0x40014400
 800703c:	40014800 	.word	0x40014800

08007040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0201 	bic.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 0302 	bic.w	r3, r3, #2
 8007088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <TIM_OC1_SetConfig+0xc8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d10c      	bne.n	80070b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f023 0308 	bic.w	r3, r3, #8
 80070a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 0304 	bic.w	r3, r3, #4
 80070b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <TIM_OC1_SetConfig+0xc8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d111      	bne.n	80070e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	621a      	str	r2, [r3, #32]
}
 80070fc:	bf00      	nop
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	40010000 	.word	0x40010000

0800710c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f023 0210 	bic.w	r2, r3, #16
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f023 0320 	bic.w	r3, r3, #32
 8007156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <TIM_OC2_SetConfig+0xd4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d10d      	bne.n	8007188 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007186:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <TIM_OC2_SetConfig+0xd4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d113      	bne.n	80071b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800719e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40010000 	.word	0x40010000

080071e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800722c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <TIM_OC3_SetConfig+0xd0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d10d      	bne.n	800725e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800725c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <TIM_OC3_SetConfig+0xd0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d113      	bne.n	800728e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800726c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	621a      	str	r2, [r3, #32]
}
 80072a8:	bf00      	nop
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	40010000 	.word	0x40010000

080072b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	031b      	lsls	r3, r3, #12
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <TIM_OC4_SetConfig+0x9c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d109      	bne.n	800732c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	019b      	lsls	r3, r3, #6
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40010000 	.word	0x40010000

08007358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0201 	bic.w	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f023 030a 	bic.w	r3, r3, #10
 8007394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b087      	sub	sp, #28
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0210 	bic.w	r2, r3, #16
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	031b      	lsls	r3, r3, #12
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	621a      	str	r2, [r3, #32]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4313      	orrs	r3, r2
 8007434:	f043 0307 	orr.w	r3, r3, #7
 8007438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	609a      	str	r2, [r3, #8]
}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	021a      	lsls	r2, r3, #8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	431a      	orrs	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4313      	orrs	r3, r2
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 031f 	and.w	r3, r3, #31
 800749e:	2201      	movs	r2, #1
 80074a0:	fa02 f303 	lsl.w	r3, r2, r3
 80074a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	43db      	mvns	r3, r3
 80074ae:	401a      	ands	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1a      	ldr	r2, [r3, #32]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	fa01 f303 	lsl.w	r3, r1, r3
 80074c4:	431a      	orrs	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
	...

080074d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e050      	b.n	8007592 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d018      	beq.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753c:	d013      	beq.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00e      	beq.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d009      	beq.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a15      	ldr	r2, [pc, #84]	; (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a13      	ldr	r2, [pc, #76]	; (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d10c      	bne.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800756c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4313      	orrs	r3, r2
 8007576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40000c00 	.word	0x40000c00
 80075b0:	40014000 	.word	0x40014000

080075b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075dc:	b084      	sub	sp, #16
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	f107 001c 	add.w	r0, r7, #28
 80075ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d122      	bne.n	800763a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800761c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761e:	2b01      	cmp	r3, #1
 8007620:	d105      	bne.n	800762e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 fbee 	bl	8008e10 <USB_CoreReset>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
 8007638:	e01a      	b.n	8007670 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 fbe2 	bl	8008e10 <USB_CoreReset>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
 8007662:	e005      	b.n	8007670 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10b      	bne.n	800768e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f043 0206 	orr.w	r2, r3, #6
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f043 0220 	orr.w	r2, r3, #32
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800769a:	b004      	add	sp, #16
 800769c:	4770      	bx	lr
	...

080076a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d165      	bne.n	8007780 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4a41      	ldr	r2, [pc, #260]	; (80077bc <USB_SetTurnaroundTime+0x11c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d906      	bls.n	80076ca <USB_SetTurnaroundTime+0x2a>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4a40      	ldr	r2, [pc, #256]	; (80077c0 <USB_SetTurnaroundTime+0x120>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d202      	bcs.n	80076ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076c4:	230f      	movs	r3, #15
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e062      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4a3c      	ldr	r2, [pc, #240]	; (80077c0 <USB_SetTurnaroundTime+0x120>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d306      	bcc.n	80076e0 <USB_SetTurnaroundTime+0x40>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	4a3b      	ldr	r2, [pc, #236]	; (80077c4 <USB_SetTurnaroundTime+0x124>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d202      	bcs.n	80076e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076da:	230e      	movs	r3, #14
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e057      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4a38      	ldr	r2, [pc, #224]	; (80077c4 <USB_SetTurnaroundTime+0x124>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d306      	bcc.n	80076f6 <USB_SetTurnaroundTime+0x56>
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4a37      	ldr	r2, [pc, #220]	; (80077c8 <USB_SetTurnaroundTime+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d202      	bcs.n	80076f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076f0:	230d      	movs	r3, #13
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	e04c      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4a33      	ldr	r2, [pc, #204]	; (80077c8 <USB_SetTurnaroundTime+0x128>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d306      	bcc.n	800770c <USB_SetTurnaroundTime+0x6c>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4a32      	ldr	r2, [pc, #200]	; (80077cc <USB_SetTurnaroundTime+0x12c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d802      	bhi.n	800770c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007706:	230c      	movs	r3, #12
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	e041      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4a2f      	ldr	r2, [pc, #188]	; (80077cc <USB_SetTurnaroundTime+0x12c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d906      	bls.n	8007722 <USB_SetTurnaroundTime+0x82>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4a2e      	ldr	r2, [pc, #184]	; (80077d0 <USB_SetTurnaroundTime+0x130>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d802      	bhi.n	8007722 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800771c:	230b      	movs	r3, #11
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e036      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4a2a      	ldr	r2, [pc, #168]	; (80077d0 <USB_SetTurnaroundTime+0x130>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d906      	bls.n	8007738 <USB_SetTurnaroundTime+0x98>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4a29      	ldr	r2, [pc, #164]	; (80077d4 <USB_SetTurnaroundTime+0x134>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d802      	bhi.n	8007738 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007732:	230a      	movs	r3, #10
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e02b      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4a26      	ldr	r2, [pc, #152]	; (80077d4 <USB_SetTurnaroundTime+0x134>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d906      	bls.n	800774e <USB_SetTurnaroundTime+0xae>
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4a25      	ldr	r2, [pc, #148]	; (80077d8 <USB_SetTurnaroundTime+0x138>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d202      	bcs.n	800774e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007748:	2309      	movs	r3, #9
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e020      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <USB_SetTurnaroundTime+0x138>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d306      	bcc.n	8007764 <USB_SetTurnaroundTime+0xc4>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4a20      	ldr	r2, [pc, #128]	; (80077dc <USB_SetTurnaroundTime+0x13c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d802      	bhi.n	8007764 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800775e:	2308      	movs	r3, #8
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e015      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <USB_SetTurnaroundTime+0x13c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d906      	bls.n	800777a <USB_SetTurnaroundTime+0xda>
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <USB_SetTurnaroundTime+0x140>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d202      	bcs.n	800777a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007774:	2307      	movs	r3, #7
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	e00a      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800777a:	2306      	movs	r3, #6
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	e007      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007786:	2309      	movs	r3, #9
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e001      	b.n	8007790 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800778c:	2309      	movs	r3, #9
 800778e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	029b      	lsls	r3, r3, #10
 80077a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077a8:	431a      	orrs	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	00d8acbf 	.word	0x00d8acbf
 80077c0:	00e4e1c0 	.word	0x00e4e1c0
 80077c4:	00f42400 	.word	0x00f42400
 80077c8:	01067380 	.word	0x01067380
 80077cc:	011a499f 	.word	0x011a499f
 80077d0:	01312cff 	.word	0x01312cff
 80077d4:	014ca43f 	.word	0x014ca43f
 80077d8:	016e3600 	.word	0x016e3600
 80077dc:	01a6ab1f 	.word	0x01a6ab1f
 80077e0:	01e84800 	.word	0x01e84800

080077e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f043 0201 	orr.w	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f023 0201 	bic.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d115      	bne.n	8007876 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007856:	2001      	movs	r0, #1
 8007858:	f7fb f838 	bl	80028cc <HAL_Delay>
      ms++;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 fa45 	bl	8008cf2 <USB_GetMode>
 8007868:	4603      	mov	r3, r0
 800786a:	2b01      	cmp	r3, #1
 800786c:	d01e      	beq.n	80078ac <USB_SetCurrentMode+0x84>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b31      	cmp	r3, #49	; 0x31
 8007872:	d9f0      	bls.n	8007856 <USB_SetCurrentMode+0x2e>
 8007874:	e01a      	b.n	80078ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d115      	bne.n	80078a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007888:	2001      	movs	r0, #1
 800788a:	f7fb f81f 	bl	80028cc <HAL_Delay>
      ms++;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3301      	adds	r3, #1
 8007892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 fa2c 	bl	8008cf2 <USB_GetMode>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <USB_SetCurrentMode+0x84>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b31      	cmp	r3, #49	; 0x31
 80078a4:	d9f0      	bls.n	8007888 <USB_SetCurrentMode+0x60>
 80078a6:	e001      	b.n	80078ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e005      	b.n	80078b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b32      	cmp	r3, #50	; 0x32
 80078b0:	d101      	bne.n	80078b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078c0:	b084      	sub	sp, #16
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078da:	2300      	movs	r3, #0
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	e009      	b.n	80078f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3340      	adds	r3, #64	; 0x40
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3301      	adds	r3, #1
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b0e      	cmp	r3, #14
 80078f8:	d9f2      	bls.n	80078e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d11c      	bne.n	800793a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800790e:	f043 0302 	orr.w	r3, r3, #2
 8007912:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
 8007938:	e00b      	b.n	8007952 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007958:	461a      	mov	r2, r3
 800795a:	2300      	movs	r3, #0
 800795c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007964:	4619      	mov	r1, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796c:	461a      	mov	r2, r3
 800796e:	680b      	ldr	r3, [r1, #0]
 8007970:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	2b01      	cmp	r3, #1
 8007976:	d10c      	bne.n	8007992 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800797e:	2100      	movs	r1, #0
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f965 	bl	8007c50 <USB_SetDevSpeed>
 8007986:	e008      	b.n	800799a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007988:	2101      	movs	r1, #1
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f960 	bl	8007c50 <USB_SetDevSpeed>
 8007990:	e003      	b.n	800799a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007992:	2103      	movs	r1, #3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f95b 	bl	8007c50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800799a:	2110      	movs	r1, #16
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f8f3 	bl	8007b88 <USB_FlushTxFifo>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f91f 	bl	8007bf0 <USB_FlushRxFifo>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c2:	461a      	mov	r2, r3
 80079c4:	2300      	movs	r3, #0
 80079c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ce:	461a      	mov	r2, r3
 80079d0:	2300      	movs	r3, #0
 80079d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079da:	461a      	mov	r2, r3
 80079dc:	2300      	movs	r3, #0
 80079de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079e0:	2300      	movs	r3, #0
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	e043      	b.n	8007a6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079fc:	d118      	bne.n	8007a30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	461a      	mov	r2, r3
 8007a12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	e013      	b.n	8007a42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a26:	461a      	mov	r2, r3
 8007a28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	e008      	b.n	8007a42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	2300      	movs	r3, #0
 8007a40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	461a      	mov	r2, r3
 8007a50:	2300      	movs	r3, #0
 8007a52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	461a      	mov	r2, r3
 8007a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d3b7      	bcc.n	80079e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a76:	2300      	movs	r3, #0
 8007a78:	613b      	str	r3, [r7, #16]
 8007a7a:	e043      	b.n	8007b04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a92:	d118      	bne.n	8007ac6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10a      	bne.n	8007ab0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	e013      	b.n	8007ad8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	461a      	mov	r2, r3
 8007abe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	e008      	b.n	8007ad8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af6:	461a      	mov	r2, r3
 8007af8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007afc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	3301      	adds	r3, #1
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d3b7      	bcc.n	8007a7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d105      	bne.n	8007b40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f043 0210 	orr.w	r2, r3, #16
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <USB_DevInit+0x2c4>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f043 0208 	orr.w	r2, r3, #8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d107      	bne.n	8007b74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b6c:	f043 0304 	orr.w	r3, r3, #4
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b80:	b004      	add	sp, #16
 8007b82:	4770      	bx	lr
 8007b84:	803c3800 	.word	0x803c3800

08007b88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4a13      	ldr	r2, [pc, #76]	; (8007bec <USB_FlushTxFifo+0x64>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d901      	bls.n	8007ba8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e01b      	b.n	8007be0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	daf2      	bge.n	8007b96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	019b      	lsls	r3, r3, #6
 8007bb8:	f043 0220 	orr.w	r2, r3, #32
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4a08      	ldr	r2, [pc, #32]	; (8007bec <USB_FlushTxFifo+0x64>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d901      	bls.n	8007bd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e006      	b.n	8007be0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d0f0      	beq.n	8007bc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	00030d40 	.word	0x00030d40

08007bf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <USB_FlushRxFifo+0x5c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d901      	bls.n	8007c0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e018      	b.n	8007c40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	daf2      	bge.n	8007bfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2210      	movs	r2, #16
 8007c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4a08      	ldr	r2, [pc, #32]	; (8007c4c <USB_FlushRxFifo+0x5c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d901      	bls.n	8007c32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e006      	b.n	8007c40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b10      	cmp	r3, #16
 8007c3c:	d0f0      	beq.n	8007c20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	00030d40 	.word	0x00030d40

08007c50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c70:	4313      	orrs	r3, r2
 8007c72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b087      	sub	sp, #28
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 0306 	and.w	r3, r3, #6
 8007c9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]
 8007ca6:	e00a      	b.n	8007cbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d002      	beq.n	8007cb4 <USB_GetDevSpeed+0x32>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b06      	cmp	r3, #6
 8007cb2:	d102      	bne.n	8007cba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	75fb      	strb	r3, [r7, #23]
 8007cb8:	e001      	b.n	8007cbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cba:	230f      	movs	r3, #15
 8007cbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d13a      	bne.n	8007d5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cee:	69da      	ldr	r2, [r3, #28]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	f003 030f 	and.w	r3, r3, #15
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	68f9      	ldr	r1, [r7, #12]
 8007d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d06:	4313      	orrs	r3, r2
 8007d08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d155      	bne.n	8007dcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	791b      	ldrb	r3, [r3, #4]
 8007d3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	059b      	lsls	r3, r3, #22
 8007d42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d44:	4313      	orrs	r3, r2
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	0151      	lsls	r1, r2, #5
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	440a      	add	r2, r1
 8007d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	e036      	b.n	8007dcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d64:	69da      	ldr	r2, [r3, #28]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	2101      	movs	r1, #1
 8007d70:	fa01 f303 	lsl.w	r3, r1, r3
 8007d74:	041b      	lsls	r3, r3, #16
 8007d76:	68f9      	ldr	r1, [r7, #12]
 8007d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d11a      	bne.n	8007dcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	791b      	ldrb	r3, [r3, #4]
 8007db0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007db2:	430b      	orrs	r3, r1
 8007db4:	4313      	orrs	r3, r2
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d161      	bne.n	8007ebc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e0e:	d11f      	bne.n	8007e50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	f003 030f 	and.w	r3, r3, #15
 8007e60:	2101      	movs	r1, #1
 8007e62:	fa01 f303 	lsl.w	r3, r1, r3
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	68f9      	ldr	r1, [r7, #12]
 8007e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e70:	4013      	ands	r3, r2
 8007e72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	2101      	movs	r1, #1
 8007e86:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e94:	4013      	ands	r3, r2
 8007e96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	0159      	lsls	r1, r3, #5
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	440b      	add	r3, r1
 8007eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4b35      	ldr	r3, [pc, #212]	; (8007f8c <USB_DeactivateEndpoint+0x1b0>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	600b      	str	r3, [r1, #0]
 8007eba:	e060      	b.n	8007f7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed2:	d11f      	bne.n	8007f14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ef2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	0151      	lsls	r1, r2, #5
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	2101      	movs	r1, #1
 8007f26:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f34:	4013      	ands	r3, r2
 8007f36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 030f 	and.w	r3, r3, #15
 8007f48:	2101      	movs	r1, #1
 8007f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4e:	041b      	lsls	r3, r3, #16
 8007f50:	43db      	mvns	r3, r3
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f58:	4013      	ands	r3, r2
 8007f5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	0159      	lsls	r1, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	440b      	add	r3, r1
 8007f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f76:	4619      	mov	r1, r3
 8007f78:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <USB_DeactivateEndpoint+0x1b4>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	ec337800 	.word	0xec337800
 8007f90:	eff37800 	.word	0xeff37800

08007f94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08a      	sub	sp, #40	; 0x28
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	f040 815c 	bne.w	800826e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d132      	bne.n	8008024 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	0151      	lsls	r1, r2, #5
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	0151      	lsls	r1, r2, #5
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	440a      	add	r2, r1
 8007ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	440a      	add	r2, r1
 8008018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800801c:	0cdb      	lsrs	r3, r3, #19
 800801e:	04db      	lsls	r3, r3, #19
 8008020:	6113      	str	r3, [r2, #16]
 8008022:	e074      	b.n	800810e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	69fa      	ldr	r2, [r7, #28]
 8008038:	440a      	add	r2, r1
 800803a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800803e:	0cdb      	lsrs	r3, r3, #19
 8008040:	04db      	lsls	r3, r3, #19
 8008042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	440a      	add	r2, r1
 800805a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008074:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6999      	ldr	r1, [r3, #24]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	440b      	add	r3, r1
 8008080:	1e59      	subs	r1, r3, #1
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	fbb1 f3f3 	udiv	r3, r1, r3
 800808a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800808c:	4b9d      	ldr	r3, [pc, #628]	; (8008304 <USB_EPStartXfer+0x370>)
 800808e:	400b      	ands	r3, r1
 8008090:	69b9      	ldr	r1, [r7, #24]
 8008092:	0148      	lsls	r0, r1, #5
 8008094:	69f9      	ldr	r1, [r7, #28]
 8008096:	4401      	add	r1, r0
 8008098:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800809c:	4313      	orrs	r3, r2
 800809e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b6:	69b9      	ldr	r1, [r7, #24]
 80080b8:	0148      	lsls	r0, r1, #5
 80080ba:	69f9      	ldr	r1, [r7, #28]
 80080bc:	4401      	add	r1, r0
 80080be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080c2:	4313      	orrs	r3, r2
 80080c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	791b      	ldrb	r3, [r3, #4]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d11f      	bne.n	800810e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80080ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	440a      	add	r2, r1
 8008104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008108:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800810c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d14b      	bne.n	80081ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008128:	461a      	mov	r2, r3
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	791b      	ldrb	r3, [r3, #4]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d128      	bne.n	800818a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008144:	2b00      	cmp	r3, #0
 8008146:	d110      	bne.n	800816a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	0151      	lsls	r1, r2, #5
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	440a      	add	r2, r1
 800815e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008162:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	e00f      	b.n	800818a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	440a      	add	r2, r1
 8008180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008188:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	e133      	b.n	8008414 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d015      	beq.n	8008200 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 811b 	beq.w	8008414 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	2101      	movs	r1, #1
 80081f0:	fa01 f303 	lsl.w	r3, r1, r3
 80081f4:	69f9      	ldr	r1, [r7, #28]
 80081f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081fa:	4313      	orrs	r3, r2
 80081fc:	634b      	str	r3, [r1, #52]	; 0x34
 80081fe:	e109      	b.n	8008414 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d110      	bne.n	8008232 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	69fa      	ldr	r2, [r7, #28]
 8008224:	440a      	add	r2, r1
 8008226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	e00f      	b.n	8008252 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008250:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	6919      	ldr	r1, [r3, #16]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	b298      	uxth	r0, r3
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4603      	mov	r3, r0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fade 	bl	8008828 <USB_WritePacket>
 800826c:	e0d2      	b.n	8008414 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008288:	0cdb      	lsrs	r3, r3, #19
 800828a:	04db      	lsls	r3, r3, #19
 800828c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d126      	bne.n	8008308 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082d0:	69b9      	ldr	r1, [r7, #24]
 80082d2:	0148      	lsls	r0, r1, #5
 80082d4:	69f9      	ldr	r1, [r7, #28]
 80082d6:	4401      	add	r1, r0
 80082d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082dc:	4313      	orrs	r3, r2
 80082de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082fe:	6113      	str	r3, [r2, #16]
 8008300:	e03a      	b.n	8008378 <USB_EPStartXfer+0x3e4>
 8008302:	bf00      	nop
 8008304:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	699a      	ldr	r2, [r3, #24]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4413      	add	r3, r2
 8008312:	1e5a      	subs	r2, r3, #1
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	8afa      	ldrh	r2, [r7, #22]
 8008324:	fb03 f202 	mul.w	r2, r3, r2
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008338:	691a      	ldr	r2, [r3, #16]
 800833a:	8afb      	ldrh	r3, [r7, #22]
 800833c:	04d9      	lsls	r1, r3, #19
 800833e:	4b38      	ldr	r3, [pc, #224]	; (8008420 <USB_EPStartXfer+0x48c>)
 8008340:	400b      	ands	r3, r1
 8008342:	69b9      	ldr	r1, [r7, #24]
 8008344:	0148      	lsls	r0, r1, #5
 8008346:	69f9      	ldr	r1, [r7, #28]
 8008348:	4401      	add	r1, r0
 800834a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800834e:	4313      	orrs	r3, r2
 8008350:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835e:	691a      	ldr	r2, [r3, #16]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008368:	69b9      	ldr	r1, [r7, #24]
 800836a:	0148      	lsls	r0, r1, #5
 800836c:	69f9      	ldr	r1, [r7, #28]
 800836e:	4401      	add	r1, r0
 8008370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008374:	4313      	orrs	r3, r2
 8008376:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d10d      	bne.n	800839a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6919      	ldr	r1, [r3, #16]
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008396:	460a      	mov	r2, r1
 8008398:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d128      	bne.n	80083f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d110      	bne.n	80083d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e00f      	b.n	80083f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	440a      	add	r2, r1
 80083ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	0151      	lsls	r1, r2, #5
 8008406:	69fa      	ldr	r2, [r7, #28]
 8008408:	440a      	add	r2, r1
 800840a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	1ff80000 	.word	0x1ff80000

08008424 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	2b01      	cmp	r3, #1
 8008442:	f040 80ce 	bne.w	80085e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d132      	bne.n	80084b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	0151      	lsls	r1, r2, #5
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	440a      	add	r2, r1
 8008464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008468:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800846c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	0151      	lsls	r1, r2, #5
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	440a      	add	r2, r1
 8008488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800848c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ac:	0cdb      	lsrs	r3, r3, #19
 80084ae:	04db      	lsls	r3, r3, #19
 80084b0:	6113      	str	r3, [r2, #16]
 80084b2:	e04e      	b.n	8008552 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ce:	0cdb      	lsrs	r3, r3, #19
 80084d0:	04db      	lsls	r3, r3, #19
 80084d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	440a      	add	r2, r1
 8008522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800852a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	691a      	ldr	r2, [r3, #16]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008542:	6939      	ldr	r1, [r7, #16]
 8008544:	0148      	lsls	r0, r1, #5
 8008546:	6979      	ldr	r1, [r7, #20]
 8008548:	4401      	add	r1, r0
 800854a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800854e:	4313      	orrs	r3, r2
 8008550:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d11e      	bne.n	8008596 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856c:	461a      	mov	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	440a      	add	r2, r1
 800858a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800858e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	e097      	b.n	80086c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 8083 	beq.w	80086c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	2101      	movs	r1, #1
 80085d2:	fa01 f303 	lsl.w	r3, r1, r3
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085dc:	4313      	orrs	r3, r2
 80085de:	634b      	str	r3, [r1, #52]	; 0x34
 80085e0:	e071      	b.n	80086c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	0151      	lsls	r1, r2, #5
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	440a      	add	r2, r1
 80085f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085fc:	0cdb      	lsrs	r3, r3, #19
 80085fe:	04db      	lsls	r3, r3, #19
 8008600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	4413      	add	r3, r2
 800860a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	0151      	lsls	r1, r2, #5
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	440a      	add	r2, r1
 8008618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800861c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008624:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800865c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008674:	6939      	ldr	r1, [r7, #16]
 8008676:	0148      	lsls	r0, r1, #5
 8008678:	6979      	ldr	r1, [r7, #20]
 800867a:	4401      	add	r1, r0
 800867c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008680:	4313      	orrs	r3, r2
 8008682:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d10d      	bne.n	80086a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6919      	ldr	r1, [r3, #16]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a2:	460a      	mov	r2, r1
 80086a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	0151      	lsls	r1, r2, #5
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	440a      	add	r2, r1
 80086bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d14a      	bne.n	8008788 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800870a:	f040 8086 	bne.w	800881a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008730:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008754:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008762:	4293      	cmp	r3, r2
 8008764:	d902      	bls.n	800876c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	75fb      	strb	r3, [r7, #23]
          break;
 800876a:	e056      	b.n	800881a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	4413      	add	r3, r2
 8008776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008784:	d0e7      	beq.n	8008756 <USB_EPStopXfer+0x82>
 8008786:	e048      	b.n	800881a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800879c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087a0:	d13b      	bne.n	800881a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	7812      	ldrb	r2, [r2, #0]
 80087b6:	0151      	lsls	r1, r2, #5
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	440a      	add	r2, r1
 80087bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	7812      	ldrb	r2, [r2, #0]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d902      	bls.n	8008800 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	75fb      	strb	r3, [r7, #23]
          break;
 80087fe:	e00c      	b.n	800881a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008818:	d0e7      	beq.n	80087ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
}
 800881c:	4618      	mov	r0, r3
 800881e:	371c      	adds	r7, #28
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008828:	b480      	push	{r7}
 800882a:	b089      	sub	sp, #36	; 0x24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4611      	mov	r1, r2
 8008834:	461a      	mov	r2, r3
 8008836:	460b      	mov	r3, r1
 8008838:	71fb      	strb	r3, [r7, #7]
 800883a:	4613      	mov	r3, r2
 800883c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800884a:	2b00      	cmp	r3, #0
 800884c:	d123      	bne.n	8008896 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800884e:	88bb      	ldrh	r3, [r7, #4]
 8008850:	3303      	adds	r3, #3
 8008852:	089b      	lsrs	r3, r3, #2
 8008854:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008856:	2300      	movs	r3, #0
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	e018      	b.n	800888e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	031a      	lsls	r2, r3, #12
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	4413      	add	r3, r2
 8008864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008868:	461a      	mov	r2, r3
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	3301      	adds	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	3301      	adds	r3, #1
 800887a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	3301      	adds	r3, #1
 8008880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	3301      	adds	r3, #1
 8008886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	3301      	adds	r3, #1
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	429a      	cmp	r2, r3
 8008894:	d3e2      	bcc.n	800885c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3724      	adds	r7, #36	; 0x24
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b08b      	sub	sp, #44	; 0x2c
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	089b      	lsrs	r3, r3, #2
 80088be:	b29b      	uxth	r3, r3
 80088c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088c2:	88fb      	ldrh	r3, [r7, #6]
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088ca:	2300      	movs	r3, #0
 80088cc:	623b      	str	r3, [r7, #32]
 80088ce:	e014      	b.n	80088fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	601a      	str	r2, [r3, #0]
    pDest++;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	3301      	adds	r3, #1
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	3301      	adds	r3, #1
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	3301      	adds	r3, #1
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	3301      	adds	r3, #1
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	3301      	adds	r3, #1
 80088f8:	623b      	str	r3, [r7, #32]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d3e6      	bcc.n	80088d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008902:	8bfb      	ldrh	r3, [r7, #30]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01e      	beq.n	8008946 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008912:	461a      	mov	r2, r3
 8008914:	f107 0310 	add.w	r3, r7, #16
 8008918:	6812      	ldr	r2, [r2, #0]
 800891a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
 8008928:	b2da      	uxtb	r2, r3
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	701a      	strb	r2, [r3, #0]
      i++;
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	3301      	adds	r3, #1
 8008932:	623b      	str	r3, [r7, #32]
      pDest++;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	3301      	adds	r3, #1
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800893a:	8bfb      	ldrh	r3, [r7, #30]
 800893c:	3b01      	subs	r3, #1
 800893e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008940:	8bfb      	ldrh	r3, [r7, #30]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1ea      	bne.n	800891c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008948:	4618      	mov	r0, r3
 800894a:	372c      	adds	r7, #44	; 0x2c
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	785b      	ldrb	r3, [r3, #1]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d12c      	bne.n	80089ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	db12      	blt.n	80089a8 <USB_EPSetStall+0x54>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00f      	beq.n	80089a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	e02b      	b.n	8008a22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	db12      	blt.n	8008a02 <USB_EPSetStall+0xae>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00f      	beq.n	8008a02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	0151      	lsls	r1, r2, #5
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	440a      	add	r2, r1
 80089f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	785b      	ldrb	r3, [r3, #1]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d128      	bne.n	8008a9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	791b      	ldrb	r3, [r3, #4]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d003      	beq.n	8008a7c <USB_EPClearStall+0x4c>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	791b      	ldrb	r3, [r3, #4]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d138      	bne.n	8008aee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	0151      	lsls	r1, r2, #5
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	440a      	add	r2, r1
 8008a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	e027      	b.n	8008aee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ab8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008abc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	791b      	ldrb	r3, [r3, #4]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d003      	beq.n	8008ace <USB_EPClearStall+0x9e>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	791b      	ldrb	r3, [r3, #4]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d10f      	bne.n	8008aee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b30:	68f9      	ldr	r1, [r7, #12]
 8008b32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b36:	4313      	orrs	r3, r2
 8008b38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b76:	f023 0302 	bic.w	r3, r3, #2
 8008b7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ba4:	f023 0303 	bic.w	r3, r3, #3
 8008ba8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb8:	f043 0302 	orr.w	r3, r3, #2
 8008bbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	695b      	ldr	r3, [r3, #20]
 8008bd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4013      	ands	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008be4:	68fb      	ldr	r3, [r7, #12]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	4013      	ands	r3, r2
 8008c14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	0c1b      	lsrs	r3, r3, #16
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	4013      	ands	r3, r2
 8008c48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	b29b      	uxth	r3, r3
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4013      	ands	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c88:	68bb      	ldr	r3, [r7, #8]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b087      	sub	sp, #28
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cba:	78fb      	ldrb	r3, [r7, #3]
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc6:	01db      	lsls	r3, r3, #7
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d2c:	f023 0307 	bic.w	r3, r3, #7
 8008d30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	333c      	adds	r3, #60	; 0x3c
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	4a26      	ldr	r2, [pc, #152]	; (8008e0c <USB_EP0_OutStart+0xb8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d90a      	bls.n	8008d8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d88:	d101      	bne.n	8008d8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e037      	b.n	8008dfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d94:	461a      	mov	r2, r3
 8008d96:	2300      	movs	r3, #0
 8008d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dbc:	f043 0318 	orr.w	r3, r3, #24
 8008dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008dd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d10f      	bne.n	8008dfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	461a      	mov	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008dfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	4f54300a 	.word	0x4f54300a

08008e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <USB_CoreReset+0x64>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d901      	bls.n	8008e2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e01b      	b.n	8008e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	daf2      	bge.n	8008e1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	f043 0201 	orr.w	r2, r3, #1
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4a09      	ldr	r2, [pc, #36]	; (8008e74 <USB_CoreReset+0x64>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d901      	bls.n	8008e58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e006      	b.n	8008e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d0f0      	beq.n	8008e46 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	00030d40 	.word	0x00030d40

08008e78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008e7c:	4904      	ldr	r1, [pc, #16]	; (8008e90 <MX_FATFS_Init+0x18>)
 8008e7e:	4805      	ldr	r0, [pc, #20]	; (8008e94 <MX_FATFS_Init+0x1c>)
 8008e80:	f002 f87c 	bl	800af7c <FATFS_LinkDriver>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <MX_FATFS_Init+0x20>)
 8008e8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e8c:	bf00      	nop
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000884 	.word	0x20000884
 8008e94:	200004f8 	.word	0x200004f8
 8008e98:	20000880 	.word	0x20000880

08008e9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (mem_init(pdrv));
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7f8 fd6b 	bl	8001984 <mem_init>
 8008eae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return (mem_getstatus(pdrv));
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7f8 fd75 	bl	80019b4 <mem_getstatus>
 8008eca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (mem_read(pdrv, buff, sector, count));
 8008ee4:	7bf8      	ldrb	r0, [r7, #15]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	f7f8 fd72 	bl	80019d4 <mem_read>
 8008ef0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	4603      	mov	r3, r0
 8008f08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008f0a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	603a      	str	r2, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
 8008f24:	460b      	mov	r3, r1
 8008f26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    switch (cmd) {
 8008f28:	79bb      	ldrb	r3, [r7, #6]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d002      	beq.n	8008f34 <USER_ioctl+0x1c>
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d004      	beq.n	8008f3c <USER_ioctl+0x24>
 8008f32:	e007      	b.n	8008f44 <USER_ioctl+0x2c>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = 65536;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008f3a:	601a      	str	r2, [r3, #0]
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = 2048;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f42:	601a      	str	r2, [r3, #0]
    }
    return RES_OK;
 8008f44:	2300      	movs	r3, #0
  /* USER CODE END IOCTL */
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f64:	f005 fc2e 	bl	800e7c4 <USBD_static_malloc>
 8008f68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	32b0      	adds	r2, #176	; 0xb0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f80:	2302      	movs	r3, #2
 8008f82:	e0d4      	b.n	800912e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008f88:	2100      	movs	r1, #0
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f005 fca6 	bl	800e8dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	32b0      	adds	r2, #176	; 0xb0
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	32b0      	adds	r2, #176	; 0xb0
 8008faa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	7c1b      	ldrb	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d138      	bne.n	800902e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fbc:	4b5e      	ldr	r3, [pc, #376]	; (8009138 <USBD_CDC_Init+0x1e4>)
 8008fbe:	7819      	ldrb	r1, [r3, #0]
 8008fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f005 fad9 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fcc:	4b5a      	ldr	r3, [pc, #360]	; (8009138 <USBD_CDC_Init+0x1e4>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	f003 020f 	and.w	r2, r3, #15
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	3324      	adds	r3, #36	; 0x24
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fe6:	4b55      	ldr	r3, [pc, #340]	; (800913c <USBD_CDC_Init+0x1e8>)
 8008fe8:	7819      	ldrb	r1, [r3, #0]
 8008fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fee:	2202      	movs	r2, #2
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f005 fac4 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ff6:	4b51      	ldr	r3, [pc, #324]	; (800913c <USBD_CDC_Init+0x1e8>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f003 020f 	and.w	r2, r3, #15
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800900e:	2201      	movs	r2, #1
 8009010:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009012:	4b4b      	ldr	r3, [pc, #300]	; (8009140 <USBD_CDC_Init+0x1ec>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 020f 	and.w	r2, r3, #15
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	3326      	adds	r3, #38	; 0x26
 8009028:	2210      	movs	r2, #16
 800902a:	801a      	strh	r2, [r3, #0]
 800902c:	e035      	b.n	800909a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800902e:	4b42      	ldr	r3, [pc, #264]	; (8009138 <USBD_CDC_Init+0x1e4>)
 8009030:	7819      	ldrb	r1, [r3, #0]
 8009032:	2340      	movs	r3, #64	; 0x40
 8009034:	2202      	movs	r2, #2
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f005 faa1 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800903c:	4b3e      	ldr	r3, [pc, #248]	; (8009138 <USBD_CDC_Init+0x1e4>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	3324      	adds	r3, #36	; 0x24
 8009052:	2201      	movs	r2, #1
 8009054:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009056:	4b39      	ldr	r3, [pc, #228]	; (800913c <USBD_CDC_Init+0x1e8>)
 8009058:	7819      	ldrb	r1, [r3, #0]
 800905a:	2340      	movs	r3, #64	; 0x40
 800905c:	2202      	movs	r2, #2
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f005 fa8d 	bl	800e57e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009064:	4b35      	ldr	r3, [pc, #212]	; (800913c <USBD_CDC_Init+0x1e8>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 020f 	and.w	r2, r3, #15
 800906c:	6879      	ldr	r1, [r7, #4]
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	440b      	add	r3, r1
 8009078:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800907c:	2201      	movs	r2, #1
 800907e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009080:	4b2f      	ldr	r3, [pc, #188]	; (8009140 <USBD_CDC_Init+0x1ec>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 020f 	and.w	r2, r3, #15
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	4613      	mov	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	440b      	add	r3, r1
 8009094:	3326      	adds	r3, #38	; 0x26
 8009096:	2210      	movs	r2, #16
 8009098:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800909a:	4b29      	ldr	r3, [pc, #164]	; (8009140 <USBD_CDC_Init+0x1ec>)
 800909c:	7819      	ldrb	r1, [r3, #0]
 800909e:	2308      	movs	r3, #8
 80090a0:	2203      	movs	r2, #3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f005 fa6b 	bl	800e57e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80090a8:	4b25      	ldr	r3, [pc, #148]	; (8009140 <USBD_CDC_Init+0x1ec>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	f003 020f 	and.w	r2, r3, #15
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	3324      	adds	r3, #36	; 0x24
 80090be:	2201      	movs	r2, #1
 80090c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	33b0      	adds	r3, #176	; 0xb0
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80090f8:	2302      	movs	r3, #2
 80090fa:	e018      	b.n	800912e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7c1b      	ldrb	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009104:	4b0d      	ldr	r3, [pc, #52]	; (800913c <USBD_CDC_Init+0x1e8>)
 8009106:	7819      	ldrb	r1, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800910e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f005 fb22 	bl	800e75c <USBD_LL_PrepareReceive>
 8009118:	e008      	b.n	800912c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800911a:	4b08      	ldr	r3, [pc, #32]	; (800913c <USBD_CDC_Init+0x1e8>)
 800911c:	7819      	ldrb	r1, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009124:	2340      	movs	r3, #64	; 0x40
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f005 fb18 	bl	800e75c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20000593 	.word	0x20000593
 800913c:	20000594 	.word	0x20000594
 8009140:	20000595 	.word	0x20000595

08009144 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009150:	4b3a      	ldr	r3, [pc, #232]	; (800923c <USBD_CDC_DeInit+0xf8>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f005 fa37 	bl	800e5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800915c:	4b37      	ldr	r3, [pc, #220]	; (800923c <USBD_CDC_DeInit+0xf8>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 020f 	and.w	r2, r3, #15
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	3324      	adds	r3, #36	; 0x24
 8009172:	2200      	movs	r2, #0
 8009174:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009176:	4b32      	ldr	r3, [pc, #200]	; (8009240 <USBD_CDC_DeInit+0xfc>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f005 fa24 	bl	800e5ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009182:	4b2f      	ldr	r3, [pc, #188]	; (8009240 <USBD_CDC_DeInit+0xfc>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	f003 020f 	and.w	r2, r3, #15
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800919a:	2200      	movs	r2, #0
 800919c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800919e:	4b29      	ldr	r3, [pc, #164]	; (8009244 <USBD_CDC_DeInit+0x100>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f005 fa10 	bl	800e5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80091aa:	4b26      	ldr	r3, [pc, #152]	; (8009244 <USBD_CDC_DeInit+0x100>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	f003 020f 	and.w	r2, r3, #15
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	3324      	adds	r3, #36	; 0x24
 80091c0:	2200      	movs	r2, #0
 80091c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80091c4:	4b1f      	ldr	r3, [pc, #124]	; (8009244 <USBD_CDC_DeInit+0x100>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	3326      	adds	r3, #38	; 0x26
 80091da:	2200      	movs	r2, #0
 80091dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	32b0      	adds	r2, #176	; 0xb0
 80091e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01f      	beq.n	8009230 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	33b0      	adds	r3, #176	; 0xb0
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32b0      	adds	r2, #176	; 0xb0
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	4618      	mov	r0, r3
 8009214:	f005 fae4 	bl	800e7e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	32b0      	adds	r2, #176	; 0xb0
 8009222:	2100      	movs	r1, #0
 8009224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000593 	.word	0x20000593
 8009240:	20000594 	.word	0x20000594
 8009244:	20000595 	.word	0x20000595

08009248 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	32b0      	adds	r2, #176	; 0xb0
 800925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009260:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009274:	2303      	movs	r3, #3
 8009276:	e0bf      	b.n	80093f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009280:	2b00      	cmp	r3, #0
 8009282:	d050      	beq.n	8009326 <USBD_CDC_Setup+0xde>
 8009284:	2b20      	cmp	r3, #32
 8009286:	f040 80af 	bne.w	80093e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	88db      	ldrh	r3, [r3, #6]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d03a      	beq.n	8009308 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	b25b      	sxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	da1b      	bge.n	80092d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	33b0      	adds	r3, #176	; 0xb0
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80092b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	88d2      	ldrh	r2, [r2, #6]
 80092b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	88db      	ldrh	r3, [r3, #6]
 80092be:	2b07      	cmp	r3, #7
 80092c0:	bf28      	it	cs
 80092c2:	2307      	movcs	r3, #7
 80092c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	89fa      	ldrh	r2, [r7, #14]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fd89 	bl	800ade4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80092d2:	e090      	b.n	80093f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	785a      	ldrb	r2, [r3, #1]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	88db      	ldrh	r3, [r3, #6]
 80092e2:	2b3f      	cmp	r3, #63	; 0x3f
 80092e4:	d803      	bhi.n	80092ee <USBD_CDC_Setup+0xa6>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	88db      	ldrh	r3, [r3, #6]
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	e000      	b.n	80092f0 <USBD_CDC_Setup+0xa8>
 80092ee:	2240      	movs	r2, #64	; 0x40
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80092f6:	6939      	ldr	r1, [r7, #16]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80092fe:	461a      	mov	r2, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 fd9b 	bl	800ae3c <USBD_CtlPrepareRx>
      break;
 8009306:	e076      	b.n	80093f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	33b0      	adds	r3, #176	; 0xb0
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	7850      	ldrb	r0, [r2, #1]
 800931e:	2200      	movs	r2, #0
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	4798      	blx	r3
      break;
 8009324:	e067      	b.n	80093f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	2b0b      	cmp	r3, #11
 800932c:	d851      	bhi.n	80093d2 <USBD_CDC_Setup+0x18a>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <USBD_CDC_Setup+0xec>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009365 	.word	0x08009365
 8009338:	080093e1 	.word	0x080093e1
 800933c:	080093d3 	.word	0x080093d3
 8009340:	080093d3 	.word	0x080093d3
 8009344:	080093d3 	.word	0x080093d3
 8009348:	080093d3 	.word	0x080093d3
 800934c:	080093d3 	.word	0x080093d3
 8009350:	080093d3 	.word	0x080093d3
 8009354:	080093d3 	.word	0x080093d3
 8009358:	080093d3 	.word	0x080093d3
 800935c:	0800938f 	.word	0x0800938f
 8009360:	080093b9 	.word	0x080093b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b03      	cmp	r3, #3
 800936e:	d107      	bne.n	8009380 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009370:	f107 030a 	add.w	r3, r7, #10
 8009374:	2202      	movs	r2, #2
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 fd33 	bl	800ade4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800937e:	e032      	b.n	80093e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fcbd 	bl	800ad02 <USBD_CtlError>
            ret = USBD_FAIL;
 8009388:	2303      	movs	r3, #3
 800938a:	75fb      	strb	r3, [r7, #23]
          break;
 800938c:	e02b      	b.n	80093e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b03      	cmp	r3, #3
 8009398:	d107      	bne.n	80093aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800939a:	f107 030d 	add.w	r3, r7, #13
 800939e:	2201      	movs	r2, #1
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fd1e 	bl	800ade4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093a8:	e01d      	b.n	80093e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fca8 	bl	800ad02 <USBD_CtlError>
            ret = USBD_FAIL;
 80093b2:	2303      	movs	r3, #3
 80093b4:	75fb      	strb	r3, [r7, #23]
          break;
 80093b6:	e016      	b.n	80093e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d00f      	beq.n	80093e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 fc9b 	bl	800ad02 <USBD_CtlError>
            ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093d0:	e008      	b.n	80093e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fc94 	bl	800ad02 <USBD_CtlError>
          ret = USBD_FAIL;
 80093da:	2303      	movs	r3, #3
 80093dc:	75fb      	strb	r3, [r7, #23]
          break;
 80093de:	e002      	b.n	80093e6 <USBD_CDC_Setup+0x19e>
          break;
 80093e0:	bf00      	nop
 80093e2:	e008      	b.n	80093f6 <USBD_CDC_Setup+0x1ae>
          break;
 80093e4:	bf00      	nop
      }
      break;
 80093e6:	e006      	b.n	80093f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 fc89 	bl	800ad02 <USBD_CtlError>
      ret = USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	75fb      	strb	r3, [r7, #23]
      break;
 80093f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009412:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32b0      	adds	r2, #176	; 0xb0
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009426:	2303      	movs	r3, #3
 8009428:	e065      	b.n	80094f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	32b0      	adds	r2, #176	; 0xb0
 8009434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009438:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	f003 020f 	and.w	r2, r3, #15
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	440b      	add	r3, r1
 800944c:	3318      	adds	r3, #24
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d02f      	beq.n	80094b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	f003 020f 	and.w	r2, r3, #15
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	3318      	adds	r3, #24
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	f003 010f 	and.w	r1, r3, #15
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	460b      	mov	r3, r1
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	440b      	add	r3, r1
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4403      	add	r3, r0
 800947c:	3348      	adds	r3, #72	; 0x48
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	fbb2 f1f3 	udiv	r1, r2, r3
 8009484:	fb01 f303 	mul.w	r3, r1, r3
 8009488:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800948a:	2b00      	cmp	r3, #0
 800948c:	d112      	bne.n	80094b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	3318      	adds	r3, #24
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094a6:	78f9      	ldrb	r1, [r7, #3]
 80094a8:	2300      	movs	r3, #0
 80094aa:	2200      	movs	r2, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f005 f934 	bl	800e71a <USBD_LL_Transmit>
 80094b2:	e01f      	b.n	80094f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	33b0      	adds	r3, #176	; 0xb0
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d010      	beq.n	80094f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	33b0      	adds	r3, #176	; 0xb0
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	32b0      	adds	r2, #176	; 0xb0
 8009514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009518:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	32b0      	adds	r2, #176	; 0xb0
 8009524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	e01a      	b.n	8009566 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f005 f932 	bl	800e79e <USBD_LL_GetRxDataSize>
 800953a:	4602      	mov	r2, r0
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	33b0      	adds	r3, #176	; 0xb0
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009560:	4611      	mov	r1, r2
 8009562:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	32b0      	adds	r2, #176	; 0xb0
 8009580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009584:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800958c:	2303      	movs	r3, #3
 800958e:	e025      	b.n	80095dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	33b0      	adds	r3, #176	; 0xb0
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01a      	beq.n	80095da <USBD_CDC_EP0_RxReady+0x6c>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80095aa:	2bff      	cmp	r3, #255	; 0xff
 80095ac:	d015      	beq.n	80095da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	33b0      	adds	r3, #176	; 0xb0
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80095c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095ce:	b292      	uxth	r2, r2
 80095d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	22ff      	movs	r2, #255	; 0xff
 80095d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095ec:	2182      	movs	r1, #130	; 0x82
 80095ee:	4818      	ldr	r0, [pc, #96]	; (8009650 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095f0:	f000 fd4f 	bl	800a092 <USBD_GetEpDesc>
 80095f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095f6:	2101      	movs	r1, #1
 80095f8:	4815      	ldr	r0, [pc, #84]	; (8009650 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095fa:	f000 fd4a 	bl	800a092 <USBD_GetEpDesc>
 80095fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009600:	2181      	movs	r1, #129	; 0x81
 8009602:	4813      	ldr	r0, [pc, #76]	; (8009650 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009604:	f000 fd45 	bl	800a092 <USBD_GetEpDesc>
 8009608:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2210      	movs	r2, #16
 8009614:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d006      	beq.n	800962a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	2200      	movs	r2, #0
 8009620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009624:	711a      	strb	r2, [r3, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d006      	beq.n	800963e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009638:	711a      	strb	r2, [r3, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2243      	movs	r2, #67	; 0x43
 8009642:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009644:	4b02      	ldr	r3, [pc, #8]	; (8009650 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20000550 	.word	0x20000550

08009654 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800965c:	2182      	movs	r1, #130	; 0x82
 800965e:	4818      	ldr	r0, [pc, #96]	; (80096c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009660:	f000 fd17 	bl	800a092 <USBD_GetEpDesc>
 8009664:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009666:	2101      	movs	r1, #1
 8009668:	4815      	ldr	r0, [pc, #84]	; (80096c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800966a:	f000 fd12 	bl	800a092 <USBD_GetEpDesc>
 800966e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009670:	2181      	movs	r1, #129	; 0x81
 8009672:	4813      	ldr	r0, [pc, #76]	; (80096c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009674:	f000 fd0d 	bl	800a092 <USBD_GetEpDesc>
 8009678:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2210      	movs	r2, #16
 8009684:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d006      	beq.n	800969a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	2200      	movs	r2, #0
 8009690:	711a      	strb	r2, [r3, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f042 0202 	orr.w	r2, r2, #2
 8009698:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	711a      	strb	r2, [r3, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f042 0202 	orr.w	r2, r2, #2
 80096ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2243      	movs	r2, #67	; 0x43
 80096b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096b4:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000550 	.word	0x20000550

080096c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096cc:	2182      	movs	r1, #130	; 0x82
 80096ce:	4818      	ldr	r0, [pc, #96]	; (8009730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096d0:	f000 fcdf 	bl	800a092 <USBD_GetEpDesc>
 80096d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096d6:	2101      	movs	r1, #1
 80096d8:	4815      	ldr	r0, [pc, #84]	; (8009730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096da:	f000 fcda 	bl	800a092 <USBD_GetEpDesc>
 80096de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096e0:	2181      	movs	r1, #129	; 0x81
 80096e2:	4813      	ldr	r0, [pc, #76]	; (8009730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096e4:	f000 fcd5 	bl	800a092 <USBD_GetEpDesc>
 80096e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	2210      	movs	r2, #16
 80096f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d006      	beq.n	800970a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2200      	movs	r2, #0
 8009700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009704:	711a      	strb	r2, [r3, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d006      	beq.n	800971e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009718:	711a      	strb	r2, [r3, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2243      	movs	r2, #67	; 0x43
 8009722:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009724:	4b02      	ldr	r3, [pc, #8]	; (8009730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000550 	.word	0x20000550

08009734 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	220a      	movs	r2, #10
 8009740:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	2000050c 	.word	0x2000050c

08009754 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009764:	2303      	movs	r3, #3
 8009766:	e009      	b.n	800977c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	33b0      	adds	r3, #176	; 0xb0
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	32b0      	adds	r2, #176	; 0xb0
 800979e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e008      	b.n	80097c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	32b0      	adds	r2, #176	; 0xb0
 80097e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e004      	b.n	80097fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	32b0      	adds	r2, #176	; 0xb0
 800981a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009820:	2301      	movs	r3, #1
 8009822:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	32b0      	adds	r2, #176	; 0xb0
 800982e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009836:	2303      	movs	r3, #3
 8009838:	e025      	b.n	8009886 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009840:	2b00      	cmp	r3, #0
 8009842:	d11f      	bne.n	8009884 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2201      	movs	r2, #1
 8009848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800984c:	4b10      	ldr	r3, [pc, #64]	; (8009890 <USBD_CDC_TransmitPacket+0x88>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f003 020f 	and.w	r2, r3, #15
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4403      	add	r3, r0
 8009866:	3318      	adds	r3, #24
 8009868:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800986a:	4b09      	ldr	r3, [pc, #36]	; (8009890 <USBD_CDC_TransmitPacket+0x88>)
 800986c:	7819      	ldrb	r1, [r3, #0]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f004 ff4d 	bl	800e71a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000593 	.word	0x20000593

08009894 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	32b0      	adds	r2, #176	; 0xb0
 80098a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	32b0      	adds	r2, #176	; 0xb0
 80098b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80098be:	2303      	movs	r3, #3
 80098c0:	e018      	b.n	80098f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	7c1b      	ldrb	r3, [r3, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098ca:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <USBD_CDC_ReceivePacket+0x68>)
 80098cc:	7819      	ldrb	r1, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f004 ff3f 	bl	800e75c <USBD_LL_PrepareReceive>
 80098de:	e008      	b.n	80098f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098e0:	4b06      	ldr	r3, [pc, #24]	; (80098fc <USBD_CDC_ReceivePacket+0x68>)
 80098e2:	7819      	ldrb	r1, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098ea:	2340      	movs	r3, #64	; 0x40
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f004 ff35 	bl	800e75c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20000594 	.word	0x20000594

08009900 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4613      	mov	r3, r2
 800990c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009914:	2303      	movs	r3, #3
 8009916:	e01f      	b.n	8009958 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	79fa      	ldrb	r2, [r7, #7]
 800994a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f004 fdaf 	bl	800e4b0 <USBD_LL_Init>
 8009952:	4603      	mov	r3, r0
 8009954:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e025      	b.n	80099c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	32ae      	adds	r2, #174	; 0xae
 800998a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00f      	beq.n	80099b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	32ae      	adds	r2, #174	; 0xae
 800999e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	f107 020e 	add.w	r2, r7, #14
 80099a8:	4610      	mov	r0, r2
 80099aa:	4798      	blx	r3
 80099ac:	4602      	mov	r2, r0
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f004 fdb7 	bl	800e548 <USBD_LL_Start>
 80099da:	4603      	mov	r3, r0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d009      	beq.n	8009a28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4798      	blx	r3
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	78fa      	ldrb	r2, [r7, #3]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	4798      	blx	r3
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 f908 	bl	800ac8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d01a      	beq.n	8009ad8 <USBD_LL_SetupStage+0x72>
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d822      	bhi.n	8009aec <USBD_LL_SetupStage+0x86>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <USBD_LL_SetupStage+0x4a>
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d00a      	beq.n	8009ac4 <USBD_LL_SetupStage+0x5e>
 8009aae:	e01d      	b.n	8009aec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fb5f 	bl	800a17c <USBD_StdDevReq>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac2:	e020      	b.n	8009b06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fbc7 	bl	800a260 <USBD_StdItfReq>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad6:	e016      	b.n	8009b06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fc29 	bl	800a338 <USBD_StdEPReq>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aea:	e00c      	b.n	8009b06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009af2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f004 fd84 	bl	800e608 <USBD_LL_StallEP>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
      break;
 8009b04:	bf00      	nop
  }

  return ret;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d16e      	bne.n	8009c06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	f040 8098 	bne.w	8009c6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d913      	bls.n	8009b70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	1ad2      	subs	r2, r2, r3
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bf28      	it	cs
 8009b62:	4613      	movcs	r3, r2
 8009b64:	461a      	mov	r2, r3
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f001 f984 	bl	800ae76 <USBD_CtlContinueRx>
 8009b6e:	e07d      	b.n	8009c6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d014      	beq.n	8009ba8 <USBD_LL_DataOutStage+0x98>
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d81d      	bhi.n	8009bbe <USBD_LL_DataOutStage+0xae>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <USBD_LL_DataOutStage+0x7c>
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d003      	beq.n	8009b92 <USBD_LL_DataOutStage+0x82>
 8009b8a:	e018      	b.n	8009bbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	75bb      	strb	r3, [r7, #22]
            break;
 8009b90:	e018      	b.n	8009bc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 fa5e 	bl	800a05e <USBD_CoreFindIF>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	75bb      	strb	r3, [r7, #22]
            break;
 8009ba6:	e00d      	b.n	8009bc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 fa60 	bl	800a078 <USBD_CoreFindEP>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	75bb      	strb	r3, [r7, #22]
            break;
 8009bbc:	e002      	b.n	8009bc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	75bb      	strb	r3, [r7, #22]
            break;
 8009bc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009bc4:	7dbb      	ldrb	r3, [r7, #22]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d119      	bne.n	8009bfe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d113      	bne.n	8009bfe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009bd6:	7dba      	ldrb	r2, [r7, #22]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	32ae      	adds	r2, #174	; 0xae
 8009bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009be6:	7dba      	ldrb	r2, [r7, #22]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009bee:	7dba      	ldrb	r2, [r7, #22]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	32ae      	adds	r2, #174	; 0xae
 8009bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f001 f94a 	bl	800ae98 <USBD_CtlSendStatus>
 8009c04:	e032      	b.n	8009c6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	4619      	mov	r1, r3
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 fa31 	bl	800a078 <USBD_CoreFindEP>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c1a:	7dbb      	ldrb	r3, [r7, #22]
 8009c1c:	2bff      	cmp	r3, #255	; 0xff
 8009c1e:	d025      	beq.n	8009c6c <USBD_LL_DataOutStage+0x15c>
 8009c20:	7dbb      	ldrb	r3, [r7, #22]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d122      	bne.n	8009c6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d117      	bne.n	8009c62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c32:	7dba      	ldrb	r2, [r7, #22]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	32ae      	adds	r2, #174	; 0xae
 8009c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00f      	beq.n	8009c62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c42:	7dba      	ldrb	r2, [r7, #22]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c4a:	7dba      	ldrb	r2, [r7, #22]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	32ae      	adds	r2, #174	; 0xae
 8009c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	7afa      	ldrb	r2, [r7, #11]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	4798      	blx	r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	e000      	b.n	8009c6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	607a      	str	r2, [r7, #4]
 8009c82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009c84:	7afb      	ldrb	r3, [r7, #11]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d16f      	bne.n	8009d6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3314      	adds	r3, #20
 8009c8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d15a      	bne.n	8009d50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	689a      	ldr	r2, [r3, #8]
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d914      	bls.n	8009cd0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	1ad2      	subs	r2, r2, r3
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f001 f8ac 	bl	800ae1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f004 fd47 	bl	800e75c <USBD_LL_PrepareReceive>
 8009cce:	e03f      	b.n	8009d50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	68da      	ldr	r2, [r3, #12]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d11c      	bne.n	8009d16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d316      	bcc.n	8009d16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d20f      	bcs.n	8009d16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f001 f88d 	bl	800ae1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f004 fd24 	bl	800e75c <USBD_LL_PrepareReceive>
 8009d14:	e01c      	b.n	8009d50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d10f      	bne.n	8009d42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d42:	2180      	movs	r1, #128	; 0x80
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f004 fc5f 	bl	800e608 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f001 f8b7 	bl	800aebe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d03a      	beq.n	8009dd0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7ff fe42 	bl	80099e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d68:	e032      	b.n	8009dd0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009d6a:	7afb      	ldrb	r3, [r7, #11]
 8009d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	4619      	mov	r1, r3
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 f97f 	bl	800a078 <USBD_CoreFindEP>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	2bff      	cmp	r3, #255	; 0xff
 8009d82:	d025      	beq.n	8009dd0 <USBD_LL_DataInStage+0x15a>
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d122      	bne.n	8009dd0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d11c      	bne.n	8009dd0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009d96:	7dfa      	ldrb	r2, [r7, #23]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	32ae      	adds	r2, #174	; 0xae
 8009d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d014      	beq.n	8009dd0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009da6:	7dfa      	ldrb	r2, [r7, #23]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009dae:	7dfa      	ldrb	r2, [r7, #23]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	32ae      	adds	r2, #174	; 0xae
 8009db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	7afa      	ldrb	r2, [r7, #11]
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	4798      	blx	r3
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009dc6:	7dbb      	ldrb	r3, [r7, #22]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009dcc:	7dbb      	ldrb	r3, [r7, #22]
 8009dce:	e000      	b.n	8009dd2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d014      	beq.n	8009e40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	6852      	ldr	r2, [r2, #4]
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	4611      	mov	r1, r2
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	4798      	blx	r3
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e40:	2340      	movs	r3, #64	; 0x40
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f004 fb99 	bl	800e57e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2240      	movs	r2, #64	; 0x40
 8009e58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e5c:	2340      	movs	r3, #64	; 0x40
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2180      	movs	r1, #128	; 0x80
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f004 fb8b 	bl	800e57e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2240      	movs	r2, #64	; 0x40
 8009e72:	621a      	str	r2, [r3, #32]

  return ret;
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	78fa      	ldrb	r2, [r7, #3]
 8009e8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2204      	movs	r2, #4
 8009eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d106      	bne.n	8009eec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d110      	bne.n	8009f30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d005      	beq.n	8009f30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	460b      	mov	r3, r1
 8009f44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	32ae      	adds	r2, #174	; 0xae
 8009f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e01c      	b.n	8009f96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d115      	bne.n	8009f94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	32ae      	adds	r2, #174	; 0xae
 8009f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f76:	6a1b      	ldr	r3, [r3, #32]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	32ae      	adds	r2, #174	; 0xae
 8009f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	4611      	mov	r1, r2
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	32ae      	adds	r2, #174	; 0xae
 8009fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e01c      	b.n	8009ffa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d115      	bne.n	8009ff8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32ae      	adds	r2, #174	; 0xae
 8009fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	32ae      	adds	r2, #174	; 0xae
 8009fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	78fa      	ldrb	r2, [r7, #3]
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00e      	beq.n	800a054 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6852      	ldr	r2, [r2, #4]
 800a042:	b2d2      	uxtb	r2, r2
 800a044:	4611      	mov	r1, r2
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	460b      	mov	r3, r1
 800a068:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a06a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a084:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b086      	sub	sp, #24
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d920      	bls.n	800a0fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a0c2:	e013      	b.n	800a0ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a0c4:	f107 030a 	add.w	r3, r7, #10
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6978      	ldr	r0, [r7, #20]
 800a0cc:	f000 f81b 	bl	800a106 <USBD_GetNextDesc>
 800a0d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	785b      	ldrb	r3, [r3, #1]
 800a0d6:	2b05      	cmp	r3, #5
 800a0d8:	d108      	bne.n	800a0ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	789b      	ldrb	r3, [r3, #2]
 800a0e2:	78fa      	ldrb	r2, [r7, #3]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d008      	beq.n	800a0fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	885b      	ldrh	r3, [r3, #2]
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	897b      	ldrh	r3, [r7, #10]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d8e5      	bhi.n	800a0c4 <USBD_GetEpDesc+0x32>
 800a0f8:	e000      	b.n	800a0fc <USBD_GetEpDesc+0x6a>
          break;
 800a0fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a0fc:	693b      	ldr	r3, [r7, #16]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a106:	b480      	push	{r7}
 800a108:	b085      	sub	sp, #20
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	881a      	ldrh	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	4413      	add	r3, r2
 800a120:	b29a      	uxth	r2, r3
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4413      	add	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a132:	68fb      	ldr	r3, [r7, #12]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	3301      	adds	r3, #1
 800a156:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a15e:	8a3b      	ldrh	r3, [r7, #16]
 800a160:	021b      	lsls	r3, r3, #8
 800a162:	b21a      	sxth	r2, r3
 800a164:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a168:	4313      	orrs	r3, r2
 800a16a:	b21b      	sxth	r3, r3
 800a16c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a16e:	89fb      	ldrh	r3, [r7, #14]
}
 800a170:	4618      	mov	r0, r3
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a192:	2b40      	cmp	r3, #64	; 0x40
 800a194:	d005      	beq.n	800a1a2 <USBD_StdDevReq+0x26>
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	d857      	bhi.n	800a24a <USBD_StdDevReq+0xce>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00f      	beq.n	800a1be <USBD_StdDevReq+0x42>
 800a19e:	2b20      	cmp	r3, #32
 800a1a0:	d153      	bne.n	800a24a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	32ae      	adds	r2, #174	; 0xae
 800a1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	4798      	blx	r3
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a1bc:	e04a      	b.n	800a254 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	785b      	ldrb	r3, [r3, #1]
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	d83b      	bhi.n	800a23e <USBD_StdDevReq+0xc2>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <USBD_StdDevReq+0x50>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a221 	.word	0x0800a221
 800a1d0:	0800a235 	.word	0x0800a235
 800a1d4:	0800a23f 	.word	0x0800a23f
 800a1d8:	0800a22b 	.word	0x0800a22b
 800a1dc:	0800a23f 	.word	0x0800a23f
 800a1e0:	0800a1ff 	.word	0x0800a1ff
 800a1e4:	0800a1f5 	.word	0x0800a1f5
 800a1e8:	0800a23f 	.word	0x0800a23f
 800a1ec:	0800a217 	.word	0x0800a217
 800a1f0:	0800a209 	.word	0x0800a209
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa3c 	bl	800a674 <USBD_GetDescriptor>
          break;
 800a1fc:	e024      	b.n	800a248 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fba1 	bl	800a948 <USBD_SetAddress>
          break;
 800a206:	e01f      	b.n	800a248 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fbe0 	bl	800a9d0 <USBD_SetConfig>
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]
          break;
 800a214:	e018      	b.n	800a248 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fc83 	bl	800ab24 <USBD_GetConfig>
          break;
 800a21e:	e013      	b.n	800a248 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fcb4 	bl	800ab90 <USBD_GetStatus>
          break;
 800a228:	e00e      	b.n	800a248 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fce3 	bl	800abf8 <USBD_SetFeature>
          break;
 800a232:	e009      	b.n	800a248 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fd07 	bl	800ac4a <USBD_ClrFeature>
          break;
 800a23c:	e004      	b.n	800a248 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fd5e 	bl	800ad02 <USBD_CtlError>
          break;
 800a246:	bf00      	nop
      }
      break;
 800a248:	e004      	b.n	800a254 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fd58 	bl	800ad02 <USBD_CtlError>
      break;
 800a252:	bf00      	nop
  }

  return ret;
 800a254:	7bfb      	ldrb	r3, [r7, #15]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop

0800a260 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a276:	2b40      	cmp	r3, #64	; 0x40
 800a278:	d005      	beq.n	800a286 <USBD_StdItfReq+0x26>
 800a27a:	2b40      	cmp	r3, #64	; 0x40
 800a27c:	d852      	bhi.n	800a324 <USBD_StdItfReq+0xc4>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <USBD_StdItfReq+0x26>
 800a282:	2b20      	cmp	r3, #32
 800a284:	d14e      	bne.n	800a324 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b02      	cmp	r3, #2
 800a292:	d840      	bhi.n	800a316 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	889b      	ldrh	r3, [r3, #4]
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d836      	bhi.n	800a30c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	889b      	ldrh	r3, [r3, #4]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff fed9 	bl	800a05e <USBD_CoreFindIF>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2bff      	cmp	r3, #255	; 0xff
 800a2b4:	d01d      	beq.n	800a2f2 <USBD_StdItfReq+0x92>
 800a2b6:	7bbb      	ldrb	r3, [r7, #14]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d11a      	bne.n	800a2f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a2bc:	7bba      	ldrb	r2, [r7, #14]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	32ae      	adds	r2, #174	; 0xae
 800a2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00f      	beq.n	800a2ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a2cc:	7bba      	ldrb	r2, [r7, #14]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a2d4:	7bba      	ldrb	r2, [r7, #14]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	32ae      	adds	r2, #174	; 0xae
 800a2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2ea:	e004      	b.n	800a2f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2f0:	e001      	b.n	800a2f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	88db      	ldrh	r3, [r3, #6]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d110      	bne.n	800a320 <USBD_StdItfReq+0xc0>
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10d      	bne.n	800a320 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fdc7 	bl	800ae98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a30a:	e009      	b.n	800a320 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fcf7 	bl	800ad02 <USBD_CtlError>
          break;
 800a314:	e004      	b.n	800a320 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fcf2 	bl	800ad02 <USBD_CtlError>
          break;
 800a31e:	e000      	b.n	800a322 <USBD_StdItfReq+0xc2>
          break;
 800a320:	bf00      	nop
      }
      break;
 800a322:	e004      	b.n	800a32e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fceb 	bl	800ad02 <USBD_CtlError>
      break;
 800a32c:	bf00      	nop
  }

  return ret;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	889b      	ldrh	r3, [r3, #4]
 800a34a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a354:	2b40      	cmp	r3, #64	; 0x40
 800a356:	d007      	beq.n	800a368 <USBD_StdEPReq+0x30>
 800a358:	2b40      	cmp	r3, #64	; 0x40
 800a35a:	f200 817f 	bhi.w	800a65c <USBD_StdEPReq+0x324>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d02a      	beq.n	800a3b8 <USBD_StdEPReq+0x80>
 800a362:	2b20      	cmp	r3, #32
 800a364:	f040 817a 	bne.w	800a65c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a368:	7bbb      	ldrb	r3, [r7, #14]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff fe83 	bl	800a078 <USBD_CoreFindEP>
 800a372:	4603      	mov	r3, r0
 800a374:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a376:	7b7b      	ldrb	r3, [r7, #13]
 800a378:	2bff      	cmp	r3, #255	; 0xff
 800a37a:	f000 8174 	beq.w	800a666 <USBD_StdEPReq+0x32e>
 800a37e:	7b7b      	ldrb	r3, [r7, #13]
 800a380:	2b00      	cmp	r3, #0
 800a382:	f040 8170 	bne.w	800a666 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a386:	7b7a      	ldrb	r2, [r7, #13]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a38e:	7b7a      	ldrb	r2, [r7, #13]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	32ae      	adds	r2, #174	; 0xae
 800a394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 8163 	beq.w	800a666 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a3a0:	7b7a      	ldrb	r2, [r7, #13]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	32ae      	adds	r2, #174	; 0xae
 800a3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	4798      	blx	r3
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3b6:	e156      	b.n	800a666 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	785b      	ldrb	r3, [r3, #1]
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d008      	beq.n	800a3d2 <USBD_StdEPReq+0x9a>
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	f300 8145 	bgt.w	800a650 <USBD_StdEPReq+0x318>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 809b 	beq.w	800a502 <USBD_StdEPReq+0x1ca>
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d03c      	beq.n	800a44a <USBD_StdEPReq+0x112>
 800a3d0:	e13e      	b.n	800a650 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d002      	beq.n	800a3e4 <USBD_StdEPReq+0xac>
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d016      	beq.n	800a410 <USBD_StdEPReq+0xd8>
 800a3e2:	e02c      	b.n	800a43e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00d      	beq.n	800a406 <USBD_StdEPReq+0xce>
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
 800a3ec:	2b80      	cmp	r3, #128	; 0x80
 800a3ee:	d00a      	beq.n	800a406 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f004 f907 	bl	800e608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3fa:	2180      	movs	r1, #128	; 0x80
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f004 f903 	bl	800e608 <USBD_LL_StallEP>
 800a402:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a404:	e020      	b.n	800a448 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fc7a 	bl	800ad02 <USBD_CtlError>
              break;
 800a40e:	e01b      	b.n	800a448 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	885b      	ldrh	r3, [r3, #2]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10e      	bne.n	800a436 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <USBD_StdEPReq+0xfe>
 800a41e:	7bbb      	ldrb	r3, [r7, #14]
 800a420:	2b80      	cmp	r3, #128	; 0x80
 800a422:	d008      	beq.n	800a436 <USBD_StdEPReq+0xfe>
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	88db      	ldrh	r3, [r3, #6]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d104      	bne.n	800a436 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f004 f8e9 	bl	800e608 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fd2e 	bl	800ae98 <USBD_CtlSendStatus>

              break;
 800a43c:	e004      	b.n	800a448 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fc5e 	bl	800ad02 <USBD_CtlError>
              break;
 800a446:	bf00      	nop
          }
          break;
 800a448:	e107      	b.n	800a65a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b02      	cmp	r3, #2
 800a454:	d002      	beq.n	800a45c <USBD_StdEPReq+0x124>
 800a456:	2b03      	cmp	r3, #3
 800a458:	d016      	beq.n	800a488 <USBD_StdEPReq+0x150>
 800a45a:	e04b      	b.n	800a4f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00d      	beq.n	800a47e <USBD_StdEPReq+0x146>
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	2b80      	cmp	r3, #128	; 0x80
 800a466:	d00a      	beq.n	800a47e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f004 f8cb 	bl	800e608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a472:	2180      	movs	r1, #128	; 0x80
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f004 f8c7 	bl	800e608 <USBD_LL_StallEP>
 800a47a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a47c:	e040      	b.n	800a500 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fc3e 	bl	800ad02 <USBD_CtlError>
              break;
 800a486:	e03b      	b.n	800a500 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	885b      	ldrh	r3, [r3, #2]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d136      	bne.n	800a4fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f004 f8d1 	bl	800e646 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fcf7 	bl	800ae98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4aa:	7bbb      	ldrb	r3, [r7, #14]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff fde2 	bl	800a078 <USBD_CoreFindEP>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4b8:	7b7b      	ldrb	r3, [r7, #13]
 800a4ba:	2bff      	cmp	r3, #255	; 0xff
 800a4bc:	d01f      	beq.n	800a4fe <USBD_StdEPReq+0x1c6>
 800a4be:	7b7b      	ldrb	r3, [r7, #13]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d11c      	bne.n	800a4fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a4c4:	7b7a      	ldrb	r2, [r7, #13]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a4cc:	7b7a      	ldrb	r2, [r7, #13]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	32ae      	adds	r2, #174	; 0xae
 800a4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d010      	beq.n	800a4fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4dc:	7b7a      	ldrb	r2, [r7, #13]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	32ae      	adds	r2, #174	; 0xae
 800a4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a4f2:	e004      	b.n	800a4fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fc03 	bl	800ad02 <USBD_CtlError>
              break;
 800a4fc:	e000      	b.n	800a500 <USBD_StdEPReq+0x1c8>
              break;
 800a4fe:	bf00      	nop
          }
          break;
 800a500:	e0ab      	b.n	800a65a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d002      	beq.n	800a514 <USBD_StdEPReq+0x1dc>
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d032      	beq.n	800a578 <USBD_StdEPReq+0x240>
 800a512:	e097      	b.n	800a644 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <USBD_StdEPReq+0x1f2>
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b80      	cmp	r3, #128	; 0x80
 800a51e:	d004      	beq.n	800a52a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fbed 	bl	800ad02 <USBD_CtlError>
                break;
 800a528:	e091      	b.n	800a64e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a52a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da0b      	bge.n	800a54a <USBD_StdEPReq+0x212>
 800a532:	7bbb      	ldrb	r3, [r7, #14]
 800a534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a538:	4613      	mov	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	3310      	adds	r3, #16
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	4413      	add	r3, r2
 800a546:	3304      	adds	r3, #4
 800a548:	e00b      	b.n	800a562 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4413      	add	r3, r2
 800a560:	3304      	adds	r3, #4
 800a562:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2200      	movs	r2, #0
 800a568:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2202      	movs	r2, #2
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fc37 	bl	800ade4 <USBD_CtlSendData>
              break;
 800a576:	e06a      	b.n	800a64e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	da11      	bge.n	800a5a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	f003 020f 	and.w	r2, r3, #15
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	3324      	adds	r3, #36	; 0x24
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d117      	bne.n	800a5ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fbb0 	bl	800ad02 <USBD_CtlError>
                  break;
 800a5a2:	e054      	b.n	800a64e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	f003 020f 	and.w	r2, r3, #15
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	440b      	add	r3, r1
 800a5b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fb9d 	bl	800ad02 <USBD_CtlError>
                  break;
 800a5c8:	e041      	b.n	800a64e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	da0b      	bge.n	800a5ea <USBD_StdEPReq+0x2b2>
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	3310      	adds	r3, #16
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	e00b      	b.n	800a602 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
 800a5ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	4413      	add	r3, r2
 800a600:	3304      	adds	r3, #4
 800a602:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <USBD_StdEPReq+0x2d8>
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	2b80      	cmp	r3, #128	; 0x80
 800a60e:	d103      	bne.n	800a618 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	e00e      	b.n	800a636 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f004 f831 	bl	800e684 <USBD_LL_IsStallEP>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d003      	beq.n	800a630 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2201      	movs	r2, #1
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	e002      	b.n	800a636 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2202      	movs	r2, #2
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fbd1 	bl	800ade4 <USBD_CtlSendData>
              break;
 800a642:	e004      	b.n	800a64e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fb5b 	bl	800ad02 <USBD_CtlError>
              break;
 800a64c:	bf00      	nop
          }
          break;
 800a64e:	e004      	b.n	800a65a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fb55 	bl	800ad02 <USBD_CtlError>
          break;
 800a658:	bf00      	nop
      }
      break;
 800a65a:	e005      	b.n	800a668 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fb4f 	bl	800ad02 <USBD_CtlError>
      break;
 800a664:	e000      	b.n	800a668 <USBD_StdEPReq+0x330>
      break;
 800a666:	bf00      	nop
  }

  return ret;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	885b      	ldrh	r3, [r3, #2]
 800a68e:	0a1b      	lsrs	r3, r3, #8
 800a690:	b29b      	uxth	r3, r3
 800a692:	3b01      	subs	r3, #1
 800a694:	2b06      	cmp	r3, #6
 800a696:	f200 8128 	bhi.w	800a8ea <USBD_GetDescriptor+0x276>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <USBD_GetDescriptor+0x2c>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6bd 	.word	0x0800a6bd
 800a6a4:	0800a6d5 	.word	0x0800a6d5
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a8eb 	.word	0x0800a8eb
 800a6b0:	0800a8eb 	.word	0x0800a8eb
 800a6b4:	0800a88b 	.word	0x0800a88b
 800a6b8:	0800a8b7 	.word	0x0800a8b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	7c12      	ldrb	r2, [r2, #16]
 800a6c8:	f107 0108 	add.w	r1, r7, #8
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	60f8      	str	r0, [r7, #12]
      break;
 800a6d2:	e112      	b.n	800a8fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7c1b      	ldrb	r3, [r3, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10d      	bne.n	800a6f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e4:	f107 0208 	add.w	r2, r7, #8
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6f6:	e100      	b.n	800a8fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	f107 0208 	add.w	r2, r7, #8
 800a704:	4610      	mov	r0, r2
 800a706:	4798      	blx	r3
 800a708:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3301      	adds	r3, #1
 800a70e:	2202      	movs	r2, #2
 800a710:	701a      	strb	r2, [r3, #0]
      break;
 800a712:	e0f2      	b.n	800a8fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	885b      	ldrh	r3, [r3, #2]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	f200 80ac 	bhi.w	800a878 <USBD_GetDescriptor+0x204>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <USBD_GetDescriptor+0xb4>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a741 	.word	0x0800a741
 800a72c:	0800a775 	.word	0x0800a775
 800a730:	0800a7a9 	.word	0x0800a7a9
 800a734:	0800a7dd 	.word	0x0800a7dd
 800a738:	0800a811 	.word	0x0800a811
 800a73c:	0800a845 	.word	0x0800a845
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00b      	beq.n	800a764 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	7c12      	ldrb	r2, [r2, #16]
 800a758:	f107 0108 	add.w	r1, r7, #8
 800a75c:	4610      	mov	r0, r2
 800a75e:	4798      	blx	r3
 800a760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a762:	e091      	b.n	800a888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 facb 	bl	800ad02 <USBD_CtlError>
            err++;
 800a76c:	7afb      	ldrb	r3, [r7, #11]
 800a76e:	3301      	adds	r3, #1
 800a770:	72fb      	strb	r3, [r7, #11]
          break;
 800a772:	e089      	b.n	800a888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	7c12      	ldrb	r2, [r2, #16]
 800a78c:	f107 0108 	add.w	r1, r7, #8
 800a790:	4610      	mov	r0, r2
 800a792:	4798      	blx	r3
 800a794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a796:	e077      	b.n	800a888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fab1 	bl	800ad02 <USBD_CtlError>
            err++;
 800a7a0:	7afb      	ldrb	r3, [r7, #11]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7a6:	e06f      	b.n	800a888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00b      	beq.n	800a7cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	7c12      	ldrb	r2, [r2, #16]
 800a7c0:	f107 0108 	add.w	r1, r7, #8
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4798      	blx	r3
 800a7c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7ca:	e05d      	b.n	800a888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fa97 	bl	800ad02 <USBD_CtlError>
            err++;
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a7da:	e055      	b.n	800a888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	7c12      	ldrb	r2, [r2, #16]
 800a7f4:	f107 0108 	add.w	r1, r7, #8
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	4798      	blx	r3
 800a7fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7fe:	e043      	b.n	800a888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fa7d 	bl	800ad02 <USBD_CtlError>
            err++;
 800a808:	7afb      	ldrb	r3, [r7, #11]
 800a80a:	3301      	adds	r3, #1
 800a80c:	72fb      	strb	r3, [r7, #11]
          break;
 800a80e:	e03b      	b.n	800a888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	7c12      	ldrb	r2, [r2, #16]
 800a828:	f107 0108 	add.w	r1, r7, #8
 800a82c:	4610      	mov	r0, r2
 800a82e:	4798      	blx	r3
 800a830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a832:	e029      	b.n	800a888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fa63 	bl	800ad02 <USBD_CtlError>
            err++;
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	3301      	adds	r3, #1
 800a840:	72fb      	strb	r3, [r7, #11]
          break;
 800a842:	e021      	b.n	800a888 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	7c12      	ldrb	r2, [r2, #16]
 800a85c:	f107 0108 	add.w	r1, r7, #8
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
 800a864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a866:	e00f      	b.n	800a888 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa49 	bl	800ad02 <USBD_CtlError>
            err++;
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	3301      	adds	r3, #1
 800a874:	72fb      	strb	r3, [r7, #11]
          break;
 800a876:	e007      	b.n	800a888 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa41 	bl	800ad02 <USBD_CtlError>
          err++;
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	3301      	adds	r3, #1
 800a884:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a886:	bf00      	nop
      }
      break;
 800a888:	e037      	b.n	800a8fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	7c1b      	ldrb	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d109      	bne.n	800a8a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89a:	f107 0208 	add.w	r2, r7, #8
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4798      	blx	r3
 800a8a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8a4:	e029      	b.n	800a8fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fa2a 	bl	800ad02 <USBD_CtlError>
        err++;
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8b4:	e021      	b.n	800a8fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	7c1b      	ldrb	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10d      	bne.n	800a8da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c6:	f107 0208 	add.w	r2, r7, #8
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	4798      	blx	r3
 800a8ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	2207      	movs	r2, #7
 800a8d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8d8:	e00f      	b.n	800a8fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fa10 	bl	800ad02 <USBD_CtlError>
        err++;
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e8:	e007      	b.n	800a8fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fa08 	bl	800ad02 <USBD_CtlError>
      err++;
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f8:	bf00      	nop
  }

  if (err != 0U)
 800a8fa:	7afb      	ldrb	r3, [r7, #11]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d11e      	bne.n	800a93e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	88db      	ldrh	r3, [r3, #6]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d016      	beq.n	800a936 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a908:	893b      	ldrh	r3, [r7, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00e      	beq.n	800a92c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	88da      	ldrh	r2, [r3, #6]
 800a912:	893b      	ldrh	r3, [r7, #8]
 800a914:	4293      	cmp	r3, r2
 800a916:	bf28      	it	cs
 800a918:	4613      	movcs	r3, r2
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a91e:	893b      	ldrh	r3, [r7, #8]
 800a920:	461a      	mov	r2, r3
 800a922:	68f9      	ldr	r1, [r7, #12]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa5d 	bl	800ade4 <USBD_CtlSendData>
 800a92a:	e009      	b.n	800a940 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f9e7 	bl	800ad02 <USBD_CtlError>
 800a934:	e004      	b.n	800a940 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 faae 	bl	800ae98 <USBD_CtlSendStatus>
 800a93c:	e000      	b.n	800a940 <USBD_GetDescriptor+0x2cc>
    return;
 800a93e:	bf00      	nop
  }
}
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop

0800a948 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	889b      	ldrh	r3, [r3, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d131      	bne.n	800a9be <USBD_SetAddress+0x76>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	88db      	ldrh	r3, [r3, #6]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d12d      	bne.n	800a9be <USBD_SetAddress+0x76>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	885b      	ldrh	r3, [r3, #2]
 800a966:	2b7f      	cmp	r3, #127	; 0x7f
 800a968:	d829      	bhi.n	800a9be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	885b      	ldrh	r3, [r3, #2]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a974:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d104      	bne.n	800a98c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f9bc 	bl	800ad02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98a:	e01d      	b.n	800a9c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	7bfa      	ldrb	r2, [r7, #15]
 800a990:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f003 fe9f 	bl	800e6dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fa7a 	bl	800ae98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b2:	e009      	b.n	800a9c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9bc:	e004      	b.n	800a9c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f99e 	bl	800ad02 <USBD_CtlError>
  }
}
 800a9c6:	bf00      	nop
 800a9c8:	bf00      	nop
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	885b      	ldrh	r3, [r3, #2]
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	4b4e      	ldr	r3, [pc, #312]	; (800ab20 <USBD_SetConfig+0x150>)
 800a9e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9e8:	4b4d      	ldr	r3, [pc, #308]	; (800ab20 <USBD_SetConfig+0x150>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d905      	bls.n	800a9fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f985 	bl	800ad02 <USBD_CtlError>
    return USBD_FAIL;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e08c      	b.n	800ab16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d002      	beq.n	800aa0e <USBD_SetConfig+0x3e>
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d029      	beq.n	800aa60 <USBD_SetConfig+0x90>
 800aa0c:	e075      	b.n	800aafa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa0e:	4b44      	ldr	r3, [pc, #272]	; (800ab20 <USBD_SetConfig+0x150>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d020      	beq.n	800aa58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aa16:	4b42      	ldr	r3, [pc, #264]	; (800ab20 <USBD_SetConfig+0x150>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa20:	4b3f      	ldr	r3, [pc, #252]	; (800ab20 <USBD_SetConfig+0x150>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7fe ffe7 	bl	80099fa <USBD_SetClassConfig>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d008      	beq.n	800aa48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f962 	bl	800ad02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2202      	movs	r2, #2
 800aa42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa46:	e065      	b.n	800ab14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fa25 	bl	800ae98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2203      	movs	r2, #3
 800aa52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa56:	e05d      	b.n	800ab14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fa1d 	bl	800ae98 <USBD_CtlSendStatus>
      break;
 800aa5e:	e059      	b.n	800ab14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa60:	4b2f      	ldr	r3, [pc, #188]	; (800ab20 <USBD_SetConfig+0x150>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d112      	bne.n	800aa8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa70:	4b2b      	ldr	r3, [pc, #172]	; (800ab20 <USBD_SetConfig+0x150>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa7a:	4b29      	ldr	r3, [pc, #164]	; (800ab20 <USBD_SetConfig+0x150>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7fe ffd6 	bl	8009a32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fa06 	bl	800ae98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa8c:	e042      	b.n	800ab14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa8e:	4b24      	ldr	r3, [pc, #144]	; (800ab20 <USBD_SetConfig+0x150>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d02a      	beq.n	800aaf2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7fe ffc4 	bl	8009a32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aaaa:	4b1d      	ldr	r3, [pc, #116]	; (800ab20 <USBD_SetConfig+0x150>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aab4:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <USBD_SetConfig+0x150>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fe ff9d 	bl	80099fa <USBD_SetClassConfig>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00f      	beq.n	800aaea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f918 	bl	800ad02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7fe ffa9 	bl	8009a32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aae8:	e014      	b.n	800ab14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9d4 	bl	800ae98 <USBD_CtlSendStatus>
      break;
 800aaf0:	e010      	b.n	800ab14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f9d0 	bl	800ae98 <USBD_CtlSendStatus>
      break;
 800aaf8:	e00c      	b.n	800ab14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f900 	bl	800ad02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab02:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <USBD_SetConfig+0x150>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7fe ff92 	bl	8009a32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	73fb      	strb	r3, [r7, #15]
      break;
 800ab12:	bf00      	nop
  }

  return ret;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	20000888 	.word	0x20000888

0800ab24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	88db      	ldrh	r3, [r3, #6]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d004      	beq.n	800ab40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f8e2 	bl	800ad02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab3e:	e023      	b.n	800ab88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	dc02      	bgt.n	800ab52 <USBD_GetConfig+0x2e>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dc03      	bgt.n	800ab58 <USBD_GetConfig+0x34>
 800ab50:	e015      	b.n	800ab7e <USBD_GetConfig+0x5a>
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d00b      	beq.n	800ab6e <USBD_GetConfig+0x4a>
 800ab56:	e012      	b.n	800ab7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3308      	adds	r3, #8
 800ab62:	2201      	movs	r2, #1
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f93c 	bl	800ade4 <USBD_CtlSendData>
        break;
 800ab6c:	e00c      	b.n	800ab88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3304      	adds	r3, #4
 800ab72:	2201      	movs	r2, #1
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f934 	bl	800ade4 <USBD_CtlSendData>
        break;
 800ab7c:	e004      	b.n	800ab88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f8be 	bl	800ad02 <USBD_CtlError>
        break;
 800ab86:	bf00      	nop
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d81e      	bhi.n	800abe6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	88db      	ldrh	r3, [r3, #6]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d004      	beq.n	800abba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f8a5 	bl	800ad02 <USBD_CtlError>
        break;
 800abb8:	e01a      	b.n	800abf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d005      	beq.n	800abd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	f043 0202 	orr.w	r2, r3, #2
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	330c      	adds	r3, #12
 800abda:	2202      	movs	r2, #2
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f900 	bl	800ade4 <USBD_CtlSendData>
      break;
 800abe4:	e004      	b.n	800abf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f88a 	bl	800ad02 <USBD_CtlError>
      break;
 800abee:	bf00      	nop
  }
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	885b      	ldrh	r3, [r3, #2]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d107      	bne.n	800ac1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f940 	bl	800ae98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ac18:	e013      	b.n	800ac42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	885b      	ldrh	r3, [r3, #2]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d10b      	bne.n	800ac3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	889b      	ldrh	r3, [r3, #4]
 800ac26:	0a1b      	lsrs	r3, r3, #8
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f930 	bl	800ae98 <USBD_CtlSendStatus>
}
 800ac38:	e003      	b.n	800ac42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f860 	bl	800ad02 <USBD_CtlError>
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d80b      	bhi.n	800ac7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	885b      	ldrh	r3, [r3, #2]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d10c      	bne.n	800ac84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f910 	bl	800ae98 <USBD_CtlSendStatus>
      }
      break;
 800ac78:	e004      	b.n	800ac84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f840 	bl	800ad02 <USBD_CtlError>
      break;
 800ac82:	e000      	b.n	800ac86 <USBD_ClrFeature+0x3c>
      break;
 800ac84:	bf00      	nop
  }
}
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	781a      	ldrb	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3301      	adds	r3, #1
 800aca8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	781a      	ldrb	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3301      	adds	r3, #1
 800acb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7ff fa41 	bl	800a140 <SWAPBYTE>
 800acbe:	4603      	mov	r3, r0
 800acc0:	461a      	mov	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3301      	adds	r3, #1
 800acca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3301      	adds	r3, #1
 800acd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff fa34 	bl	800a140 <SWAPBYTE>
 800acd8:	4603      	mov	r3, r0
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
 800ace4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f7ff fa27 	bl	800a140 <SWAPBYTE>
 800acf2:	4603      	mov	r3, r0
 800acf4:	461a      	mov	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	80da      	strh	r2, [r3, #6]
}
 800acfa:	bf00      	nop
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad0c:	2180      	movs	r1, #128	; 0x80
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f003 fc7a 	bl	800e608 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad14:	2100      	movs	r1, #0
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f003 fc76 	bl	800e608 <USBD_LL_StallEP>
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d036      	beq.n	800ada8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad3e:	6938      	ldr	r0, [r7, #16]
 800ad40:	f000 f836 	bl	800adb0 <USBD_GetLen>
 800ad44:	4603      	mov	r3, r0
 800ad46:	3301      	adds	r3, #1
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	005b      	lsls	r3, r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	4413      	add	r3, r2
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	7812      	ldrb	r2, [r2, #0]
 800ad5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
 800ad60:	3301      	adds	r3, #1
 800ad62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	4413      	add	r3, r2
 800ad6a:	2203      	movs	r2, #3
 800ad6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	3301      	adds	r3, #1
 800ad72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad74:	e013      	b.n	800ad9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	7812      	ldrb	r2, [r2, #0]
 800ad80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	3301      	adds	r3, #1
 800ad86:	613b      	str	r3, [r7, #16]
    idx++;
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	4413      	add	r3, r2
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e7      	bne.n	800ad76 <USBD_GetString+0x52>
 800ada6:	e000      	b.n	800adaa <USBD_GetString+0x86>
    return;
 800ada8:	bf00      	nop
  }
}
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800adc0:	e005      	b.n	800adce <USBD_GetLen+0x1e>
  {
    len++;
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
 800adc4:	3301      	adds	r3, #1
 800adc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	3301      	adds	r3, #1
 800adcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1f5      	bne.n	800adc2 <USBD_GetLen+0x12>
  }

  return len;
 800add6:	7bfb      	ldrb	r3, [r7, #15]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	2100      	movs	r1, #0
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f003 fc85 	bl	800e71a <USBD_LL_Transmit>

  return USBD_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f003 fc74 	bl	800e71a <USBD_LL_Transmit>

  return USBD_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	2100      	movs	r1, #0
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f003 fc78 	bl	800e75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	2100      	movs	r1, #0
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f003 fc67 	bl	800e75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2204      	movs	r2, #4
 800aea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aea8:	2300      	movs	r3, #0
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2100      	movs	r1, #0
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f003 fc33 	bl	800e71a <USBD_LL_Transmit>

  return USBD_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2205      	movs	r2, #5
 800aeca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aece:	2300      	movs	r3, #0
 800aed0:	2200      	movs	r2, #0
 800aed2:	2100      	movs	r1, #0
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f003 fc41 	bl	800e75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	4613      	mov	r3, r2
 800aef0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aefa:	4b1f      	ldr	r3, [pc, #124]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800aefc:	7a5b      	ldrb	r3, [r3, #9]
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	d131      	bne.n	800af68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af04:	4b1c      	ldr	r3, [pc, #112]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af06:	7a5b      	ldrb	r3, [r3, #9]
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	4b1a      	ldr	r3, [pc, #104]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af0e:	2100      	movs	r1, #0
 800af10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af12:	4b19      	ldr	r3, [pc, #100]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af14:	7a5b      	ldrb	r3, [r3, #9]
 800af16:	b2db      	uxtb	r3, r3
 800af18:	4a17      	ldr	r2, [pc, #92]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af22:	4b15      	ldr	r3, [pc, #84]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af24:	7a5b      	ldrb	r3, [r3, #9]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	461a      	mov	r2, r3
 800af2a:	4b13      	ldr	r3, [pc, #76]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af2c:	4413      	add	r3, r2
 800af2e:	79fa      	ldrb	r2, [r7, #7]
 800af30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af32:	4b11      	ldr	r3, [pc, #68]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af34:	7a5b      	ldrb	r3, [r3, #9]
 800af36:	b2db      	uxtb	r3, r3
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	b2d1      	uxtb	r1, r2
 800af3c:	4a0e      	ldr	r2, [pc, #56]	; (800af78 <FATFS_LinkDriverEx+0x94>)
 800af3e:	7251      	strb	r1, [r2, #9]
 800af40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af42:	7dbb      	ldrb	r3, [r7, #22]
 800af44:	3330      	adds	r3, #48	; 0x30
 800af46:	b2da      	uxtb	r2, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	3301      	adds	r3, #1
 800af50:	223a      	movs	r2, #58	; 0x3a
 800af52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	3302      	adds	r3, #2
 800af58:	222f      	movs	r2, #47	; 0x2f
 800af5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	3303      	adds	r3, #3
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	2000088c 	.word	0x2000088c

0800af7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800af86:	2200      	movs	r2, #0
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff ffaa 	bl	800aee4 <FATFS_LinkDriverEx>
 800af90:	4603      	mov	r3, r0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <__NVIC_SetPriority>:
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afac:	2b00      	cmp	r3, #0
 800afae:	db0a      	blt.n	800afc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	490c      	ldr	r1, [pc, #48]	; (800afe8 <__NVIC_SetPriority+0x4c>)
 800afb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afba:	0112      	lsls	r2, r2, #4
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	440b      	add	r3, r1
 800afc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800afc4:	e00a      	b.n	800afdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4908      	ldr	r1, [pc, #32]	; (800afec <__NVIC_SetPriority+0x50>)
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	f003 030f 	and.w	r3, r3, #15
 800afd2:	3b04      	subs	r3, #4
 800afd4:	0112      	lsls	r2, r2, #4
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	440b      	add	r3, r1
 800afda:	761a      	strb	r2, [r3, #24]
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	e000e100 	.word	0xe000e100
 800afec:	e000ed00 	.word	0xe000ed00

0800aff0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <SysTick_Handler+0x1c>)
 800aff6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aff8:	f001 feb2 	bl	800cd60 <xTaskGetSchedulerState>
 800affc:	4603      	mov	r3, r0
 800affe:	2b01      	cmp	r3, #1
 800b000:	d001      	beq.n	800b006 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b002:	f002 fc99 	bl	800d938 <xPortSysTickHandler>
  }
}
 800b006:	bf00      	nop
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	e000e010 	.word	0xe000e010

0800b010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b014:	2100      	movs	r1, #0
 800b016:	f06f 0004 	mvn.w	r0, #4
 800b01a:	f7ff ffbf 	bl	800af9c <__NVIC_SetPriority>
#endif
}
 800b01e:	bf00      	nop
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b02a:	f3ef 8305 	mrs	r3, IPSR
 800b02e:	603b      	str	r3, [r7, #0]
  return(result);
 800b030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b036:	f06f 0305 	mvn.w	r3, #5
 800b03a:	607b      	str	r3, [r7, #4]
 800b03c:	e00c      	b.n	800b058 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b03e:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <osKernelInitialize+0x44>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d105      	bne.n	800b052 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b046:	4b08      	ldr	r3, [pc, #32]	; (800b068 <osKernelInitialize+0x44>)
 800b048:	2201      	movs	r2, #1
 800b04a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	607b      	str	r3, [r7, #4]
 800b050:	e002      	b.n	800b058 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b052:	f04f 33ff 	mov.w	r3, #4294967295
 800b056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b058:	687b      	ldr	r3, [r7, #4]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	20000898 	.word	0x20000898

0800b06c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b072:	f3ef 8305 	mrs	r3, IPSR
 800b076:	603b      	str	r3, [r7, #0]
  return(result);
 800b078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b07e:	f06f 0305 	mvn.w	r3, #5
 800b082:	607b      	str	r3, [r7, #4]
 800b084:	e010      	b.n	800b0a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b086:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <osKernelStart+0x48>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d109      	bne.n	800b0a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b08e:	f7ff ffbf 	bl	800b010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b092:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <osKernelStart+0x48>)
 800b094:	2202      	movs	r2, #2
 800b096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b098:	f001 fa1a 	bl	800c4d0 <vTaskStartScheduler>
      stat = osOK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	607b      	str	r3, [r7, #4]
 800b0a0:	e002      	b.n	800b0a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0a8:	687b      	ldr	r3, [r7, #4]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000898 	.word	0x20000898

0800b0b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08e      	sub	sp, #56	; 0x38
 800b0bc:	af04      	add	r7, sp, #16
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0c8:	f3ef 8305 	mrs	r3, IPSR
 800b0cc:	617b      	str	r3, [r7, #20]
  return(result);
 800b0ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d17f      	bne.n	800b1d4 <osThreadNew+0x11c>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d07c      	beq.n	800b1d4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b0da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0de:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b0e0:	2318      	movs	r3, #24
 800b0e2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d045      	beq.n	800b180 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <osThreadNew+0x4a>
        name = attr->name;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d008      	beq.n	800b128 <osThreadNew+0x70>
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	2b38      	cmp	r3, #56	; 0x38
 800b11a:	d805      	bhi.n	800b128 <osThreadNew+0x70>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <osThreadNew+0x74>
        return (NULL);
 800b128:	2300      	movs	r3, #0
 800b12a:	e054      	b.n	800b1d6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	089b      	lsrs	r3, r3, #2
 800b13a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00e      	beq.n	800b162 <osThreadNew+0xaa>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	2b6b      	cmp	r3, #107	; 0x6b
 800b14a:	d90a      	bls.n	800b162 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b150:	2b00      	cmp	r3, #0
 800b152:	d006      	beq.n	800b162 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <osThreadNew+0xaa>
        mem = 1;
 800b15c:	2301      	movs	r3, #1
 800b15e:	61bb      	str	r3, [r7, #24]
 800b160:	e010      	b.n	800b184 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10c      	bne.n	800b184 <osThreadNew+0xcc>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d108      	bne.n	800b184 <osThreadNew+0xcc>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d104      	bne.n	800b184 <osThreadNew+0xcc>
          mem = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	e001      	b.n	800b184 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d110      	bne.n	800b1ac <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b192:	9202      	str	r2, [sp, #8]
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	6a3a      	ldr	r2, [r7, #32]
 800b19e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 feb9 	bl	800bf18 <xTaskCreateStatic>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	613b      	str	r3, [r7, #16]
 800b1aa:	e013      	b.n	800b1d4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d110      	bne.n	800b1d4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	f107 0310 	add.w	r3, r7, #16
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f000 ff04 	bl	800bfd2 <xTaskCreate>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d001      	beq.n	800b1d4 <osThreadNew+0x11c>
            hTask = NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1d4:	693b      	ldr	r3, [r7, #16]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3728      	adds	r7, #40	; 0x28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1e6:	f3ef 8305 	mrs	r3, IPSR
 800b1ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <osDelay+0x1c>
    stat = osErrorISR;
 800b1f2:	f06f 0305 	mvn.w	r3, #5
 800b1f6:	60fb      	str	r3, [r7, #12]
 800b1f8:	e007      	b.n	800b20a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <osDelay+0x2c>
      vTaskDelay(ticks);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 f829 	bl	800c25c <vTaskDelay>
    }
  }

  return (stat);
 800b20a:	68fb      	ldr	r3, [r7, #12]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b214:	b580      	push	{r7, lr}
 800b216:	b08a      	sub	sp, #40	; 0x28
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b220:	2300      	movs	r3, #0
 800b222:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b224:	f3ef 8305 	mrs	r3, IPSR
 800b228:	613b      	str	r3, [r7, #16]
  return(result);
 800b22a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d15f      	bne.n	800b2f0 <osMessageQueueNew+0xdc>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d05c      	beq.n	800b2f0 <osMessageQueueNew+0xdc>
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d059      	beq.n	800b2f0 <osMessageQueueNew+0xdc>
    mem = -1;
 800b23c:	f04f 33ff 	mov.w	r3, #4294967295
 800b240:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d029      	beq.n	800b29c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d012      	beq.n	800b276 <osMessageQueueNew+0x62>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	2b4f      	cmp	r3, #79	; 0x4f
 800b256:	d90e      	bls.n	800b276 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00a      	beq.n	800b276 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	695a      	ldr	r2, [r3, #20]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	68b9      	ldr	r1, [r7, #8]
 800b268:	fb01 f303 	mul.w	r3, r1, r3
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d302      	bcc.n	800b276 <osMessageQueueNew+0x62>
        mem = 1;
 800b270:	2301      	movs	r3, #1
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	e014      	b.n	800b2a0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d110      	bne.n	800b2a0 <osMessageQueueNew+0x8c>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10c      	bne.n	800b2a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d108      	bne.n	800b2a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d104      	bne.n	800b2a0 <osMessageQueueNew+0x8c>
          mem = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	61bb      	str	r3, [r7, #24]
 800b29a:	e001      	b.n	800b2a0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d10b      	bne.n	800b2be <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691a      	ldr	r2, [r3, #16]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	9100      	str	r1, [sp, #0]
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 f971 	bl	800b59c <xQueueGenericCreateStatic>
 800b2ba:	61f8      	str	r0, [r7, #28]
 800b2bc:	e008      	b.n	800b2d0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d105      	bne.n	800b2d0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f000 f9df 	bl	800b68c <xQueueGenericCreate>
 800b2ce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00c      	beq.n	800b2f0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	617b      	str	r3, [r7, #20]
 800b2e2:	e001      	b.n	800b2e8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b2e8:	6979      	ldr	r1, [r7, #20]
 800b2ea:	69f8      	ldr	r0, [r7, #28]
 800b2ec:	f000 fdb6 	bl	800be5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
	...

0800b2fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4a07      	ldr	r2, [pc, #28]	; (800b328 <vApplicationGetIdleTaskMemory+0x2c>)
 800b30c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	4a06      	ldr	r2, [pc, #24]	; (800b32c <vApplicationGetIdleTaskMemory+0x30>)
 800b312:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b31a:	601a      	str	r2, [r3, #0]
}
 800b31c:	bf00      	nop
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	2000089c 	.word	0x2000089c
 800b32c:	20000908 	.word	0x20000908

0800b330 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4a07      	ldr	r2, [pc, #28]	; (800b35c <vApplicationGetTimerTaskMemory+0x2c>)
 800b340:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	4a06      	ldr	r2, [pc, #24]	; (800b360 <vApplicationGetTimerTaskMemory+0x30>)
 800b346:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b34e:	601a      	str	r2, [r3, #0]
}
 800b350:	bf00      	nop
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	20000d08 	.word	0x20000d08
 800b360:	20000d74 	.word	0x20000d74

0800b364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f103 0208 	add.w	r2, r3, #8
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f04f 32ff 	mov.w	r2, #4294967295
 800b37c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f103 0208 	add.w	r2, r3, #8
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f103 0208 	add.w	r2, r3, #8
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3b2:	bf00      	nop
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b085      	sub	sp, #20
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	601a      	str	r2, [r3, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41c:	d103      	bne.n	800b426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e00c      	b.n	800b440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3308      	adds	r3, #8
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	e002      	b.n	800b434 <vListInsert+0x2e>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d2f6      	bcs.n	800b42e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	601a      	str	r2, [r3, #0]
}
 800b46c:	bf00      	nop
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6892      	ldr	r2, [r2, #8]
 800b48e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6852      	ldr	r2, [r2, #4]
 800b498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d103      	bne.n	800b4ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	1e5a      	subs	r2, r3, #1
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4f6:	f002 f98d 	bl	800d814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b502:	68f9      	ldr	r1, [r7, #12]
 800b504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b506:	fb01 f303 	mul.w	r3, r1, r3
 800b50a:	441a      	add	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b526:	3b01      	subs	r3, #1
 800b528:	68f9      	ldr	r1, [r7, #12]
 800b52a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b52c:	fb01 f303 	mul.w	r3, r1, r3
 800b530:	441a      	add	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	22ff      	movs	r2, #255	; 0xff
 800b53a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	22ff      	movs	r2, #255	; 0xff
 800b542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d114      	bne.n	800b576 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01a      	beq.n	800b58a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3310      	adds	r3, #16
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 fa43 	bl	800c9e4 <xTaskRemoveFromEventList>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d012      	beq.n	800b58a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b564:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <xQueueGenericReset+0xcc>)
 800b566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	e009      	b.n	800b58a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3310      	adds	r3, #16
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fef2 	bl	800b364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3324      	adds	r3, #36	; 0x24
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff feed 	bl	800b364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b58a:	f002 f973 	bl	800d874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b58e:	2301      	movs	r3, #1
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08e      	sub	sp, #56	; 0x38
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <xQueueGenericCreateStatic+0x52>
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <xQueueGenericCreateStatic+0x56>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <xQueueGenericCreateStatic+0x58>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10a      	bne.n	800b60e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	623b      	str	r3, [r7, #32]
}
 800b60a:	bf00      	nop
 800b60c:	e7fe      	b.n	800b60c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d102      	bne.n	800b61a <xQueueGenericCreateStatic+0x7e>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <xQueueGenericCreateStatic+0x82>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e000      	b.n	800b620 <xQueueGenericCreateStatic+0x84>
 800b61e:	2300      	movs	r3, #0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10a      	bne.n	800b63a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	61fb      	str	r3, [r7, #28]
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b63a:	2350      	movs	r3, #80	; 0x50
 800b63c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b50      	cmp	r3, #80	; 0x50
 800b642:	d00a      	beq.n	800b65a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	61bb      	str	r3, [r7, #24]
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b65a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00d      	beq.n	800b682 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b66e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	4613      	mov	r3, r2
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f83f 	bl	800b700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b684:	4618      	mov	r0, r3
 800b686:	3730      	adds	r7, #48	; 0x30
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08a      	sub	sp, #40	; 0x28
 800b690:	af02      	add	r7, sp, #8
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	4613      	mov	r3, r2
 800b698:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	613b      	str	r3, [r7, #16]
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	fb02 f303 	mul.w	r3, r2, r3
 800b6be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	3350      	adds	r3, #80	; 0x50
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f002 f9c7 	bl	800da58 <pvPortMalloc>
 800b6ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d011      	beq.n	800b6f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	3350      	adds	r3, #80	; 0x50
 800b6da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6e4:	79fa      	ldrb	r2, [r7, #7]
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	68b9      	ldr	r1, [r7, #8]
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 f805 	bl	800b700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
	}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3720      	adds	r7, #32
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
 800b70c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d103      	bne.n	800b71c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	e002      	b.n	800b722 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b72e:	2101      	movs	r1, #1
 800b730:	69b8      	ldr	r0, [r7, #24]
 800b732:	f7ff fecb 	bl	800b4cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	78fa      	ldrb	r2, [r7, #3]
 800b73a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08e      	sub	sp, #56	; 0x38
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b756:	2300      	movs	r3, #0
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <xQueueGenericSend+0x32>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d103      	bne.n	800b788 <xQueueGenericSend+0x40>
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <xQueueGenericSend+0x44>
 800b788:	2301      	movs	r3, #1
 800b78a:	e000      	b.n	800b78e <xQueueGenericSend+0x46>
 800b78c:	2300      	movs	r3, #0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <xQueueGenericSend+0x60>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d103      	bne.n	800b7b6 <xQueueGenericSend+0x6e>
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d101      	bne.n	800b7ba <xQueueGenericSend+0x72>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e000      	b.n	800b7bc <xQueueGenericSend+0x74>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10a      	bne.n	800b7d6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	623b      	str	r3, [r7, #32]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7d6:	f001 fac3 	bl	800cd60 <xTaskGetSchedulerState>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <xQueueGenericSend+0x9e>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <xQueueGenericSend+0xa2>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <xQueueGenericSend+0xa4>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <xQueueGenericSend+0xbe>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	61fb      	str	r3, [r7, #28]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b806:	f002 f805 	bl	800d814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b812:	429a      	cmp	r2, r3
 800b814:	d302      	bcc.n	800b81c <xQueueGenericSend+0xd4>
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d129      	bne.n	800b870 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b822:	f000 fa0b 	bl	800bc3c <prvCopyDataToQueue>
 800b826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d010      	beq.n	800b852 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	3324      	adds	r3, #36	; 0x24
 800b834:	4618      	mov	r0, r3
 800b836:	f001 f8d5 	bl	800c9e4 <xTaskRemoveFromEventList>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d013      	beq.n	800b868 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b840:	4b3f      	ldr	r3, [pc, #252]	; (800b940 <xQueueGenericSend+0x1f8>)
 800b842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	e00a      	b.n	800b868 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d007      	beq.n	800b868 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b858:	4b39      	ldr	r3, [pc, #228]	; (800b940 <xQueueGenericSend+0x1f8>)
 800b85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b868:	f002 f804 	bl	800d874 <vPortExitCritical>
				return pdPASS;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e063      	b.n	800b938 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b876:	f001 fffd 	bl	800d874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e05c      	b.n	800b938 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b880:	2b00      	cmp	r3, #0
 800b882:	d106      	bne.n	800b892 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b884:	f107 0314 	add.w	r3, r7, #20
 800b888:	4618      	mov	r0, r3
 800b88a:	f001 f90f 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b88e:	2301      	movs	r3, #1
 800b890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b892:	f001 ffef 	bl	800d874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b896:	f000 fe81 	bl	800c59c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b89a:	f001 ffbb 	bl	800d814 <vPortEnterCritical>
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8a4:	b25b      	sxtb	r3, r3
 800b8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8aa:	d103      	bne.n	800b8b4 <xQueueGenericSend+0x16c>
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8ba:	b25b      	sxtb	r3, r3
 800b8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c0:	d103      	bne.n	800b8ca <xQueueGenericSend+0x182>
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8ca:	f001 ffd3 	bl	800d874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8ce:	1d3a      	adds	r2, r7, #4
 800b8d0:	f107 0314 	add.w	r3, r7, #20
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f001 f8fe 	bl	800cad8 <xTaskCheckForTimeOut>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d124      	bne.n	800b92c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e4:	f000 faa2 	bl	800be2c <prvIsQueueFull>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d018      	beq.n	800b920 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	3310      	adds	r3, #16
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 f824 	bl	800c944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8fe:	f000 fa2d 	bl	800bd5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b902:	f000 fe59 	bl	800c5b8 <xTaskResumeAll>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f47f af7c 	bne.w	800b806 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b90e:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <xQueueGenericSend+0x1f8>)
 800b910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	e772      	b.n	800b806 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b922:	f000 fa1b 	bl	800bd5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b926:	f000 fe47 	bl	800c5b8 <xTaskResumeAll>
 800b92a:	e76c      	b.n	800b806 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b92c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b92e:	f000 fa15 	bl	800bd5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b932:	f000 fe41 	bl	800c5b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3738      	adds	r7, #56	; 0x38
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b090      	sub	sp, #64	; 0x40
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d103      	bne.n	800b980 <xQueueGenericSendFromISR+0x3c>
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <xQueueGenericSendFromISR+0x40>
 800b980:	2301      	movs	r3, #1
 800b982:	e000      	b.n	800b986 <xQueueGenericSendFromISR+0x42>
 800b984:	2300      	movs	r3, #0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10a      	bne.n	800b9a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d103      	bne.n	800b9ae <xQueueGenericSendFromISR+0x6a>
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d101      	bne.n	800b9b2 <xQueueGenericSendFromISR+0x6e>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <xQueueGenericSendFromISR+0x70>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10a      	bne.n	800b9ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	623b      	str	r3, [r7, #32]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9ce:	f002 f803 	bl	800d9d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9d2:	f3ef 8211 	mrs	r2, BASEPRI
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	61fa      	str	r2, [r7, #28]
 800b9e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d302      	bcc.n	800ba00 <xQueueGenericSendFromISR+0xbc>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d12f      	bne.n	800ba60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba16:	f000 f911 	bl	800bc3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba22:	d112      	bne.n	800ba4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d016      	beq.n	800ba5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2e:	3324      	adds	r3, #36	; 0x24
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 ffd7 	bl	800c9e4 <xTaskRemoveFromEventList>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00e      	beq.n	800ba5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	e007      	b.n	800ba5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba4e:	3301      	adds	r3, #1
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	b25a      	sxtb	r2, r3
 800ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba5e:	e001      	b.n	800ba64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba60:	2300      	movs	r3, #0
 800ba62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3740      	adds	r7, #64	; 0x40
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
	...

0800ba7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08c      	sub	sp, #48	; 0x30
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10a      	bne.n	800baac <xQueueReceive+0x30>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	623b      	str	r3, [r7, #32]
}
 800baa8:	bf00      	nop
 800baaa:	e7fe      	b.n	800baaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d103      	bne.n	800baba <xQueueReceive+0x3e>
 800bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <xQueueReceive+0x42>
 800baba:	2301      	movs	r3, #1
 800babc:	e000      	b.n	800bac0 <xQueueReceive+0x44>
 800babe:	2300      	movs	r3, #0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <xQueueReceive+0x5e>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	61fb      	str	r3, [r7, #28]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bada:	f001 f941 	bl	800cd60 <xTaskGetSchedulerState>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <xQueueReceive+0x6e>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <xQueueReceive+0x72>
 800baea:	2301      	movs	r3, #1
 800baec:	e000      	b.n	800baf0 <xQueueReceive+0x74>
 800baee:	2300      	movs	r3, #0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <xQueueReceive+0x8e>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	61bb      	str	r3, [r7, #24]
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb0a:	f001 fe83 	bl	800d814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d01f      	beq.n	800bb5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb1e:	f000 f8f7 	bl	800bd10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	1e5a      	subs	r2, r3, #1
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00f      	beq.n	800bb52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	3310      	adds	r3, #16
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 ff54 	bl	800c9e4 <xTaskRemoveFromEventList>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d007      	beq.n	800bb52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb42:	4b3d      	ldr	r3, [pc, #244]	; (800bc38 <xQueueReceive+0x1bc>)
 800bb44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb52:	f001 fe8f 	bl	800d874 <vPortExitCritical>
				return pdPASS;
 800bb56:	2301      	movs	r3, #1
 800bb58:	e069      	b.n	800bc2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d103      	bne.n	800bb68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb60:	f001 fe88 	bl	800d874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb64:	2300      	movs	r3, #0
 800bb66:	e062      	b.n	800bc2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d106      	bne.n	800bb7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb6e:	f107 0310 	add.w	r3, r7, #16
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 ff9a 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb7c:	f001 fe7a 	bl	800d874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb80:	f000 fd0c 	bl	800c59c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb84:	f001 fe46 	bl	800d814 <vPortEnterCritical>
 800bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb8e:	b25b      	sxtb	r3, r3
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb94:	d103      	bne.n	800bb9e <xQueueReceive+0x122>
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba4:	b25b      	sxtb	r3, r3
 800bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbaa:	d103      	bne.n	800bbb4 <xQueueReceive+0x138>
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb4:	f001 fe5e 	bl	800d874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbb8:	1d3a      	adds	r2, r7, #4
 800bbba:	f107 0310 	add.w	r3, r7, #16
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 ff89 	bl	800cad8 <xTaskCheckForTimeOut>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d123      	bne.n	800bc14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbce:	f000 f917 	bl	800be00 <prvIsQueueEmpty>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d017      	beq.n	800bc08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	3324      	adds	r3, #36	; 0x24
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 feaf 	bl	800c944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbe8:	f000 f8b8 	bl	800bd5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbec:	f000 fce4 	bl	800c5b8 <xTaskResumeAll>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d189      	bne.n	800bb0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbf6:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <xQueueReceive+0x1bc>)
 800bbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	e780      	b.n	800bb0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0a:	f000 f8a7 	bl	800bd5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc0e:	f000 fcd3 	bl	800c5b8 <xTaskResumeAll>
 800bc12:	e77a      	b.n	800bb0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc16:	f000 f8a1 	bl	800bd5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc1a:	f000 fccd 	bl	800c5b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc20:	f000 f8ee 	bl	800be00 <prvIsQueueEmpty>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f43f af6f 	beq.w	800bb0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3730      	adds	r7, #48	; 0x30
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10d      	bne.n	800bc76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d14d      	bne.n	800bcfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 f898 	bl	800cd9c <xTaskPriorityDisinherit>
 800bc6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	609a      	str	r2, [r3, #8]
 800bc74:	e043      	b.n	800bcfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d119      	bne.n	800bcb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6858      	ldr	r0, [r3, #4]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	461a      	mov	r2, r3
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	f002 fe1a 	bl	800e8c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc94:	441a      	add	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d32b      	bcc.n	800bcfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	605a      	str	r2, [r3, #4]
 800bcae:	e026      	b.n	800bcfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	68d8      	ldr	r0, [r3, #12]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb8:	461a      	mov	r2, r3
 800bcba:	68b9      	ldr	r1, [r7, #8]
 800bcbc:	f002 fe00 	bl	800e8c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68da      	ldr	r2, [r3, #12]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc8:	425b      	negs	r3, r3
 800bcca:	441a      	add	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	68da      	ldr	r2, [r3, #12]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d207      	bcs.n	800bcec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	689a      	ldr	r2, [r3, #8]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce4:	425b      	negs	r3, r3
 800bce6:	441a      	add	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d105      	bne.n	800bcfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	1c5a      	adds	r2, r3, #1
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bd06:	697b      	ldr	r3, [r7, #20]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d018      	beq.n	800bd54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68da      	ldr	r2, [r3, #12]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	441a      	add	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	68da      	ldr	r2, [r3, #12]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d303      	bcc.n	800bd44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68d9      	ldr	r1, [r3, #12]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	6838      	ldr	r0, [r7, #0]
 800bd50:	f002 fdb6 	bl	800e8c0 <memcpy>
	}
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd64:	f001 fd56 	bl	800d814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd70:	e011      	b.n	800bd96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d012      	beq.n	800bda0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3324      	adds	r3, #36	; 0x24
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 fe30 	bl	800c9e4 <xTaskRemoveFromEventList>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd8a:	f000 ff07 	bl	800cb9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dce9      	bgt.n	800bd72 <prvUnlockQueue+0x16>
 800bd9e:	e000      	b.n	800bda2 <prvUnlockQueue+0x46>
					break;
 800bda0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	22ff      	movs	r2, #255	; 0xff
 800bda6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bdaa:	f001 fd63 	bl	800d874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bdae:	f001 fd31 	bl	800d814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdba:	e011      	b.n	800bde0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d012      	beq.n	800bdea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3310      	adds	r3, #16
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 fe0b 	bl	800c9e4 <xTaskRemoveFromEventList>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bdd4:	f000 fee2 	bl	800cb9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bde0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dce9      	bgt.n	800bdbc <prvUnlockQueue+0x60>
 800bde8:	e000      	b.n	800bdec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bdea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	22ff      	movs	r2, #255	; 0xff
 800bdf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bdf4:	f001 fd3e 	bl	800d874 <vPortExitCritical>
}
 800bdf8:	bf00      	nop
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be08:	f001 fd04 	bl	800d814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be10:	2b00      	cmp	r3, #0
 800be12:	d102      	bne.n	800be1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	e001      	b.n	800be1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be1e:	f001 fd29 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800be22:	68fb      	ldr	r3, [r7, #12]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be34:	f001 fcee 	bl	800d814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be40:	429a      	cmp	r2, r3
 800be42:	d102      	bne.n	800be4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be44:	2301      	movs	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	e001      	b.n	800be4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be4e:	f001 fd11 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800be52:	68fb      	ldr	r3, [r7, #12]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
 800be6a:	e014      	b.n	800be96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800be6c:	4a0f      	ldr	r2, [pc, #60]	; (800beac <vQueueAddToRegistry+0x50>)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10b      	bne.n	800be90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800be78:	490c      	ldr	r1, [pc, #48]	; (800beac <vQueueAddToRegistry+0x50>)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800be82:	4a0a      	ldr	r2, [pc, #40]	; (800beac <vQueueAddToRegistry+0x50>)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	4413      	add	r3, r2
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800be8e:	e006      	b.n	800be9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
 800be94:	60fb      	str	r3, [r7, #12]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b07      	cmp	r3, #7
 800be9a:	d9e7      	bls.n	800be6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	20001574 	.word	0x20001574

0800beb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bec0:	f001 fca8 	bl	800d814 <vPortEnterCritical>
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beca:	b25b      	sxtb	r3, r3
 800becc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed0:	d103      	bne.n	800beda <vQueueWaitForMessageRestricted+0x2a>
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bee0:	b25b      	sxtb	r3, r3
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d103      	bne.n	800bef0 <vQueueWaitForMessageRestricted+0x40>
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bef0:	f001 fcc0 	bl	800d874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d106      	bne.n	800bf0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	3324      	adds	r3, #36	; 0x24
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	68b9      	ldr	r1, [r7, #8]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 fd41 	bl	800c98c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf0a:	6978      	ldr	r0, [r7, #20]
 800bf0c:	f7ff ff26 	bl	800bd5c <prvUnlockQueue>
	}
 800bf10:	bf00      	nop
 800bf12:	3718      	adds	r7, #24
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08e      	sub	sp, #56	; 0x38
 800bf1c:	af04      	add	r7, sp, #16
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10a      	bne.n	800bf42 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	623b      	str	r3, [r7, #32]
}
 800bf3e:	bf00      	nop
 800bf40:	e7fe      	b.n	800bf40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10a      	bne.n	800bf5e <xTaskCreateStatic+0x46>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	61fb      	str	r3, [r7, #28]
}
 800bf5a:	bf00      	nop
 800bf5c:	e7fe      	b.n	800bf5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf5e:	236c      	movs	r3, #108	; 0x6c
 800bf60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2b6c      	cmp	r3, #108	; 0x6c
 800bf66:	d00a      	beq.n	800bf7e <xTaskCreateStatic+0x66>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	61bb      	str	r3, [r7, #24]
}
 800bf7a:	bf00      	nop
 800bf7c:	e7fe      	b.n	800bf7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01e      	beq.n	800bfc4 <xTaskCreateStatic+0xac>
 800bf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d01b      	beq.n	800bfc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	2202      	movs	r2, #2
 800bf9a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9303      	str	r3, [sp, #12]
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	9302      	str	r3, [sp, #8]
 800bfa6:	f107 0314 	add.w	r3, r7, #20
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	68b9      	ldr	r1, [r7, #8]
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f850 	bl	800c05c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfbe:	f000 f8dd 	bl	800c17c <prvAddNewTaskToReadyList>
 800bfc2:	e001      	b.n	800bfc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bfc8:	697b      	ldr	r3, [r7, #20]
	}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3728      	adds	r7, #40	; 0x28
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b08c      	sub	sp, #48	; 0x30
 800bfd6:	af04      	add	r7, sp, #16
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	603b      	str	r3, [r7, #0]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bfe2:	88fb      	ldrh	r3, [r7, #6]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f001 fd36 	bl	800da58 <pvPortMalloc>
 800bfec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00e      	beq.n	800c012 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bff4:	206c      	movs	r0, #108	; 0x6c
 800bff6:	f001 fd2f 	bl	800da58 <pvPortMalloc>
 800bffa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d003      	beq.n	800c00a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	631a      	str	r2, [r3, #48]	; 0x30
 800c008:	e005      	b.n	800c016 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c00a:	6978      	ldr	r0, [r7, #20]
 800c00c:	f001 fdf0 	bl	800dbf0 <vPortFree>
 800c010:	e001      	b.n	800c016 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c012:	2300      	movs	r3, #0
 800c014:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d017      	beq.n	800c04c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c024:	88fa      	ldrh	r2, [r7, #6]
 800c026:	2300      	movs	r3, #0
 800c028:	9303      	str	r3, [sp, #12]
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	9302      	str	r3, [sp, #8]
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	9301      	str	r3, [sp, #4]
 800c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68b9      	ldr	r1, [r7, #8]
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f000 f80e 	bl	800c05c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c040:	69f8      	ldr	r0, [r7, #28]
 800c042:	f000 f89b 	bl	800c17c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c046:	2301      	movs	r3, #1
 800c048:	61bb      	str	r3, [r7, #24]
 800c04a:	e002      	b.n	800c052 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c04c:	f04f 33ff 	mov.w	r3, #4294967295
 800c050:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c052:	69bb      	ldr	r3, [r7, #24]
	}
 800c054:	4618      	mov	r0, r3
 800c056:	3720      	adds	r7, #32
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	461a      	mov	r2, r3
 800c074:	21a5      	movs	r1, #165	; 0xa5
 800c076:	f002 fc31 	bl	800e8dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c084:	3b01      	subs	r3, #1
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4413      	add	r3, r2
 800c08a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	f023 0307 	bic.w	r3, r3, #7
 800c092:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00a      	beq.n	800c0b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	617b      	str	r3, [r7, #20]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d01f      	beq.n	800c0fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	61fb      	str	r3, [r7, #28]
 800c0be:	e012      	b.n	800c0e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	7819      	ldrb	r1, [r3, #0]
 800c0c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	3334      	adds	r3, #52	; 0x34
 800c0d0:	460a      	mov	r2, r1
 800c0d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	4413      	add	r3, r2
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d006      	beq.n	800c0ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	61fb      	str	r3, [r7, #28]
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	2b1d      	cmp	r3, #29
 800c0ea:	d9e9      	bls.n	800c0c0 <prvInitialiseNewTask+0x64>
 800c0ec:	e000      	b.n	800c0f0 <prvInitialiseNewTask+0x94>
			{
				break;
 800c0ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c0f8:	e003      	b.n	800c102 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	2b37      	cmp	r3, #55	; 0x37
 800c106:	d901      	bls.n	800c10c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c108:	2337      	movs	r3, #55	; 0x37
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c110:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c116:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	2200      	movs	r2, #0
 800c11c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	3304      	adds	r3, #4
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff f93e 	bl	800b3a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	3318      	adds	r3, #24
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff f939 	bl	800b3a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c136:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c146:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	2200      	movs	r2, #0
 800c14c:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	68f9      	ldr	r1, [r7, #12]
 800c15a:	69b8      	ldr	r0, [r7, #24]
 800c15c:	f001 fa2e 	bl	800d5bc <pxPortInitialiseStack>
 800c160:	4602      	mov	r2, r0
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c172:	bf00      	nop
 800c174:	3720      	adds	r7, #32
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
	...

0800c17c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c184:	f001 fb46 	bl	800d814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c188:	4b2d      	ldr	r3, [pc, #180]	; (800c240 <prvAddNewTaskToReadyList+0xc4>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3301      	adds	r3, #1
 800c18e:	4a2c      	ldr	r2, [pc, #176]	; (800c240 <prvAddNewTaskToReadyList+0xc4>)
 800c190:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c192:	4b2c      	ldr	r3, [pc, #176]	; (800c244 <prvAddNewTaskToReadyList+0xc8>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d109      	bne.n	800c1ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c19a:	4a2a      	ldr	r2, [pc, #168]	; (800c244 <prvAddNewTaskToReadyList+0xc8>)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1a0:	4b27      	ldr	r3, [pc, #156]	; (800c240 <prvAddNewTaskToReadyList+0xc4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d110      	bne.n	800c1ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1a8:	f000 fd1c 	bl	800cbe4 <prvInitialiseTaskLists>
 800c1ac:	e00d      	b.n	800c1ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1ae:	4b26      	ldr	r3, [pc, #152]	; (800c248 <prvAddNewTaskToReadyList+0xcc>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d109      	bne.n	800c1ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1b6:	4b23      	ldr	r3, [pc, #140]	; (800c244 <prvAddNewTaskToReadyList+0xc8>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d802      	bhi.n	800c1ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1c4:	4a1f      	ldr	r2, [pc, #124]	; (800c244 <prvAddNewTaskToReadyList+0xc8>)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c1ca:	4b20      	ldr	r3, [pc, #128]	; (800c24c <prvAddNewTaskToReadyList+0xd0>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	4a1e      	ldr	r2, [pc, #120]	; (800c24c <prvAddNewTaskToReadyList+0xd0>)
 800c1d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c1d4:	4b1d      	ldr	r3, [pc, #116]	; (800c24c <prvAddNewTaskToReadyList+0xd0>)
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e0:	4b1b      	ldr	r3, [pc, #108]	; (800c250 <prvAddNewTaskToReadyList+0xd4>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d903      	bls.n	800c1f0 <prvAddNewTaskToReadyList+0x74>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ec:	4a18      	ldr	r2, [pc, #96]	; (800c250 <prvAddNewTaskToReadyList+0xd4>)
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4a15      	ldr	r2, [pc, #84]	; (800c254 <prvAddNewTaskToReadyList+0xd8>)
 800c1fe:	441a      	add	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	3304      	adds	r3, #4
 800c204:	4619      	mov	r1, r3
 800c206:	4610      	mov	r0, r2
 800c208:	f7ff f8d9 	bl	800b3be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c20c:	f001 fb32 	bl	800d874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c210:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <prvAddNewTaskToReadyList+0xcc>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00e      	beq.n	800c236 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c218:	4b0a      	ldr	r3, [pc, #40]	; (800c244 <prvAddNewTaskToReadyList+0xc8>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c222:	429a      	cmp	r2, r3
 800c224:	d207      	bcs.n	800c236 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c226:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvAddNewTaskToReadyList+0xdc>)
 800c228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c236:	bf00      	nop
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20001a88 	.word	0x20001a88
 800c244:	200015b4 	.word	0x200015b4
 800c248:	20001a94 	.word	0x20001a94
 800c24c:	20001aa4 	.word	0x20001aa4
 800c250:	20001a90 	.word	0x20001a90
 800c254:	200015b8 	.word	0x200015b8
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c264:	2300      	movs	r3, #0
 800c266:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d017      	beq.n	800c29e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c26e:	4b13      	ldr	r3, [pc, #76]	; (800c2bc <vTaskDelay+0x60>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <vTaskDelay+0x30>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	60bb      	str	r3, [r7, #8]
}
 800c288:	bf00      	nop
 800c28a:	e7fe      	b.n	800c28a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c28c:	f000 f986 	bl	800c59c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c290:	2100      	movs	r1, #0
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fdf0 	bl	800ce78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c298:	f000 f98e 	bl	800c5b8 <xTaskResumeAll>
 800c29c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d107      	bne.n	800c2b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <vTaskDelay+0x64>)
 800c2a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2b4:	bf00      	nop
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	20001ab0 	.word	0x20001ab0
 800c2c0:	e000ed04 	.word	0xe000ed04

0800c2c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c2cc:	f001 faa2 	bl	800d814 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <vTaskSuspend+0x18>
 800c2d6:	4b30      	ldr	r3, [pc, #192]	; (800c398 <vTaskSuspend+0xd4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	e000      	b.n	800c2de <vTaskSuspend+0x1a>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff f8c7 	bl	800b478 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d004      	beq.n	800c2fc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3318      	adds	r3, #24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff f8be 	bl	800b478 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4826      	ldr	r0, [pc, #152]	; (800c39c <vTaskSuspend+0xd8>)
 800c304:	f7ff f85b 	bl	800b3be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	2b01      	cmp	r3, #1
 800c312:	d103      	bne.n	800c31c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c31c:	f001 faaa 	bl	800d874 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c320:	4b1f      	ldr	r3, [pc, #124]	; (800c3a0 <vTaskSuspend+0xdc>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d005      	beq.n	800c334 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c328:	f001 fa74 	bl	800d814 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c32c:	f000 fcf8 	bl	800cd20 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c330:	f001 faa0 	bl	800d874 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c334:	4b18      	ldr	r3, [pc, #96]	; (800c398 <vTaskSuspend+0xd4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d127      	bne.n	800c38e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800c33e:	4b18      	ldr	r3, [pc, #96]	; (800c3a0 <vTaskSuspend+0xdc>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d017      	beq.n	800c376 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c346:	4b17      	ldr	r3, [pc, #92]	; (800c3a4 <vTaskSuspend+0xe0>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <vTaskSuspend+0xa0>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	60bb      	str	r3, [r7, #8]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800c364:	4b10      	ldr	r3, [pc, #64]	; (800c3a8 <vTaskSuspend+0xe4>)
 800c366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c374:	e00b      	b.n	800c38e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <vTaskSuspend+0xd8>)
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	4b0c      	ldr	r3, [pc, #48]	; (800c3ac <vTaskSuspend+0xe8>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d103      	bne.n	800c38a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <vTaskSuspend+0xd4>)
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
	}
 800c388:	e001      	b.n	800c38e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800c38a:	f000 fa7d 	bl	800c888 <vTaskSwitchContext>
	}
 800c38e:	bf00      	nop
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	200015b4 	.word	0x200015b4
 800c39c:	20001a74 	.word	0x20001a74
 800c3a0:	20001a94 	.word	0x20001a94
 800c3a4:	20001ab0 	.word	0x20001ab0
 800c3a8:	e000ed04 	.word	0xe000ed04
 800c3ac:	20001a88 	.word	0x20001a88

0800c3b0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b087      	sub	sp, #28
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d10a      	bne.n	800c3dc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	60fb      	str	r3, [r7, #12]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	4a0a      	ldr	r2, [pc, #40]	; (800c40c <prvTaskIsTaskSuspended+0x5c>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d10a      	bne.n	800c3fc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ea:	4a09      	ldr	r2, [pc, #36]	; (800c410 <prvTaskIsTaskSuspended+0x60>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d005      	beq.n	800c3fc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3fc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c3fe:	4618      	mov	r0, r3
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	20001a74 	.word	0x20001a74
 800c410:	20001a48 	.word	0x20001a48

0800c414 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10a      	bne.n	800c43c <vTaskResume+0x28>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	60bb      	str	r3, [r7, #8]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c43c:	4b20      	ldr	r3, [pc, #128]	; (800c4c0 <vTaskResume+0xac>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	429a      	cmp	r2, r3
 800c444:	d038      	beq.n	800c4b8 <vTaskResume+0xa4>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d035      	beq.n	800c4b8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c44c:	f001 f9e2 	bl	800d814 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7ff ffad 	bl	800c3b0 <prvTaskIsTaskSuspended>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d02b      	beq.n	800c4b4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	3304      	adds	r3, #4
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff f809 	bl	800b478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46a:	4b16      	ldr	r3, [pc, #88]	; (800c4c4 <vTaskResume+0xb0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d903      	bls.n	800c47a <vTaskResume+0x66>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c476:	4a13      	ldr	r2, [pc, #76]	; (800c4c4 <vTaskResume+0xb0>)
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47e:	4613      	mov	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4a10      	ldr	r2, [pc, #64]	; (800c4c8 <vTaskResume+0xb4>)
 800c488:	441a      	add	r2, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4619      	mov	r1, r3
 800c490:	4610      	mov	r0, r2
 800c492:	f7fe ff94 	bl	800b3be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49a:	4b09      	ldr	r3, [pc, #36]	; (800c4c0 <vTaskResume+0xac>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d307      	bcc.n	800c4b4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c4a4:	4b09      	ldr	r3, [pc, #36]	; (800c4cc <vTaskResume+0xb8>)
 800c4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c4b4:	f001 f9de 	bl	800d874 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4b8:	bf00      	nop
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	200015b4 	.word	0x200015b4
 800c4c4:	20001a90 	.word	0x20001a90
 800c4c8:	200015b8 	.word	0x200015b8
 800c4cc:	e000ed04 	.word	0xe000ed04

0800c4d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08a      	sub	sp, #40	; 0x28
 800c4d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4de:	463a      	mov	r2, r7
 800c4e0:	1d39      	adds	r1, r7, #4
 800c4e2:	f107 0308 	add.w	r3, r7, #8
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe ff08 	bl	800b2fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	9202      	str	r2, [sp, #8]
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	4921      	ldr	r1, [pc, #132]	; (800c584 <vTaskStartScheduler+0xb4>)
 800c500:	4821      	ldr	r0, [pc, #132]	; (800c588 <vTaskStartScheduler+0xb8>)
 800c502:	f7ff fd09 	bl	800bf18 <xTaskCreateStatic>
 800c506:	4603      	mov	r3, r0
 800c508:	4a20      	ldr	r2, [pc, #128]	; (800c58c <vTaskStartScheduler+0xbc>)
 800c50a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c50c:	4b1f      	ldr	r3, [pc, #124]	; (800c58c <vTaskStartScheduler+0xbc>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c514:	2301      	movs	r3, #1
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	e001      	b.n	800c51e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d102      	bne.n	800c52a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c524:	f000 fcfc 	bl	800cf20 <xTimerCreateTimerTask>
 800c528:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d116      	bne.n	800c55e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	613b      	str	r3, [r7, #16]
}
 800c542:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c544:	4b12      	ldr	r3, [pc, #72]	; (800c590 <vTaskStartScheduler+0xc0>)
 800c546:	f04f 32ff 	mov.w	r2, #4294967295
 800c54a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c54c:	4b11      	ldr	r3, [pc, #68]	; (800c594 <vTaskStartScheduler+0xc4>)
 800c54e:	2201      	movs	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c552:	4b11      	ldr	r3, [pc, #68]	; (800c598 <vTaskStartScheduler+0xc8>)
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c558:	f001 f8ba 	bl	800d6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c55c:	e00e      	b.n	800c57c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c564:	d10a      	bne.n	800c57c <vTaskStartScheduler+0xac>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	60fb      	str	r3, [r7, #12]
}
 800c578:	bf00      	nop
 800c57a:	e7fe      	b.n	800c57a <vTaskStartScheduler+0xaa>
}
 800c57c:	bf00      	nop
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	0800f3a0 	.word	0x0800f3a0
 800c588:	0800cbb5 	.word	0x0800cbb5
 800c58c:	20001aac 	.word	0x20001aac
 800c590:	20001aa8 	.word	0x20001aa8
 800c594:	20001a94 	.word	0x20001a94
 800c598:	20001a8c 	.word	0x20001a8c

0800c59c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c5a0:	4b04      	ldr	r3, [pc, #16]	; (800c5b4 <vTaskSuspendAll+0x18>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	4a03      	ldr	r2, [pc, #12]	; (800c5b4 <vTaskSuspendAll+0x18>)
 800c5a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c5aa:	bf00      	nop
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	20001ab0 	.word	0x20001ab0

0800c5b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5c6:	4b42      	ldr	r3, [pc, #264]	; (800c6d0 <xTaskResumeAll+0x118>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10a      	bne.n	800c5e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	603b      	str	r3, [r7, #0]
}
 800c5e0:	bf00      	nop
 800c5e2:	e7fe      	b.n	800c5e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5e4:	f001 f916 	bl	800d814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5e8:	4b39      	ldr	r3, [pc, #228]	; (800c6d0 <xTaskResumeAll+0x118>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	4a38      	ldr	r2, [pc, #224]	; (800c6d0 <xTaskResumeAll+0x118>)
 800c5f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5f2:	4b37      	ldr	r3, [pc, #220]	; (800c6d0 <xTaskResumeAll+0x118>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d162      	bne.n	800c6c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5fa:	4b36      	ldr	r3, [pc, #216]	; (800c6d4 <xTaskResumeAll+0x11c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d05e      	beq.n	800c6c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c602:	e02f      	b.n	800c664 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c604:	4b34      	ldr	r3, [pc, #208]	; (800c6d8 <xTaskResumeAll+0x120>)
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	3318      	adds	r3, #24
 800c610:	4618      	mov	r0, r3
 800c612:	f7fe ff31 	bl	800b478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3304      	adds	r3, #4
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe ff2c 	bl	800b478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c624:	4b2d      	ldr	r3, [pc, #180]	; (800c6dc <xTaskResumeAll+0x124>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d903      	bls.n	800c634 <xTaskResumeAll+0x7c>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c630:	4a2a      	ldr	r2, [pc, #168]	; (800c6dc <xTaskResumeAll+0x124>)
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4a27      	ldr	r2, [pc, #156]	; (800c6e0 <xTaskResumeAll+0x128>)
 800c642:	441a      	add	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3304      	adds	r3, #4
 800c648:	4619      	mov	r1, r3
 800c64a:	4610      	mov	r0, r2
 800c64c:	f7fe feb7 	bl	800b3be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c654:	4b23      	ldr	r3, [pc, #140]	; (800c6e4 <xTaskResumeAll+0x12c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d302      	bcc.n	800c664 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c65e:	4b22      	ldr	r3, [pc, #136]	; (800c6e8 <xTaskResumeAll+0x130>)
 800c660:	2201      	movs	r2, #1
 800c662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c664:	4b1c      	ldr	r3, [pc, #112]	; (800c6d8 <xTaskResumeAll+0x120>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1cb      	bne.n	800c604 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c672:	f000 fb55 	bl	800cd20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c676:	4b1d      	ldr	r3, [pc, #116]	; (800c6ec <xTaskResumeAll+0x134>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d010      	beq.n	800c6a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c682:	f000 f847 	bl	800c714 <xTaskIncrementTick>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c68c:	4b16      	ldr	r3, [pc, #88]	; (800c6e8 <xTaskResumeAll+0x130>)
 800c68e:	2201      	movs	r2, #1
 800c690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	3b01      	subs	r3, #1
 800c696:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1f1      	bne.n	800c682 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <xTaskResumeAll+0x134>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6a4:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <xTaskResumeAll+0x130>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d009      	beq.n	800c6c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6b0:	4b0f      	ldr	r3, [pc, #60]	; (800c6f0 <xTaskResumeAll+0x138>)
 800c6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6c0:	f001 f8d8 	bl	800d874 <vPortExitCritical>

	return xAlreadyYielded;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	20001ab0 	.word	0x20001ab0
 800c6d4:	20001a88 	.word	0x20001a88
 800c6d8:	20001a48 	.word	0x20001a48
 800c6dc:	20001a90 	.word	0x20001a90
 800c6e0:	200015b8 	.word	0x200015b8
 800c6e4:	200015b4 	.word	0x200015b4
 800c6e8:	20001a9c 	.word	0x20001a9c
 800c6ec:	20001a98 	.word	0x20001a98
 800c6f0:	e000ed04 	.word	0xe000ed04

0800c6f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c6fa:	4b05      	ldr	r3, [pc, #20]	; (800c710 <xTaskGetTickCount+0x1c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c700:	687b      	ldr	r3, [r7, #4]
}
 800c702:	4618      	mov	r0, r3
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	20001a8c 	.word	0x20001a8c

0800c714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c71a:	2300      	movs	r3, #0
 800c71c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c71e:	4b4f      	ldr	r3, [pc, #316]	; (800c85c <xTaskIncrementTick+0x148>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	f040 808f 	bne.w	800c846 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c728:	4b4d      	ldr	r3, [pc, #308]	; (800c860 <xTaskIncrementTick+0x14c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3301      	adds	r3, #1
 800c72e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c730:	4a4b      	ldr	r2, [pc, #300]	; (800c860 <xTaskIncrementTick+0x14c>)
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d120      	bne.n	800c77e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c73c:	4b49      	ldr	r3, [pc, #292]	; (800c864 <xTaskIncrementTick+0x150>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <xTaskIncrementTick+0x48>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	603b      	str	r3, [r7, #0]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <xTaskIncrementTick+0x46>
 800c75c:	4b41      	ldr	r3, [pc, #260]	; (800c864 <xTaskIncrementTick+0x150>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60fb      	str	r3, [r7, #12]
 800c762:	4b41      	ldr	r3, [pc, #260]	; (800c868 <xTaskIncrementTick+0x154>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a3f      	ldr	r2, [pc, #252]	; (800c864 <xTaskIncrementTick+0x150>)
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	4a3f      	ldr	r2, [pc, #252]	; (800c868 <xTaskIncrementTick+0x154>)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	4b3e      	ldr	r3, [pc, #248]	; (800c86c <xTaskIncrementTick+0x158>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3301      	adds	r3, #1
 800c776:	4a3d      	ldr	r2, [pc, #244]	; (800c86c <xTaskIncrementTick+0x158>)
 800c778:	6013      	str	r3, [r2, #0]
 800c77a:	f000 fad1 	bl	800cd20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c77e:	4b3c      	ldr	r3, [pc, #240]	; (800c870 <xTaskIncrementTick+0x15c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	429a      	cmp	r2, r3
 800c786:	d349      	bcc.n	800c81c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c788:	4b36      	ldr	r3, [pc, #216]	; (800c864 <xTaskIncrementTick+0x150>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d104      	bne.n	800c79c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c792:	4b37      	ldr	r3, [pc, #220]	; (800c870 <xTaskIncrementTick+0x15c>)
 800c794:	f04f 32ff 	mov.w	r2, #4294967295
 800c798:	601a      	str	r2, [r3, #0]
					break;
 800c79a:	e03f      	b.n	800c81c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c79c:	4b31      	ldr	r3, [pc, #196]	; (800c864 <xTaskIncrementTick+0x150>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d203      	bcs.n	800c7bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7b4:	4a2e      	ldr	r2, [pc, #184]	; (800c870 <xTaskIncrementTick+0x15c>)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7ba:	e02f      	b.n	800c81c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	3304      	adds	r3, #4
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fe fe59 	bl	800b478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d004      	beq.n	800c7d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	3318      	adds	r3, #24
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fe50 	bl	800b478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7dc:	4b25      	ldr	r3, [pc, #148]	; (800c874 <xTaskIncrementTick+0x160>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d903      	bls.n	800c7ec <xTaskIncrementTick+0xd8>
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e8:	4a22      	ldr	r2, [pc, #136]	; (800c874 <xTaskIncrementTick+0x160>)
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	4413      	add	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4a1f      	ldr	r2, [pc, #124]	; (800c878 <xTaskIncrementTick+0x164>)
 800c7fa:	441a      	add	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	3304      	adds	r3, #4
 800c800:	4619      	mov	r1, r3
 800c802:	4610      	mov	r0, r2
 800c804:	f7fe fddb 	bl	800b3be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80c:	4b1b      	ldr	r3, [pc, #108]	; (800c87c <xTaskIncrementTick+0x168>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	429a      	cmp	r2, r3
 800c814:	d3b8      	bcc.n	800c788 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c816:	2301      	movs	r3, #1
 800c818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c81a:	e7b5      	b.n	800c788 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c81c:	4b17      	ldr	r3, [pc, #92]	; (800c87c <xTaskIncrementTick+0x168>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c822:	4915      	ldr	r1, [pc, #84]	; (800c878 <xTaskIncrementTick+0x164>)
 800c824:	4613      	mov	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	440b      	add	r3, r1
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d901      	bls.n	800c838 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c834:	2301      	movs	r3, #1
 800c836:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c838:	4b11      	ldr	r3, [pc, #68]	; (800c880 <xTaskIncrementTick+0x16c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d007      	beq.n	800c850 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c840:	2301      	movs	r3, #1
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e004      	b.n	800c850 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c846:	4b0f      	ldr	r3, [pc, #60]	; (800c884 <xTaskIncrementTick+0x170>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3301      	adds	r3, #1
 800c84c:	4a0d      	ldr	r2, [pc, #52]	; (800c884 <xTaskIncrementTick+0x170>)
 800c84e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c850:	697b      	ldr	r3, [r7, #20]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3718      	adds	r7, #24
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20001ab0 	.word	0x20001ab0
 800c860:	20001a8c 	.word	0x20001a8c
 800c864:	20001a40 	.word	0x20001a40
 800c868:	20001a44 	.word	0x20001a44
 800c86c:	20001aa0 	.word	0x20001aa0
 800c870:	20001aa8 	.word	0x20001aa8
 800c874:	20001a90 	.word	0x20001a90
 800c878:	200015b8 	.word	0x200015b8
 800c87c:	200015b4 	.word	0x200015b4
 800c880:	20001a9c 	.word	0x20001a9c
 800c884:	20001a98 	.word	0x20001a98

0800c888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c88e:	4b28      	ldr	r3, [pc, #160]	; (800c930 <vTaskSwitchContext+0xa8>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c896:	4b27      	ldr	r3, [pc, #156]	; (800c934 <vTaskSwitchContext+0xac>)
 800c898:	2201      	movs	r2, #1
 800c89a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c89c:	e041      	b.n	800c922 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c89e:	4b25      	ldr	r3, [pc, #148]	; (800c934 <vTaskSwitchContext+0xac>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8a4:	4b24      	ldr	r3, [pc, #144]	; (800c938 <vTaskSwitchContext+0xb0>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	e010      	b.n	800c8ce <vTaskSwitchContext+0x46>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	607b      	str	r3, [r7, #4]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <vTaskSwitchContext+0x3e>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	491b      	ldr	r1, [pc, #108]	; (800c93c <vTaskSwitchContext+0xb4>)
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	440b      	add	r3, r1
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d0e4      	beq.n	800c8ac <vTaskSwitchContext+0x24>
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4a13      	ldr	r2, [pc, #76]	; (800c93c <vTaskSwitchContext+0xb4>)
 800c8ee:	4413      	add	r3, r2
 800c8f0:	60bb      	str	r3, [r7, #8]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	685a      	ldr	r2, [r3, #4]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	605a      	str	r2, [r3, #4]
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	685a      	ldr	r2, [r3, #4]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	3308      	adds	r3, #8
 800c904:	429a      	cmp	r2, r3
 800c906:	d104      	bne.n	800c912 <vTaskSwitchContext+0x8a>
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	685a      	ldr	r2, [r3, #4]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	605a      	str	r2, [r3, #4]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	4a09      	ldr	r2, [pc, #36]	; (800c940 <vTaskSwitchContext+0xb8>)
 800c91a:	6013      	str	r3, [r2, #0]
 800c91c:	4a06      	ldr	r2, [pc, #24]	; (800c938 <vTaskSwitchContext+0xb0>)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6013      	str	r3, [r2, #0]
}
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20001ab0 	.word	0x20001ab0
 800c934:	20001a9c 	.word	0x20001a9c
 800c938:	20001a90 	.word	0x20001a90
 800c93c:	200015b8 	.word	0x200015b8
 800c940:	200015b4 	.word	0x200015b4

0800c944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10a      	bne.n	800c96a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	60fb      	str	r3, [r7, #12]
}
 800c966:	bf00      	nop
 800c968:	e7fe      	b.n	800c968 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c96a:	4b07      	ldr	r3, [pc, #28]	; (800c988 <vTaskPlaceOnEventList+0x44>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3318      	adds	r3, #24
 800c970:	4619      	mov	r1, r3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7fe fd47 	bl	800b406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c978:	2101      	movs	r1, #1
 800c97a:	6838      	ldr	r0, [r7, #0]
 800c97c:	f000 fa7c 	bl	800ce78 <prvAddCurrentTaskToDelayedList>
}
 800c980:	bf00      	nop
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	200015b4 	.word	0x200015b4

0800c98c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10a      	bne.n	800c9b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	617b      	str	r3, [r7, #20]
}
 800c9b0:	bf00      	nop
 800c9b2:	e7fe      	b.n	800c9b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3318      	adds	r3, #24
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f7fe fcfe 	bl	800b3be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c9ce:	6879      	ldr	r1, [r7, #4]
 800c9d0:	68b8      	ldr	r0, [r7, #8]
 800c9d2:	f000 fa51 	bl	800ce78 <prvAddCurrentTaskToDelayedList>
	}
 800c9d6:	bf00      	nop
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	200015b4 	.word	0x200015b4

0800c9e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	60fb      	str	r3, [r7, #12]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	3318      	adds	r3, #24
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe fd2f 	bl	800b478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca1a:	4b1e      	ldr	r3, [pc, #120]	; (800ca94 <xTaskRemoveFromEventList+0xb0>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d11d      	bne.n	800ca5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	3304      	adds	r3, #4
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fd26 	bl	800b478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca30:	4b19      	ldr	r3, [pc, #100]	; (800ca98 <xTaskRemoveFromEventList+0xb4>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d903      	bls.n	800ca40 <xTaskRemoveFromEventList+0x5c>
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	4a16      	ldr	r2, [pc, #88]	; (800ca98 <xTaskRemoveFromEventList+0xb4>)
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca44:	4613      	mov	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4a13      	ldr	r2, [pc, #76]	; (800ca9c <xTaskRemoveFromEventList+0xb8>)
 800ca4e:	441a      	add	r2, r3
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	3304      	adds	r3, #4
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	f7fe fcb1 	bl	800b3be <vListInsertEnd>
 800ca5c:	e005      	b.n	800ca6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	3318      	adds	r3, #24
 800ca62:	4619      	mov	r1, r3
 800ca64:	480e      	ldr	r0, [pc, #56]	; (800caa0 <xTaskRemoveFromEventList+0xbc>)
 800ca66:	f7fe fcaa 	bl	800b3be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	; (800caa4 <xTaskRemoveFromEventList+0xc0>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d905      	bls.n	800ca84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	; (800caa8 <xTaskRemoveFromEventList+0xc4>)
 800ca7e:	2201      	movs	r2, #1
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	e001      	b.n	800ca88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca88:	697b      	ldr	r3, [r7, #20]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20001ab0 	.word	0x20001ab0
 800ca98:	20001a90 	.word	0x20001a90
 800ca9c:	200015b8 	.word	0x200015b8
 800caa0:	20001a48 	.word	0x20001a48
 800caa4:	200015b4 	.word	0x200015b4
 800caa8:	20001a9c 	.word	0x20001a9c

0800caac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cab4:	4b06      	ldr	r3, [pc, #24]	; (800cad0 <vTaskInternalSetTimeOutState+0x24>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cabc:	4b05      	ldr	r3, [pc, #20]	; (800cad4 <vTaskInternalSetTimeOutState+0x28>)
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	605a      	str	r2, [r3, #4]
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	20001aa0 	.word	0x20001aa0
 800cad4:	20001a8c 	.word	0x20001a8c

0800cad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10a      	bne.n	800cafe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	613b      	str	r3, [r7, #16]
}
 800cafa:	bf00      	nop
 800cafc:	e7fe      	b.n	800cafc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	60fb      	str	r3, [r7, #12]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb1a:	f000 fe7b 	bl	800d814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb1e:	4b1d      	ldr	r3, [pc, #116]	; (800cb94 <xTaskCheckForTimeOut+0xbc>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	69ba      	ldr	r2, [r7, #24]
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb36:	d102      	bne.n	800cb3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	61fb      	str	r3, [r7, #28]
 800cb3c:	e023      	b.n	800cb86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <xTaskCheckForTimeOut+0xc0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d007      	beq.n	800cb5a <xTaskCheckForTimeOut+0x82>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	69ba      	ldr	r2, [r7, #24]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d302      	bcc.n	800cb5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb54:	2301      	movs	r3, #1
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	e015      	b.n	800cb86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d20b      	bcs.n	800cb7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	1ad2      	subs	r2, r2, r3
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff ff9b 	bl	800caac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb76:	2300      	movs	r3, #0
 800cb78:	61fb      	str	r3, [r7, #28]
 800cb7a:	e004      	b.n	800cb86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb82:	2301      	movs	r3, #1
 800cb84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb86:	f000 fe75 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800cb8a:	69fb      	ldr	r3, [r7, #28]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20001a8c 	.word	0x20001a8c
 800cb98:	20001aa0 	.word	0x20001aa0

0800cb9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cba0:	4b03      	ldr	r3, [pc, #12]	; (800cbb0 <vTaskMissedYield+0x14>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	601a      	str	r2, [r3, #0]
}
 800cba6:	bf00      	nop
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr
 800cbb0:	20001a9c 	.word	0x20001a9c

0800cbb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbbc:	f000 f852 	bl	800cc64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cbc0:	4b06      	ldr	r3, [pc, #24]	; (800cbdc <prvIdleTask+0x28>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d9f9      	bls.n	800cbbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800cbc8:	4b05      	ldr	r3, [pc, #20]	; (800cbe0 <prvIdleTask+0x2c>)
 800cbca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbce:	601a      	str	r2, [r3, #0]
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cbd8:	e7f0      	b.n	800cbbc <prvIdleTask+0x8>
 800cbda:	bf00      	nop
 800cbdc:	200015b8 	.word	0x200015b8
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbea:	2300      	movs	r3, #0
 800cbec:	607b      	str	r3, [r7, #4]
 800cbee:	e00c      	b.n	800cc0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4a12      	ldr	r2, [pc, #72]	; (800cc44 <prvInitialiseTaskLists+0x60>)
 800cbfc:	4413      	add	r3, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fbb0 	bl	800b364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3301      	adds	r3, #1
 800cc08:	607b      	str	r3, [r7, #4]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b37      	cmp	r3, #55	; 0x37
 800cc0e:	d9ef      	bls.n	800cbf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc10:	480d      	ldr	r0, [pc, #52]	; (800cc48 <prvInitialiseTaskLists+0x64>)
 800cc12:	f7fe fba7 	bl	800b364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc16:	480d      	ldr	r0, [pc, #52]	; (800cc4c <prvInitialiseTaskLists+0x68>)
 800cc18:	f7fe fba4 	bl	800b364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc1c:	480c      	ldr	r0, [pc, #48]	; (800cc50 <prvInitialiseTaskLists+0x6c>)
 800cc1e:	f7fe fba1 	bl	800b364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc22:	480c      	ldr	r0, [pc, #48]	; (800cc54 <prvInitialiseTaskLists+0x70>)
 800cc24:	f7fe fb9e 	bl	800b364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc28:	480b      	ldr	r0, [pc, #44]	; (800cc58 <prvInitialiseTaskLists+0x74>)
 800cc2a:	f7fe fb9b 	bl	800b364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc2e:	4b0b      	ldr	r3, [pc, #44]	; (800cc5c <prvInitialiseTaskLists+0x78>)
 800cc30:	4a05      	ldr	r2, [pc, #20]	; (800cc48 <prvInitialiseTaskLists+0x64>)
 800cc32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc34:	4b0a      	ldr	r3, [pc, #40]	; (800cc60 <prvInitialiseTaskLists+0x7c>)
 800cc36:	4a05      	ldr	r2, [pc, #20]	; (800cc4c <prvInitialiseTaskLists+0x68>)
 800cc38:	601a      	str	r2, [r3, #0]
}
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	200015b8 	.word	0x200015b8
 800cc48:	20001a18 	.word	0x20001a18
 800cc4c:	20001a2c 	.word	0x20001a2c
 800cc50:	20001a48 	.word	0x20001a48
 800cc54:	20001a5c 	.word	0x20001a5c
 800cc58:	20001a74 	.word	0x20001a74
 800cc5c:	20001a40 	.word	0x20001a40
 800cc60:	20001a44 	.word	0x20001a44

0800cc64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc6a:	e019      	b.n	800cca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc6c:	f000 fdd2 	bl	800d814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc70:	4b10      	ldr	r3, [pc, #64]	; (800ccb4 <prvCheckTasksWaitingTermination+0x50>)
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe fbfb 	bl	800b478 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc82:	4b0d      	ldr	r3, [pc, #52]	; (800ccb8 <prvCheckTasksWaitingTermination+0x54>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	4a0b      	ldr	r2, [pc, #44]	; (800ccb8 <prvCheckTasksWaitingTermination+0x54>)
 800cc8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc8c:	4b0b      	ldr	r3, [pc, #44]	; (800ccbc <prvCheckTasksWaitingTermination+0x58>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	4a0a      	ldr	r2, [pc, #40]	; (800ccbc <prvCheckTasksWaitingTermination+0x58>)
 800cc94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc96:	f000 fded 	bl	800d874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f810 	bl	800ccc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cca0:	4b06      	ldr	r3, [pc, #24]	; (800ccbc <prvCheckTasksWaitingTermination+0x58>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1e1      	bne.n	800cc6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cca8:	bf00      	nop
 800ccaa:	bf00      	nop
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	20001a5c 	.word	0x20001a5c
 800ccb8:	20001a88 	.word	0x20001a88
 800ccbc:	20001a70 	.word	0x20001a70

0800ccc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d108      	bne.n	800cce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 ff8a 	bl	800dbf0 <vPortFree>
				vPortFree( pxTCB );
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 ff87 	bl	800dbf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cce2:	e018      	b.n	800cd16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d103      	bne.n	800ccf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 ff7e 	bl	800dbf0 <vPortFree>
	}
 800ccf4:	e00f      	b.n	800cd16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d00a      	beq.n	800cd16 <prvDeleteTCB+0x56>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	60fb      	str	r3, [r7, #12]
}
 800cd12:	bf00      	nop
 800cd14:	e7fe      	b.n	800cd14 <prvDeleteTCB+0x54>
	}
 800cd16:	bf00      	nop
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
	...

0800cd20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd26:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <prvResetNextTaskUnblockTime+0x38>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d104      	bne.n	800cd3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd30:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <prvResetNextTaskUnblockTime+0x3c>)
 800cd32:	f04f 32ff 	mov.w	r2, #4294967295
 800cd36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd38:	e008      	b.n	800cd4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd3a:	4b07      	ldr	r3, [pc, #28]	; (800cd58 <prvResetNextTaskUnblockTime+0x38>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	4a04      	ldr	r2, [pc, #16]	; (800cd5c <prvResetNextTaskUnblockTime+0x3c>)
 800cd4a:	6013      	str	r3, [r2, #0]
}
 800cd4c:	bf00      	nop
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	20001a40 	.word	0x20001a40
 800cd5c:	20001aa8 	.word	0x20001aa8

0800cd60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <xTaskGetSchedulerState+0x34>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d102      	bne.n	800cd74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	607b      	str	r3, [r7, #4]
 800cd72:	e008      	b.n	800cd86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd74:	4b08      	ldr	r3, [pc, #32]	; (800cd98 <xTaskGetSchedulerState+0x38>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d102      	bne.n	800cd82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	607b      	str	r3, [r7, #4]
 800cd80:	e001      	b.n	800cd86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd82:	2300      	movs	r3, #0
 800cd84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd86:	687b      	ldr	r3, [r7, #4]
	}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr
 800cd94:	20001a94 	.word	0x20001a94
 800cd98:	20001ab0 	.word	0x20001ab0

0800cd9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d056      	beq.n	800ce60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cdb2:	4b2e      	ldr	r3, [pc, #184]	; (800ce6c <xTaskPriorityDisinherit+0xd0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	693a      	ldr	r2, [r7, #16]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d00a      	beq.n	800cdd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	60fb      	str	r3, [r7, #12]
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10a      	bne.n	800cdf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	60bb      	str	r3, [r7, #8]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdf4:	1e5a      	subs	r2, r3, #1
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d02c      	beq.n	800ce60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d128      	bne.n	800ce60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	3304      	adds	r3, #4
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe fb30 	bl	800b478 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce30:	4b0f      	ldr	r3, [pc, #60]	; (800ce70 <xTaskPriorityDisinherit+0xd4>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d903      	bls.n	800ce40 <xTaskPriorityDisinherit+0xa4>
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3c:	4a0c      	ldr	r2, [pc, #48]	; (800ce70 <xTaskPriorityDisinherit+0xd4>)
 800ce3e:	6013      	str	r3, [r2, #0]
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce44:	4613      	mov	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4a09      	ldr	r2, [pc, #36]	; (800ce74 <xTaskPriorityDisinherit+0xd8>)
 800ce4e:	441a      	add	r2, r3
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	3304      	adds	r3, #4
 800ce54:	4619      	mov	r1, r3
 800ce56:	4610      	mov	r0, r2
 800ce58:	f7fe fab1 	bl	800b3be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce60:	697b      	ldr	r3, [r7, #20]
	}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	200015b4 	.word	0x200015b4
 800ce70:	20001a90 	.word	0x20001a90
 800ce74:	200015b8 	.word	0x200015b8

0800ce78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce82:	4b21      	ldr	r3, [pc, #132]	; (800cf08 <prvAddCurrentTaskToDelayedList+0x90>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce88:	4b20      	ldr	r3, [pc, #128]	; (800cf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fe faf2 	bl	800b478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9a:	d10a      	bne.n	800ceb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d007      	beq.n	800ceb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cea2:	4b1a      	ldr	r3, [pc, #104]	; (800cf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3304      	adds	r3, #4
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4819      	ldr	r0, [pc, #100]	; (800cf10 <prvAddCurrentTaskToDelayedList+0x98>)
 800ceac:	f7fe fa87 	bl	800b3be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ceb0:	e026      	b.n	800cf00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ceba:	4b14      	ldr	r3, [pc, #80]	; (800cf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d209      	bcs.n	800cede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceca:	4b12      	ldr	r3, [pc, #72]	; (800cf14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	4b0f      	ldr	r3, [pc, #60]	; (800cf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3304      	adds	r3, #4
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f7fe fa95 	bl	800b406 <vListInsert>
}
 800cedc:	e010      	b.n	800cf00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cede:	4b0e      	ldr	r3, [pc, #56]	; (800cf18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	4b0a      	ldr	r3, [pc, #40]	; (800cf0c <prvAddCurrentTaskToDelayedList+0x94>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	3304      	adds	r3, #4
 800cee8:	4619      	mov	r1, r3
 800ceea:	4610      	mov	r0, r2
 800ceec:	f7fe fa8b 	bl	800b406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cef0:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d202      	bcs.n	800cf00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cefa:	4a08      	ldr	r2, [pc, #32]	; (800cf1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	6013      	str	r3, [r2, #0]
}
 800cf00:	bf00      	nop
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	20001a8c 	.word	0x20001a8c
 800cf0c:	200015b4 	.word	0x200015b4
 800cf10:	20001a74 	.word	0x20001a74
 800cf14:	20001a44 	.word	0x20001a44
 800cf18:	20001a40 	.word	0x20001a40
 800cf1c:	20001aa8 	.word	0x20001aa8

0800cf20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b08a      	sub	sp, #40	; 0x28
 800cf24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf2a:	f000 fb07 	bl	800d53c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf2e:	4b1c      	ldr	r3, [pc, #112]	; (800cfa0 <xTimerCreateTimerTask+0x80>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d021      	beq.n	800cf7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf3e:	1d3a      	adds	r2, r7, #4
 800cf40:	f107 0108 	add.w	r1, r7, #8
 800cf44:	f107 030c 	add.w	r3, r7, #12
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fe f9f1 	bl	800b330 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	9202      	str	r2, [sp, #8]
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	2302      	movs	r3, #2
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	460a      	mov	r2, r1
 800cf60:	4910      	ldr	r1, [pc, #64]	; (800cfa4 <xTimerCreateTimerTask+0x84>)
 800cf62:	4811      	ldr	r0, [pc, #68]	; (800cfa8 <xTimerCreateTimerTask+0x88>)
 800cf64:	f7fe ffd8 	bl	800bf18 <xTaskCreateStatic>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	4a10      	ldr	r2, [pc, #64]	; (800cfac <xTimerCreateTimerTask+0x8c>)
 800cf6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <xTimerCreateTimerTask+0x8c>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf76:	2301      	movs	r3, #1
 800cf78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	613b      	str	r3, [r7, #16]
}
 800cf92:	bf00      	nop
 800cf94:	e7fe      	b.n	800cf94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cf96:	697b      	ldr	r3, [r7, #20]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3718      	adds	r7, #24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	20001ae4 	.word	0x20001ae4
 800cfa4:	0800f3a8 	.word	0x0800f3a8
 800cfa8:	0800d0e5 	.word	0x0800d0e5
 800cfac:	20001ae8 	.word	0x20001ae8

0800cfb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b08a      	sub	sp, #40	; 0x28
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10a      	bne.n	800cfde <xTimerGenericCommand+0x2e>
	__asm volatile
 800cfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	623b      	str	r3, [r7, #32]
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cfde:	4b1a      	ldr	r3, [pc, #104]	; (800d048 <xTimerGenericCommand+0x98>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d02a      	beq.n	800d03c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2b05      	cmp	r3, #5
 800cff6:	dc18      	bgt.n	800d02a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cff8:	f7ff feb2 	bl	800cd60 <xTaskGetSchedulerState>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d109      	bne.n	800d016 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d002:	4b11      	ldr	r3, [pc, #68]	; (800d048 <xTimerGenericCommand+0x98>)
 800d004:	6818      	ldr	r0, [r3, #0]
 800d006:	f107 0110 	add.w	r1, r7, #16
 800d00a:	2300      	movs	r3, #0
 800d00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d00e:	f7fe fb9b 	bl	800b748 <xQueueGenericSend>
 800d012:	6278      	str	r0, [r7, #36]	; 0x24
 800d014:	e012      	b.n	800d03c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d016:	4b0c      	ldr	r3, [pc, #48]	; (800d048 <xTimerGenericCommand+0x98>)
 800d018:	6818      	ldr	r0, [r3, #0]
 800d01a:	f107 0110 	add.w	r1, r7, #16
 800d01e:	2300      	movs	r3, #0
 800d020:	2200      	movs	r2, #0
 800d022:	f7fe fb91 	bl	800b748 <xQueueGenericSend>
 800d026:	6278      	str	r0, [r7, #36]	; 0x24
 800d028:	e008      	b.n	800d03c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <xTimerGenericCommand+0x98>)
 800d02c:	6818      	ldr	r0, [r3, #0]
 800d02e:	f107 0110 	add.w	r1, r7, #16
 800d032:	2300      	movs	r3, #0
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	f7fe fc85 	bl	800b944 <xQueueGenericSendFromISR>
 800d03a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3728      	adds	r7, #40	; 0x28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20001ae4 	.word	0x20001ae4

0800d04c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b088      	sub	sp, #32
 800d050:	af02      	add	r7, sp, #8
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d056:	4b22      	ldr	r3, [pc, #136]	; (800d0e0 <prvProcessExpiredTimer+0x94>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	3304      	adds	r3, #4
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fa07 	bl	800b478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d070:	f003 0304 	and.w	r3, r3, #4
 800d074:	2b00      	cmp	r3, #0
 800d076:	d022      	beq.n	800d0be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	699a      	ldr	r2, [r3, #24]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	18d1      	adds	r1, r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	6978      	ldr	r0, [r7, #20]
 800d086:	f000 f8d1 	bl	800d22c <prvInsertTimerInActiveList>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01f      	beq.n	800d0d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d090:	2300      	movs	r3, #0
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	2300      	movs	r3, #0
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	2100      	movs	r1, #0
 800d09a:	6978      	ldr	r0, [r7, #20]
 800d09c:	f7ff ff88 	bl	800cfb0 <xTimerGenericCommand>
 800d0a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d113      	bne.n	800d0d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ac:	f383 8811 	msr	BASEPRI, r3
 800d0b0:	f3bf 8f6f 	isb	sy
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	60fb      	str	r3, [r7, #12]
}
 800d0ba:	bf00      	nop
 800d0bc:	e7fe      	b.n	800d0bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0c4:	f023 0301 	bic.w	r3, r3, #1
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	6a1b      	ldr	r3, [r3, #32]
 800d0d4:	6978      	ldr	r0, [r7, #20]
 800d0d6:	4798      	blx	r3
}
 800d0d8:	bf00      	nop
 800d0da:	3718      	adds	r7, #24
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	20001adc 	.word	0x20001adc

0800d0e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0ec:	f107 0308 	add.w	r3, r7, #8
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f000 f857 	bl	800d1a4 <prvGetNextExpireTime>
 800d0f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	68f8      	ldr	r0, [r7, #12]
 800d0fe:	f000 f803 	bl	800d108 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d102:	f000 f8d5 	bl	800d2b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d106:	e7f1      	b.n	800d0ec <prvTimerTask+0x8>

0800d108 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d112:	f7ff fa43 	bl	800c59c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d116:	f107 0308 	add.w	r3, r7, #8
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 f866 	bl	800d1ec <prvSampleTimeNow>
 800d120:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d130      	bne.n	800d18a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <prvProcessTimerOrBlockTask+0x3c>
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	429a      	cmp	r2, r3
 800d134:	d806      	bhi.n	800d144 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d136:	f7ff fa3f 	bl	800c5b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d13a:	68f9      	ldr	r1, [r7, #12]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff ff85 	bl	800d04c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d142:	e024      	b.n	800d18e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d008      	beq.n	800d15c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d14a:	4b13      	ldr	r3, [pc, #76]	; (800d198 <prvProcessTimerOrBlockTask+0x90>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d101      	bne.n	800d158 <prvProcessTimerOrBlockTask+0x50>
 800d154:	2301      	movs	r3, #1
 800d156:	e000      	b.n	800d15a <prvProcessTimerOrBlockTask+0x52>
 800d158:	2300      	movs	r3, #0
 800d15a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d15c:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <prvProcessTimerOrBlockTask+0x94>)
 800d15e:	6818      	ldr	r0, [r3, #0]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	4619      	mov	r1, r3
 800d16a:	f7fe fea1 	bl	800beb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d16e:	f7ff fa23 	bl	800c5b8 <xTaskResumeAll>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10a      	bne.n	800d18e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d178:	4b09      	ldr	r3, [pc, #36]	; (800d1a0 <prvProcessTimerOrBlockTask+0x98>)
 800d17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	f3bf 8f6f 	isb	sy
}
 800d188:	e001      	b.n	800d18e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d18a:	f7ff fa15 	bl	800c5b8 <xTaskResumeAll>
}
 800d18e:	bf00      	nop
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	20001ae0 	.word	0x20001ae0
 800d19c:	20001ae4 	.word	0x20001ae4
 800d1a0:	e000ed04 	.word	0xe000ed04

0800d1a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <prvGetNextExpireTime+0x44>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <prvGetNextExpireTime+0x16>
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	e000      	b.n	800d1bc <prvGetNextExpireTime+0x18>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d105      	bne.n	800d1d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1c8:	4b07      	ldr	r3, [pc, #28]	; (800d1e8 <prvGetNextExpireTime+0x44>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	60fb      	str	r3, [r7, #12]
 800d1d2:	e001      	b.n	800d1d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3714      	adds	r7, #20
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	20001adc 	.word	0x20001adc

0800d1ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d1f4:	f7ff fa7e 	bl	800c6f4 <xTaskGetTickCount>
 800d1f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d1fa:	4b0b      	ldr	r3, [pc, #44]	; (800d228 <prvSampleTimeNow+0x3c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	429a      	cmp	r2, r3
 800d202:	d205      	bcs.n	800d210 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d204:	f000 f936 	bl	800d474 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	e002      	b.n	800d216 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d216:	4a04      	ldr	r2, [pc, #16]	; (800d228 <prvSampleTimeNow+0x3c>)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d21c:	68fb      	ldr	r3, [r7, #12]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	20001aec 	.word	0x20001aec

0800d22c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	68ba      	ldr	r2, [r7, #8]
 800d242:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d812      	bhi.n	800d278 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	1ad2      	subs	r2, r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d302      	bcc.n	800d266 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	617b      	str	r3, [r7, #20]
 800d264:	e01b      	b.n	800d29e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d266:	4b10      	ldr	r3, [pc, #64]	; (800d2a8 <prvInsertTimerInActiveList+0x7c>)
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	3304      	adds	r3, #4
 800d26e:	4619      	mov	r1, r3
 800d270:	4610      	mov	r0, r2
 800d272:	f7fe f8c8 	bl	800b406 <vListInsert>
 800d276:	e012      	b.n	800d29e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d206      	bcs.n	800d28e <prvInsertTimerInActiveList+0x62>
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	429a      	cmp	r2, r3
 800d286:	d302      	bcc.n	800d28e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d288:	2301      	movs	r3, #1
 800d28a:	617b      	str	r3, [r7, #20]
 800d28c:	e007      	b.n	800d29e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d28e:	4b07      	ldr	r3, [pc, #28]	; (800d2ac <prvInsertTimerInActiveList+0x80>)
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3304      	adds	r3, #4
 800d296:	4619      	mov	r1, r3
 800d298:	4610      	mov	r0, r2
 800d29a:	f7fe f8b4 	bl	800b406 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d29e:	697b      	ldr	r3, [r7, #20]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3718      	adds	r7, #24
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20001ae0 	.word	0x20001ae0
 800d2ac:	20001adc 	.word	0x20001adc

0800d2b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08e      	sub	sp, #56	; 0x38
 800d2b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2b6:	e0ca      	b.n	800d44e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	da18      	bge.n	800d2f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d2be:	1d3b      	adds	r3, r7, #4
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10a      	bne.n	800d2e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	61fb      	str	r3, [r7, #28]
}
 800d2dc:	bf00      	nop
 800d2de:	e7fe      	b.n	800d2de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2e6:	6850      	ldr	r0, [r2, #4]
 800d2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2ea:	6892      	ldr	r2, [r2, #8]
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f2c0 80aa 	blt.w	800d44c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d004      	beq.n	800d30e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d306:	3304      	adds	r3, #4
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe f8b5 	bl	800b478 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d30e:	463b      	mov	r3, r7
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff ff6b 	bl	800d1ec <prvSampleTimeNow>
 800d316:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b09      	cmp	r3, #9
 800d31c:	f200 8097 	bhi.w	800d44e <prvProcessReceivedCommands+0x19e>
 800d320:	a201      	add	r2, pc, #4	; (adr r2, 800d328 <prvProcessReceivedCommands+0x78>)
 800d322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d326:	bf00      	nop
 800d328:	0800d351 	.word	0x0800d351
 800d32c:	0800d351 	.word	0x0800d351
 800d330:	0800d351 	.word	0x0800d351
 800d334:	0800d3c5 	.word	0x0800d3c5
 800d338:	0800d3d9 	.word	0x0800d3d9
 800d33c:	0800d423 	.word	0x0800d423
 800d340:	0800d351 	.word	0x0800d351
 800d344:	0800d351 	.word	0x0800d351
 800d348:	0800d3c5 	.word	0x0800d3c5
 800d34c:	0800d3d9 	.word	0x0800d3d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d356:	f043 0301 	orr.w	r3, r3, #1
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	699b      	ldr	r3, [r3, #24]
 800d368:	18d1      	adds	r1, r2, r3
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d36e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d370:	f7ff ff5c 	bl	800d22c <prvInsertTimerInActiveList>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d069      	beq.n	800d44e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d380:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d05e      	beq.n	800d44e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d394:	699b      	ldr	r3, [r3, #24]
 800d396:	441a      	add	r2, r3
 800d398:	2300      	movs	r3, #0
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	2300      	movs	r3, #0
 800d39e:	2100      	movs	r1, #0
 800d3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3a2:	f7ff fe05 	bl	800cfb0 <xTimerGenericCommand>
 800d3a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d14f      	bne.n	800d44e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	61bb      	str	r3, [r7, #24]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3ca:	f023 0301 	bic.w	r3, r3, #1
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d3d6:	e03a      	b.n	800d44e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3de:	f043 0301 	orr.w	r3, r3, #1
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d3ea:	68ba      	ldr	r2, [r7, #8]
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	617b      	str	r3, [r7, #20]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d410:	699a      	ldr	r2, [r3, #24]
 800d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d414:	18d1      	adds	r1, r2, r3
 800d416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d41c:	f7ff ff06 	bl	800d22c <prvInsertTimerInActiveList>
					break;
 800d420:	e015      	b.n	800d44e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d428:	f003 0302 	and.w	r3, r3, #2
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d103      	bne.n	800d438 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d432:	f000 fbdd 	bl	800dbf0 <vPortFree>
 800d436:	e00a      	b.n	800d44e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d43e:	f023 0301 	bic.w	r3, r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d44a:	e000      	b.n	800d44e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d44c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d44e:	4b08      	ldr	r3, [pc, #32]	; (800d470 <prvProcessReceivedCommands+0x1c0>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	1d39      	adds	r1, r7, #4
 800d454:	2200      	movs	r2, #0
 800d456:	4618      	mov	r0, r3
 800d458:	f7fe fb10 	bl	800ba7c <xQueueReceive>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f47f af2a 	bne.w	800d2b8 <prvProcessReceivedCommands+0x8>
	}
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop
 800d468:	3730      	adds	r7, #48	; 0x30
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	20001ae4 	.word	0x20001ae4

0800d474 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b088      	sub	sp, #32
 800d478:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d47a:	e048      	b.n	800d50e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d47c:	4b2d      	ldr	r3, [pc, #180]	; (800d534 <prvSwitchTimerLists+0xc0>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d486:	4b2b      	ldr	r3, [pc, #172]	; (800d534 <prvSwitchTimerLists+0xc0>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3304      	adds	r3, #4
 800d494:	4618      	mov	r0, r3
 800d496:	f7fd ffef 	bl	800b478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4a8:	f003 0304 	and.w	r3, r3, #4
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d02e      	beq.n	800d50e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	699b      	ldr	r3, [r3, #24]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d90e      	bls.n	800d4e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4ce:	4b19      	ldr	r3, [pc, #100]	; (800d534 <prvSwitchTimerLists+0xc0>)
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	4610      	mov	r0, r2
 800d4da:	f7fd ff94 	bl	800b406 <vListInsert>
 800d4de:	e016      	b.n	800d50e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7ff fd60 	bl	800cfb0 <xTimerGenericCommand>
 800d4f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10a      	bne.n	800d50e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	603b      	str	r3, [r7, #0]
}
 800d50a:	bf00      	nop
 800d50c:	e7fe      	b.n	800d50c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d50e:	4b09      	ldr	r3, [pc, #36]	; (800d534 <prvSwitchTimerLists+0xc0>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1b1      	bne.n	800d47c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d518:	4b06      	ldr	r3, [pc, #24]	; (800d534 <prvSwitchTimerLists+0xc0>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d51e:	4b06      	ldr	r3, [pc, #24]	; (800d538 <prvSwitchTimerLists+0xc4>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a04      	ldr	r2, [pc, #16]	; (800d534 <prvSwitchTimerLists+0xc0>)
 800d524:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d526:	4a04      	ldr	r2, [pc, #16]	; (800d538 <prvSwitchTimerLists+0xc4>)
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	6013      	str	r3, [r2, #0]
}
 800d52c:	bf00      	nop
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	20001adc 	.word	0x20001adc
 800d538:	20001ae0 	.word	0x20001ae0

0800d53c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d542:	f000 f967 	bl	800d814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d546:	4b15      	ldr	r3, [pc, #84]	; (800d59c <prvCheckForValidListAndQueue+0x60>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d120      	bne.n	800d590 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d54e:	4814      	ldr	r0, [pc, #80]	; (800d5a0 <prvCheckForValidListAndQueue+0x64>)
 800d550:	f7fd ff08 	bl	800b364 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d554:	4813      	ldr	r0, [pc, #76]	; (800d5a4 <prvCheckForValidListAndQueue+0x68>)
 800d556:	f7fd ff05 	bl	800b364 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d55a:	4b13      	ldr	r3, [pc, #76]	; (800d5a8 <prvCheckForValidListAndQueue+0x6c>)
 800d55c:	4a10      	ldr	r2, [pc, #64]	; (800d5a0 <prvCheckForValidListAndQueue+0x64>)
 800d55e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d560:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <prvCheckForValidListAndQueue+0x70>)
 800d562:	4a10      	ldr	r2, [pc, #64]	; (800d5a4 <prvCheckForValidListAndQueue+0x68>)
 800d564:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d566:	2300      	movs	r3, #0
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	4b11      	ldr	r3, [pc, #68]	; (800d5b0 <prvCheckForValidListAndQueue+0x74>)
 800d56c:	4a11      	ldr	r2, [pc, #68]	; (800d5b4 <prvCheckForValidListAndQueue+0x78>)
 800d56e:	2110      	movs	r1, #16
 800d570:	200a      	movs	r0, #10
 800d572:	f7fe f813 	bl	800b59c <xQueueGenericCreateStatic>
 800d576:	4603      	mov	r3, r0
 800d578:	4a08      	ldr	r2, [pc, #32]	; (800d59c <prvCheckForValidListAndQueue+0x60>)
 800d57a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d57c:	4b07      	ldr	r3, [pc, #28]	; (800d59c <prvCheckForValidListAndQueue+0x60>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d005      	beq.n	800d590 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d584:	4b05      	ldr	r3, [pc, #20]	; (800d59c <prvCheckForValidListAndQueue+0x60>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	490b      	ldr	r1, [pc, #44]	; (800d5b8 <prvCheckForValidListAndQueue+0x7c>)
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe fc66 	bl	800be5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d590:	f000 f970 	bl	800d874 <vPortExitCritical>
}
 800d594:	bf00      	nop
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20001ae4 	.word	0x20001ae4
 800d5a0:	20001ab4 	.word	0x20001ab4
 800d5a4:	20001ac8 	.word	0x20001ac8
 800d5a8:	20001adc 	.word	0x20001adc
 800d5ac:	20001ae0 	.word	0x20001ae0
 800d5b0:	20001b90 	.word	0x20001b90
 800d5b4:	20001af0 	.word	0x20001af0
 800d5b8:	0800f3b0 	.word	0x0800f3b0

0800d5bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	3b04      	subs	r3, #4
 800d5cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d5d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3b04      	subs	r3, #4
 800d5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f023 0201 	bic.w	r2, r3, #1
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	3b04      	subs	r3, #4
 800d5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5ec:	4a0c      	ldr	r2, [pc, #48]	; (800d620 <pxPortInitialiseStack+0x64>)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3b14      	subs	r3, #20
 800d5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3b04      	subs	r3, #4
 800d602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f06f 0202 	mvn.w	r2, #2
 800d60a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	3b20      	subs	r3, #32
 800d610:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d612:	68fb      	ldr	r3, [r7, #12]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3714      	adds	r7, #20
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	0800d625 	.word	0x0800d625

0800d624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d62e:	4b12      	ldr	r3, [pc, #72]	; (800d678 <prvTaskExitError+0x54>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d636:	d00a      	beq.n	800d64e <prvTaskExitError+0x2a>
	__asm volatile
 800d638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	60fb      	str	r3, [r7, #12]
}
 800d64a:	bf00      	nop
 800d64c:	e7fe      	b.n	800d64c <prvTaskExitError+0x28>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	60bb      	str	r3, [r7, #8]
}
 800d660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d662:	bf00      	nop
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d0fc      	beq.n	800d664 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d66a:	bf00      	nop
 800d66c:	bf00      	nop
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	20000598 	.word	0x20000598
 800d67c:	00000000 	.word	0x00000000

0800d680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d680:	4b07      	ldr	r3, [pc, #28]	; (800d6a0 <pxCurrentTCBConst2>)
 800d682:	6819      	ldr	r1, [r3, #0]
 800d684:	6808      	ldr	r0, [r1, #0]
 800d686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68a:	f380 8809 	msr	PSP, r0
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f380 8811 	msr	BASEPRI, r0
 800d69a:	4770      	bx	lr
 800d69c:	f3af 8000 	nop.w

0800d6a0 <pxCurrentTCBConst2>:
 800d6a0:	200015b4 	.word	0x200015b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop

0800d6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d6a8:	4808      	ldr	r0, [pc, #32]	; (800d6cc <prvPortStartFirstTask+0x24>)
 800d6aa:	6800      	ldr	r0, [r0, #0]
 800d6ac:	6800      	ldr	r0, [r0, #0]
 800d6ae:	f380 8808 	msr	MSP, r0
 800d6b2:	f04f 0000 	mov.w	r0, #0
 800d6b6:	f380 8814 	msr	CONTROL, r0
 800d6ba:	b662      	cpsie	i
 800d6bc:	b661      	cpsie	f
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	df00      	svc	0
 800d6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d6ca:	bf00      	nop
 800d6cc:	e000ed08 	.word	0xe000ed08

0800d6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6d6:	4b46      	ldr	r3, [pc, #280]	; (800d7f0 <xPortStartScheduler+0x120>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a46      	ldr	r2, [pc, #280]	; (800d7f4 <xPortStartScheduler+0x124>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d10a      	bne.n	800d6f6 <xPortStartScheduler+0x26>
	__asm volatile
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	613b      	str	r3, [r7, #16]
}
 800d6f2:	bf00      	nop
 800d6f4:	e7fe      	b.n	800d6f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d6f6:	4b3e      	ldr	r3, [pc, #248]	; (800d7f0 <xPortStartScheduler+0x120>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a3f      	ldr	r2, [pc, #252]	; (800d7f8 <xPortStartScheduler+0x128>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d10a      	bne.n	800d716 <xPortStartScheduler+0x46>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	60fb      	str	r3, [r7, #12]
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d716:	4b39      	ldr	r3, [pc, #228]	; (800d7fc <xPortStartScheduler+0x12c>)
 800d718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	22ff      	movs	r2, #255	; 0xff
 800d726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	4b31      	ldr	r3, [pc, #196]	; (800d800 <xPortStartScheduler+0x130>)
 800d73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d73e:	4b31      	ldr	r3, [pc, #196]	; (800d804 <xPortStartScheduler+0x134>)
 800d740:	2207      	movs	r2, #7
 800d742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d744:	e009      	b.n	800d75a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d746:	4b2f      	ldr	r3, [pc, #188]	; (800d804 <xPortStartScheduler+0x134>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	4a2d      	ldr	r2, [pc, #180]	; (800d804 <xPortStartScheduler+0x134>)
 800d74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	b2db      	uxtb	r3, r3
 800d758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d762:	2b80      	cmp	r3, #128	; 0x80
 800d764:	d0ef      	beq.n	800d746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d766:	4b27      	ldr	r3, [pc, #156]	; (800d804 <xPortStartScheduler+0x134>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f1c3 0307 	rsb	r3, r3, #7
 800d76e:	2b04      	cmp	r3, #4
 800d770:	d00a      	beq.n	800d788 <xPortStartScheduler+0xb8>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	60bb      	str	r3, [r7, #8]
}
 800d784:	bf00      	nop
 800d786:	e7fe      	b.n	800d786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d788:	4b1e      	ldr	r3, [pc, #120]	; (800d804 <xPortStartScheduler+0x134>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	021b      	lsls	r3, r3, #8
 800d78e:	4a1d      	ldr	r2, [pc, #116]	; (800d804 <xPortStartScheduler+0x134>)
 800d790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d792:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <xPortStartScheduler+0x134>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d79a:	4a1a      	ldr	r2, [pc, #104]	; (800d804 <xPortStartScheduler+0x134>)
 800d79c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7a6:	4b18      	ldr	r3, [pc, #96]	; (800d808 <xPortStartScheduler+0x138>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a17      	ldr	r2, [pc, #92]	; (800d808 <xPortStartScheduler+0x138>)
 800d7ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7b2:	4b15      	ldr	r3, [pc, #84]	; (800d808 <xPortStartScheduler+0x138>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a14      	ldr	r2, [pc, #80]	; (800d808 <xPortStartScheduler+0x138>)
 800d7b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7be:	f000 f8dd 	bl	800d97c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7c2:	4b12      	ldr	r3, [pc, #72]	; (800d80c <xPortStartScheduler+0x13c>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7c8:	f000 f8fc 	bl	800d9c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7cc:	4b10      	ldr	r3, [pc, #64]	; (800d810 <xPortStartScheduler+0x140>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a0f      	ldr	r2, [pc, #60]	; (800d810 <xPortStartScheduler+0x140>)
 800d7d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7d8:	f7ff ff66 	bl	800d6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7dc:	f7ff f854 	bl	800c888 <vTaskSwitchContext>
	prvTaskExitError();
 800d7e0:	f7ff ff20 	bl	800d624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	e000ed00 	.word	0xe000ed00
 800d7f4:	410fc271 	.word	0x410fc271
 800d7f8:	410fc270 	.word	0x410fc270
 800d7fc:	e000e400 	.word	0xe000e400
 800d800:	20001be0 	.word	0x20001be0
 800d804:	20001be4 	.word	0x20001be4
 800d808:	e000ed20 	.word	0xe000ed20
 800d80c:	20000598 	.word	0x20000598
 800d810:	e000ef34 	.word	0xe000ef34

0800d814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	607b      	str	r3, [r7, #4]
}
 800d82c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d82e:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <vPortEnterCritical+0x58>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3301      	adds	r3, #1
 800d834:	4a0d      	ldr	r2, [pc, #52]	; (800d86c <vPortEnterCritical+0x58>)
 800d836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d838:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <vPortEnterCritical+0x58>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d10f      	bne.n	800d860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d840:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <vPortEnterCritical+0x5c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <vPortEnterCritical+0x4c>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	603b      	str	r3, [r7, #0]
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <vPortEnterCritical+0x4a>
	}
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	20000598 	.word	0x20000598
 800d870:	e000ed04 	.word	0xe000ed04

0800d874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d87a:	4b12      	ldr	r3, [pc, #72]	; (800d8c4 <vPortExitCritical+0x50>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10a      	bne.n	800d898 <vPortExitCritical+0x24>
	__asm volatile
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	f383 8811 	msr	BASEPRI, r3
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	607b      	str	r3, [r7, #4]
}
 800d894:	bf00      	nop
 800d896:	e7fe      	b.n	800d896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d898:	4b0a      	ldr	r3, [pc, #40]	; (800d8c4 <vPortExitCritical+0x50>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	4a09      	ldr	r2, [pc, #36]	; (800d8c4 <vPortExitCritical+0x50>)
 800d8a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8a2:	4b08      	ldr	r3, [pc, #32]	; (800d8c4 <vPortExitCritical+0x50>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d105      	bne.n	800d8b6 <vPortExitCritical+0x42>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	f383 8811 	msr	BASEPRI, r3
}
 800d8b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8b6:	bf00      	nop
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	20000598 	.word	0x20000598
	...

0800d8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8d0:	f3ef 8009 	mrs	r0, PSP
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	4b15      	ldr	r3, [pc, #84]	; (800d930 <pxCurrentTCBConst>)
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	f01e 0f10 	tst.w	lr, #16
 800d8e0:	bf08      	it	eq
 800d8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ea:	6010      	str	r0, [r2, #0]
 800d8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8f4:	f380 8811 	msr	BASEPRI, r0
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f7fe ffc2 	bl	800c888 <vTaskSwitchContext>
 800d904:	f04f 0000 	mov.w	r0, #0
 800d908:	f380 8811 	msr	BASEPRI, r0
 800d90c:	bc09      	pop	{r0, r3}
 800d90e:	6819      	ldr	r1, [r3, #0]
 800d910:	6808      	ldr	r0, [r1, #0]
 800d912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d916:	f01e 0f10 	tst.w	lr, #16
 800d91a:	bf08      	it	eq
 800d91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d920:	f380 8809 	msr	PSP, r0
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	f3af 8000 	nop.w

0800d930 <pxCurrentTCBConst>:
 800d930:	200015b4 	.word	0x200015b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d934:	bf00      	nop
 800d936:	bf00      	nop

0800d938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	607b      	str	r3, [r7, #4]
}
 800d950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d952:	f7fe fedf 	bl	800c714 <xTaskIncrementTick>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d003      	beq.n	800d964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d95c:	4b06      	ldr	r3, [pc, #24]	; (800d978 <xPortSysTickHandler+0x40>)
 800d95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	2300      	movs	r3, #0
 800d966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	f383 8811 	msr	BASEPRI, r3
}
 800d96e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d970:	bf00      	nop
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	e000ed04 	.word	0xe000ed04

0800d97c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d980:	4b0b      	ldr	r3, [pc, #44]	; (800d9b0 <vPortSetupTimerInterrupt+0x34>)
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d986:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <vPortSetupTimerInterrupt+0x38>)
 800d988:	2200      	movs	r2, #0
 800d98a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d98c:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <vPortSetupTimerInterrupt+0x3c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a0a      	ldr	r2, [pc, #40]	; (800d9bc <vPortSetupTimerInterrupt+0x40>)
 800d992:	fba2 2303 	umull	r2, r3, r2, r3
 800d996:	099b      	lsrs	r3, r3, #6
 800d998:	4a09      	ldr	r2, [pc, #36]	; (800d9c0 <vPortSetupTimerInterrupt+0x44>)
 800d99a:	3b01      	subs	r3, #1
 800d99c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d99e:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <vPortSetupTimerInterrupt+0x34>)
 800d9a0:	2207      	movs	r2, #7
 800d9a2:	601a      	str	r2, [r3, #0]
}
 800d9a4:	bf00      	nop
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	e000e010 	.word	0xe000e010
 800d9b4:	e000e018 	.word	0xe000e018
 800d9b8:	200004ec 	.word	0x200004ec
 800d9bc:	10624dd3 	.word	0x10624dd3
 800d9c0:	e000e014 	.word	0xe000e014

0800d9c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9d4 <vPortEnableVFP+0x10>
 800d9c8:	6801      	ldr	r1, [r0, #0]
 800d9ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9ce:	6001      	str	r1, [r0, #0]
 800d9d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9d2:	bf00      	nop
 800d9d4:	e000ed88 	.word	0xe000ed88

0800d9d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d9de:	f3ef 8305 	mrs	r3, IPSR
 800d9e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b0f      	cmp	r3, #15
 800d9e8:	d914      	bls.n	800da14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9ea:	4a17      	ldr	r2, [pc, #92]	; (800da48 <vPortValidateInterruptPriority+0x70>)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d9f4:	4b15      	ldr	r3, [pc, #84]	; (800da4c <vPortValidateInterruptPriority+0x74>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	7afa      	ldrb	r2, [r7, #11]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d20a      	bcs.n	800da14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	607b      	str	r3, [r7, #4]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da14:	4b0e      	ldr	r3, [pc, #56]	; (800da50 <vPortValidateInterruptPriority+0x78>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800da1c:	4b0d      	ldr	r3, [pc, #52]	; (800da54 <vPortValidateInterruptPriority+0x7c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d90a      	bls.n	800da3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	603b      	str	r3, [r7, #0]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <vPortValidateInterruptPriority+0x60>
	}
 800da3a:	bf00      	nop
 800da3c:	3714      	adds	r7, #20
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	e000e3f0 	.word	0xe000e3f0
 800da4c:	20001be0 	.word	0x20001be0
 800da50:	e000ed0c 	.word	0xe000ed0c
 800da54:	20001be4 	.word	0x20001be4

0800da58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b08a      	sub	sp, #40	; 0x28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da60:	2300      	movs	r3, #0
 800da62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da64:	f7fe fd9a 	bl	800c59c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da68:	4b5b      	ldr	r3, [pc, #364]	; (800dbd8 <pvPortMalloc+0x180>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da70:	f000 f920 	bl	800dcb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da74:	4b59      	ldr	r3, [pc, #356]	; (800dbdc <pvPortMalloc+0x184>)
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4013      	ands	r3, r2
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f040 8093 	bne.w	800dba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d01d      	beq.n	800dac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800da88:	2208      	movs	r2, #8
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4413      	add	r3, r2
 800da8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f003 0307 	and.w	r3, r3, #7
 800da96:	2b00      	cmp	r3, #0
 800da98:	d014      	beq.n	800dac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f023 0307 	bic.w	r3, r3, #7
 800daa0:	3308      	adds	r3, #8
 800daa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f003 0307 	and.w	r3, r3, #7
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <pvPortMalloc+0x6c>
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	617b      	str	r3, [r7, #20]
}
 800dac0:	bf00      	nop
 800dac2:	e7fe      	b.n	800dac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d06e      	beq.n	800dba8 <pvPortMalloc+0x150>
 800daca:	4b45      	ldr	r3, [pc, #276]	; (800dbe0 <pvPortMalloc+0x188>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d869      	bhi.n	800dba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dad4:	4b43      	ldr	r3, [pc, #268]	; (800dbe4 <pvPortMalloc+0x18c>)
 800dad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dad8:	4b42      	ldr	r3, [pc, #264]	; (800dbe4 <pvPortMalloc+0x18c>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dade:	e004      	b.n	800daea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d903      	bls.n	800dafc <pvPortMalloc+0xa4>
 800daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1f1      	bne.n	800dae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dafc:	4b36      	ldr	r3, [pc, #216]	; (800dbd8 <pvPortMalloc+0x180>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db02:	429a      	cmp	r2, r3
 800db04:	d050      	beq.n	800dba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2208      	movs	r2, #8
 800db0c:	4413      	add	r3, r2
 800db0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	1ad2      	subs	r2, r2, r3
 800db20:	2308      	movs	r3, #8
 800db22:	005b      	lsls	r3, r3, #1
 800db24:	429a      	cmp	r2, r3
 800db26:	d91f      	bls.n	800db68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4413      	add	r3, r2
 800db2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	f003 0307 	and.w	r3, r3, #7
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00a      	beq.n	800db50 <pvPortMalloc+0xf8>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	613b      	str	r3, [r7, #16]
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	1ad2      	subs	r2, r2, r3
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db62:	69b8      	ldr	r0, [r7, #24]
 800db64:	f000 f908 	bl	800dd78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db68:	4b1d      	ldr	r3, [pc, #116]	; (800dbe0 <pvPortMalloc+0x188>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	4a1b      	ldr	r2, [pc, #108]	; (800dbe0 <pvPortMalloc+0x188>)
 800db74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db76:	4b1a      	ldr	r3, [pc, #104]	; (800dbe0 <pvPortMalloc+0x188>)
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	4b1b      	ldr	r3, [pc, #108]	; (800dbe8 <pvPortMalloc+0x190>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d203      	bcs.n	800db8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db82:	4b17      	ldr	r3, [pc, #92]	; (800dbe0 <pvPortMalloc+0x188>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a18      	ldr	r2, [pc, #96]	; (800dbe8 <pvPortMalloc+0x190>)
 800db88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	4b13      	ldr	r3, [pc, #76]	; (800dbdc <pvPortMalloc+0x184>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	431a      	orrs	r2, r3
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	2200      	movs	r2, #0
 800db9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db9e:	4b13      	ldr	r3, [pc, #76]	; (800dbec <pvPortMalloc+0x194>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	4a11      	ldr	r2, [pc, #68]	; (800dbec <pvPortMalloc+0x194>)
 800dba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dba8:	f7fe fd06 	bl	800c5b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	f003 0307 	and.w	r3, r3, #7
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00a      	beq.n	800dbcc <pvPortMalloc+0x174>
	__asm volatile
 800dbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbba:	f383 8811 	msr	BASEPRI, r3
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f3bf 8f4f 	dsb	sy
 800dbc6:	60fb      	str	r3, [r7, #12]
}
 800dbc8:	bf00      	nop
 800dbca:	e7fe      	b.n	800dbca <pvPortMalloc+0x172>
	return pvReturn;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3728      	adds	r7, #40	; 0x28
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	200057f0 	.word	0x200057f0
 800dbdc:	20005804 	.word	0x20005804
 800dbe0:	200057f4 	.word	0x200057f4
 800dbe4:	200057e8 	.word	0x200057e8
 800dbe8:	200057f8 	.word	0x200057f8
 800dbec:	200057fc 	.word	0x200057fc

0800dbf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d04d      	beq.n	800dc9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc02:	2308      	movs	r3, #8
 800dc04:	425b      	negs	r3, r3
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	4413      	add	r3, r2
 800dc0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	4b24      	ldr	r3, [pc, #144]	; (800dca8 <vPortFree+0xb8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4013      	ands	r3, r2
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10a      	bne.n	800dc34 <vPortFree+0x44>
	__asm volatile
 800dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	60fb      	str	r3, [r7, #12]
}
 800dc30:	bf00      	nop
 800dc32:	e7fe      	b.n	800dc32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00a      	beq.n	800dc52 <vPortFree+0x62>
	__asm volatile
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	60bb      	str	r3, [r7, #8]
}
 800dc4e:	bf00      	nop
 800dc50:	e7fe      	b.n	800dc50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	685a      	ldr	r2, [r3, #4]
 800dc56:	4b14      	ldr	r3, [pc, #80]	; (800dca8 <vPortFree+0xb8>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d01e      	beq.n	800dc9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d11a      	bne.n	800dc9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	4b0e      	ldr	r3, [pc, #56]	; (800dca8 <vPortFree+0xb8>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	43db      	mvns	r3, r3
 800dc72:	401a      	ands	r2, r3
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc78:	f7fe fc90 	bl	800c59c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	685a      	ldr	r2, [r3, #4]
 800dc80:	4b0a      	ldr	r3, [pc, #40]	; (800dcac <vPortFree+0xbc>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4413      	add	r3, r2
 800dc86:	4a09      	ldr	r2, [pc, #36]	; (800dcac <vPortFree+0xbc>)
 800dc88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc8a:	6938      	ldr	r0, [r7, #16]
 800dc8c:	f000 f874 	bl	800dd78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <vPortFree+0xc0>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	3301      	adds	r3, #1
 800dc96:	4a06      	ldr	r2, [pc, #24]	; (800dcb0 <vPortFree+0xc0>)
 800dc98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc9a:	f7fe fc8d 	bl	800c5b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc9e:	bf00      	nop
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	20005804 	.word	0x20005804
 800dcac:	200057f4 	.word	0x200057f4
 800dcb0:	20005800 	.word	0x20005800

0800dcb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dcba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dcbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dcc0:	4b27      	ldr	r3, [pc, #156]	; (800dd60 <prvHeapInit+0xac>)
 800dcc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00c      	beq.n	800dce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3307      	adds	r3, #7
 800dcd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f023 0307 	bic.w	r3, r3, #7
 800dcda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	4a1f      	ldr	r2, [pc, #124]	; (800dd60 <prvHeapInit+0xac>)
 800dce4:	4413      	add	r3, r2
 800dce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcec:	4a1d      	ldr	r2, [pc, #116]	; (800dd64 <prvHeapInit+0xb0>)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcf2:	4b1c      	ldr	r3, [pc, #112]	; (800dd64 <prvHeapInit+0xb0>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd00:	2208      	movs	r2, #8
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	1a9b      	subs	r3, r3, r2
 800dd06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f023 0307 	bic.w	r3, r3, #7
 800dd0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	4a15      	ldr	r2, [pc, #84]	; (800dd68 <prvHeapInit+0xb4>)
 800dd14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd16:	4b14      	ldr	r3, [pc, #80]	; (800dd68 <prvHeapInit+0xb4>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd1e:	4b12      	ldr	r3, [pc, #72]	; (800dd68 <prvHeapInit+0xb4>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2200      	movs	r2, #0
 800dd24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	1ad2      	subs	r2, r2, r3
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd34:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <prvHeapInit+0xb4>)
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	4a0a      	ldr	r2, [pc, #40]	; (800dd6c <prvHeapInit+0xb8>)
 800dd42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	4a09      	ldr	r2, [pc, #36]	; (800dd70 <prvHeapInit+0xbc>)
 800dd4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd4c:	4b09      	ldr	r3, [pc, #36]	; (800dd74 <prvHeapInit+0xc0>)
 800dd4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd52:	601a      	str	r2, [r3, #0]
}
 800dd54:	bf00      	nop
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	20001be8 	.word	0x20001be8
 800dd64:	200057e8 	.word	0x200057e8
 800dd68:	200057f0 	.word	0x200057f0
 800dd6c:	200057f8 	.word	0x200057f8
 800dd70:	200057f4 	.word	0x200057f4
 800dd74:	20005804 	.word	0x20005804

0800dd78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd80:	4b28      	ldr	r3, [pc, #160]	; (800de24 <prvInsertBlockIntoFreeList+0xac>)
 800dd82:	60fb      	str	r3, [r7, #12]
 800dd84:	e002      	b.n	800dd8c <prvInsertBlockIntoFreeList+0x14>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d8f7      	bhi.n	800dd86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	4413      	add	r3, r2
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d108      	bne.n	800ddba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	441a      	add	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	441a      	add	r2, r3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d118      	bne.n	800de00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b15      	ldr	r3, [pc, #84]	; (800de28 <prvInsertBlockIntoFreeList+0xb0>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d00d      	beq.n	800ddf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	685a      	ldr	r2, [r3, #4]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	441a      	add	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	e008      	b.n	800de08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddf6:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <prvInsertBlockIntoFreeList+0xb0>)
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	e003      	b.n	800de08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d002      	beq.n	800de16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de16:	bf00      	nop
 800de18:	3714      	adds	r7, #20
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	200057e8 	.word	0x200057e8
 800de28:	200057f0 	.word	0x200057f0

0800de2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800de30:	2200      	movs	r2, #0
 800de32:	4912      	ldr	r1, [pc, #72]	; (800de7c <MX_USB_DEVICE_Init+0x50>)
 800de34:	4812      	ldr	r0, [pc, #72]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de36:	f7fb fd63 	bl	8009900 <USBD_Init>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d001      	beq.n	800de44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800de40:	f7f4 fa84 	bl	800234c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800de44:	490f      	ldr	r1, [pc, #60]	; (800de84 <MX_USB_DEVICE_Init+0x58>)
 800de46:	480e      	ldr	r0, [pc, #56]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de48:	f7fb fd8a 	bl	8009960 <USBD_RegisterClass>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800de52:	f7f4 fa7b 	bl	800234c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800de56:	490c      	ldr	r1, [pc, #48]	; (800de88 <MX_USB_DEVICE_Init+0x5c>)
 800de58:	4809      	ldr	r0, [pc, #36]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de5a:	f7fb fc7b 	bl	8009754 <USBD_CDC_RegisterInterface>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de64:	f7f4 fa72 	bl	800234c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de68:	4805      	ldr	r0, [pc, #20]	; (800de80 <MX_USB_DEVICE_Init+0x54>)
 800de6a:	f7fb fdaf 	bl	80099cc <USBD_Start>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de74:	f7f4 fa6a 	bl	800234c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de78:	bf00      	nop
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	200005b0 	.word	0x200005b0
 800de80:	20005808 	.word	0x20005808
 800de84:	20000518 	.word	0x20000518
 800de88:	2000059c 	.word	0x2000059c

0800de8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de90:	2200      	movs	r2, #0
 800de92:	4905      	ldr	r1, [pc, #20]	; (800dea8 <CDC_Init_FS+0x1c>)
 800de94:	4805      	ldr	r0, [pc, #20]	; (800deac <CDC_Init_FS+0x20>)
 800de96:	f7fb fc77 	bl	8009788 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de9a:	4905      	ldr	r1, [pc, #20]	; (800deb0 <CDC_Init_FS+0x24>)
 800de9c:	4803      	ldr	r0, [pc, #12]	; (800deac <CDC_Init_FS+0x20>)
 800de9e:	f7fb fc95 	bl	80097cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dea2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	20005ee4 	.word	0x20005ee4
 800deac:	20005808 	.word	0x20005808
 800deb0:	20005ae4 	.word	0x20005ae4

0800deb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800deb4:	b480      	push	{r7}
 800deb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800deb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800deba:	4618      	mov	r0, r3
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	4603      	mov	r3, r0
 800decc:	6039      	str	r1, [r7, #0]
 800dece:	71fb      	strb	r3, [r7, #7]
 800ded0:	4613      	mov	r3, r2
 800ded2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ded4:	79fb      	ldrb	r3, [r7, #7]
 800ded6:	2b23      	cmp	r3, #35	; 0x23
 800ded8:	d84a      	bhi.n	800df70 <CDC_Control_FS+0xac>
 800deda:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <CDC_Control_FS+0x1c>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800df71 	.word	0x0800df71
 800dee4:	0800df71 	.word	0x0800df71
 800dee8:	0800df71 	.word	0x0800df71
 800deec:	0800df71 	.word	0x0800df71
 800def0:	0800df71 	.word	0x0800df71
 800def4:	0800df71 	.word	0x0800df71
 800def8:	0800df71 	.word	0x0800df71
 800defc:	0800df71 	.word	0x0800df71
 800df00:	0800df71 	.word	0x0800df71
 800df04:	0800df71 	.word	0x0800df71
 800df08:	0800df71 	.word	0x0800df71
 800df0c:	0800df71 	.word	0x0800df71
 800df10:	0800df71 	.word	0x0800df71
 800df14:	0800df71 	.word	0x0800df71
 800df18:	0800df71 	.word	0x0800df71
 800df1c:	0800df71 	.word	0x0800df71
 800df20:	0800df71 	.word	0x0800df71
 800df24:	0800df71 	.word	0x0800df71
 800df28:	0800df71 	.word	0x0800df71
 800df2c:	0800df71 	.word	0x0800df71
 800df30:	0800df71 	.word	0x0800df71
 800df34:	0800df71 	.word	0x0800df71
 800df38:	0800df71 	.word	0x0800df71
 800df3c:	0800df71 	.word	0x0800df71
 800df40:	0800df71 	.word	0x0800df71
 800df44:	0800df71 	.word	0x0800df71
 800df48:	0800df71 	.word	0x0800df71
 800df4c:	0800df71 	.word	0x0800df71
 800df50:	0800df71 	.word	0x0800df71
 800df54:	0800df71 	.word	0x0800df71
 800df58:	0800df71 	.word	0x0800df71
 800df5c:	0800df71 	.word	0x0800df71
 800df60:	0800df71 	.word	0x0800df71
 800df64:	0800df71 	.word	0x0800df71
 800df68:	0800df71 	.word	0x0800df71
 800df6c:	0800df71 	.word	0x0800df71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df70:	bf00      	nop
  }

  return (USBD_OK);
 800df72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df74:	4618      	mov	r0, r3
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800df8a:	6879      	ldr	r1, [r7, #4]
 800df8c:	4805      	ldr	r0, [pc, #20]	; (800dfa4 <CDC_Receive_FS+0x24>)
 800df8e:	f7fb fc1d 	bl	80097cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df92:	4804      	ldr	r0, [pc, #16]	; (800dfa4 <CDC_Receive_FS+0x24>)
 800df94:	f7fb fc7e 	bl	8009894 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800df98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20005808 	.word	0x20005808

0800dfa8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dfb8:	4b0d      	ldr	r3, [pc, #52]	; (800dff0 <CDC_Transmit_FS+0x48>)
 800dfba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e00b      	b.n	800dfe6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dfce:	887b      	ldrh	r3, [r7, #2]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	6879      	ldr	r1, [r7, #4]
 800dfd4:	4806      	ldr	r0, [pc, #24]	; (800dff0 <CDC_Transmit_FS+0x48>)
 800dfd6:	f7fb fbd7 	bl	8009788 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dfda:	4805      	ldr	r0, [pc, #20]	; (800dff0 <CDC_Transmit_FS+0x48>)
 800dfdc:	f7fb fc14 	bl	8009808 <USBD_CDC_TransmitPacket>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20005808 	.word	0x20005808

0800dff4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b087      	sub	sp, #28
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	371c      	adds	r7, #28
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
	...

0800e018 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	6039      	str	r1, [r7, #0]
 800e022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2212      	movs	r2, #18
 800e028:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e02a:	4b03      	ldr	r3, [pc, #12]	; (800e038 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	200005cc 	.word	0x200005cc

0800e03c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	6039      	str	r1, [r7, #0]
 800e046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	2204      	movs	r2, #4
 800e04c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e04e:	4b03      	ldr	r3, [pc, #12]	; (800e05c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e050:	4618      	mov	r0, r3
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	200005e0 	.word	0x200005e0

0800e060 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	4603      	mov	r3, r0
 800e068:	6039      	str	r1, [r7, #0]
 800e06a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d105      	bne.n	800e07e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	4907      	ldr	r1, [pc, #28]	; (800e094 <USBD_FS_ProductStrDescriptor+0x34>)
 800e076:	4808      	ldr	r0, [pc, #32]	; (800e098 <USBD_FS_ProductStrDescriptor+0x38>)
 800e078:	f7fc fe54 	bl	800ad24 <USBD_GetString>
 800e07c:	e004      	b.n	800e088 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	4904      	ldr	r1, [pc, #16]	; (800e094 <USBD_FS_ProductStrDescriptor+0x34>)
 800e082:	4805      	ldr	r0, [pc, #20]	; (800e098 <USBD_FS_ProductStrDescriptor+0x38>)
 800e084:	f7fc fe4e 	bl	800ad24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e088:	4b02      	ldr	r3, [pc, #8]	; (800e094 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	200062e4 	.word	0x200062e4
 800e098:	0800f3b8 	.word	0x0800f3b8

0800e09c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	6039      	str	r1, [r7, #0]
 800e0a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	4904      	ldr	r1, [pc, #16]	; (800e0bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0ac:	4804      	ldr	r0, [pc, #16]	; (800e0c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e0ae:	f7fc fe39 	bl	800ad24 <USBD_GetString>
  return USBD_StrDesc;
 800e0b2:	4b02      	ldr	r3, [pc, #8]	; (800e0bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	200062e4 	.word	0x200062e4
 800e0c0:	0800f3d0 	.word	0x0800f3d0

0800e0c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	6039      	str	r1, [r7, #0]
 800e0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	221a      	movs	r2, #26
 800e0d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e0d6:	f000 f843 	bl	800e160 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e0da:	4b02      	ldr	r3, [pc, #8]	; (800e0e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	200005e4 	.word	0x200005e4

0800e0e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	6039      	str	r1, [r7, #0]
 800e0f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d105      	bne.n	800e106 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	4907      	ldr	r1, [pc, #28]	; (800e11c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0fe:	4808      	ldr	r0, [pc, #32]	; (800e120 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e100:	f7fc fe10 	bl	800ad24 <USBD_GetString>
 800e104:	e004      	b.n	800e110 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	4904      	ldr	r1, [pc, #16]	; (800e11c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e10a:	4805      	ldr	r0, [pc, #20]	; (800e120 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e10c:	f7fc fe0a 	bl	800ad24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e110:	4b02      	ldr	r3, [pc, #8]	; (800e11c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	200062e4 	.word	0x200062e4
 800e120:	0800f3e4 	.word	0x0800f3e4

0800e124 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	6039      	str	r1, [r7, #0]
 800e12e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d105      	bne.n	800e142 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4907      	ldr	r1, [pc, #28]	; (800e158 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e13a:	4808      	ldr	r0, [pc, #32]	; (800e15c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e13c:	f7fc fdf2 	bl	800ad24 <USBD_GetString>
 800e140:	e004      	b.n	800e14c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	4904      	ldr	r1, [pc, #16]	; (800e158 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e146:	4805      	ldr	r0, [pc, #20]	; (800e15c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e148:	f7fc fdec 	bl	800ad24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e14c:	4b02      	ldr	r3, [pc, #8]	; (800e158 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	200062e4 	.word	0x200062e4
 800e15c:	0800f3f0 	.word	0x0800f3f0

0800e160 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e166:	4b0f      	ldr	r3, [pc, #60]	; (800e1a4 <Get_SerialNum+0x44>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e16c:	4b0e      	ldr	r3, [pc, #56]	; (800e1a8 <Get_SerialNum+0x48>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e172:	4b0e      	ldr	r3, [pc, #56]	; (800e1ac <Get_SerialNum+0x4c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4413      	add	r3, r2
 800e17e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d009      	beq.n	800e19a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e186:	2208      	movs	r2, #8
 800e188:	4909      	ldr	r1, [pc, #36]	; (800e1b0 <Get_SerialNum+0x50>)
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 f814 	bl	800e1b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e190:	2204      	movs	r2, #4
 800e192:	4908      	ldr	r1, [pc, #32]	; (800e1b4 <Get_SerialNum+0x54>)
 800e194:	68b8      	ldr	r0, [r7, #8]
 800e196:	f000 f80f 	bl	800e1b8 <IntToUnicode>
  }
}
 800e19a:	bf00      	nop
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	1fff7a10 	.word	0x1fff7a10
 800e1a8:	1fff7a14 	.word	0x1fff7a14
 800e1ac:	1fff7a18 	.word	0x1fff7a18
 800e1b0:	200005e6 	.word	0x200005e6
 800e1b4:	200005f6 	.word	0x200005f6

0800e1b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b087      	sub	sp, #28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	75fb      	strb	r3, [r7, #23]
 800e1ce:	e027      	b.n	800e220 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	0f1b      	lsrs	r3, r3, #28
 800e1d4:	2b09      	cmp	r3, #9
 800e1d6:	d80b      	bhi.n	800e1f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	0f1b      	lsrs	r3, r3, #28
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	005b      	lsls	r3, r3, #1
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	440b      	add	r3, r1
 800e1e8:	3230      	adds	r2, #48	; 0x30
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	701a      	strb	r2, [r3, #0]
 800e1ee:	e00a      	b.n	800e206 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	0f1b      	lsrs	r3, r3, #28
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	7dfb      	ldrb	r3, [r7, #23]
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	440b      	add	r3, r1
 800e200:	3237      	adds	r2, #55	; 0x37
 800e202:	b2d2      	uxtb	r2, r2
 800e204:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	011b      	lsls	r3, r3, #4
 800e20a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	005b      	lsls	r3, r3, #1
 800e210:	3301      	adds	r3, #1
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	4413      	add	r3, r2
 800e216:	2200      	movs	r2, #0
 800e218:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
 800e21c:	3301      	adds	r3, #1
 800e21e:	75fb      	strb	r3, [r7, #23]
 800e220:	7dfa      	ldrb	r2, [r7, #23]
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	429a      	cmp	r2, r3
 800e226:	d3d3      	bcc.n	800e1d0 <IntToUnicode+0x18>
  }
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	371c      	adds	r7, #28
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
	...

0800e238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08a      	sub	sp, #40	; 0x28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e240:	f107 0314 	add.w	r3, r7, #20
 800e244:	2200      	movs	r2, #0
 800e246:	601a      	str	r2, [r3, #0]
 800e248:	605a      	str	r2, [r3, #4]
 800e24a:	609a      	str	r2, [r3, #8]
 800e24c:	60da      	str	r2, [r3, #12]
 800e24e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e258:	d13a      	bne.n	800e2d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e25a:	2300      	movs	r3, #0
 800e25c:	613b      	str	r3, [r7, #16]
 800e25e:	4b1e      	ldr	r3, [pc, #120]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e262:	4a1d      	ldr	r2, [pc, #116]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e264:	f043 0301 	orr.w	r3, r3, #1
 800e268:	6313      	str	r3, [r2, #48]	; 0x30
 800e26a:	4b1b      	ldr	r3, [pc, #108]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26e:	f003 0301 	and.w	r3, r3, #1
 800e272:	613b      	str	r3, [r7, #16]
 800e274:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e276:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e27a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e27c:	2302      	movs	r3, #2
 800e27e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e280:	2300      	movs	r3, #0
 800e282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e284:	2303      	movs	r3, #3
 800e286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e288:	230a      	movs	r3, #10
 800e28a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e28c:	f107 0314 	add.w	r3, r7, #20
 800e290:	4619      	mov	r1, r3
 800e292:	4812      	ldr	r0, [pc, #72]	; (800e2dc <HAL_PCD_MspInit+0xa4>)
 800e294:	f7f4 fc20 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e298:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e29c:	4a0e      	ldr	r2, [pc, #56]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2a2:	6353      	str	r3, [r2, #52]	; 0x34
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	60fb      	str	r3, [r7, #12]
 800e2a8:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ac:	4a0a      	ldr	r2, [pc, #40]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2b2:	6453      	str	r3, [r2, #68]	; 0x44
 800e2b4:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <HAL_PCD_MspInit+0xa0>)
 800e2b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2bc:	60fb      	str	r3, [r7, #12]
 800e2be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2105      	movs	r1, #5
 800e2c4:	2043      	movs	r0, #67	; 0x43
 800e2c6:	f7f4 fbdd 	bl	8002a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e2ca:	2043      	movs	r0, #67	; 0x43
 800e2cc:	f7f4 fbf6 	bl	8002abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e2d0:	bf00      	nop
 800e2d2:	3728      	adds	r7, #40	; 0x28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	40023800 	.word	0x40023800
 800e2dc:	40020000 	.word	0x40020000

0800e2e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7fb fbb5 	bl	8009a66 <USBD_LL_SetupStage>
}
 800e2fc:	bf00      	nop
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	460b      	mov	r3, r1
 800e30e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e316:	78fa      	ldrb	r2, [r7, #3]
 800e318:	6879      	ldr	r1, [r7, #4]
 800e31a:	4613      	mov	r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	440b      	add	r3, r1
 800e324:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	78fb      	ldrb	r3, [r7, #3]
 800e32c:	4619      	mov	r1, r3
 800e32e:	f7fb fbef 	bl	8009b10 <USBD_LL_DataOutStage>
}
 800e332:	bf00      	nop
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b082      	sub	sp, #8
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
 800e342:	460b      	mov	r3, r1
 800e344:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e34c:	78fa      	ldrb	r2, [r7, #3]
 800e34e:	6879      	ldr	r1, [r7, #4]
 800e350:	4613      	mov	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	4413      	add	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	440b      	add	r3, r1
 800e35a:	334c      	adds	r3, #76	; 0x4c
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	78fb      	ldrb	r3, [r7, #3]
 800e360:	4619      	mov	r1, r3
 800e362:	f7fb fc88 	bl	8009c76 <USBD_LL_DataInStage>
}
 800e366:	bf00      	nop
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b082      	sub	sp, #8
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fb fdbc 	bl	8009efa <USBD_LL_SOF>
}
 800e382:	bf00      	nop
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e392:	2301      	movs	r3, #1
 800e394:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d001      	beq.n	800e3a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e39e:	f7f3 ffd5 	bl	800234c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3a8:	7bfa      	ldrb	r2, [r7, #15]
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fb fd66 	bl	8009e7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fb fd0e 	bl	8009dda <USBD_LL_Reset>
}
 800e3be:	bf00      	nop
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
	...

0800e3c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fb fd61 	bl	8009e9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	6812      	ldr	r2, [r2, #0]
 800e3ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3ee:	f043 0301 	orr.w	r3, r3, #1
 800e3f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a1b      	ldr	r3, [r3, #32]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d005      	beq.n	800e408 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e3fc:	4b04      	ldr	r3, [pc, #16]	; (800e410 <HAL_PCD_SuspendCallback+0x48>)
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	4a03      	ldr	r2, [pc, #12]	; (800e410 <HAL_PCD_SuspendCallback+0x48>)
 800e402:	f043 0306 	orr.w	r3, r3, #6
 800e406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	e000ed00 	.word	0xe000ed00

0800e414 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e422:	4618      	mov	r0, r3
 800e424:	f7fb fd51 	bl	8009eca <USBD_LL_Resume>
}
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e442:	78fa      	ldrb	r2, [r7, #3]
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7fb fda9 	bl	8009f9e <USBD_LL_IsoOUTIncomplete>
}
 800e44c:	bf00      	nop
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e466:	78fa      	ldrb	r2, [r7, #3]
 800e468:	4611      	mov	r1, r2
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fb fd65 	bl	8009f3a <USBD_LL_IsoINIncomplete>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e486:	4618      	mov	r0, r3
 800e488:	f7fb fdbb 	bl	800a002 <USBD_LL_DevConnected>
}
 800e48c:	bf00      	nop
 800e48e:	3708      	adds	r7, #8
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fb fdb8 	bl	800a018 <USBD_LL_DevDisconnected>
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d13c      	bne.n	800e53a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e4c0:	4a20      	ldr	r2, [pc, #128]	; (800e544 <USBD_LL_Init+0x94>)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a1e      	ldr	r2, [pc, #120]	; (800e544 <USBD_LL_Init+0x94>)
 800e4cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e4d0:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <USBD_LL_Init+0x94>)
 800e4d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e4d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	; (800e544 <USBD_LL_Init+0x94>)
 800e4da:	2204      	movs	r2, #4
 800e4dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e4de:	4b19      	ldr	r3, [pc, #100]	; (800e544 <USBD_LL_Init+0x94>)
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e4e4:	4b17      	ldr	r3, [pc, #92]	; (800e544 <USBD_LL_Init+0x94>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4ea:	4b16      	ldr	r3, [pc, #88]	; (800e544 <USBD_LL_Init+0x94>)
 800e4ec:	2202      	movs	r2, #2
 800e4ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e4f0:	4b14      	ldr	r3, [pc, #80]	; (800e544 <USBD_LL_Init+0x94>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e4f6:	4b13      	ldr	r3, [pc, #76]	; (800e544 <USBD_LL_Init+0x94>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e4fc:	4b11      	ldr	r3, [pc, #68]	; (800e544 <USBD_LL_Init+0x94>)
 800e4fe:	2200      	movs	r2, #0
 800e500:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e502:	4b10      	ldr	r3, [pc, #64]	; (800e544 <USBD_LL_Init+0x94>)
 800e504:	2200      	movs	r2, #0
 800e506:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e508:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <USBD_LL_Init+0x94>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e50e:	480d      	ldr	r0, [pc, #52]	; (800e544 <USBD_LL_Init+0x94>)
 800e510:	f7f5 fc57 	bl	8003dc2 <HAL_PCD_Init>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e51a:	f7f3 ff17 	bl	800234c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e51e:	2180      	movs	r1, #128	; 0x80
 800e520:	4808      	ldr	r0, [pc, #32]	; (800e544 <USBD_LL_Init+0x94>)
 800e522:	f7f6 feae 	bl	8005282 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e526:	2240      	movs	r2, #64	; 0x40
 800e528:	2100      	movs	r1, #0
 800e52a:	4806      	ldr	r0, [pc, #24]	; (800e544 <USBD_LL_Init+0x94>)
 800e52c:	f7f6 fe62 	bl	80051f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e530:	2280      	movs	r2, #128	; 0x80
 800e532:	2101      	movs	r1, #1
 800e534:	4803      	ldr	r0, [pc, #12]	; (800e544 <USBD_LL_Init+0x94>)
 800e536:	f7f6 fe5d 	bl	80051f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	200064e4 	.word	0x200064e4

0800e548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e550:	2300      	movs	r3, #0
 800e552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e554:	2300      	movs	r3, #0
 800e556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f5 fd4c 	bl	8003ffc <HAL_PCD_Start>
 800e564:	4603      	mov	r3, r0
 800e566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e568:	7bfb      	ldrb	r3, [r7, #15]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 f942 	bl	800e7f4 <USBD_Get_USB_Status>
 800e570:	4603      	mov	r3, r0
 800e572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e574:	7bbb      	ldrb	r3, [r7, #14]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	4608      	mov	r0, r1
 800e588:	4611      	mov	r1, r2
 800e58a:	461a      	mov	r2, r3
 800e58c:	4603      	mov	r3, r0
 800e58e:	70fb      	strb	r3, [r7, #3]
 800e590:	460b      	mov	r3, r1
 800e592:	70bb      	strb	r3, [r7, #2]
 800e594:	4613      	mov	r3, r2
 800e596:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e59c:	2300      	movs	r3, #0
 800e59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e5a6:	78bb      	ldrb	r3, [r7, #2]
 800e5a8:	883a      	ldrh	r2, [r7, #0]
 800e5aa:	78f9      	ldrb	r1, [r7, #3]
 800e5ac:	f7f6 fa1d 	bl	80049ea <HAL_PCD_EP_Open>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 f91c 	bl	800e7f4 <USBD_Get_USB_Status>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5e4:	78fa      	ldrb	r2, [r7, #3]
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7f6 fa66 	bl	8004aba <HAL_PCD_EP_Close>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f000 f8fd 	bl	800e7f4 <USBD_Get_USB_Status>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	460b      	mov	r3, r1
 800e612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e622:	78fa      	ldrb	r2, [r7, #3]
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f7f6 fb3e 	bl	8004ca8 <HAL_PCD_EP_SetStall>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e630:	7bfb      	ldrb	r3, [r7, #15]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 f8de 	bl	800e7f4 <USBD_Get_USB_Status>
 800e638:	4603      	mov	r3, r0
 800e63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	460b      	mov	r3, r1
 800e650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e656:	2300      	movs	r3, #0
 800e658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e660:	78fa      	ldrb	r2, [r7, #3]
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f7f6 fb83 	bl	8004d70 <HAL_PCD_EP_ClrStall>
 800e66a:	4603      	mov	r3, r0
 800e66c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
 800e670:	4618      	mov	r0, r3
 800e672:	f000 f8bf 	bl	800e7f4 <USBD_Get_USB_Status>
 800e676:	4603      	mov	r3, r0
 800e678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e696:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	da0b      	bge.n	800e6b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6a6:	68f9      	ldr	r1, [r7, #12]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	4413      	add	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	440b      	add	r3, r1
 800e6b2:	333e      	adds	r3, #62	; 0x3e
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	e00b      	b.n	800e6d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e6b8:	78fb      	ldrb	r3, [r7, #3]
 800e6ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6be:	68f9      	ldr	r1, [r7, #12]
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	4413      	add	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	440b      	add	r3, r1
 800e6ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e6ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6f6:	78fa      	ldrb	r2, [r7, #3]
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f6 f950 	bl	80049a0 <HAL_PCD_SetAddress>
 800e700:	4603      	mov	r3, r0
 800e702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	4618      	mov	r0, r3
 800e708:	f000 f874 	bl	800e7f4 <USBD_Get_USB_Status>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e710:	7bbb      	ldrb	r3, [r7, #14]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b086      	sub	sp, #24
 800e71e:	af00      	add	r7, sp, #0
 800e720:	60f8      	str	r0, [r7, #12]
 800e722:	607a      	str	r2, [r7, #4]
 800e724:	603b      	str	r3, [r7, #0]
 800e726:	460b      	mov	r3, r1
 800e728:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e738:	7af9      	ldrb	r1, [r7, #11]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	f7f6 fa69 	bl	8004c14 <HAL_PCD_EP_Transmit>
 800e742:	4603      	mov	r3, r0
 800e744:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 f853 	bl	800e7f4 <USBD_Get_USB_Status>
 800e74e:	4603      	mov	r3, r0
 800e750:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e752:	7dbb      	ldrb	r3, [r7, #22]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	460b      	mov	r3, r1
 800e76a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e77a:	7af9      	ldrb	r1, [r7, #11]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	f7f6 f9e5 	bl	8004b4e <HAL_PCD_EP_Receive>
 800e784:	4603      	mov	r3, r0
 800e786:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 f832 	bl	800e7f4 <USBD_Get_USB_Status>
 800e790:	4603      	mov	r3, r0
 800e792:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e794:	7dbb      	ldrb	r3, [r7, #22]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3718      	adds	r7, #24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7b0:	78fa      	ldrb	r2, [r7, #3]
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f6 fa15 	bl	8004be4 <HAL_PCD_EP_GetRxCount>
 800e7ba:	4603      	mov	r3, r0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e7cc:	4b03      	ldr	r3, [pc, #12]	; (800e7dc <USBD_static_malloc+0x18>)
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	370c      	adds	r7, #12
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	200069f0 	.word	0x200069f0

0800e7e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]

}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	2b03      	cmp	r3, #3
 800e806:	d817      	bhi.n	800e838 <USBD_Get_USB_Status+0x44>
 800e808:	a201      	add	r2, pc, #4	; (adr r2, 800e810 <USBD_Get_USB_Status+0x1c>)
 800e80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80e:	bf00      	nop
 800e810:	0800e821 	.word	0x0800e821
 800e814:	0800e827 	.word	0x0800e827
 800e818:	0800e82d 	.word	0x0800e82d
 800e81c:	0800e833 	.word	0x0800e833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
    break;
 800e824:	e00b      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e826:	2303      	movs	r3, #3
 800e828:	73fb      	strb	r3, [r7, #15]
    break;
 800e82a:	e008      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e82c:	2301      	movs	r3, #1
 800e82e:	73fb      	strb	r3, [r7, #15]
    break;
 800e830:	e005      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e832:	2303      	movs	r3, #3
 800e834:	73fb      	strb	r3, [r7, #15]
    break;
 800e836:	e002      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e838:	2303      	movs	r3, #3
 800e83a:	73fb      	strb	r3, [r7, #15]
    break;
 800e83c:	bf00      	nop
  }
  return usb_status;
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <__errno>:
 800e84c:	4b01      	ldr	r3, [pc, #4]	; (800e854 <__errno+0x8>)
 800e84e:	6818      	ldr	r0, [r3, #0]
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20000600 	.word	0x20000600

0800e858 <__libc_init_array>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	4d0d      	ldr	r5, [pc, #52]	; (800e890 <__libc_init_array+0x38>)
 800e85c:	4c0d      	ldr	r4, [pc, #52]	; (800e894 <__libc_init_array+0x3c>)
 800e85e:	1b64      	subs	r4, r4, r5
 800e860:	10a4      	asrs	r4, r4, #2
 800e862:	2600      	movs	r6, #0
 800e864:	42a6      	cmp	r6, r4
 800e866:	d109      	bne.n	800e87c <__libc_init_array+0x24>
 800e868:	4d0b      	ldr	r5, [pc, #44]	; (800e898 <__libc_init_array+0x40>)
 800e86a:	4c0c      	ldr	r4, [pc, #48]	; (800e89c <__libc_init_array+0x44>)
 800e86c:	f000 fcb2 	bl	800f1d4 <_init>
 800e870:	1b64      	subs	r4, r4, r5
 800e872:	10a4      	asrs	r4, r4, #2
 800e874:	2600      	movs	r6, #0
 800e876:	42a6      	cmp	r6, r4
 800e878:	d105      	bne.n	800e886 <__libc_init_array+0x2e>
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e880:	4798      	blx	r3
 800e882:	3601      	adds	r6, #1
 800e884:	e7ee      	b.n	800e864 <__libc_init_array+0xc>
 800e886:	f855 3b04 	ldr.w	r3, [r5], #4
 800e88a:	4798      	blx	r3
 800e88c:	3601      	adds	r6, #1
 800e88e:	e7f2      	b.n	800e876 <__libc_init_array+0x1e>
 800e890:	0800f794 	.word	0x0800f794
 800e894:	0800f794 	.word	0x0800f794
 800e898:	0800f794 	.word	0x0800f794
 800e89c:	0800f798 	.word	0x0800f798

0800e8a0 <malloc>:
 800e8a0:	4b02      	ldr	r3, [pc, #8]	; (800e8ac <malloc+0xc>)
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	6818      	ldr	r0, [r3, #0]
 800e8a6:	f000 b88d 	b.w	800e9c4 <_malloc_r>
 800e8aa:	bf00      	nop
 800e8ac:	20000600 	.word	0x20000600

0800e8b0 <free>:
 800e8b0:	4b02      	ldr	r3, [pc, #8]	; (800e8bc <free+0xc>)
 800e8b2:	4601      	mov	r1, r0
 800e8b4:	6818      	ldr	r0, [r3, #0]
 800e8b6:	f000 b819 	b.w	800e8ec <_free_r>
 800e8ba:	bf00      	nop
 800e8bc:	20000600 	.word	0x20000600

0800e8c0 <memcpy>:
 800e8c0:	440a      	add	r2, r1
 800e8c2:	4291      	cmp	r1, r2
 800e8c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8c8:	d100      	bne.n	800e8cc <memcpy+0xc>
 800e8ca:	4770      	bx	lr
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8d6:	4291      	cmp	r1, r2
 800e8d8:	d1f9      	bne.n	800e8ce <memcpy+0xe>
 800e8da:	bd10      	pop	{r4, pc}

0800e8dc <memset>:
 800e8dc:	4402      	add	r2, r0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d100      	bne.n	800e8e6 <memset+0xa>
 800e8e4:	4770      	bx	lr
 800e8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800e8ea:	e7f9      	b.n	800e8e0 <memset+0x4>

0800e8ec <_free_r>:
 800e8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8ee:	2900      	cmp	r1, #0
 800e8f0:	d044      	beq.n	800e97c <_free_r+0x90>
 800e8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f6:	9001      	str	r0, [sp, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e8fe:	bfb8      	it	lt
 800e900:	18e4      	addlt	r4, r4, r3
 800e902:	f000 f917 	bl	800eb34 <__malloc_lock>
 800e906:	4a1e      	ldr	r2, [pc, #120]	; (800e980 <_free_r+0x94>)
 800e908:	9801      	ldr	r0, [sp, #4]
 800e90a:	6813      	ldr	r3, [r2, #0]
 800e90c:	b933      	cbnz	r3, 800e91c <_free_r+0x30>
 800e90e:	6063      	str	r3, [r4, #4]
 800e910:	6014      	str	r4, [r2, #0]
 800e912:	b003      	add	sp, #12
 800e914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e918:	f000 b912 	b.w	800eb40 <__malloc_unlock>
 800e91c:	42a3      	cmp	r3, r4
 800e91e:	d908      	bls.n	800e932 <_free_r+0x46>
 800e920:	6825      	ldr	r5, [r4, #0]
 800e922:	1961      	adds	r1, r4, r5
 800e924:	428b      	cmp	r3, r1
 800e926:	bf01      	itttt	eq
 800e928:	6819      	ldreq	r1, [r3, #0]
 800e92a:	685b      	ldreq	r3, [r3, #4]
 800e92c:	1949      	addeq	r1, r1, r5
 800e92e:	6021      	streq	r1, [r4, #0]
 800e930:	e7ed      	b.n	800e90e <_free_r+0x22>
 800e932:	461a      	mov	r2, r3
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	b10b      	cbz	r3, 800e93c <_free_r+0x50>
 800e938:	42a3      	cmp	r3, r4
 800e93a:	d9fa      	bls.n	800e932 <_free_r+0x46>
 800e93c:	6811      	ldr	r1, [r2, #0]
 800e93e:	1855      	adds	r5, r2, r1
 800e940:	42a5      	cmp	r5, r4
 800e942:	d10b      	bne.n	800e95c <_free_r+0x70>
 800e944:	6824      	ldr	r4, [r4, #0]
 800e946:	4421      	add	r1, r4
 800e948:	1854      	adds	r4, r2, r1
 800e94a:	42a3      	cmp	r3, r4
 800e94c:	6011      	str	r1, [r2, #0]
 800e94e:	d1e0      	bne.n	800e912 <_free_r+0x26>
 800e950:	681c      	ldr	r4, [r3, #0]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	6053      	str	r3, [r2, #4]
 800e956:	4421      	add	r1, r4
 800e958:	6011      	str	r1, [r2, #0]
 800e95a:	e7da      	b.n	800e912 <_free_r+0x26>
 800e95c:	d902      	bls.n	800e964 <_free_r+0x78>
 800e95e:	230c      	movs	r3, #12
 800e960:	6003      	str	r3, [r0, #0]
 800e962:	e7d6      	b.n	800e912 <_free_r+0x26>
 800e964:	6825      	ldr	r5, [r4, #0]
 800e966:	1961      	adds	r1, r4, r5
 800e968:	428b      	cmp	r3, r1
 800e96a:	bf04      	itt	eq
 800e96c:	6819      	ldreq	r1, [r3, #0]
 800e96e:	685b      	ldreq	r3, [r3, #4]
 800e970:	6063      	str	r3, [r4, #4]
 800e972:	bf04      	itt	eq
 800e974:	1949      	addeq	r1, r1, r5
 800e976:	6021      	streq	r1, [r4, #0]
 800e978:	6054      	str	r4, [r2, #4]
 800e97a:	e7ca      	b.n	800e912 <_free_r+0x26>
 800e97c:	b003      	add	sp, #12
 800e97e:	bd30      	pop	{r4, r5, pc}
 800e980:	20006c10 	.word	0x20006c10

0800e984 <sbrk_aligned>:
 800e984:	b570      	push	{r4, r5, r6, lr}
 800e986:	4e0e      	ldr	r6, [pc, #56]	; (800e9c0 <sbrk_aligned+0x3c>)
 800e988:	460c      	mov	r4, r1
 800e98a:	6831      	ldr	r1, [r6, #0]
 800e98c:	4605      	mov	r5, r0
 800e98e:	b911      	cbnz	r1, 800e996 <sbrk_aligned+0x12>
 800e990:	f000 f88c 	bl	800eaac <_sbrk_r>
 800e994:	6030      	str	r0, [r6, #0]
 800e996:	4621      	mov	r1, r4
 800e998:	4628      	mov	r0, r5
 800e99a:	f000 f887 	bl	800eaac <_sbrk_r>
 800e99e:	1c43      	adds	r3, r0, #1
 800e9a0:	d00a      	beq.n	800e9b8 <sbrk_aligned+0x34>
 800e9a2:	1cc4      	adds	r4, r0, #3
 800e9a4:	f024 0403 	bic.w	r4, r4, #3
 800e9a8:	42a0      	cmp	r0, r4
 800e9aa:	d007      	beq.n	800e9bc <sbrk_aligned+0x38>
 800e9ac:	1a21      	subs	r1, r4, r0
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f000 f87c 	bl	800eaac <_sbrk_r>
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	d101      	bne.n	800e9bc <sbrk_aligned+0x38>
 800e9b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e9bc:	4620      	mov	r0, r4
 800e9be:	bd70      	pop	{r4, r5, r6, pc}
 800e9c0:	20006c14 	.word	0x20006c14

0800e9c4 <_malloc_r>:
 800e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c8:	1ccd      	adds	r5, r1, #3
 800e9ca:	f025 0503 	bic.w	r5, r5, #3
 800e9ce:	3508      	adds	r5, #8
 800e9d0:	2d0c      	cmp	r5, #12
 800e9d2:	bf38      	it	cc
 800e9d4:	250c      	movcc	r5, #12
 800e9d6:	2d00      	cmp	r5, #0
 800e9d8:	4607      	mov	r7, r0
 800e9da:	db01      	blt.n	800e9e0 <_malloc_r+0x1c>
 800e9dc:	42a9      	cmp	r1, r5
 800e9de:	d905      	bls.n	800e9ec <_malloc_r+0x28>
 800e9e0:	230c      	movs	r3, #12
 800e9e2:	603b      	str	r3, [r7, #0]
 800e9e4:	2600      	movs	r6, #0
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ec:	4e2e      	ldr	r6, [pc, #184]	; (800eaa8 <_malloc_r+0xe4>)
 800e9ee:	f000 f8a1 	bl	800eb34 <__malloc_lock>
 800e9f2:	6833      	ldr	r3, [r6, #0]
 800e9f4:	461c      	mov	r4, r3
 800e9f6:	bb34      	cbnz	r4, 800ea46 <_malloc_r+0x82>
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4638      	mov	r0, r7
 800e9fc:	f7ff ffc2 	bl	800e984 <sbrk_aligned>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	4604      	mov	r4, r0
 800ea04:	d14d      	bne.n	800eaa2 <_malloc_r+0xde>
 800ea06:	6834      	ldr	r4, [r6, #0]
 800ea08:	4626      	mov	r6, r4
 800ea0a:	2e00      	cmp	r6, #0
 800ea0c:	d140      	bne.n	800ea90 <_malloc_r+0xcc>
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	4631      	mov	r1, r6
 800ea12:	4638      	mov	r0, r7
 800ea14:	eb04 0803 	add.w	r8, r4, r3
 800ea18:	f000 f848 	bl	800eaac <_sbrk_r>
 800ea1c:	4580      	cmp	r8, r0
 800ea1e:	d13a      	bne.n	800ea96 <_malloc_r+0xd2>
 800ea20:	6821      	ldr	r1, [r4, #0]
 800ea22:	3503      	adds	r5, #3
 800ea24:	1a6d      	subs	r5, r5, r1
 800ea26:	f025 0503 	bic.w	r5, r5, #3
 800ea2a:	3508      	adds	r5, #8
 800ea2c:	2d0c      	cmp	r5, #12
 800ea2e:	bf38      	it	cc
 800ea30:	250c      	movcc	r5, #12
 800ea32:	4629      	mov	r1, r5
 800ea34:	4638      	mov	r0, r7
 800ea36:	f7ff ffa5 	bl	800e984 <sbrk_aligned>
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	d02b      	beq.n	800ea96 <_malloc_r+0xd2>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	442b      	add	r3, r5
 800ea42:	6023      	str	r3, [r4, #0]
 800ea44:	e00e      	b.n	800ea64 <_malloc_r+0xa0>
 800ea46:	6822      	ldr	r2, [r4, #0]
 800ea48:	1b52      	subs	r2, r2, r5
 800ea4a:	d41e      	bmi.n	800ea8a <_malloc_r+0xc6>
 800ea4c:	2a0b      	cmp	r2, #11
 800ea4e:	d916      	bls.n	800ea7e <_malloc_r+0xba>
 800ea50:	1961      	adds	r1, r4, r5
 800ea52:	42a3      	cmp	r3, r4
 800ea54:	6025      	str	r5, [r4, #0]
 800ea56:	bf18      	it	ne
 800ea58:	6059      	strne	r1, [r3, #4]
 800ea5a:	6863      	ldr	r3, [r4, #4]
 800ea5c:	bf08      	it	eq
 800ea5e:	6031      	streq	r1, [r6, #0]
 800ea60:	5162      	str	r2, [r4, r5]
 800ea62:	604b      	str	r3, [r1, #4]
 800ea64:	4638      	mov	r0, r7
 800ea66:	f104 060b 	add.w	r6, r4, #11
 800ea6a:	f000 f869 	bl	800eb40 <__malloc_unlock>
 800ea6e:	f026 0607 	bic.w	r6, r6, #7
 800ea72:	1d23      	adds	r3, r4, #4
 800ea74:	1af2      	subs	r2, r6, r3
 800ea76:	d0b6      	beq.n	800e9e6 <_malloc_r+0x22>
 800ea78:	1b9b      	subs	r3, r3, r6
 800ea7a:	50a3      	str	r3, [r4, r2]
 800ea7c:	e7b3      	b.n	800e9e6 <_malloc_r+0x22>
 800ea7e:	6862      	ldr	r2, [r4, #4]
 800ea80:	42a3      	cmp	r3, r4
 800ea82:	bf0c      	ite	eq
 800ea84:	6032      	streq	r2, [r6, #0]
 800ea86:	605a      	strne	r2, [r3, #4]
 800ea88:	e7ec      	b.n	800ea64 <_malloc_r+0xa0>
 800ea8a:	4623      	mov	r3, r4
 800ea8c:	6864      	ldr	r4, [r4, #4]
 800ea8e:	e7b2      	b.n	800e9f6 <_malloc_r+0x32>
 800ea90:	4634      	mov	r4, r6
 800ea92:	6876      	ldr	r6, [r6, #4]
 800ea94:	e7b9      	b.n	800ea0a <_malloc_r+0x46>
 800ea96:	230c      	movs	r3, #12
 800ea98:	603b      	str	r3, [r7, #0]
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	f000 f850 	bl	800eb40 <__malloc_unlock>
 800eaa0:	e7a1      	b.n	800e9e6 <_malloc_r+0x22>
 800eaa2:	6025      	str	r5, [r4, #0]
 800eaa4:	e7de      	b.n	800ea64 <_malloc_r+0xa0>
 800eaa6:	bf00      	nop
 800eaa8:	20006c10 	.word	0x20006c10

0800eaac <_sbrk_r>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	4d06      	ldr	r5, [pc, #24]	; (800eac8 <_sbrk_r+0x1c>)
 800eab0:	2300      	movs	r3, #0
 800eab2:	4604      	mov	r4, r0
 800eab4:	4608      	mov	r0, r1
 800eab6:	602b      	str	r3, [r5, #0]
 800eab8:	f7f3 fe54 	bl	8002764 <_sbrk>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_sbrk_r+0x1a>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_sbrk_r+0x1a>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	20006c18 	.word	0x20006c18

0800eacc <siprintf>:
 800eacc:	b40e      	push	{r1, r2, r3}
 800eace:	b500      	push	{lr}
 800ead0:	b09c      	sub	sp, #112	; 0x70
 800ead2:	ab1d      	add	r3, sp, #116	; 0x74
 800ead4:	9002      	str	r0, [sp, #8]
 800ead6:	9006      	str	r0, [sp, #24]
 800ead8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eadc:	4809      	ldr	r0, [pc, #36]	; (800eb04 <siprintf+0x38>)
 800eade:	9107      	str	r1, [sp, #28]
 800eae0:	9104      	str	r1, [sp, #16]
 800eae2:	4909      	ldr	r1, [pc, #36]	; (800eb08 <siprintf+0x3c>)
 800eae4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eae8:	9105      	str	r1, [sp, #20]
 800eaea:	6800      	ldr	r0, [r0, #0]
 800eaec:	9301      	str	r3, [sp, #4]
 800eaee:	a902      	add	r1, sp, #8
 800eaf0:	f000 f888 	bl	800ec04 <_svfiprintf_r>
 800eaf4:	9b02      	ldr	r3, [sp, #8]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	b01c      	add	sp, #112	; 0x70
 800eafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb00:	b003      	add	sp, #12
 800eb02:	4770      	bx	lr
 800eb04:	20000600 	.word	0x20000600
 800eb08:	ffff0208 	.word	0xffff0208

0800eb0c <strncpy>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	3901      	subs	r1, #1
 800eb10:	4603      	mov	r3, r0
 800eb12:	b132      	cbz	r2, 800eb22 <strncpy+0x16>
 800eb14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb18:	f803 4b01 	strb.w	r4, [r3], #1
 800eb1c:	3a01      	subs	r2, #1
 800eb1e:	2c00      	cmp	r4, #0
 800eb20:	d1f7      	bne.n	800eb12 <strncpy+0x6>
 800eb22:	441a      	add	r2, r3
 800eb24:	2100      	movs	r1, #0
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d100      	bne.n	800eb2c <strncpy+0x20>
 800eb2a:	bd10      	pop	{r4, pc}
 800eb2c:	f803 1b01 	strb.w	r1, [r3], #1
 800eb30:	e7f9      	b.n	800eb26 <strncpy+0x1a>
	...

0800eb34 <__malloc_lock>:
 800eb34:	4801      	ldr	r0, [pc, #4]	; (800eb3c <__malloc_lock+0x8>)
 800eb36:	f000 baf9 	b.w	800f12c <__retarget_lock_acquire_recursive>
 800eb3a:	bf00      	nop
 800eb3c:	20006c1c 	.word	0x20006c1c

0800eb40 <__malloc_unlock>:
 800eb40:	4801      	ldr	r0, [pc, #4]	; (800eb48 <__malloc_unlock+0x8>)
 800eb42:	f000 baf4 	b.w	800f12e <__retarget_lock_release_recursive>
 800eb46:	bf00      	nop
 800eb48:	20006c1c 	.word	0x20006c1c

0800eb4c <__ssputs_r>:
 800eb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb50:	688e      	ldr	r6, [r1, #8]
 800eb52:	429e      	cmp	r6, r3
 800eb54:	4682      	mov	sl, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	4690      	mov	r8, r2
 800eb5a:	461f      	mov	r7, r3
 800eb5c:	d838      	bhi.n	800ebd0 <__ssputs_r+0x84>
 800eb5e:	898a      	ldrh	r2, [r1, #12]
 800eb60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb64:	d032      	beq.n	800ebcc <__ssputs_r+0x80>
 800eb66:	6825      	ldr	r5, [r4, #0]
 800eb68:	6909      	ldr	r1, [r1, #16]
 800eb6a:	eba5 0901 	sub.w	r9, r5, r1
 800eb6e:	6965      	ldr	r5, [r4, #20]
 800eb70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb78:	3301      	adds	r3, #1
 800eb7a:	444b      	add	r3, r9
 800eb7c:	106d      	asrs	r5, r5, #1
 800eb7e:	429d      	cmp	r5, r3
 800eb80:	bf38      	it	cc
 800eb82:	461d      	movcc	r5, r3
 800eb84:	0553      	lsls	r3, r2, #21
 800eb86:	d531      	bpl.n	800ebec <__ssputs_r+0xa0>
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f7ff ff1b 	bl	800e9c4 <_malloc_r>
 800eb8e:	4606      	mov	r6, r0
 800eb90:	b950      	cbnz	r0, 800eba8 <__ssputs_r+0x5c>
 800eb92:	230c      	movs	r3, #12
 800eb94:	f8ca 3000 	str.w	r3, [sl]
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	f04f 30ff 	mov.w	r0, #4294967295
 800eba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba8:	6921      	ldr	r1, [r4, #16]
 800ebaa:	464a      	mov	r2, r9
 800ebac:	f7ff fe88 	bl	800e8c0 <memcpy>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	6126      	str	r6, [r4, #16]
 800ebbe:	6165      	str	r5, [r4, #20]
 800ebc0:	444e      	add	r6, r9
 800ebc2:	eba5 0509 	sub.w	r5, r5, r9
 800ebc6:	6026      	str	r6, [r4, #0]
 800ebc8:	60a5      	str	r5, [r4, #8]
 800ebca:	463e      	mov	r6, r7
 800ebcc:	42be      	cmp	r6, r7
 800ebce:	d900      	bls.n	800ebd2 <__ssputs_r+0x86>
 800ebd0:	463e      	mov	r6, r7
 800ebd2:	6820      	ldr	r0, [r4, #0]
 800ebd4:	4632      	mov	r2, r6
 800ebd6:	4641      	mov	r1, r8
 800ebd8:	f000 faaa 	bl	800f130 <memmove>
 800ebdc:	68a3      	ldr	r3, [r4, #8]
 800ebde:	1b9b      	subs	r3, r3, r6
 800ebe0:	60a3      	str	r3, [r4, #8]
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	4433      	add	r3, r6
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	2000      	movs	r0, #0
 800ebea:	e7db      	b.n	800eba4 <__ssputs_r+0x58>
 800ebec:	462a      	mov	r2, r5
 800ebee:	f000 fab9 	bl	800f164 <_realloc_r>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d1e1      	bne.n	800ebbc <__ssputs_r+0x70>
 800ebf8:	6921      	ldr	r1, [r4, #16]
 800ebfa:	4650      	mov	r0, sl
 800ebfc:	f7ff fe76 	bl	800e8ec <_free_r>
 800ec00:	e7c7      	b.n	800eb92 <__ssputs_r+0x46>
	...

0800ec04 <_svfiprintf_r>:
 800ec04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec08:	4698      	mov	r8, r3
 800ec0a:	898b      	ldrh	r3, [r1, #12]
 800ec0c:	061b      	lsls	r3, r3, #24
 800ec0e:	b09d      	sub	sp, #116	; 0x74
 800ec10:	4607      	mov	r7, r0
 800ec12:	460d      	mov	r5, r1
 800ec14:	4614      	mov	r4, r2
 800ec16:	d50e      	bpl.n	800ec36 <_svfiprintf_r+0x32>
 800ec18:	690b      	ldr	r3, [r1, #16]
 800ec1a:	b963      	cbnz	r3, 800ec36 <_svfiprintf_r+0x32>
 800ec1c:	2140      	movs	r1, #64	; 0x40
 800ec1e:	f7ff fed1 	bl	800e9c4 <_malloc_r>
 800ec22:	6028      	str	r0, [r5, #0]
 800ec24:	6128      	str	r0, [r5, #16]
 800ec26:	b920      	cbnz	r0, 800ec32 <_svfiprintf_r+0x2e>
 800ec28:	230c      	movs	r3, #12
 800ec2a:	603b      	str	r3, [r7, #0]
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec30:	e0d1      	b.n	800edd6 <_svfiprintf_r+0x1d2>
 800ec32:	2340      	movs	r3, #64	; 0x40
 800ec34:	616b      	str	r3, [r5, #20]
 800ec36:	2300      	movs	r3, #0
 800ec38:	9309      	str	r3, [sp, #36]	; 0x24
 800ec3a:	2320      	movs	r3, #32
 800ec3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec44:	2330      	movs	r3, #48	; 0x30
 800ec46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800edf0 <_svfiprintf_r+0x1ec>
 800ec4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec4e:	f04f 0901 	mov.w	r9, #1
 800ec52:	4623      	mov	r3, r4
 800ec54:	469a      	mov	sl, r3
 800ec56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec5a:	b10a      	cbz	r2, 800ec60 <_svfiprintf_r+0x5c>
 800ec5c:	2a25      	cmp	r2, #37	; 0x25
 800ec5e:	d1f9      	bne.n	800ec54 <_svfiprintf_r+0x50>
 800ec60:	ebba 0b04 	subs.w	fp, sl, r4
 800ec64:	d00b      	beq.n	800ec7e <_svfiprintf_r+0x7a>
 800ec66:	465b      	mov	r3, fp
 800ec68:	4622      	mov	r2, r4
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	f7ff ff6d 	bl	800eb4c <__ssputs_r>
 800ec72:	3001      	adds	r0, #1
 800ec74:	f000 80aa 	beq.w	800edcc <_svfiprintf_r+0x1c8>
 800ec78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec7a:	445a      	add	r2, fp
 800ec7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ec7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 80a2 	beq.w	800edcc <_svfiprintf_r+0x1c8>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec92:	f10a 0a01 	add.w	sl, sl, #1
 800ec96:	9304      	str	r3, [sp, #16]
 800ec98:	9307      	str	r3, [sp, #28]
 800ec9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec9e:	931a      	str	r3, [sp, #104]	; 0x68
 800eca0:	4654      	mov	r4, sl
 800eca2:	2205      	movs	r2, #5
 800eca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca8:	4851      	ldr	r0, [pc, #324]	; (800edf0 <_svfiprintf_r+0x1ec>)
 800ecaa:	f7f1 faa1 	bl	80001f0 <memchr>
 800ecae:	9a04      	ldr	r2, [sp, #16]
 800ecb0:	b9d8      	cbnz	r0, 800ecea <_svfiprintf_r+0xe6>
 800ecb2:	06d0      	lsls	r0, r2, #27
 800ecb4:	bf44      	itt	mi
 800ecb6:	2320      	movmi	r3, #32
 800ecb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecbc:	0711      	lsls	r1, r2, #28
 800ecbe:	bf44      	itt	mi
 800ecc0:	232b      	movmi	r3, #43	; 0x2b
 800ecc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecc6:	f89a 3000 	ldrb.w	r3, [sl]
 800ecca:	2b2a      	cmp	r3, #42	; 0x2a
 800eccc:	d015      	beq.n	800ecfa <_svfiprintf_r+0xf6>
 800ecce:	9a07      	ldr	r2, [sp, #28]
 800ecd0:	4654      	mov	r4, sl
 800ecd2:	2000      	movs	r0, #0
 800ecd4:	f04f 0c0a 	mov.w	ip, #10
 800ecd8:	4621      	mov	r1, r4
 800ecda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecde:	3b30      	subs	r3, #48	; 0x30
 800ece0:	2b09      	cmp	r3, #9
 800ece2:	d94e      	bls.n	800ed82 <_svfiprintf_r+0x17e>
 800ece4:	b1b0      	cbz	r0, 800ed14 <_svfiprintf_r+0x110>
 800ece6:	9207      	str	r2, [sp, #28]
 800ece8:	e014      	b.n	800ed14 <_svfiprintf_r+0x110>
 800ecea:	eba0 0308 	sub.w	r3, r0, r8
 800ecee:	fa09 f303 	lsl.w	r3, r9, r3
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	9304      	str	r3, [sp, #16]
 800ecf6:	46a2      	mov	sl, r4
 800ecf8:	e7d2      	b.n	800eca0 <_svfiprintf_r+0x9c>
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	1d19      	adds	r1, r3, #4
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	9103      	str	r1, [sp, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	bfbb      	ittet	lt
 800ed06:	425b      	neglt	r3, r3
 800ed08:	f042 0202 	orrlt.w	r2, r2, #2
 800ed0c:	9307      	strge	r3, [sp, #28]
 800ed0e:	9307      	strlt	r3, [sp, #28]
 800ed10:	bfb8      	it	lt
 800ed12:	9204      	strlt	r2, [sp, #16]
 800ed14:	7823      	ldrb	r3, [r4, #0]
 800ed16:	2b2e      	cmp	r3, #46	; 0x2e
 800ed18:	d10c      	bne.n	800ed34 <_svfiprintf_r+0x130>
 800ed1a:	7863      	ldrb	r3, [r4, #1]
 800ed1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed1e:	d135      	bne.n	800ed8c <_svfiprintf_r+0x188>
 800ed20:	9b03      	ldr	r3, [sp, #12]
 800ed22:	1d1a      	adds	r2, r3, #4
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	9203      	str	r2, [sp, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	bfb8      	it	lt
 800ed2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed30:	3402      	adds	r4, #2
 800ed32:	9305      	str	r3, [sp, #20]
 800ed34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee00 <_svfiprintf_r+0x1fc>
 800ed38:	7821      	ldrb	r1, [r4, #0]
 800ed3a:	2203      	movs	r2, #3
 800ed3c:	4650      	mov	r0, sl
 800ed3e:	f7f1 fa57 	bl	80001f0 <memchr>
 800ed42:	b140      	cbz	r0, 800ed56 <_svfiprintf_r+0x152>
 800ed44:	2340      	movs	r3, #64	; 0x40
 800ed46:	eba0 000a 	sub.w	r0, r0, sl
 800ed4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	4303      	orrs	r3, r0
 800ed52:	3401      	adds	r4, #1
 800ed54:	9304      	str	r3, [sp, #16]
 800ed56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed5a:	4826      	ldr	r0, [pc, #152]	; (800edf4 <_svfiprintf_r+0x1f0>)
 800ed5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed60:	2206      	movs	r2, #6
 800ed62:	f7f1 fa45 	bl	80001f0 <memchr>
 800ed66:	2800      	cmp	r0, #0
 800ed68:	d038      	beq.n	800eddc <_svfiprintf_r+0x1d8>
 800ed6a:	4b23      	ldr	r3, [pc, #140]	; (800edf8 <_svfiprintf_r+0x1f4>)
 800ed6c:	bb1b      	cbnz	r3, 800edb6 <_svfiprintf_r+0x1b2>
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	3307      	adds	r3, #7
 800ed72:	f023 0307 	bic.w	r3, r3, #7
 800ed76:	3308      	adds	r3, #8
 800ed78:	9303      	str	r3, [sp, #12]
 800ed7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed7c:	4433      	add	r3, r6
 800ed7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed80:	e767      	b.n	800ec52 <_svfiprintf_r+0x4e>
 800ed82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed86:	460c      	mov	r4, r1
 800ed88:	2001      	movs	r0, #1
 800ed8a:	e7a5      	b.n	800ecd8 <_svfiprintf_r+0xd4>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	3401      	adds	r4, #1
 800ed90:	9305      	str	r3, [sp, #20]
 800ed92:	4619      	mov	r1, r3
 800ed94:	f04f 0c0a 	mov.w	ip, #10
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed9e:	3a30      	subs	r2, #48	; 0x30
 800eda0:	2a09      	cmp	r2, #9
 800eda2:	d903      	bls.n	800edac <_svfiprintf_r+0x1a8>
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d0c5      	beq.n	800ed34 <_svfiprintf_r+0x130>
 800eda8:	9105      	str	r1, [sp, #20]
 800edaa:	e7c3      	b.n	800ed34 <_svfiprintf_r+0x130>
 800edac:	fb0c 2101 	mla	r1, ip, r1, r2
 800edb0:	4604      	mov	r4, r0
 800edb2:	2301      	movs	r3, #1
 800edb4:	e7f0      	b.n	800ed98 <_svfiprintf_r+0x194>
 800edb6:	ab03      	add	r3, sp, #12
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	462a      	mov	r2, r5
 800edbc:	4b0f      	ldr	r3, [pc, #60]	; (800edfc <_svfiprintf_r+0x1f8>)
 800edbe:	a904      	add	r1, sp, #16
 800edc0:	4638      	mov	r0, r7
 800edc2:	f3af 8000 	nop.w
 800edc6:	1c42      	adds	r2, r0, #1
 800edc8:	4606      	mov	r6, r0
 800edca:	d1d6      	bne.n	800ed7a <_svfiprintf_r+0x176>
 800edcc:	89ab      	ldrh	r3, [r5, #12]
 800edce:	065b      	lsls	r3, r3, #25
 800edd0:	f53f af2c 	bmi.w	800ec2c <_svfiprintf_r+0x28>
 800edd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edd6:	b01d      	add	sp, #116	; 0x74
 800edd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	462a      	mov	r2, r5
 800ede2:	4b06      	ldr	r3, [pc, #24]	; (800edfc <_svfiprintf_r+0x1f8>)
 800ede4:	a904      	add	r1, sp, #16
 800ede6:	4638      	mov	r0, r7
 800ede8:	f000 f87a 	bl	800eee0 <_printf_i>
 800edec:	e7eb      	b.n	800edc6 <_svfiprintf_r+0x1c2>
 800edee:	bf00      	nop
 800edf0:	0800f758 	.word	0x0800f758
 800edf4:	0800f762 	.word	0x0800f762
 800edf8:	00000000 	.word	0x00000000
 800edfc:	0800eb4d 	.word	0x0800eb4d
 800ee00:	0800f75e 	.word	0x0800f75e

0800ee04 <_printf_common>:
 800ee04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee08:	4616      	mov	r6, r2
 800ee0a:	4699      	mov	r9, r3
 800ee0c:	688a      	ldr	r2, [r1, #8]
 800ee0e:	690b      	ldr	r3, [r1, #16]
 800ee10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee14:	4293      	cmp	r3, r2
 800ee16:	bfb8      	it	lt
 800ee18:	4613      	movlt	r3, r2
 800ee1a:	6033      	str	r3, [r6, #0]
 800ee1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee20:	4607      	mov	r7, r0
 800ee22:	460c      	mov	r4, r1
 800ee24:	b10a      	cbz	r2, 800ee2a <_printf_common+0x26>
 800ee26:	3301      	adds	r3, #1
 800ee28:	6033      	str	r3, [r6, #0]
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	0699      	lsls	r1, r3, #26
 800ee2e:	bf42      	ittt	mi
 800ee30:	6833      	ldrmi	r3, [r6, #0]
 800ee32:	3302      	addmi	r3, #2
 800ee34:	6033      	strmi	r3, [r6, #0]
 800ee36:	6825      	ldr	r5, [r4, #0]
 800ee38:	f015 0506 	ands.w	r5, r5, #6
 800ee3c:	d106      	bne.n	800ee4c <_printf_common+0x48>
 800ee3e:	f104 0a19 	add.w	sl, r4, #25
 800ee42:	68e3      	ldr	r3, [r4, #12]
 800ee44:	6832      	ldr	r2, [r6, #0]
 800ee46:	1a9b      	subs	r3, r3, r2
 800ee48:	42ab      	cmp	r3, r5
 800ee4a:	dc26      	bgt.n	800ee9a <_printf_common+0x96>
 800ee4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee50:	1e13      	subs	r3, r2, #0
 800ee52:	6822      	ldr	r2, [r4, #0]
 800ee54:	bf18      	it	ne
 800ee56:	2301      	movne	r3, #1
 800ee58:	0692      	lsls	r2, r2, #26
 800ee5a:	d42b      	bmi.n	800eeb4 <_printf_common+0xb0>
 800ee5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee60:	4649      	mov	r1, r9
 800ee62:	4638      	mov	r0, r7
 800ee64:	47c0      	blx	r8
 800ee66:	3001      	adds	r0, #1
 800ee68:	d01e      	beq.n	800eea8 <_printf_common+0xa4>
 800ee6a:	6823      	ldr	r3, [r4, #0]
 800ee6c:	68e5      	ldr	r5, [r4, #12]
 800ee6e:	6832      	ldr	r2, [r6, #0]
 800ee70:	f003 0306 	and.w	r3, r3, #6
 800ee74:	2b04      	cmp	r3, #4
 800ee76:	bf08      	it	eq
 800ee78:	1aad      	subeq	r5, r5, r2
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	6922      	ldr	r2, [r4, #16]
 800ee7e:	bf0c      	ite	eq
 800ee80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee84:	2500      	movne	r5, #0
 800ee86:	4293      	cmp	r3, r2
 800ee88:	bfc4      	itt	gt
 800ee8a:	1a9b      	subgt	r3, r3, r2
 800ee8c:	18ed      	addgt	r5, r5, r3
 800ee8e:	2600      	movs	r6, #0
 800ee90:	341a      	adds	r4, #26
 800ee92:	42b5      	cmp	r5, r6
 800ee94:	d11a      	bne.n	800eecc <_printf_common+0xc8>
 800ee96:	2000      	movs	r0, #0
 800ee98:	e008      	b.n	800eeac <_printf_common+0xa8>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	4652      	mov	r2, sl
 800ee9e:	4649      	mov	r1, r9
 800eea0:	4638      	mov	r0, r7
 800eea2:	47c0      	blx	r8
 800eea4:	3001      	adds	r0, #1
 800eea6:	d103      	bne.n	800eeb0 <_printf_common+0xac>
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb0:	3501      	adds	r5, #1
 800eeb2:	e7c6      	b.n	800ee42 <_printf_common+0x3e>
 800eeb4:	18e1      	adds	r1, r4, r3
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	2030      	movs	r0, #48	; 0x30
 800eeba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eebe:	4422      	add	r2, r4
 800eec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eec8:	3302      	adds	r3, #2
 800eeca:	e7c7      	b.n	800ee5c <_printf_common+0x58>
 800eecc:	2301      	movs	r3, #1
 800eece:	4622      	mov	r2, r4
 800eed0:	4649      	mov	r1, r9
 800eed2:	4638      	mov	r0, r7
 800eed4:	47c0      	blx	r8
 800eed6:	3001      	adds	r0, #1
 800eed8:	d0e6      	beq.n	800eea8 <_printf_common+0xa4>
 800eeda:	3601      	adds	r6, #1
 800eedc:	e7d9      	b.n	800ee92 <_printf_common+0x8e>
	...

0800eee0 <_printf_i>:
 800eee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	7e0f      	ldrb	r7, [r1, #24]
 800eee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eee8:	2f78      	cmp	r7, #120	; 0x78
 800eeea:	4691      	mov	r9, r2
 800eeec:	4680      	mov	r8, r0
 800eeee:	460c      	mov	r4, r1
 800eef0:	469a      	mov	sl, r3
 800eef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eef6:	d807      	bhi.n	800ef08 <_printf_i+0x28>
 800eef8:	2f62      	cmp	r7, #98	; 0x62
 800eefa:	d80a      	bhi.n	800ef12 <_printf_i+0x32>
 800eefc:	2f00      	cmp	r7, #0
 800eefe:	f000 80d8 	beq.w	800f0b2 <_printf_i+0x1d2>
 800ef02:	2f58      	cmp	r7, #88	; 0x58
 800ef04:	f000 80a3 	beq.w	800f04e <_printf_i+0x16e>
 800ef08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef10:	e03a      	b.n	800ef88 <_printf_i+0xa8>
 800ef12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef16:	2b15      	cmp	r3, #21
 800ef18:	d8f6      	bhi.n	800ef08 <_printf_i+0x28>
 800ef1a:	a101      	add	r1, pc, #4	; (adr r1, 800ef20 <_printf_i+0x40>)
 800ef1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef20:	0800ef79 	.word	0x0800ef79
 800ef24:	0800ef8d 	.word	0x0800ef8d
 800ef28:	0800ef09 	.word	0x0800ef09
 800ef2c:	0800ef09 	.word	0x0800ef09
 800ef30:	0800ef09 	.word	0x0800ef09
 800ef34:	0800ef09 	.word	0x0800ef09
 800ef38:	0800ef8d 	.word	0x0800ef8d
 800ef3c:	0800ef09 	.word	0x0800ef09
 800ef40:	0800ef09 	.word	0x0800ef09
 800ef44:	0800ef09 	.word	0x0800ef09
 800ef48:	0800ef09 	.word	0x0800ef09
 800ef4c:	0800f099 	.word	0x0800f099
 800ef50:	0800efbd 	.word	0x0800efbd
 800ef54:	0800f07b 	.word	0x0800f07b
 800ef58:	0800ef09 	.word	0x0800ef09
 800ef5c:	0800ef09 	.word	0x0800ef09
 800ef60:	0800f0bb 	.word	0x0800f0bb
 800ef64:	0800ef09 	.word	0x0800ef09
 800ef68:	0800efbd 	.word	0x0800efbd
 800ef6c:	0800ef09 	.word	0x0800ef09
 800ef70:	0800ef09 	.word	0x0800ef09
 800ef74:	0800f083 	.word	0x0800f083
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	1d1a      	adds	r2, r3, #4
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	602a      	str	r2, [r5, #0]
 800ef80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e0a3      	b.n	800f0d4 <_printf_i+0x1f4>
 800ef8c:	6820      	ldr	r0, [r4, #0]
 800ef8e:	6829      	ldr	r1, [r5, #0]
 800ef90:	0606      	lsls	r6, r0, #24
 800ef92:	f101 0304 	add.w	r3, r1, #4
 800ef96:	d50a      	bpl.n	800efae <_printf_i+0xce>
 800ef98:	680e      	ldr	r6, [r1, #0]
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	2e00      	cmp	r6, #0
 800ef9e:	da03      	bge.n	800efa8 <_printf_i+0xc8>
 800efa0:	232d      	movs	r3, #45	; 0x2d
 800efa2:	4276      	negs	r6, r6
 800efa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efa8:	485e      	ldr	r0, [pc, #376]	; (800f124 <_printf_i+0x244>)
 800efaa:	230a      	movs	r3, #10
 800efac:	e019      	b.n	800efe2 <_printf_i+0x102>
 800efae:	680e      	ldr	r6, [r1, #0]
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efb6:	bf18      	it	ne
 800efb8:	b236      	sxthne	r6, r6
 800efba:	e7ef      	b.n	800ef9c <_printf_i+0xbc>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	6820      	ldr	r0, [r4, #0]
 800efc0:	1d19      	adds	r1, r3, #4
 800efc2:	6029      	str	r1, [r5, #0]
 800efc4:	0601      	lsls	r1, r0, #24
 800efc6:	d501      	bpl.n	800efcc <_printf_i+0xec>
 800efc8:	681e      	ldr	r6, [r3, #0]
 800efca:	e002      	b.n	800efd2 <_printf_i+0xf2>
 800efcc:	0646      	lsls	r6, r0, #25
 800efce:	d5fb      	bpl.n	800efc8 <_printf_i+0xe8>
 800efd0:	881e      	ldrh	r6, [r3, #0]
 800efd2:	4854      	ldr	r0, [pc, #336]	; (800f124 <_printf_i+0x244>)
 800efd4:	2f6f      	cmp	r7, #111	; 0x6f
 800efd6:	bf0c      	ite	eq
 800efd8:	2308      	moveq	r3, #8
 800efda:	230a      	movne	r3, #10
 800efdc:	2100      	movs	r1, #0
 800efde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efe2:	6865      	ldr	r5, [r4, #4]
 800efe4:	60a5      	str	r5, [r4, #8]
 800efe6:	2d00      	cmp	r5, #0
 800efe8:	bfa2      	ittt	ge
 800efea:	6821      	ldrge	r1, [r4, #0]
 800efec:	f021 0104 	bicge.w	r1, r1, #4
 800eff0:	6021      	strge	r1, [r4, #0]
 800eff2:	b90e      	cbnz	r6, 800eff8 <_printf_i+0x118>
 800eff4:	2d00      	cmp	r5, #0
 800eff6:	d04d      	beq.n	800f094 <_printf_i+0x1b4>
 800eff8:	4615      	mov	r5, r2
 800effa:	fbb6 f1f3 	udiv	r1, r6, r3
 800effe:	fb03 6711 	mls	r7, r3, r1, r6
 800f002:	5dc7      	ldrb	r7, [r0, r7]
 800f004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f008:	4637      	mov	r7, r6
 800f00a:	42bb      	cmp	r3, r7
 800f00c:	460e      	mov	r6, r1
 800f00e:	d9f4      	bls.n	800effa <_printf_i+0x11a>
 800f010:	2b08      	cmp	r3, #8
 800f012:	d10b      	bne.n	800f02c <_printf_i+0x14c>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	07de      	lsls	r6, r3, #31
 800f018:	d508      	bpl.n	800f02c <_printf_i+0x14c>
 800f01a:	6923      	ldr	r3, [r4, #16]
 800f01c:	6861      	ldr	r1, [r4, #4]
 800f01e:	4299      	cmp	r1, r3
 800f020:	bfde      	ittt	le
 800f022:	2330      	movle	r3, #48	; 0x30
 800f024:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f02c:	1b52      	subs	r2, r2, r5
 800f02e:	6122      	str	r2, [r4, #16]
 800f030:	f8cd a000 	str.w	sl, [sp]
 800f034:	464b      	mov	r3, r9
 800f036:	aa03      	add	r2, sp, #12
 800f038:	4621      	mov	r1, r4
 800f03a:	4640      	mov	r0, r8
 800f03c:	f7ff fee2 	bl	800ee04 <_printf_common>
 800f040:	3001      	adds	r0, #1
 800f042:	d14c      	bne.n	800f0de <_printf_i+0x1fe>
 800f044:	f04f 30ff 	mov.w	r0, #4294967295
 800f048:	b004      	add	sp, #16
 800f04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f04e:	4835      	ldr	r0, [pc, #212]	; (800f124 <_printf_i+0x244>)
 800f050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f054:	6829      	ldr	r1, [r5, #0]
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	f851 6b04 	ldr.w	r6, [r1], #4
 800f05c:	6029      	str	r1, [r5, #0]
 800f05e:	061d      	lsls	r5, r3, #24
 800f060:	d514      	bpl.n	800f08c <_printf_i+0x1ac>
 800f062:	07df      	lsls	r7, r3, #31
 800f064:	bf44      	itt	mi
 800f066:	f043 0320 	orrmi.w	r3, r3, #32
 800f06a:	6023      	strmi	r3, [r4, #0]
 800f06c:	b91e      	cbnz	r6, 800f076 <_printf_i+0x196>
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	f023 0320 	bic.w	r3, r3, #32
 800f074:	6023      	str	r3, [r4, #0]
 800f076:	2310      	movs	r3, #16
 800f078:	e7b0      	b.n	800efdc <_printf_i+0xfc>
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	f043 0320 	orr.w	r3, r3, #32
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	2378      	movs	r3, #120	; 0x78
 800f084:	4828      	ldr	r0, [pc, #160]	; (800f128 <_printf_i+0x248>)
 800f086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f08a:	e7e3      	b.n	800f054 <_printf_i+0x174>
 800f08c:	0659      	lsls	r1, r3, #25
 800f08e:	bf48      	it	mi
 800f090:	b2b6      	uxthmi	r6, r6
 800f092:	e7e6      	b.n	800f062 <_printf_i+0x182>
 800f094:	4615      	mov	r5, r2
 800f096:	e7bb      	b.n	800f010 <_printf_i+0x130>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	6826      	ldr	r6, [r4, #0]
 800f09c:	6961      	ldr	r1, [r4, #20]
 800f09e:	1d18      	adds	r0, r3, #4
 800f0a0:	6028      	str	r0, [r5, #0]
 800f0a2:	0635      	lsls	r5, r6, #24
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	d501      	bpl.n	800f0ac <_printf_i+0x1cc>
 800f0a8:	6019      	str	r1, [r3, #0]
 800f0aa:	e002      	b.n	800f0b2 <_printf_i+0x1d2>
 800f0ac:	0670      	lsls	r0, r6, #25
 800f0ae:	d5fb      	bpl.n	800f0a8 <_printf_i+0x1c8>
 800f0b0:	8019      	strh	r1, [r3, #0]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	6123      	str	r3, [r4, #16]
 800f0b6:	4615      	mov	r5, r2
 800f0b8:	e7ba      	b.n	800f030 <_printf_i+0x150>
 800f0ba:	682b      	ldr	r3, [r5, #0]
 800f0bc:	1d1a      	adds	r2, r3, #4
 800f0be:	602a      	str	r2, [r5, #0]
 800f0c0:	681d      	ldr	r5, [r3, #0]
 800f0c2:	6862      	ldr	r2, [r4, #4]
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7f1 f892 	bl	80001f0 <memchr>
 800f0cc:	b108      	cbz	r0, 800f0d2 <_printf_i+0x1f2>
 800f0ce:	1b40      	subs	r0, r0, r5
 800f0d0:	6060      	str	r0, [r4, #4]
 800f0d2:	6863      	ldr	r3, [r4, #4]
 800f0d4:	6123      	str	r3, [r4, #16]
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0dc:	e7a8      	b.n	800f030 <_printf_i+0x150>
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	4649      	mov	r1, r9
 800f0e4:	4640      	mov	r0, r8
 800f0e6:	47d0      	blx	sl
 800f0e8:	3001      	adds	r0, #1
 800f0ea:	d0ab      	beq.n	800f044 <_printf_i+0x164>
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	079b      	lsls	r3, r3, #30
 800f0f0:	d413      	bmi.n	800f11a <_printf_i+0x23a>
 800f0f2:	68e0      	ldr	r0, [r4, #12]
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	4298      	cmp	r0, r3
 800f0f8:	bfb8      	it	lt
 800f0fa:	4618      	movlt	r0, r3
 800f0fc:	e7a4      	b.n	800f048 <_printf_i+0x168>
 800f0fe:	2301      	movs	r3, #1
 800f100:	4632      	mov	r2, r6
 800f102:	4649      	mov	r1, r9
 800f104:	4640      	mov	r0, r8
 800f106:	47d0      	blx	sl
 800f108:	3001      	adds	r0, #1
 800f10a:	d09b      	beq.n	800f044 <_printf_i+0x164>
 800f10c:	3501      	adds	r5, #1
 800f10e:	68e3      	ldr	r3, [r4, #12]
 800f110:	9903      	ldr	r1, [sp, #12]
 800f112:	1a5b      	subs	r3, r3, r1
 800f114:	42ab      	cmp	r3, r5
 800f116:	dcf2      	bgt.n	800f0fe <_printf_i+0x21e>
 800f118:	e7eb      	b.n	800f0f2 <_printf_i+0x212>
 800f11a:	2500      	movs	r5, #0
 800f11c:	f104 0619 	add.w	r6, r4, #25
 800f120:	e7f5      	b.n	800f10e <_printf_i+0x22e>
 800f122:	bf00      	nop
 800f124:	0800f769 	.word	0x0800f769
 800f128:	0800f77a 	.word	0x0800f77a

0800f12c <__retarget_lock_acquire_recursive>:
 800f12c:	4770      	bx	lr

0800f12e <__retarget_lock_release_recursive>:
 800f12e:	4770      	bx	lr

0800f130 <memmove>:
 800f130:	4288      	cmp	r0, r1
 800f132:	b510      	push	{r4, lr}
 800f134:	eb01 0402 	add.w	r4, r1, r2
 800f138:	d902      	bls.n	800f140 <memmove+0x10>
 800f13a:	4284      	cmp	r4, r0
 800f13c:	4623      	mov	r3, r4
 800f13e:	d807      	bhi.n	800f150 <memmove+0x20>
 800f140:	1e43      	subs	r3, r0, #1
 800f142:	42a1      	cmp	r1, r4
 800f144:	d008      	beq.n	800f158 <memmove+0x28>
 800f146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f14e:	e7f8      	b.n	800f142 <memmove+0x12>
 800f150:	4402      	add	r2, r0
 800f152:	4601      	mov	r1, r0
 800f154:	428a      	cmp	r2, r1
 800f156:	d100      	bne.n	800f15a <memmove+0x2a>
 800f158:	bd10      	pop	{r4, pc}
 800f15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f162:	e7f7      	b.n	800f154 <memmove+0x24>

0800f164 <_realloc_r>:
 800f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f168:	4680      	mov	r8, r0
 800f16a:	4614      	mov	r4, r2
 800f16c:	460e      	mov	r6, r1
 800f16e:	b921      	cbnz	r1, 800f17a <_realloc_r+0x16>
 800f170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f174:	4611      	mov	r1, r2
 800f176:	f7ff bc25 	b.w	800e9c4 <_malloc_r>
 800f17a:	b92a      	cbnz	r2, 800f188 <_realloc_r+0x24>
 800f17c:	f7ff fbb6 	bl	800e8ec <_free_r>
 800f180:	4625      	mov	r5, r4
 800f182:	4628      	mov	r0, r5
 800f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f188:	f000 f81b 	bl	800f1c2 <_malloc_usable_size_r>
 800f18c:	4284      	cmp	r4, r0
 800f18e:	4607      	mov	r7, r0
 800f190:	d802      	bhi.n	800f198 <_realloc_r+0x34>
 800f192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f196:	d812      	bhi.n	800f1be <_realloc_r+0x5a>
 800f198:	4621      	mov	r1, r4
 800f19a:	4640      	mov	r0, r8
 800f19c:	f7ff fc12 	bl	800e9c4 <_malloc_r>
 800f1a0:	4605      	mov	r5, r0
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d0ed      	beq.n	800f182 <_realloc_r+0x1e>
 800f1a6:	42bc      	cmp	r4, r7
 800f1a8:	4622      	mov	r2, r4
 800f1aa:	4631      	mov	r1, r6
 800f1ac:	bf28      	it	cs
 800f1ae:	463a      	movcs	r2, r7
 800f1b0:	f7ff fb86 	bl	800e8c0 <memcpy>
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	f7ff fb98 	bl	800e8ec <_free_r>
 800f1bc:	e7e1      	b.n	800f182 <_realloc_r+0x1e>
 800f1be:	4635      	mov	r5, r6
 800f1c0:	e7df      	b.n	800f182 <_realloc_r+0x1e>

0800f1c2 <_malloc_usable_size_r>:
 800f1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1c6:	1f18      	subs	r0, r3, #4
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	bfbc      	itt	lt
 800f1cc:	580b      	ldrlt	r3, [r1, r0]
 800f1ce:	18c0      	addlt	r0, r0, r3
 800f1d0:	4770      	bx	lr
	...

0800f1d4 <_init>:
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	bf00      	nop
 800f1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1da:	bc08      	pop	{r3}
 800f1dc:	469e      	mov	lr, r3
 800f1de:	4770      	bx	lr

0800f1e0 <_fini>:
 800f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e2:	bf00      	nop
 800f1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e6:	bc08      	pop	{r3}
 800f1e8:	469e      	mov	lr, r3
 800f1ea:	4770      	bx	lr
