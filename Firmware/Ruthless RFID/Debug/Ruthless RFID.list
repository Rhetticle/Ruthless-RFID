
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fab0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800fc50  0800fc50  0001fc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103fc  080103fc  0003067c  2**0
                  CONTENTS
  4 .ARM          00000008  080103fc  080103fc  000203fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010404  08010404  0003067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010404  08010404  00020404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010408  08010408  00020408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000067c  20000000  0801040c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065b4  2000067c  08010a88  0003067c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c30  08010a88  00036c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003067c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028297  00000000  00000000  000306ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a36  00000000  00000000  00058943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  0005e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ed8  00000000  00000000  00060498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8d6  00000000  00000000  00062370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027867  00000000  00000000  0007fc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eece  00000000  00000000  000a74ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014637b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f68  00000000  00000000  001463cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000067c 	.word	0x2000067c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc38 	.word	0x0800fc38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000680 	.word	0x20000680
 80001dc:	0800fc38 	.word	0x0800fc38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f003 fbe6 	bl	8003d90 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000698 	.word	0x20000698

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f003 fcc1 	bl	8003f84 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000698 	.word	0x20000698

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f003 fba3 	bl	8003d90 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 ff83 	bl	8003560 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000698 	.word	0x20000698

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f003 fc6f 	bl	8003f84 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 ff55 	bl	8003560 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000698 	.word	0x20000698

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 fee5 	bl	8003560 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f003 f95f 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f003 f95a 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 feb5 	bl	8003560 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f003 f952 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 fead 	bl	8003560 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 fe57 	bl	8003560 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 80008ce:	2352      	movs	r3, #82	; 0x52
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000906:	2350      	movs	r3, #80	; 0x50
 8000908:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 800090a:	f107 0208 	add.w	r2, r7, #8
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2102      	movs	r1, #2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff1f 	bl	8000758 <CALC_CRC>
 800091a:	4603      	mov	r3, r0
 800091c:	2bcc      	cmp	r3, #204	; 0xcc
 800091e:	d001      	beq.n	8000924 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000920:	23ee      	movs	r3, #238	; 0xee
 8000922:	e013      	b.n	800094c <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	3302      	adds	r3, #2
 800092a:	893a      	ldrh	r2, [r7, #8]
 800092c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 800092e:	1dfa      	adds	r2, r7, #7
 8000930:	f107 000c 	add.w	r0, r7, #12
 8000934:	2300      	movs	r3, #0
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2301      	movs	r3, #1
 800093a:	2104      	movs	r1, #4
 800093c:	f7ff ff7e 	bl	800083c <MFRC_TRANSCEIVE>
 8000940:	4603      	mov	r3, r0
 8000942:	2bcc      	cmp	r3, #204	; 0xcc
 8000944:	d001      	beq.n	800094a <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000946:	23aa      	movs	r3, #170	; 0xaa
 8000948:	e000      	b.n	800094c <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 800094a:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af02      	add	r7, sp, #8
 800095a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 800095c:	f242 0393 	movw	r3, #8339	; 0x2093
 8000960:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	200e      	movs	r0, #14
 8000966:	f7ff fece 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2305      	movs	r3, #5
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	2102      	movs	r1, #2
 8000978:	f7ff ff60 	bl	800083c <MFRC_TRANSCEIVE>
 800097c:	4603      	mov	r3, r0
 800097e:	2bcc      	cmp	r3, #204	; 0xcc
 8000980:	d001      	beq.n	8000986 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000982:	23aa      	movs	r3, #170	; 0xaa
 8000984:	e000      	b.n	8000988 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000986:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 800099a:	f247 0393 	movw	r3, #28819	; 0x7093
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	3302      	adds	r3, #2
 80009b0:	2205      	movs	r2, #5
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00e fcad 	bl	800f314 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009ba:	f107 0208 	add.w	r2, r7, #8
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2107      	movs	r1, #7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fec7 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	3307      	adds	r3, #7
 80009d0:	893a      	ldrh	r2, [r7, #8]
 80009d2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 80009d4:	f107 000c 	add.w	r0, r7, #12
 80009d8:	2300      	movs	r3, #0
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2303      	movs	r3, #3
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	2109      	movs	r1, #9
 80009e2:	f7ff ff2b 	bl	800083c <MFRC_TRANSCEIVE>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ea:	d001      	beq.n	80009f0 <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 80009ec:	23aa      	movs	r3, #170	; 0xaa
 80009ee:	e000      	b.n	80009f2 <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 80009f0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a02:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a06:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f7ff fe7b 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a10:	f107 000c 	add.w	r0, r7, #12
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2305      	movs	r3, #5
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	f7ff ff0d 	bl	800083c <MFRC_TRANSCEIVE>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2bcc      	cmp	r3, #204	; 0xcc
 8000a26:	d001      	beq.n	8000a2c <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a28:	23aa      	movs	r3, #170	; 0xaa
 8000a2a:	e000      	b.n	8000a2e <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a2c:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b088      	sub	sp, #32
 8000a3a:	af02      	add	r7, sp, #8
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a40:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	3302      	adds	r3, #2
 8000a56:	2205      	movs	r2, #5
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00e fc5a 	bl	800f314 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a60:	f107 0208 	add.w	r2, r7, #8
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2107      	movs	r1, #7
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe74 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	3307      	adds	r3, #7
 8000a76:	893a      	ldrh	r2, [r7, #8]
 8000a78:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a7a:	f107 000c 	add.w	r0, r7, #12
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2303      	movs	r3, #3
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	2109      	movs	r1, #9
 8000a88:	f7ff fed8 	bl	800083c <MFRC_TRANSCEIVE>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a90:	d001      	beq.n	8000a96 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a92:	23aa      	movs	r3, #170	; 0xaa
 8000a94:	e000      	b.n	8000a98 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a96:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 8000aa6:	f000 f839 	bl	8000b1c <PICC_CHECK>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2bcc      	cmp	r3, #204	; 0xcc
 8000aae:	d001      	beq.n	8000ab4 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000ab0:	23aa      	movs	r3, #170	; 0xaa
 8000ab2:	e02f      	b.n	8000b14 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff05 	bl	80008c6 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff47 	bl	8000954 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000ac6:	7e3b      	ldrb	r3, [r7, #24]
 8000ac8:	2b88      	cmp	r3, #136	; 0x88
 8000aca:	d001      	beq.n	8000ad0 <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e021      	b.n	8000b14 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f002 fd45 	bl	8003560 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000ad6:	f107 0214 	add.w	r2, r7, #20
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff55 	bl	8000990 <MFRC_SEL1>
	  HAL_Delay(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f002 fd3a 	bl	8003560 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff82 	bl	80009fa <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000af6:	200a      	movs	r0, #10
 8000af8:	f002 fd32 	bl	8003560 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000afc:	f107 0208 	add.w	r2, r7, #8
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff95 	bl	8000a36 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f002 fd27 	bl	8003560 <HAL_Delay>
	  return(PCD_OK);
 8000b12:	23cc      	movs	r3, #204	; 0xcc
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fece 	bl	80008c6 <MFRC_WUPA>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2bcc      	cmp	r3, #204	; 0xcc
 8000b2e:	d001      	beq.n	8000b34 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b30:	23aa      	movs	r3, #170	; 0xaa
 8000b32:	e00a      	b.n	8000b4a <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000b34:	793b      	ldrb	r3, [r7, #4]
 8000b36:	2b44      	cmp	r3, #68	; 0x44
 8000b38:	d102      	bne.n	8000b40 <PICC_CHECK+0x24>
 8000b3a:	797b      	ldrb	r3, [r7, #5]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000b40:	23aa      	movs	r3, #170	; 0xaa
 8000b42:	e002      	b.n	8000b4a <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8000b44:	f7ff fedc 	bl	8000900 <MFRC_HALTA>
			return(PCD_OK);
 8000b48:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af02      	add	r7, sp, #8
 8000b58:	4603      	mov	r3, r0
 8000b5a:	6039      	str	r1, [r7, #0]
 8000b5c:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	2330      	movs	r3, #48	; 0x30
 8000b64:	733b      	strb	r3, [r7, #12]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b6a:	f107 0208 	add.w	r2, r7, #8
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fdef 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	3302      	adds	r3, #2
 8000b80:	893a      	ldrh	r2, [r7, #8]
 8000b82:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b84:	f107 000c 	add.w	r0, r7, #12
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	2104      	movs	r1, #4
 8000b92:	f7ff fe53 	bl	800083c <MFRC_TRANSCEIVE>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2bcc      	cmp	r3, #204	; 0xcc
 8000b9a:	d001      	beq.n	8000ba0 <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 8000b9c:	23aa      	movs	r3, #170	; 0xaa
 8000b9e:	e000      	b.n	8000ba2 <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 8000ba0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b088      	sub	sp, #32
 8000bae:	af02      	add	r7, sp, #8
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	6039      	str	r1, [r7, #0]
 8000bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	23a2      	movs	r3, #162	; 0xa2
 8000bc2:	743b      	strb	r3, [r7, #16]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d801      	bhi.n	8000bd2 <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e022      	b.n	8000c18 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 8000bde:	f107 020c 	add.w	r2, r7, #12
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2106      	movs	r1, #6
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fdb5 	bl	8000758 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	3306      	adds	r3, #6
 8000bf4:	89ba      	ldrh	r2, [r7, #12]
 8000bf6:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8000bf8:	f107 020f 	add.w	r2, r7, #15
 8000bfc:	f107 0010 	add.w	r0, r7, #16
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2108      	movs	r1, #8
 8000c08:	f7ff fe18 	bl	800083c <MFRC_TRANSCEIVE>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2bcc      	cmp	r3, #204	; 0xcc
 8000c10:	d001      	beq.n	8000c16 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 8000c12:	23aa      	movs	r3, #170	; 0xaa
 8000c14:	e000      	b.n	8000c18 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8000c16:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff8f 	bl	8000b52 <UL_READ>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2bcc      	cmp	r3, #204	; 0xcc
 8000c38:	d001      	beq.n	8000c3e <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000c3a:	23aa      	movs	r3, #170	; 0xaa
 8000c3c:	e007      	b.n	8000c4e <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2207      	movs	r2, #7
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f00e fb64 	bl	800f314 <memcpy>
	return PCD_OK;
 8000c4c:	23cc      	movs	r3, #204	; 0xcc
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e010      	b.n	8000c86 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff71 	bl	8000b52 <UL_READ>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2bcc      	cmp	r3, #204	; 0xcc
 8000c74:	d001      	beq.n	8000c7a <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e009      	b.n	8000c8e <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3310      	adds	r3, #16
 8000c7e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3304      	adds	r3, #4
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b0e      	cmp	r3, #14
 8000c8a:	ddeb      	ble.n	8000c64 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8000c8c:	23cc      	movs	r3, #204	; 0xcc
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <UL_readcard+0x64>)
 8000ca4:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <UL_readcard+0x68>)
 8000caa:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2207      	movs	r2, #7
 8000cb0:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2240      	movs	r2, #64	; 0x40
 8000cb6:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 8000cbe:	f7ff feef 	bl	8000aa0 <PICC_Select>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2bcc      	cmp	r3, #204	; 0xcc
 8000cc6:	d001      	beq.n	8000ccc <UL_readcard+0x34>
		return PCD_NO_PICC;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e012      	b.n	8000cf2 <UL_readcard+0x5a>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffa5 	bl	8000c20 <UL_getuid>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2bcc      	cmp	r3, #204	; 0xcc
 8000cda:	d107      	bne.n	8000cec <UL_readcard+0x54>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffb8 	bl	8000c56 <UL_getalldata>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2bcc      	cmp	r3, #204	; 0xcc
 8000cea:	d001      	beq.n	8000cf0 <UL_readcard+0x58>
		return PCD_COMM_ERR;
 8000cec:	23aa      	movs	r3, #170	; 0xaa
 8000cee:	e000      	b.n	8000cf2 <UL_readcard+0x5a>
	}
	return PCD_OK;
 8000cf0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0800fcb0 	.word	0x0800fcb0
 8000d00:	0800fcc4 	.word	0x0800fcc4

08000d04 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 8000d0c:	2030      	movs	r0, #48	; 0x30
 8000d0e:	f00e faf1 	bl	800f2f4 <malloc>
 8000d12:	4603      	mov	r3, r0
 8000d14:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	3310      	adds	r3, #16
 8000d1c:	2230      	movs	r2, #48	; 0x30
 8000d1e:	4619      	mov	r1, r3
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	f00e faf7 	bl	800f314 <memcpy>

	if (PICC_Select() != PCD_OK) {
 8000d26:	f7ff febb 	bl	8000aa0 <PICC_Select>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2bcc      	cmp	r3, #204	; 0xcc
 8000d2e:	d004      	beq.n	8000d3a <UL_writecard+0x36>
		free(data_to_write);
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f00e fae7 	bl	800f304 <free>
		return PCD_NO_PICC;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e020      	b.n	8000d7c <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e016      	b.n	8000d6e <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3b04      	subs	r3, #4
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	440b      	add	r3, r1
 8000d50:	4619      	mov	r1, r3
 8000d52:	4610      	mov	r0, r2
 8000d54:	f7ff ff29 	bl	8000baa <UL_WRITE>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2bcc      	cmp	r3, #204	; 0xcc
 8000d5c:	d004      	beq.n	8000d68 <UL_writecard+0x64>
			free(data_to_write);
 8000d5e:	68b8      	ldr	r0, [r7, #8]
 8000d60:	f00e fad0 	bl	800f304 <free>
			return PCD_COMM_ERR;
 8000d64:	23aa      	movs	r3, #170	; 0xaa
 8000d66:	e009      	b.n	8000d7c <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	dde5      	ble.n	8000d40 <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 8000d74:	68b8      	ldr	r0, [r7, #8]
 8000d76:	f00e fac5 	bl	800f304 <free>
	return PCD_OK;
 8000d7a:	23cc      	movs	r3, #204	; 0xcc
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	3301      	adds	r3, #1
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00e faac 	bl	800f2f4 <malloc>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e023      	b.n	8000dee <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	d80d      	bhi.n	8000dce <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	461a      	mov	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1898      	adds	r0, r3, r2
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4912      	ldr	r1, [pc, #72]	; (8000e10 <uid_tostring+0x8c>)
 8000dc8:	f00e fbaa 	bl	800f520 <siprintf>
 8000dcc:	e00c      	b.n	8000de8 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1898      	adds	r0, r3, r2
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <uid_tostring+0x90>)
 8000de4:	f00e fb9c 	bl	800f520 <siprintf>
	for (int i = 0; i < size; i++) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dbd7      	blt.n	8000da6 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	return result;
 8000e04:	68bb      	ldr	r3, [r7, #8]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800fccc 	.word	0x0800fccc
 8000e14:	0800fcd0 	.word	0x0800fcd0

08000e18 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 8000e20:	201c      	movs	r0, #28
 8000e22:	f00e fa67 	bl	800f2f4 <malloc>
 8000e26:	4603      	mov	r3, r0
 8000e28:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8000e2a:	2040      	movs	r0, #64	; 0x40
 8000e2c:	f00e fa62 	bl	800f2f4 <malloc>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000e38:	2007      	movs	r0, #7
 8000e3a:	f00e fa5b 	bl	800f2f4 <malloc>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8000e46:	68b8      	ldr	r0, [r7, #8]
 8000e48:	f7ff ff26 	bl	8000c98 <UL_readcard>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2bcc      	cmp	r3, #204	; 0xcc
 8000e50:	d001      	beq.n	8000e56 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 8000e52:	23aa      	movs	r3, #170	; 0xaa
 8000e54:	e031      	b.n	8000eba <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e01d      	b.n	8000e98 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6959      	ldr	r1, [r3, #20]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d00e      	beq.n	8000e92 <UL_verify+0x7a>
			free(read->contents);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f00e fa43 	bl	800f304 <free>
			free(read->uid);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f00e fa3e 	bl	800f304 <free>
			free(read);
 8000e88:	68b8      	ldr	r0, [r7, #8]
 8000e8a:	f00e fa3b 	bl	800f304 <free>
			return PCD_VERIFY_ERR;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e013      	b.n	8000eba <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e9c:	ddde      	ble.n	8000e5c <UL_verify+0x44>
		}
	}
	free(read->contents);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00e fa2e 	bl	800f304 <free>
	free(read->uid);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00e fa29 	bl	800f304 <free>
	free(read);
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	f00e fa26 	bl	800f304 <free>
	return PCD_OK;
 8000eb8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000eca:	463b      	mov	r3, r7
 8000ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00e fa2c 	bl	800f330 <memset>
	OLED_FLUSH(zeros);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f87c 	bl	8000fd8 <OLED_FLUSH>

}
 8000ee0:	bf00      	nop
 8000ee2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <OLED_cmd+0x68>)
 8000f00:	f002 fdd0 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <OLED_cmd+0x6c>)
 8000f0a:	f002 fdcb 	bl	8003aa4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000f0e:	f107 010f 	add.w	r1, r7, #15
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	2201      	movs	r2, #1
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <OLED_cmd+0x70>)
 8000f1a:	f005 fd6e 	bl	80069fa <HAL_SPI_Transmit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	480a      	ldr	r0, [pc, #40]	; (8000f54 <OLED_cmd+0x68>)
 8000f2a:	f002 fdbb 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f002 fb16 	bl	8003560 <HAL_Delay>
		return(HAL_ERROR);
 8000f34:	2301      	movs	r3, #1
 8000f36:	e008      	b.n	8000f4a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <OLED_cmd+0x68>)
 8000f3e:	f002 fdb1 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f002 fb0c 	bl	8003560 <HAL_Delay>
		return(HAL_OK);
 8000f48:	2300      	movs	r3, #0
	}

}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	200006ec 	.word	0x200006ec

08000f60 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <OLED_data+0x6c>)
 8000f72:	f002 fd97 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <OLED_data+0x70>)
 8000f7c:	f002 fd92 	bl	8003aa4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <OLED_data+0x74>)
 8000f8c:	f005 fd35 	bl	80069fa <HAL_SPI_Transmit>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <OLED_data+0x70>)
 8000f9c:	f002 fd82 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <OLED_data+0x6c>)
 8000fa6:	f002 fd7d 	bl	8003aa4 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00a      	b.n	8000fc4 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <OLED_data+0x70>)
 8000fb4:	f002 fd76 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <OLED_data+0x6c>)
 8000fbe:	f002 fd71 	bl	8003aa4 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000fc2:	2300      	movs	r3, #0
	}



}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	200006ec 	.word	0x200006ec

08000fd8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e023      	b.n	800102e <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3b50      	subs	r3, #80	; 0x50
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff7c 	bl	8000eec <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff ff79 	bl	8000eec <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000ffa:	2010      	movs	r0, #16
 8000ffc:	f7ff ff76 	bl	8000eec <OLED_cmd>
		for(int i=0;i<128;i++){
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	e00d      	b.n	8001022 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	01da      	lsls	r2, r3, #7
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffa2 	bl	8000f60 <OLED_data>
		for(int i=0;i<128;i++){
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3301      	adds	r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b7f      	cmp	r3, #127	; 0x7f
 8001026:	ddee      	ble.n	8001006 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b07      	cmp	r3, #7
 8001032:	ddd8      	ble.n	8000fe6 <OLED_FLUSH+0xe>
		}


	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	482f      	ldr	r0, [pc, #188]	; (8001108 <OLED_INIT+0xc8>)
 800104c:	f002 fd2a 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	2108      	movs	r1, #8
 8001054:	482c      	ldr	r0, [pc, #176]	; (8001108 <OLED_INIT+0xc8>)
 8001056:	f002 fd25 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	482b      	ldr	r0, [pc, #172]	; (800110c <OLED_INIT+0xcc>)
 8001060:	f002 fd20 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f002 fa7b 	bl	8003560 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2108      	movs	r1, #8
 800106e:	4826      	ldr	r0, [pc, #152]	; (8001108 <OLED_INIT+0xc8>)
 8001070:	f002 fd18 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f002 fa73 	bl	8003560 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	2108      	movs	r1, #8
 800107e:	4822      	ldr	r0, [pc, #136]	; (8001108 <OLED_INIT+0xc8>)
 8001080:	f002 fd10 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001084:	2064      	movs	r0, #100	; 0x64
 8001086:	f002 fa6b 	bl	8003560 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <OLED_INIT+0xd0>)
 800108c:	463c      	mov	r4, r7
 800108e:	461d      	mov	r5, r3
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001098:	c403      	stmia	r4!, {r0, r1}
 800109a:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	e00c      	b.n	80010bc <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80010a2:	463a      	mov	r2, r7
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff1e 	bl	8000eec <OLED_cmd>
		HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f002 fa55 	bl	8003560 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b18      	cmp	r3, #24
 80010c0:	ddef      	ble.n	80010a2 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80010c2:	20a7      	movs	r0, #167	; 0xa7
 80010c4:	f7ff ff12 	bl	8000eec <OLED_cmd>
	OLED_FLUSH(HVE);
 80010c8:	4812      	ldr	r0, [pc, #72]	; (8001114 <OLED_INIT+0xd4>)
 80010ca:	f7ff ff85 	bl	8000fd8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80010ce:	20af      	movs	r0, #175	; 0xaf
 80010d0:	f7ff ff0c 	bl	8000eec <OLED_cmd>
	HAL_Delay(1000);
 80010d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d8:	f002 fa42 	bl	8003560 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80010dc:	20ae      	movs	r0, #174	; 0xae
 80010de:	f7ff ff05 	bl	8000eec <OLED_cmd>
	HAL_Delay(10);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f002 fa3c 	bl	8003560 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80010e8:	20a6      	movs	r0, #166	; 0xa6
 80010ea:	f7ff feff 	bl	8000eec <OLED_cmd>
	HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f002 fa36 	bl	8003560 <HAL_Delay>
	OLED_cmd(DISP_ON);
 80010f4:	20af      	movs	r0, #175	; 0xaf
 80010f6:	f7ff fef9 	bl	8000eec <OLED_cmd>
	OLED_Clear();
 80010fa:	f7ff fee2 	bl	8000ec2 <OLED_Clear>
	return HAL_OK;
 80010fe:	2300      	movs	r3, #0

}
 8001100:	4618      	mov	r0, r3
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bdb0      	pop	{r4, r5, r7, pc}
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	0800fcd4 	.word	0x0800fcd4
 8001114:	20000000 	.word	0x20000000

08001118 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e015      	b.n	8001156 <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f1a3 0220 	sub.w	r2, r3, #32
 8001130:	4913      	ldr	r1, [pc, #76]	; (8001180 <OLED_InvChar+0x68>)
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	18ca      	adds	r2, r1, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	43db      	mvns	r3, r3
 8001142:	b2d9      	uxtb	r1, r3
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4413      	add	r3, r2
 800114c:	460a      	mov	r2, r1
 800114e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3301      	adds	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b05      	cmp	r3, #5
 800115a:	dde6      	ble.n	800112a <OLED_InvChar+0x12>
	}
	memcpy(result,temp,5);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	6010      	str	r0, [r2, #0]
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	7113      	strb	r3, [r2, #4]
	free(temp);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4618      	mov	r0, r3
 8001172:	f00e f8c7 	bl	800f304 <free>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800ff90 	.word	0x0800ff90

08001184 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	4623      	mov	r3, r4
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4603      	mov	r3, r0
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	460b      	mov	r3, r1
 800119c:	717b      	strb	r3, [r7, #5]
 800119e:	4613      	mov	r3, r2
 80011a0:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	3b50      	subs	r3, #80	; 0x50
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe9f 	bl	8000eec <OLED_cmd>
	OLED_cmd(col&0x0F);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe98 	bl	8000eec <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe8f 	bl	8000eec <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 80011ce:	793b      	ldrb	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10e      	bne.n	80011f2 <OLED_drawChar+0x6e>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	f1a3 0220 	sub.w	r2, r3, #32
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <OLED_drawChar+0x94>)
 80011e2:	1899      	adds	r1, r3, r2
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2205      	movs	r2, #5
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00e f892 	bl	800f314 <memcpy>
 80011f0:	e006      	b.n	8001200 <OLED_drawChar+0x7c>
	}
	else{
		OLED_InvChar(character,data);
 80011f2:	f107 0208 	add.w	r2, r7, #8
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff8c 	bl	8001118 <OLED_InvChar>
	}

	data[5]=0x00;
 8001200:	2300      	movs	r3, #0
 8001202:	737b      	strb	r3, [r7, #13]
	OLED_data(data, 6);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2106      	movs	r1, #6
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fea8 	bl	8000f60 <OLED_data>

	}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	0800ff90 	.word	0x0800ff90

0800121c <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	603a      	str	r2, [r7, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	460b      	mov	r3, r1
 800122c:	71bb      	strb	r3, [r7, #6]
 800122e:	4613      	mov	r3, r2
 8001230:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	e014      	b.n	8001262 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	4413      	add	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	4413      	add	r3, r2
 800124a:	b2d9      	uxtb	r1, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	79f8      	ldrb	r0, [r7, #7]
 8001258:	f7ff ff94 	bl	8001184 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7fe ffbc 	bl	80001e0 <strlen>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8e3      	bhi.n	8001238 <OLED_Printlin+0x1c>
	}
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	6039      	str	r1, [r7, #0]
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	4613      	mov	r3, r2
 8001288:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f7fe ffa8 	bl	80001e0 <strlen>
 8001290:	4603      	mov	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	0fda      	lsrs	r2, r3, #31
 8001298:	4413      	add	r3, r2
 800129a:	105b      	asrs	r3, r3, #1
 800129c:	425b      	negs	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3340      	adds	r3, #64	; 0x40
 80012aa:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	b2d9      	uxtb	r1, r3
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	79f8      	ldrb	r0, [r7, #7]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	f7ff ffb1 	bl	800121c <OLED_Printlin>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b094      	sub	sp, #80	; 0x50
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80012ca:	2320      	movs	r3, #32
 80012cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80012d8:	2300      	movs	r3, #0
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
 80012e4:	e018      	b.n	8001318 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80012e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ea:	4413      	add	r3, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	d10b      	bne.n	8001310 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80012f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012fa:	b2d9      	uxtb	r1, r3
 80012fc:	f107 020c 	add.w	r2, r7, #12
 8001300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001302:	4413      	add	r3, r2
 8001304:	460a      	mov	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
	                i++;
 8001308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130a:	3301      	adds	r3, #1
 800130c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800130e:	e000      	b.n	8001312 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001310:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001314:	3301      	adds	r3, #1
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
 8001318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131a:	2b15      	cmp	r3, #21
 800131c:	dde3      	ble.n	80012e6 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800131e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b20      	cmp	r3, #32
 8001328:	d102      	bne.n	8001330 <OLED_Print+0x6e>
	            last_ind++;
 800132a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132c:	3301      	adds	r3, #1
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff52 	bl	80001e0 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	2b15      	cmp	r3, #21
 8001340:	d828      	bhi.n	8001394 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ff49 	bl	80001e0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	18d1      	adds	r1, r2, r3
 8001358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4618      	mov	r0, r3
 8001360:	f00e f906 	bl	800f570 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001366:	f107 0220 	add.w	r2, r7, #32
 800136a:	18d0      	adds	r0, r2, r3
 800136c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	f1c3 0315 	rsb	r3, r3, #21
 8001376:	461a      	mov	r2, r3
 8001378:	f00d ffda 	bl	800f330 <memset>
	            thisline[21]=' ';
 800137c:	2320      	movs	r3, #32
 800137e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	f107 0220 	add.w	r2, r7, #32
 800138a:	2300      	movs	r3, #0
 800138c:	2102      	movs	r1, #2
 800138e:	f7ff ff45 	bl	800121c <OLED_Printlin>




	    }
}
 8001392:	e05e      	b.n	8001452 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001396:	3314      	adds	r3, #20
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b20      	cmp	r3, #32
 80013a0:	d03a      	beq.n	8001418 <OLED_Print+0x156>
 80013a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a4:	3315      	adds	r3, #21
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d033      	beq.n	8001418 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80013b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	18d1      	adds	r1, r2, r3
 80013b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b8:	3b01      	subs	r3, #1
 80013ba:	3350      	adds	r3, #80	; 0x50
 80013bc:	443b      	add	r3, r7
 80013be:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00e f8d1 	bl	800f570 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80013ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013d0:	3b01      	subs	r3, #1
 80013d2:	3350      	adds	r3, #80	; 0x50
 80013d4:	443b      	add	r3, r7
 80013d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013da:	461a      	mov	r2, r3
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	1898      	adds	r0, r3, r2
 80013e2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80013e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e8:	3b01      	subs	r3, #1
 80013ea:	3350      	adds	r3, #80	; 0x50
 80013ec:	443b      	add	r3, r7
 80013ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013f2:	f1c3 0315 	rsb	r3, r3, #21
 80013f6:	461a      	mov	r2, r3
 80013f8:	f00d ff9a 	bl	800f330 <memset>
	            thisline[21]=' ';
 80013fc:	2320      	movs	r3, #32
 80013fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001404:	3b01      	subs	r3, #1
 8001406:	3350      	adds	r3, #80	; 0x50
 8001408:	443b      	add	r3, r7
 800140a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800140e:	461a      	mov	r2, r3
 8001410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001412:	4413      	add	r3, r2
 8001414:	64bb      	str	r3, [r7, #72]	; 0x48
 8001416:	e00e      	b.n	8001436 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	18d1      	adds	r1, r2, r3
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2215      	movs	r2, #21
 8001424:	4618      	mov	r0, r3
 8001426:	f00e f8a3 	bl	800f570 <strncpy>
	            thisline[21]=' ';
 800142a:	2320      	movs	r3, #32
 800142c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001432:	3315      	adds	r3, #21
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001436:	2300      	movs	r3, #0
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 800143a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143c:	b2d8      	uxtb	r0, r3
 800143e:	f107 0220 	add.w	r2, r7, #32
 8001442:	2300      	movs	r3, #0
 8001444:	2102      	movs	r1, #2
 8001446:	f7ff fee9 	bl	800121c <OLED_Printlin>
	        line++;
 800144a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144c:	3301      	adds	r3, #1
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001450:	e746      	b.n	80012e0 <OLED_Print+0x1e>
}
 8001452:	3750      	adds	r7, #80	; 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001464:	f7ff fd2d 	bl	8000ec2 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4619      	mov	r1, r3
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ff01 	bl	800127a <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e01a      	b.n	80014b4 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3301      	adds	r3, #1
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	7859      	ldrb	r1, [r3, #1]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f7ff feb7 	bl	800121c <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbde      	blt.n	800147e <OLED_SCREEN+0x26>
	}
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	460b      	mov	r3, r1
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fe7b 	bl	80001e0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	7afb      	ldrb	r3, [r7, #11]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	4619      	mov	r1, r3
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	440b      	add	r3, r1
 8001508:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	7818      	ldrb	r0, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	b2d9      	uxtb	r1, r3
 800151a:	2300      	movs	r3, #0
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	f7ff fe7d 	bl	800121c <OLED_Printlin>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	460b      	mov	r3, r1
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 800153a:	4a35      	ldr	r2, [pc, #212]	; (8001610 <OLED_SELECT+0xe4>)
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4611      	mov	r1, r2
 8001544:	8019      	strh	r1, [r3, #0]
 8001546:	3302      	adds	r3, #2
 8001548:	0c12      	lsrs	r2, r2, #16
 800154a:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	    if(selopt == 0){
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <OLED_SELECT+0x32>
	    	index = screen->selsize - 1;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	77fb      	strb	r3, [r7, #31]
 800155c:	e002      	b.n	8001564 <OLED_SELECT+0x38>
	    }
		else{
			index = selopt - 1;
 800155e:	7afb      	ldrb	r3, [r7, #11]
 8001560:	3b01      	subs	r3, #1
 8001562:	77fb      	strb	r3, [r7, #31]
	    }

	    prevpage=screen->seldata[index][0];
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	75fb      	strb	r3, [r7, #23]
	    prevcol=screen->seldata[index][1];
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	75bb      	strb	r3, [r7, #22]
	    thispage=screen->seldata[selopt][0];
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	757b      	strb	r3, [r7, #21]
	    thiscol=screen->seldata[selopt][1];
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	753b      	strb	r3, [r7, #20]

	    if(restore == OLED_RESTORE){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d122      	bne.n	80015e8 <OLED_SELECT+0xbc>
	    	if (selopt == 0) {
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d110      	bne.n	80015ca <OLED_SELECT+0x9e>
	    		rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	68dc      	ldr	r4, [r3, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f893 	bl	80016e4 <find_restore_string>
 80015be:	4603      	mov	r3, r0
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4423      	add	r3, r4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e010      	b.n	80015ec <OLED_SELECT+0xc0>
	    	} else {
	    		rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	68dc      	ldr	r4, [r3, #12]
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f884 	bl	80016e4 <find_restore_string>
 80015dc:	4603      	mov	r3, r0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4423      	add	r3, r4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	e001      	b.n	80015ec <OLED_SELECT+0xc0>
	    	}
	    } else {
	    	rest = "  ";
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <OLED_SELECT+0xe8>)
 80015ea:	61bb      	str	r3, [r7, #24]
	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 80015ec:	7db9      	ldrb	r1, [r7, #22]
 80015ee:	7df8      	ldrb	r0, [r7, #23]
 80015f0:	2300      	movs	r3, #0
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	f7ff fe12 	bl	800121c <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 80015f8:	f107 0210 	add.w	r2, r7, #16
 80015fc:	7d39      	ldrb	r1, [r7, #20]
 80015fe:	7d78      	ldrb	r0, [r7, #21]
 8001600:	2300      	movs	r3, #0
 8001602:	f7ff fe0b 	bl	800121c <OLED_Printlin>

}
 8001606:	bf00      	nop
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
 800160e:	bf00      	nop
 8001610:	0800fcf4 	.word	0x0800fcf4
 8001614:	0800fcf0 	.word	0x0800fcf0

08001618 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001624:	f001 fc0c 	bl	8002e40 <get_number_files>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <OLED_display_files+0x1a>
		return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e034      	b.n	800169c <OLED_display_files+0x84>
	}
	uint16_t file_count = get_number_files();
 8001632:	f001 fc05 	bl	8002e40 <get_number_files>
 8001636:	4603      	mov	r3, r0
 8001638:	827b      	strh	r3, [r7, #18]

	char** file_names = malloc(file_count * sizeof(char*));
 800163a:	8a7b      	ldrh	r3, [r7, #18]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4618      	mov	r0, r3
 8001640:	f00d fe58 	bl	800f2f4 <malloc>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

	if (get_all_files(file_names) != RFS_OK) {
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f001 fc1a 	bl	8002e82 <get_all_files>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <OLED_display_files+0x4a>
		free_filenames(file_names, file_count);
 8001654:	8a7b      	ldrh	r3, [r7, #18]
 8001656:	4619      	mov	r1, r3
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f825 	bl	80016a8 <free_filenames>
		return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e01c      	b.n	800169c <OLED_display_files+0x84>
	}

	for (int i = 0; i < file_count; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e00f      	b.n	8001688 <OLED_display_files+0x70>
		OLED_SCRNREF(&SCRN_ShowFiles, i + 1, file_names[i]);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3301      	adds	r3, #1
 800166e:	b2d9      	uxtb	r1, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <OLED_display_files+0x8c>)
 800167e:	f7ff ff24 	bl	80014ca <OLED_SCRNREF>
	for (int i = 0; i < file_count; i++) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	8a7b      	ldrh	r3, [r7, #18]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbeb      	blt.n	8001668 <OLED_display_files+0x50>
	}

	free_filenames(file_names, file_count);
 8001690:	8a7b      	ldrh	r3, [r7, #18]
 8001692:	4619      	mov	r1, r3
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f807 	bl	80016a8 <free_filenames>
	return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	08010380 	.word	0x08010380

080016a8 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e00a      	b.n	80016ce <free_filenames+0x26>
		free(file_names[i]);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00d fe1e 	bl	800f304 <free>
	for (int i = 0; i < size; i++) {
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbf0      	blt.n	80016b8 <free_filenames+0x10>
	}
	free(file_names);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f00d fe14 	bl	800f304 <free>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 80016f0:	2301      	movs	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	e021      	b.n	800173a <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6959      	ldr	r1, [r3, #20]
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d110      	bne.n	8001734 <find_restore_string+0x50>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	785a      	ldrb	r2, [r3, #1]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6959      	ldr	r1, [r3, #20]
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	440b      	add	r3, r1
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	429a      	cmp	r2, r3
 800172c:	d102      	bne.n	8001734 <find_restore_string+0x50>
			index_of_string = i;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	73fb      	strb	r3, [r7, #15]
			break;
 8001732:	e007      	b.n	8001744 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3301      	adds	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbd8      	blt.n	80016f6 <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fbe4 	bl	8002f2e <entry_present>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d12d      	bne.n	80017c8 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fa0d 	bl	8002b8e <read_card_entry>
 8001774:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001776:	2100      	movs	r1, #0
 8001778:	4815      	ldr	r0, [pc, #84]	; (80017d0 <oled_show_file+0x7c>)
 800177a:	f7ff fe6d 	bl	8001458 <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	461a      	mov	r2, r3
 8001784:	2100      	movs	r1, #0
 8001786:	4812      	ldr	r0, [pc, #72]	; (80017d0 <oled_show_file+0x7c>)
 8001788:	f7ff fe9f 	bl	80014ca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	461a      	mov	r2, r3
 8001792:	2101      	movs	r1, #1
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <oled_show_file+0x7c>)
 8001796:	f7ff fe98 	bl	80014ca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f7ff faed 	bl	8000d84 <uid_tostring>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	2102      	movs	r1, #2
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <oled_show_file+0x7c>)
 80017b2:	f7ff fe8a 	bl	80014ca <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <oled_show_file+0x7c>)
 80017bc:	f7ff feb6 	bl	800152c <OLED_SELECT>

	free(work);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f00d fd9f 	bl	800f304 <free>
 80017c6:	e000      	b.n	80017ca <oled_show_file+0x76>
		return; //No card entry present
 80017c8:	bf00      	nop
}
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	08010398 	.word	0x08010398

080017d4 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	429a      	cmp	r2, r3
 80017f4:	db03      	blt.n	80017fe <oled_move_selection+0x2a>
		*arrow_index = 0;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e005      	b.n	800180a <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	4619      	mov	r1, r3
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fe8a 	bl	800152c <OLED_SELECT>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af02      	add	r7, sp, #8
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 800182a:	230f      	movs	r3, #15
 800182c:	733b      	strb	r3, [r7, #12]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	737b      	strb	r3, [r7, #13]
 8001832:	2300      	movs	r3, #0
 8001834:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <STAT_READ+0x54>)
 800183e:	f002 f931 	bl	8003aa4 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8001842:	bf00      	nop
 8001844:	f107 0208 	add.w	r2, r7, #8
 8001848:	f107 010c 	add.w	r1, r7, #12
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2303      	movs	r3, #3
 8001852:	4809      	ldr	r0, [pc, #36]	; (8001878 <STAT_READ+0x58>)
 8001854:	f005 fa0d 	bl	8006c72 <HAL_SPI_TransmitReceive>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f2      	bne.n	8001844 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <STAT_READ+0x54>)
 8001866:	f002 f91d 	bl	8003aa4 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 800186a:	7abb      	ldrb	r3, [r7, #10]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020000 	.word	0x40020000
 8001878:	20000744 	.word	0x20000744

0800187c <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 800188c:	231f      	movs	r3, #31
 800188e:	733b      	strb	r3, [r7, #12]
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	737b      	strb	r3, [r7, #13]
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	480a      	ldr	r0, [pc, #40]	; (80018c8 <STAT_WRITE+0x4c>)
 80018a0:	f002 f900 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80018a4:	f107 010c 	add.w	r1, r7, #12
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	2203      	movs	r2, #3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <STAT_WRITE+0x50>)
 80018ae:	f005 f8a4 	bl	80069fa <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <STAT_WRITE+0x4c>)
 80018ba:	f002 f8f3 	bl	8003aa4 <HAL_GPIO_WritePin>

	return(HAL_OK);
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000
 80018cc:	20000744 	.word	0x20000744

080018d0 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80018d6:	2306      	movs	r3, #6
 80018d8:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80018da:	f000 f825 	bl	8001928 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80018de:	e011      	b.n	8001904 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <WRIT_EN+0x50>)
 80018e8:	f002 f8dc 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 80018ec:	1df9      	adds	r1, r7, #7
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2201      	movs	r2, #1
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <WRIT_EN+0x54>)
 80018f4:	f005 f881 	bl	80069fa <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	4808      	ldr	r0, [pc, #32]	; (8001920 <WRIT_EN+0x50>)
 8001900:	f002 f8d0 	bl	8003aa4 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001904:	20c0      	movs	r0, #192	; 0xc0
 8001906:	f7ff ff8b 	bl	8001820 <STAT_READ>
 800190a:	4603      	mov	r3, r0
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b02      	cmp	r3, #2
 8001912:	d1e5      	bne.n	80018e0 <WRIT_EN+0x10>
	}


}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020000 	.word	0x40020000
 8001924:	20000744 	.word	0x20000744

08001928 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 800192e:	2304      	movs	r3, #4
 8001930:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001932:	e011      	b.n	8001958 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <WRITE_DIS+0x4c>)
 800193c:	f002 f8b2 	bl	8003aa4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001940:	1df9      	adds	r1, r7, #7
 8001942:	2364      	movs	r3, #100	; 0x64
 8001944:	2201      	movs	r2, #1
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <WRITE_DIS+0x50>)
 8001948:	f005 f857 	bl	80069fa <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001952:	4808      	ldr	r0, [pc, #32]	; (8001974 <WRITE_DIS+0x4c>)
 8001954:	f002 f8a6 	bl	8003aa4 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001958:	20c0      	movs	r0, #192	; 0xc0
 800195a:	f7ff ff61 	bl	8001820 <STAT_READ>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b02      	cmp	r3, #2
 8001966:	d0e5      	beq.n	8001934 <WRITE_DIS+0xc>
		}
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40020000 	.word	0x40020000
 8001978:	20000744 	.word	0x20000744

0800197c <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 800198c:	23d8      	movs	r3, #216	; 0xd8
 800198e:	723b      	strb	r3, [r7, #8]
 8001990:	2300      	movs	r3, #0
 8001992:	727b      	strb	r3, [r7, #9]
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	72bb      	strb	r3, [r7, #10]
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 80019a4:	f7ff ff94 	bl	80018d0 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <block_erase+0x70>)
 80019b0:	f002 f878 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	2204      	movs	r2, #4
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <block_erase+0x74>)
 80019be:	f005 f81c 	bl	80069fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <block_erase+0x70>)
 80019ca:	f002 f86b 	bl	8003aa4 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80019ce:	bf00      	nop
 80019d0:	20c0      	movs	r0, #192	; 0xc0
 80019d2:	f7ff ff25 	bl	8001820 <STAT_READ>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d0f7      	beq.n	80019d0 <block_erase+0x54>
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020000 	.word	0x40020000
 80019f0:	20000744 	.word	0x20000744

080019f4 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	480a      	ldr	r0, [pc, #40]	; (8001a28 <MEM_INIT+0x34>)
 8001a00:	f002 f850 	bl	8003aa4 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001a04:	2100      	movs	r1, #0
 8001a06:	20a0      	movs	r0, #160	; 0xa0
 8001a08:	f7ff ff38 	bl	800187c <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8001a0c:	20a0      	movs	r0, #160	; 0xa0
 8001a0e:	f7ff ff07 	bl	8001820 <STAT_READ>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MEM_INIT+0x28>
		return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e002      	b.n	8001a22 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8001a1c:	f7ff ff84 	bl	8001928 <WRITE_DIS>
	return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40020000 	.word	0x40020000

08001a2c <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4603      	mov	r3, r0
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3303      	adds	r3, #3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00d fc56 	bl	800f2f4 <malloc>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	743b      	strb	r3, [r7, #16]
 8001a50:	2300      	movs	r3, #0
 8001a52:	747b      	strb	r3, [r7, #17]
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	74bb      	strb	r3, [r7, #18]
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2202      	movs	r2, #2
 8001a68:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	89ba      	ldrh	r2, [r7, #12]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3303      	adds	r3, #3
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00d fc42 	bl	800f314 <memcpy>

	WRIT_EN();
 8001a90:	f7ff ff1e 	bl	80018d0 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9a:	482d      	ldr	r0, [pc, #180]	; (8001b50 <MEM_WRITE+0x124>)
 8001a9c:	f002 f802 	bl	8003aa4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	2364      	movs	r3, #100	; 0x64
 8001aaa:	6979      	ldr	r1, [r7, #20]
 8001aac:	4829      	ldr	r0, [pc, #164]	; (8001b54 <MEM_WRITE+0x128>)
 8001aae:	f004 ffa4 	bl	80069fa <HAL_SPI_Transmit>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00a      	beq.n	8001ace <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <MEM_WRITE+0x124>)
 8001ac0:	f001 fff0 	bl	8003aa4 <HAL_GPIO_WritePin>
		free(setup);
 8001ac4:	6978      	ldr	r0, [r7, #20]
 8001ac6:	f00d fc1d 	bl	800f304 <free>
		return(HAL_ERROR);
 8001aca:	2301      	movs	r3, #1
 8001acc:	e03c      	b.n	8001b48 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad4:	481e      	ldr	r0, [pc, #120]	; (8001b50 <MEM_WRITE+0x124>)
 8001ad6:	f001 ffe5 	bl	8003aa4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 8001ada:	bf00      	nop
 8001adc:	20c0      	movs	r0, #192	; 0xc0
 8001ade:	f7ff fe9f 	bl	8001820 <STAT_READ>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d0f7      	beq.n	8001adc <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af2:	4817      	ldr	r0, [pc, #92]	; (8001b50 <MEM_WRITE+0x124>)
 8001af4:	f001 ffd6 	bl	8003aa4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 8001af8:	f107 0110 	add.w	r1, r7, #16
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	2204      	movs	r2, #4
 8001b00:	4814      	ldr	r0, [pc, #80]	; (8001b54 <MEM_WRITE+0x128>)
 8001b02:	f004 ff7a 	bl	80069fa <HAL_SPI_Transmit>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b12:	480f      	ldr	r0, [pc, #60]	; (8001b50 <MEM_WRITE+0x124>)
 8001b14:	f001 ffc6 	bl	8003aa4 <HAL_GPIO_WritePin>
		free(setup);
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f00d fbf3 	bl	800f304 <free>
		return(HAL_ERROR);
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e012      	b.n	8001b48 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <MEM_WRITE+0x124>)
 8001b2a:	f001 ffbb 	bl	8003aa4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001b2e:	bf00      	nop
 8001b30:	20c0      	movs	r0, #192	; 0xc0
 8001b32:	f7ff fe75 	bl	8001820 <STAT_READ>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d0f7      	beq.n	8001b30 <MEM_WRITE+0x104>
	free(setup);
 8001b40:	6978      	ldr	r0, [r7, #20]
 8001b42:	f00d fbdf 	bl	800f304 <free>
	return(HAL_OK);
 8001b46:	2300      	movs	r3, #0

}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020000 	.word	0x40020000
 8001b54:	20000744 	.word	0x20000744

08001b58 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4603      	mov	r3, r0
 8001b64:	81fb      	strh	r3, [r7, #14]
 8001b66:	460b      	mov	r3, r1
 8001b68:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 8001b6a:	2313      	movs	r3, #19
 8001b6c:	753b      	strb	r3, [r7, #20]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	757b      	strb	r3, [r7, #21]
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	75bb      	strb	r3, [r7, #22]
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8001b82:	2304      	movs	r3, #4
 8001b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8001b88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00d fbaf 	bl	800f2f4 <malloc>
 8001b96:	4603      	mov	r3, r0
 8001b98:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 8001b9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00d fba6 	bl	800f2f4 <malloc>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8001bac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	69f8      	ldr	r0, [r7, #28]
 8001bba:	f00d fbb9 	bl	800f330 <memset>
	read_command[0]=READ_BUF;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8001bc4:	89bb      	ldrh	r3, [r7, #12]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	89ba      	ldrh	r2, [r7, #12]
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	3303      	adds	r3, #3
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bea:	4842      	ldr	r0, [pc, #264]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001bec:	f001 ff5a 	bl	8003aa4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8001bf0:	f107 0114 	add.w	r1, r7, #20
 8001bf4:	2364      	movs	r3, #100	; 0x64
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	483f      	ldr	r0, [pc, #252]	; (8001cf8 <MEM_READPAGE+0x1a0>)
 8001bfa:	f004 fefe 	bl	80069fa <HAL_SPI_Transmit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00d      	beq.n	8001c20 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0a:	483a      	ldr	r0, [pc, #232]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c0c:	f001 ff4a 	bl	8003aa4 <HAL_GPIO_WritePin>
		free(read_command);
 8001c10:	69f8      	ldr	r0, [r7, #28]
 8001c12:	f00d fb77 	bl	800f304 <free>
		free(rec_data);
 8001c16:	69b8      	ldr	r0, [r7, #24]
 8001c18:	f00d fb74 	bl	800f304 <free>
		return(HAL_ERROR);
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e064      	b.n	8001cea <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c26:	4833      	ldr	r0, [pc, #204]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c28:	f001 ff3c 	bl	8003aa4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8001c2c:	bf00      	nop
 8001c2e:	20c0      	movs	r0, #192	; 0xc0
 8001c30:	f7ff fdf6 	bl	8001820 <STAT_READ>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d0f7      	beq.n	8001c2e <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c44:	482b      	ldr	r0, [pc, #172]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c46:	f001 ff2d 	bl	8003aa4 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 8001c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2264      	movs	r2, #100	; 0x64
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	69f9      	ldr	r1, [r7, #28]
 8001c60:	4825      	ldr	r0, [pc, #148]	; (8001cf8 <MEM_READPAGE+0x1a0>)
 8001c62:	f005 f806 	bl	8006c72 <HAL_SPI_TransmitReceive>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c72:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c74:	f001 ff16 	bl	8003aa4 <HAL_GPIO_WritePin>
		free(read_command);
 8001c78:	69f8      	ldr	r0, [r7, #28]
 8001c7a:	f00d fb43 	bl	800f304 <free>
		free(rec_data);
 8001c7e:	69b8      	ldr	r0, [r7, #24]
 8001c80:	f00d fb40 	bl	800f304 <free>
		return(HAL_ERROR);
 8001c84:	2301      	movs	r3, #1
 8001c86:	e030      	b.n	8001cea <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	4819      	ldr	r0, [pc, #100]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c90:	f001 ff08 	bl	8003aa4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001c94:	bf00      	nop
 8001c96:	20c0      	movs	r0, #192	; 0xc0
 8001c98:	f7ff fdc2 	bl	8001820 <STAT_READ>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d0f7      	beq.n	8001c96 <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d104      	bne.n	8001cb6 <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	791a      	ldrb	r2, [r3, #4]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e012      	b.n	8001cdc <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e00b      	b.n	8001cd4 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	441a      	add	r2, r3
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	440b      	add	r3, r1
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8ef      	bhi.n	8001cbc <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8001cdc:	69f8      	ldr	r0, [r7, #28]
 8001cde:	f00d fb11 	bl	800f304 <free>
	free(rec_data);
 8001ce2:	69b8      	ldr	r0, [r7, #24]
 8001ce4:	f00d fb0e 	bl	800f304 <free>
	return(HAL_OK);
 8001ce8:	2300      	movs	r3, #0

}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	20000744 	.word	0x20000744

08001cfc <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	e016      	b.n	8001d36 <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	1cfa      	adds	r2, r7, #3
 8001d12:	2301      	movs	r3, #1
 8001d14:	2100      	movs	r1, #0
 8001d16:	f7ff ff1f 	bl	8001b58 <MEM_READPAGE>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <mem_find_free_block+0x2a>
			return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	e00d      	b.n	8001d42 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	2bff      	cmp	r3, #255	; 0xff
 8001d2a:	d101      	bne.n	8001d30 <mem_find_free_block+0x34>
			return i;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	e008      	b.n	8001d42 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3c:	dbe4      	blt.n	8001d08 <mem_find_free_block+0xc>
		}
	}
	return -1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e007      	b.n	8001d66 <memory_reset+0x1c>
		block_erase(i);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fe0e 	bl	800197c <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6c:	dbf3      	blt.n	8001d56 <memory_reset+0xc>
	}
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 8001d8e:	2102      	movs	r1, #2
 8001d90:	4815      	ldr	r0, [pc, #84]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001d92:	f001 fe6f 	bl	8003a74 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x5c>
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d018      	beq.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 8001da2:	4810      	ldr	r0, [pc, #64]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001da4:	f005 fa7c 	bl	80072a0 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db6:	d902      	bls.n	8001dbe <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 8001db8:	2301      	movs	r3, #1
 8001dba:	737b      	strb	r3, [r7, #13]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_GPIO_EXTI_Callback+0x74>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 010d 	add.w	r1, r7, #13
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f00a fb0b 	bl	800c3e8 <xQueueGenericSendFromISR>
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_EXTI_Callback+0x64>
	} else {
		HAL_TIM_Base_Start(&htim3);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001dd6:	f005 fa09 	bl	80071ec <HAL_TIM_Base_Start>
	}
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200007e4 	.word	0x200007e4
 8001de8:	40020000 	.word	0x40020000
 8001dec:	2000084c 	.word	0x2000084c

08001df0 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001df4:	2108      	movs	r1, #8
 8001df6:	4806      	ldr	r0, [pc, #24]	; (8001e10 <BUZZ+0x20>)
 8001df8:	f005 fb36 	bl	8007468 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e00:	f001 fbae 	bl	8003560 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001e04:	2108      	movs	r1, #8
 8001e06:	4802      	ldr	r0, [pc, #8]	; (8001e10 <BUZZ+0x20>)
 8001e08:	f005 fbde 	bl	80075c8 <HAL_TIM_PWM_Stop>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	2000079c 	.word	0x2000079c

08001e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e18:	f001 fb60 	bl	80034dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e1c:	f000 f898 	bl	8001f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e20:	f000 fa60 	bl	80022e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e24:	f000 f8fe 	bl	8002024 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e28:	f000 f92a 	bl	8002080 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e2c:	f000 f960 	bl	80020f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e30:	f000 f994 	bl	800215c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e34:	f000 fa08 	bl	8002248 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e38:	f009 fe46 	bl	800bac8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <main+0xd0>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	2001      	movs	r0, #1
 8001e42:	f009 ff39 	bl	800bcb8 <osMessageQueueNew>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <main+0xd4>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <main+0xd8>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	2001      	movs	r0, #1
 8001e52:	f009 ff31 	bl	800bcb8 <osMessageQueueNew>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <main+0xdc>)
 8001e5a:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <main+0xe0>)
 8001e5e:	2102      	movs	r1, #2
 8001e60:	2001      	movs	r0, #1
 8001e62:	f009 ff29 	bl	800bcb8 <osMessageQueueNew>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <main+0xe4>)
 8001e6a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001e6c:	4a23      	ldr	r2, [pc, #140]	; (8001efc <main+0xe8>)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4823      	ldr	r0, [pc, #140]	; (8001f00 <main+0xec>)
 8001e72:	f009 fe73 	bl	800bb5c <osThreadNew>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <main+0xf0>)
 8001e7a:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <main+0xf4>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4822      	ldr	r0, [pc, #136]	; (8001f0c <main+0xf8>)
 8001e82:	f009 fe6b 	bl	800bb5c <osThreadNew>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <main+0xfc>)
 8001e8a:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001e8c:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <main+0x100>)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4821      	ldr	r0, [pc, #132]	; (8001f18 <main+0x104>)
 8001e92:	f009 fe63 	bl	800bb5c <osThreadNew>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <main+0x108>)
 8001e9a:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <main+0x10c>)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4820      	ldr	r0, [pc, #128]	; (8001f24 <main+0x110>)
 8001ea2:	f009 fe5b 	bl	800bb5c <osThreadNew>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <main+0x114>)
 8001eaa:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <main+0x118>)
 8001eae:	2100      	movs	r1, #0
 8001eb0:	481f      	ldr	r0, [pc, #124]	; (8001f30 <main+0x11c>)
 8001eb2:	f009 fe53 	bl	800bb5c <osThreadNew>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <main+0x120>)
 8001eba:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <main+0x124>)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	481e      	ldr	r0, [pc, #120]	; (8001f3c <main+0x128>)
 8001ec2:	f009 fe4b 	bl	800bb5c <osThreadNew>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <main+0x12c>)
 8001eca:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <main+0x130>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	481d      	ldr	r0, [pc, #116]	; (8001f48 <main+0x134>)
 8001ed2:	f009 fe43 	bl	800bb5c <osThreadNew>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <main+0x138>)
 8001eda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001edc:	f009 fe18 	bl	800bb10 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <main+0xcc>
 8001ee2:	bf00      	nop
 8001ee4:	0801026c 	.word	0x0801026c
 8001ee8:	20000848 	.word	0x20000848
 8001eec:	08010284 	.word	0x08010284
 8001ef0:	2000084c 	.word	0x2000084c
 8001ef4:	0801029c 	.word	0x0801029c
 8001ef8:	20000850 	.word	0x20000850
 8001efc:	08010170 	.word	0x08010170
 8001f00:	080023dd 	.word	0x080023dd
 8001f04:	2000082c 	.word	0x2000082c
 8001f08:	08010194 	.word	0x08010194
 8001f0c:	08002515 	.word	0x08002515
 8001f10:	20000830 	.word	0x20000830
 8001f14:	080101b8 	.word	0x080101b8
 8001f18:	080025a5 	.word	0x080025a5
 8001f1c:	20000834 	.word	0x20000834
 8001f20:	080101dc 	.word	0x080101dc
 8001f24:	080026d9 	.word	0x080026d9
 8001f28:	20000838 	.word	0x20000838
 8001f2c:	08010200 	.word	0x08010200
 8001f30:	08002795 	.word	0x08002795
 8001f34:	2000083c 	.word	0x2000083c
 8001f38:	08010224 	.word	0x08010224
 8001f3c:	0800287d 	.word	0x0800287d
 8001f40:	20000840 	.word	0x20000840
 8001f44:	08010248 	.word	0x08010248
 8001f48:	08002955 	.word	0x08002955
 8001f4c:	20000844 	.word	0x20000844

08001f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b094      	sub	sp, #80	; 0x50
 8001f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	2230      	movs	r2, #48	; 0x30
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00d f9e6 	bl	800f330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <SystemClock_Config+0xcc>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <SystemClock_Config+0xcc>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <SystemClock_Config+0xcc>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <SystemClock_Config+0xd0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <SystemClock_Config+0xd0>)
 8001f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <SystemClock_Config+0xd0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fc8:	23a8      	movs	r3, #168	; 0xa8
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd4:	f107 0320 	add.w	r3, r7, #32
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 ffd1 	bl	8005f80 <HAL_RCC_OscConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fe4:	f000 fd1a 	bl	8002a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe8:	230f      	movs	r3, #15
 8001fea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fec:	2302      	movs	r3, #2
 8001fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	2102      	movs	r1, #2
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fa33 	bl	8006470 <HAL_RCC_ClockConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002010:	f000 fd04 	bl	8002a1c <Error_Handler>
  }
}
 8002014:	bf00      	nop
 8002016:	3750      	adds	r7, #80	; 0x50
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000

08002024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <MX_I2C1_Init+0x50>)
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <MX_I2C1_Init+0x54>)
 800202c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_I2C1_Init+0x50>)
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <MX_I2C1_Init+0x58>)
 8002032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_I2C1_Init+0x50>)
 8002042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <MX_I2C1_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_I2C1_Init+0x50>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_I2C1_Init+0x50>)
 8002062:	f001 fd51 	bl	8003b08 <HAL_I2C_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800206c:	f000 fcd6 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000698 	.word	0x20000698
 8002078:	40005400 	.word	0x40005400
 800207c:	000186a0 	.word	0x000186a0

08002080 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_SPI1_Init+0x68>)
 8002086:	4a19      	ldr	r2, [pc, #100]	; (80020ec <MX_SPI1_Init+0x6c>)
 8002088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_SPI1_Init+0x68>)
 800208c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_SPI1_Init+0x68>)
 8002094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002098:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_SPI1_Init+0x68>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020b6:	2218      	movs	r2, #24
 80020b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020ce:	220a      	movs	r2, #10
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_SPI1_Init+0x68>)
 80020d4:	f004 fc08 	bl	80068e8 <HAL_SPI_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80020de:	f000 fc9d 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200006ec 	.word	0x200006ec
 80020ec:	40013000 	.word	0x40013000

080020f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_SPI2_Init+0x64>)
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <MX_SPI2_Init+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_SPI2_Init+0x64>)
 80020fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002100:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_SPI2_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_SPI2_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_SPI2_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_SPI2_Init+0x64>)
 800211c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002120:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_SPI2_Init+0x64>)
 8002124:	2200      	movs	r2, #0
 8002126:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <MX_SPI2_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_SPI2_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <MX_SPI2_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_SPI2_Init+0x64>)
 800213c:	220a      	movs	r2, #10
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_SPI2_Init+0x64>)
 8002142:	f004 fbd1 	bl	80068e8 <HAL_SPI_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800214c:	f000 fc66 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000744 	.word	0x20000744
 8002158:	40003800 	.word	0x40003800

0800215c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <MX_TIM2_Init+0xe8>)
 800218e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002196:	f240 12a3 	movw	r2, #419	; 0x1a3
 800219a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <MX_TIM2_Init+0xe8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021a4:	2231      	movs	r2, #49	; 0x31
 80021a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b4:	4823      	ldr	r0, [pc, #140]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021b6:	f004 ffc9 	bl	800714c <HAL_TIM_Base_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021c0:	f000 fc2c 	bl	8002a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ce:	4619      	mov	r1, r3
 80021d0:	481c      	ldr	r0, [pc, #112]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021d2:	f005 fc27 	bl	8007a24 <HAL_TIM_ConfigClockSource>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021dc:	f000 fc1e 	bl	8002a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021e0:	4818      	ldr	r0, [pc, #96]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021e2:	f005 f8e7 	bl	80073b4 <HAL_TIM_PWM_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80021ec:	f000 fc16 	bl	8002a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	4619      	mov	r1, r3
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002200:	f005 ffcc 	bl	800819c <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800220a:	f000 fc07 	bl	8002a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220e:	2360      	movs	r3, #96	; 0x60
 8002210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8002212:	2318      	movs	r3, #24
 8002214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2208      	movs	r2, #8
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002226:	f005 fb3b 	bl	80078a0 <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002230:	f000 fbf4 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002236:	f000 fff9 	bl	800322c <HAL_TIM_MspPostInit>

}
 800223a:	bf00      	nop
 800223c:	3738      	adds	r7, #56	; 0x38
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000079c 	.word	0x2000079c

08002248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <MX_TIM3_Init+0x94>)
 8002266:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <MX_TIM3_Init+0x98>)
 8002268:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MX_TIM3_Init+0x94>)
 800226c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_TIM3_Init+0x94>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_TIM3_Init+0x94>)
 800227a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800227e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <MX_TIM3_Init+0x94>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_TIM3_Init+0x94>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800228c:	4813      	ldr	r0, [pc, #76]	; (80022dc <MX_TIM3_Init+0x94>)
 800228e:	f004 ff5d 	bl	800714c <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002298:	f000 fbc0 	bl	8002a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <MX_TIM3_Init+0x94>)
 80022aa:	f005 fbbb 	bl	8007a24 <HAL_TIM_ConfigClockSource>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80022b4:	f000 fbb2 	bl	8002a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_TIM3_Init+0x94>)
 80022c6:	f005 ff69 	bl	800819c <HAL_TIMEx_MasterConfigSynchronization>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80022d0:	f000 fba4 	bl	8002a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200007e4 	.word	0x200007e4
 80022e0:	40000400 	.word	0x40000400

080022e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <MX_GPIO_Init+0xec>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a33      	ldr	r2, [pc, #204]	; (80023d0 <MX_GPIO_Init+0xec>)
 8002304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <MX_GPIO_Init+0xec>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <MX_GPIO_Init+0xec>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <MX_GPIO_Init+0xec>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <MX_GPIO_Init+0xec>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <MX_GPIO_Init+0xec>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <MX_GPIO_Init+0xec>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <MX_GPIO_Init+0xec>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002354:	481f      	ldr	r0, [pc, #124]	; (80023d4 <MX_GPIO_Init+0xf0>)
 8002356:	f001 fba5 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	2122      	movs	r1, #34	; 0x22
 800235e:	481e      	ldr	r0, [pc, #120]	; (80023d8 <MX_GPIO_Init+0xf4>)
 8002360:	f001 fba0 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002364:	2302      	movs	r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002368:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800236c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4619      	mov	r1, r3
 8002378:	4816      	ldr	r0, [pc, #88]	; (80023d4 <MX_GPIO_Init+0xf0>)
 800237a:	f001 f9f7 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 800237e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	4619      	mov	r1, r3
 8002396:	480f      	ldr	r0, [pc, #60]	; (80023d4 <MX_GPIO_Init+0xf0>)
 8002398:	f001 f9e8 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 800239c:	2322      	movs	r3, #34	; 0x22
 800239e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4619      	mov	r1, r3
 80023b2:	4809      	ldr	r0, [pc, #36]	; (80023d8 <MX_GPIO_Init+0xf4>)
 80023b4:	f001 f9da 	bl	800376c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2105      	movs	r1, #5
 80023bc:	2007      	movs	r0, #7
 80023be:	f001 f9ab 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023c2:	2007      	movs	r0, #7
 80023c4:	f001 f9c4 	bl	8003750 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020400 	.word	0x40020400

080023dc <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b09c      	sub	sp, #112	; 0x70
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023e4:	f00c fa72 	bl	800e8cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <Start_Init+0x104>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00a fcbb 	bl	800cd68 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <Start_Init+0x108>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00a fcb6 	bl	800cd68 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 80023fc:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <Start_Init+0x10c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f00a fcb1 	bl	800cd68 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002406:	4b39      	ldr	r3, [pc, #228]	; (80024ec <Start_Init+0x110>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f00a fcac 	bl	800cd68 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002410:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <Start_Init+0x114>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f00a fca7 	bl	800cd68 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <Start_Init+0x118>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f00a fca2 	bl	800cd68 <vTaskSuspend>

    MFRC_INIT();
 8002424:	f7fe f9d8 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8002428:	f7fe f98e 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 800242c:	f7fe fe08 	bl	8001040 <OLED_INIT>
    OLED_Print(TC);
 8002430:	4831      	ldr	r0, [pc, #196]	; (80024f8 <Start_Init+0x11c>)
 8002432:	f7fe ff46 	bl	80012c2 <OLED_Print>
    MEM_INIT();
 8002436:	f7ff fadd 	bl	80019f4 <MEM_INIT>
    memory_reset();
 800243a:	f7ff fc86 	bl	8001d4a <memory_reset>

    uint8_t fake_contents[64] = {0x04, 0x41, 0xBF, 0x72,
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <Start_Init+0x120>)
 8002440:	f107 0408 	add.w	r4, r7, #8
 8002444:	461d      	mov	r5, r3
 8002446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002452:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x00,
    							0xEE, 0x00, 0x00, 0x63};
    uint8_t uid[7] = {0x04, 0x41, 0xBF, 0x72, 0x1A, 0x06, 0x6C};
 800245a:	4a29      	ldr	r2, [pc, #164]	; (8002500 <Start_Init+0x124>)
 800245c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002464:	6018      	str	r0, [r3, #0]
 8002466:	3304      	adds	r3, #4
 8002468:	8019      	strh	r1, [r3, #0]
 800246a:	3302      	adds	r3, #2
 800246c:	0c0a      	lsrs	r2, r1, #16
 800246e:	701a      	strb	r2, [r3, #0]

    Card fake_card = {
 8002470:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002476:	2307      	movs	r3, #7
 8002478:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <Start_Init+0x128>)
 800247e:	657b      	str	r3, [r7, #84]	; 0x54
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <Start_Init+0x12c>)
 8002482:	65bb      	str	r3, [r7, #88]	; 0x58
 8002484:	2300      	movs	r3, #0
 8002486:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	663b      	str	r3, [r7, #96]	; 0x60
 8002490:	2340      	movs	r3, #64	; 0x40
 8002492:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    	.uidsize = 7,
		.name = "fake",
		.type = "MIFARE Ultralight",
		.read_protected = 0
    };
    enter_card(&fake_card, 0);
 8002496:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fac2 	bl	8002a26 <enter_card>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 80024a2:	bf00      	nop
 80024a4:	2102      	movs	r1, #2
 80024a6:	4819      	ldr	r0, [pc, #100]	; (800250c <Start_Init+0x130>)
 80024a8:	f001 fae4 	bl	8003a74 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f8      	bne.n	80024a4 <Start_Init+0xc8>
    osDelay(10);
 80024b2:	200a      	movs	r0, #10
 80024b4:	f009 fbe5 	bl	800bc82 <osDelay>
    uint8_t clear = NO_PRESS;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    xQueueSend(UserInputHandle, &clear, 0);
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <Start_Init+0x134>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 80024c6:	2300      	movs	r3, #0
 80024c8:	2200      	movs	r2, #0
 80024ca:	f009 fe8f 	bl	800c1ec <xQueueGenericSend>
    vTaskResume(HomeHandle);
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <Start_Init+0x10c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00a fcf0 	bl	800ceb8 <vTaskResume>
    vTaskSuspend(NULL);
 80024d8:	2000      	movs	r0, #0
 80024da:	f00a fc45 	bl	800cd68 <vTaskSuspend>
  {
 80024de:	e783      	b.n	80023e8 <Start_Init+0xc>
 80024e0:	20000830 	.word	0x20000830
 80024e4:	20000834 	.word	0x20000834
 80024e8:	20000838 	.word	0x20000838
 80024ec:	2000083c 	.word	0x2000083c
 80024f0:	20000840 	.word	0x20000840
 80024f4:	20000844 	.word	0x20000844
 80024f8:	20000400 	.word	0x20000400
 80024fc:	0800fd90 	.word	0x0800fd90
 8002500:	0800fdd0 	.word	0x0800fdd0
 8002504:	0800fd74 	.word	0x0800fd74
 8002508:	0800fd7c 	.word	0x0800fd7c
 800250c:	40020000 	.word	0x40020000
 8002510:	2000084c 	.word	0x2000084c

08002514 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 800251c:	201c      	movs	r0, #28
 800251e:	f00c fee9 	bl	800f2f4 <malloc>
 8002522:	4603      	mov	r3, r0
 8002524:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8002526:	68bc      	ldr	r4, [r7, #8]
 8002528:	2040      	movs	r0, #64	; 0x40
 800252a:	f00c fee3 	bl	800f2f4 <malloc>
 800252e:	4603      	mov	r3, r0
 8002530:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8002532:	68bc      	ldr	r4, [r7, #8]
 8002534:	2007      	movs	r0, #7
 8002536:	f00c fedd 	bl	800f2f4 <malloc>
 800253a:	4603      	mov	r3, r0
 800253c:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 8002542:	f7fe f8c7 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 800254c:	2100      	movs	r1, #0
 800254e:	4812      	ldr	r0, [pc, #72]	; (8002598 <StartReadCard+0x84>)
 8002550:	f7fe ff82 	bl	8001458 <OLED_SCREEN>
		ranonce++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3301      	adds	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fb9b 	bl	8000c98 <UL_readcard>
 8002562:	4603      	mov	r3, r0
 8002564:	2bcc      	cmp	r3, #204	; 0xcc
 8002566:	d1ec      	bne.n	8002542 <StartReadCard+0x2e>
			BUZZ();
 8002568:	f7ff fc42 	bl	8001df0 <BUZZ>
			MFRC_ANTOFF();
 800256c:	f7fe f8ec 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <StartReadCard+0x88>)
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f107 0108 	add.w	r1, r7, #8
 8002578:	2300      	movs	r3, #0
 800257a:	2200      	movs	r2, #0
 800257c:	f009 fe36 	bl	800c1ec <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <StartReadCard+0x8c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f00a fc97 	bl	800ceb8 <vTaskResume>
			ranonce = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 800258e:	2000      	movs	r0, #0
 8002590:	f00a fbea 	bl	800cd68 <vTaskSuspend>
	MFRC_ANTON();
 8002594:	e7d5      	b.n	8002542 <StartReadCard+0x2e>
 8002596:	bf00      	nop
 8002598:	08010338 	.word	0x08010338
 800259c:	20000848 	.word	0x20000848
 80025a0:	2000083c 	.word	0x2000083c

080025a4 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 80025be:	2100      	movs	r1, #0
 80025c0:	483e      	ldr	r0, [pc, #248]	; (80026bc <StartWriteCard+0x118>)
 80025c2:	f7fe ff49 	bl	8001458 <OLED_SCREEN>
	  	ranonce++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80025cc:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <StartWriteCard+0x11c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f107 010f 	add.w	r1, r7, #15
 80025d4:	2200      	movs	r2, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f009 ffa2 	bl	800c520 <xQueueReceive>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d1ea      	bne.n	80025b8 <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d11c      	bne.n	8002622 <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fc9e 	bl	8002f2e <entry_present>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1df      	bne.n	80025b8 <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fac6 	bl	8002b8e <read_card_entry>
 8002602:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	b29b      	uxth	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fcad 	bl	8002f68 <get_file_name>
 800260e:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	2102      	movs	r1, #2
 8002614:	4829      	ldr	r0, [pc, #164]	; (80026bc <StartWriteCard+0x118>)
 8002616:	f7fe ff58 	bl	80014ca <OLED_SCRNREF>
				  free(file_name);
 800261a:	6938      	ldr	r0, [r7, #16]
 800261c:	f00c fe72 	bl	800f304 <free>
 8002620:	e7ca      	b.n	80025b8 <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d1c7      	bne.n	80025b8 <StartWriteCard+0x14>
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0c4      	beq.n	80025b8 <StartWriteCard+0x14>
			  	OLED_Clear();
 800262e:	f7fe fc48 	bl	8000ec2 <OLED_Clear>
			  	MFRC_ANTON();
 8002632:	f7fe f84f 	bl	80006d4 <MFRC_ANTON>
				if (UL_writecard(towrite) == PCD_NO_PICC) {
 8002636:	69b8      	ldr	r0, [r7, #24]
 8002638:	f7fe fb64 	bl	8000d04 <UL_writecard>
 800263c:	4603      	mov	r3, r0
 800263e:	2b01      	cmp	r3, #1
 8002640:	d113      	bne.n	800266a <StartWriteCard+0xc6>
					OLED_Print("ERROR: Couldn't find card, aborting write");
 8002642:	4820      	ldr	r0, [pc, #128]	; (80026c4 <StartWriteCard+0x120>)
 8002644:	f7fe fe3d 	bl	80012c2 <OLED_Print>
					MFRC_ANTOFF();
 8002648:	f7fe f87e 	bl	8000748 <MFRC_ANTOFF>
					osDelay(1000);
 800264c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002650:	f009 fb17 	bl	800bc82 <osDelay>
					ranonce = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
					vTaskResume(HomeHandle);
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <StartWriteCard+0x124>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f00a fc2b 	bl	800ceb8 <vTaskResume>
					vTaskSuspend(NULL);
 8002662:	2000      	movs	r0, #0
 8002664:	f00a fb80 	bl	800cd68 <vTaskSuspend>
 8002668:	e7a6      	b.n	80025b8 <StartWriteCard+0x14>
				} else {
					OLED_PrintCent(2, "Writing...", NORMAL);
 800266a:	2200      	movs	r2, #0
 800266c:	4917      	ldr	r1, [pc, #92]	; (80026cc <StartWriteCard+0x128>)
 800266e:	2002      	movs	r0, #2
 8002670:	f7fe fe03 	bl	800127a <OLED_PrintCent>
					MFRC_HALTA(); //Deselect card
 8002674:	f7fe f944 	bl	8000900 <MFRC_HALTA>
					OLED_PrintCent(4,"Verifying...", NORMAL);
 8002678:	2200      	movs	r2, #0
 800267a:	4915      	ldr	r1, [pc, #84]	; (80026d0 <StartWriteCard+0x12c>)
 800267c:	2004      	movs	r0, #4
 800267e:	f7fe fdfc 	bl	800127a <OLED_PrintCent>
					if (UL_verify(towrite) == PCD_OK) {
 8002682:	69b8      	ldr	r0, [r7, #24]
 8002684:	f7fe fbc8 	bl	8000e18 <UL_verify>
 8002688:	4603      	mov	r3, r0
 800268a:	2bcc      	cmp	r3, #204	; 0xcc
 800268c:	d104      	bne.n	8002698 <StartWriteCard+0xf4>
						OLED_PrintCent(6, "Write verified :)", NORMAL);
 800268e:	2200      	movs	r2, #0
 8002690:	4910      	ldr	r1, [pc, #64]	; (80026d4 <StartWriteCard+0x130>)
 8002692:	2006      	movs	r0, #6
 8002694:	f7fe fdf1 	bl	800127a <OLED_PrintCent>
					}
					MFRC_ANTOFF();
 8002698:	f7fe f856 	bl	8000748 <MFRC_ANTOFF>
					osDelay(1000);
 800269c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a0:	f009 faef 	bl	800bc82 <osDelay>
					ranonce = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
					vTaskResume(HomeHandle);
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <StartWriteCard+0x124>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00a fc03 	bl	800ceb8 <vTaskResume>
					vTaskSuspend(NULL);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f00a fb58 	bl	800cd68 <vTaskSuspend>
	  if (ranonce == 0){
 80026b8:	e77e      	b.n	80025b8 <StartWriteCard+0x14>
 80026ba:	bf00      	nop
 80026bc:	08010368 	.word	0x08010368
 80026c0:	2000084c 	.word	0x2000084c
 80026c4:	0800fdd8 	.word	0x0800fdd8
 80026c8:	20000838 	.word	0x20000838
 80026cc:	0800fe04 	.word	0x0800fe04
 80026d0:	0800fe10 	.word	0x0800fe10
 80026d4:	0800fe20 	.word	0x0800fe20

080026d8 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 80026ee:	2100      	movs	r1, #0
 80026f0:	4823      	ldr	r0, [pc, #140]	; (8002780 <StartHome+0xa8>)
 80026f2:	f7fe feb1 	bl	8001458 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4619      	mov	r1, r3
 80026fc:	4820      	ldr	r0, [pc, #128]	; (8002780 <StartHome+0xa8>)
 80026fe:	f7fe ff15 	bl	800152c <OLED_SELECT>
		  ranonce++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <StartHome+0xac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f107 010a 	add.w	r1, r7, #10
 8002710:	2200      	movs	r2, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f009 ff04 	bl	800c520 <xQueueReceive>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d1e4      	bne.n	80026e8 <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 800271e:	7abb      	ldrb	r3, [r7, #10]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d107      	bne.n	8002734 <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8002724:	f107 030b 	add.w	r3, r7, #11
 8002728:	2201      	movs	r2, #1
 800272a:	4619      	mov	r1, r3
 800272c:	4814      	ldr	r0, [pc, #80]	; (8002780 <StartHome+0xa8>)
 800272e:	f7ff f851 	bl	80017d4 <oled_move_selection>
 8002732:	e7d9      	b.n	80026e8 <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8002734:	7abb      	ldrb	r3, [r7, #10]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d1d6      	bne.n	80026e8 <StartHome+0x10>
			  switch(select_index) {
 800273a:	7afb      	ldrb	r3, [r7, #11]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d012      	beq.n	8002766 <StartHome+0x8e>
 8002740:	2b02      	cmp	r3, #2
 8002742:	dc16      	bgt.n	8002772 <StartHome+0x9a>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <StartHome+0x76>
 8002748:	2b01      	cmp	r3, #1
 800274a:	d006      	beq.n	800275a <StartHome+0x82>
 800274c:	e011      	b.n	8002772 <StartHome+0x9a>
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <StartHome+0xb0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f00a fbb0 	bl	800ceb8 <vTaskResume>
			  		  break;
 8002758:	e00b      	b.n	8002772 <StartHome+0x9a>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <StartHome+0xb4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f00a fbaa 	bl	800ceb8 <vTaskResume>
			  		  break;
 8002764:	e005      	b.n	8002772 <StartHome+0x9a>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <StartHome+0xb8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f00a fba4 	bl	800ceb8 <vTaskResume>
			  		  break;
 8002770:	bf00      	nop
			  }
			  ranonce = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 8002776:	2000      	movs	r0, #0
 8002778:	f00a faf6 	bl	800cd68 <vTaskSuspend>
	  if (ranonce == 0) {
 800277c:	e7b4      	b.n	80026e8 <StartHome+0x10>
 800277e:	bf00      	nop
 8002780:	08010320 	.word	0x08010320
 8002784:	2000084c 	.word	0x2000084c
 8002788:	20000830 	.word	0x20000830
 800278c:	20000834 	.word	0x20000834
 8002790:	20000840 	.word	0x20000840

08002794 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
	int ranonce = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
	Card* read_card;
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d130      	bne.n	800280c <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 80027aa:	bf00      	nop
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <CardFoundStart+0xd8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f107 0108 	add.w	r1, r7, #8
 80027b4:	2200      	movs	r2, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f009 feb2 	bl	800c520 <xQueueReceive>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d1f4      	bne.n	80027ac <CardFoundStart+0x18>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f7fe fad9 	bl	8000d84 <uid_tostring>
 80027d2:	6138      	str	r0, [r7, #16]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 80027d4:	2100      	movs	r1, #0
 80027d6:	4826      	ldr	r0, [pc, #152]	; (8002870 <CardFoundStart+0xdc>)
 80027d8:	f7fe fe3e 	bl	8001458 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	2101      	movs	r1, #1
 80027e0:	4823      	ldr	r0, [pc, #140]	; (8002870 <CardFoundStart+0xdc>)
 80027e2:	f7fe fe72 	bl	80014ca <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	461a      	mov	r2, r3
 80027ec:	2102      	movs	r1, #2
 80027ee:	4820      	ldr	r0, [pc, #128]	; (8002870 <CardFoundStart+0xdc>)
 80027f0:	f7fe fe6b 	bl	80014ca <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2200      	movs	r2, #0
 80027f8:	4619      	mov	r1, r3
 80027fa:	481d      	ldr	r0, [pc, #116]	; (8002870 <CardFoundStart+0xdc>)
 80027fc:	f7fe fe96 	bl	800152c <OLED_SELECT>
		ranonce++;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
		free(uid_str);
 8002806:	6938      	ldr	r0, [r7, #16]
 8002808:	f00c fd7c 	bl	800f304 <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <CardFoundStart+0xe0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f107 010e 	add.w	r1, r7, #14
 8002814:	2200      	movs	r2, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f009 fe82 	bl	800c520 <xQueueReceive>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d1c0      	bne.n	80027a4 <CardFoundStart+0x10>
 		if (button_state == SHORT_PRESS) {
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d107      	bne.n	8002838 <CardFoundStart+0xa4>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8002828:	f107 030f 	add.w	r3, r7, #15
 800282c:	2200      	movs	r2, #0
 800282e:	4619      	mov	r1, r3
 8002830:	480f      	ldr	r0, [pc, #60]	; (8002870 <CardFoundStart+0xdc>)
 8002832:	f7fe ffcf 	bl	80017d4 <oled_move_selection>
 8002836:	e7b5      	b.n	80027a4 <CardFoundStart+0x10>
 		} else if (button_state == LONG_PRESS) {
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d1b2      	bne.n	80027a4 <CardFoundStart+0x10>
 			if (select_index == 0) {
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <CardFoundStart+0xc2>
 				enter_card(read_card, mem_find_free_block());
 8002844:	68bc      	ldr	r4, [r7, #8]
 8002846:	f7ff fa59 	bl	8001cfc <mem_find_free_block>
 800284a:	4603      	mov	r3, r0
 800284c:	b29b      	uxth	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	4620      	mov	r0, r4
 8002852:	f000 f8e8 	bl	8002a26 <enter_card>
 			 }
 			vTaskResume(HomeHandle);
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <CardFoundStart+0xe4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f00a fb2c 	bl	800ceb8 <vTaskResume>
 			ranonce = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
 			vTaskSuspend(NULL);
 8002864:	2000      	movs	r0, #0
 8002866:	f00a fa7f 	bl	800cd68 <vTaskSuspend>
	if (ranonce == 0) {
 800286a:	e79b      	b.n	80027a4 <CardFoundStart+0x10>
 800286c:	20000848 	.word	0x20000848
 8002870:	08010350 	.word	0x08010350
 8002874:	2000084c 	.word	0x2000084c
 8002878:	20000838 	.word	0x20000838

0800287c <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d110      	bne.n	80028b4 <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 8002892:	2100      	movs	r1, #0
 8002894:	482a      	ldr	r0, [pc, #168]	; (8002940 <StartShowFiles+0xc4>)
 8002896:	f7fe fddf 	bl	8001458 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 800289a:	7afb      	ldrb	r3, [r7, #11]
 800289c:	2201      	movs	r2, #1
 800289e:	4619      	mov	r1, r3
 80028a0:	4827      	ldr	r0, [pc, #156]	; (8002940 <StartShowFiles+0xc4>)
 80028a2:	f7fe fe43 	bl	800152c <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 80028a6:	2100      	movs	r1, #0
 80028a8:	4825      	ldr	r0, [pc, #148]	; (8002940 <StartShowFiles+0xc4>)
 80028aa:	f7fe feb5 	bl	8001618 <OLED_display_files>
		  ranonce++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3301      	adds	r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <StartShowFiles+0xc8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f107 010a 	add.w	r1, r7, #10
 80028bc:	2200      	movs	r2, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f009 fe2e 	bl	800c520 <xQueueReceive>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d1e0      	bne.n	800288c <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 80028ca:	7abb      	ldrb	r3, [r7, #10]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d107      	bne.n	80028e0 <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 80028d0:	f107 030b 	add.w	r3, r7, #11
 80028d4:	2201      	movs	r2, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	4819      	ldr	r0, [pc, #100]	; (8002940 <StartShowFiles+0xc4>)
 80028da:	f7fe ff7b 	bl	80017d4 <oled_move_selection>
 80028de:	e7d5      	b.n	800288c <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 80028e0:	7abb      	ldrb	r3, [r7, #10]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d1d2      	bne.n	800288c <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d10a      	bne.n	8002902 <StartShowFiles+0x86>
				  vTaskResume(HomeHandle);
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <StartShowFiles+0xcc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f00a fae1 	bl	800ceb8 <vTaskResume>
				  ranonce = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f00a fa34 	bl	800cd68 <vTaskSuspend>
 8002900:	e7c4      	b.n	800288c <StartShowFiles+0x10>
			  } else if ((entry_present(select_index) == RFS_OK)) {
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fb11 	bl	8002f2e <entry_present>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1bc      	bne.n	800288c <StartShowFiles+0x10>
				  uint16_t entry = select_index;
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	b29b      	uxth	r3, r3
 8002916:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <StartShowFiles+0xd0>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f107 0108 	add.w	r1, r7, #8
 8002920:	2300      	movs	r3, #0
 8002922:	2200      	movs	r2, #0
 8002924:	f009 fc62 	bl	800c1ec <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <StartShowFiles+0xd4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f00a fac3 	bl	800ceb8 <vTaskResume>
				  ranonce = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 8002936:	2000      	movs	r0, #0
 8002938:	f00a fa16 	bl	800cd68 <vTaskSuspend>
	  if (ranonce == 0) {
 800293c:	e7a6      	b.n	800288c <StartShowFiles+0x10>
 800293e:	bf00      	nop
 8002940:	08010380 	.word	0x08010380
 8002944:	2000084c 	.word	0x2000084c
 8002948:	20000838 	.word	0x20000838
 800294c:	20000850 	.word	0x20000850
 8002950:	20000844 	.word	0x20000844

08002954 <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d112      	bne.n	8002990 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 800296a:	bf00      	nop
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <StartShowFileData+0x94>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f107 0108 	add.w	r1, r7, #8
 8002974:	2200      	movs	r2, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f009 fdd2 	bl	800c520 <xQueueReceive>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d1f4      	bne.n	800296c <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 8002982:	893b      	ldrh	r3, [r7, #8]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fee5 	bl	8001754 <oled_show_file>
    	ranonce++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <StartShowFileData+0x98>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f107 010a 	add.w	r1, r7, #10
 8002998:	2200      	movs	r2, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f009 fdc0 	bl	800c520 <xQueueReceive>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d1de      	bne.n	8002964 <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 80029a6:	7abb      	ldrb	r3, [r7, #10]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 80029ac:	f107 030b 	add.w	r3, r7, #11
 80029b0:	2200      	movs	r2, #0
 80029b2:	4619      	mov	r1, r3
 80029b4:	480e      	ldr	r0, [pc, #56]	; (80029f0 <StartShowFileData+0x9c>)
 80029b6:	f7fe ff0d 	bl	80017d4 <oled_move_selection>
 80029ba:	e7d3      	b.n	8002964 <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 80029bc:	7abb      	ldrb	r3, [r7, #10]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d1d0      	bne.n	8002964 <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 faf9 	bl	8002fc2 <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <StartShowFileData+0xa0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f00a fa6f 	bl	800ceb8 <vTaskResume>
    		ranonce = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 80029de:	2000      	movs	r0, #0
 80029e0:	f00a f9c2 	bl	800cd68 <vTaskSuspend>
    if (ranonce == 0) {
 80029e4:	e7be      	b.n	8002964 <StartShowFileData+0x10>
 80029e6:	bf00      	nop
 80029e8:	20000850 	.word	0x20000850
 80029ec:	2000084c 	.word	0x2000084c
 80029f0:	08010398 	.word	0x08010398
 80029f4:	20000840 	.word	0x20000840

080029f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a0a:	f000 fd89 	bl	8003520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40000c00 	.word	0x40000c00

08002a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a20:	b672      	cpsid	i
}
 8002a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <Error_Handler+0x8>

08002a26 <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 8002a26:	b5b0      	push	{r4, r5, r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe ff9e 	bl	800197c <block_erase>
	enter_metadata(card, entry);
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f83f 	bl	8002ac8 <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 8002a4a:	89fb      	ldrh	r3, [r7, #14]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b29c      	uxth	r4, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689d      	ldr	r5, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fbc1 	bl	80001e0 <strlen>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	462a      	mov	r2, r5
 8002a62:	2100      	movs	r1, #0
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7fe ffe1 	bl	8001a2c <MEM_WRITE>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 8002a70:	2304      	movs	r3, #4
 8002a72:	e025      	b.n	8002ac0 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	3301      	adds	r3, #1
 8002a78:	b29c      	uxth	r4, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fbae 	bl	80001e0 <strlen>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b299      	uxth	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	791b      	ldrb	r3, [r3, #4]
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7fe ffcb 	bl	8001a2c <MEM_WRITE>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e00f      	b.n	8002ac0 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	b298      	uxth	r0, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8b1b      	ldrh	r3, [r3, #24]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f7fe ffbc 	bl	8001a2c <MEM_WRITE>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <enter_card+0x98>
		return RFS_WRITE_ERROR;
 8002aba:	2304      	movs	r3, #4
 8002abc:	e000      	b.n	8002ac0 <enter_card+0x9a>
	}

	return RFS_OK;
 8002abe:	2300      	movs	r3, #0

}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bdb0      	pop	{r4, r5, r7, pc}

08002ac8 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8b1b      	ldrh	r3, [r3, #24]
 8002ad8:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7c1b      	ldrb	r3, [r3, #16]
 8002ade:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	791b      	ldrb	r3, [r3, #4]
 8002ae4:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fb78 	bl	80001e0 <strlen>
 8002af0:	4603      	mov	r3, r0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3303      	adds	r3, #3
 8002af6:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8002af8:	7b3b      	ldrb	r3, [r7, #12]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f00c fbfa 	bl	800f2f4 <malloc>
 8002b00:	4603      	mov	r3, r0
 8002b02:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68dc      	ldr	r4, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fb67 	bl	80001e0 <strlen>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	4621      	mov	r1, r4
 8002b18:	68b8      	ldr	r0, [r7, #8]
 8002b1a:	f00c fbfb 	bl	800f314 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fb5c 	bl	80001e0 <strlen>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fb52 	bl	80001e0 <strlen>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	3301      	adds	r3, #1
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4413      	add	r3, r2
 8002b44:	7b7a      	ldrb	r2, [r7, #13]
 8002b46:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fb47 	bl	80001e0 <strlen>
 8002b52:	4603      	mov	r3, r0
 8002b54:	3302      	adds	r3, #2
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4413      	add	r3, r2
 8002b5a:	7bba      	ldrb	r2, [r7, #14]
 8002b5c:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	019b      	lsls	r3, r3, #6
 8002b62:	b298      	uxth	r0, r3
 8002b64:	7b3b      	ldrb	r3, [r7, #12]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f7fe ff5f 	bl	8001a2c <MEM_WRITE>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <enter_metadata+0xb6>
		free(metadata);
 8002b74:	68b8      	ldr	r0, [r7, #8]
 8002b76:	f00c fbc5 	bl	800f304 <free>
		return RFS_WRITE_ERROR;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	e003      	b.n	8002b86 <enter_metadata+0xbe>
	}
	free(metadata);
 8002b7e:	68b8      	ldr	r0, [r7, #8]
 8002b80:	f00c fbc0 	bl	800f304 <free>
	return RFS_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}

08002b8e <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 8002b98:	201c      	movs	r0, #28
 8002b9a:	f00c fbab 	bl	800f2f4 <malloc>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f81e 	bl	8002be8 <read_metadata>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <read_card_entry+0x28>
		return NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e014      	b.n	8002be0 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f881 	bl	8002cc2 <read_nameuid>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <read_card_entry+0x3c>
		return NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e00a      	b.n	8002be0 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8e2 	bl	8002d98 <read_cardcontents>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <read_card_entry+0x50>
		return NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <read_card_entry+0x52>
	}

	return result;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f8f5 	bl	8002de8 <get_datasize>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8002c02:	8afb      	ldrh	r3, [r7, #22]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00c fb75 	bl	800f2f4 <malloc>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 8002c0e:	8afb      	ldrh	r3, [r7, #22]
 8002c10:	3b02      	subs	r3, #2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f00c fb6e 	bl	800f2f4 <malloc>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	019b      	lsls	r3, r3, #6
 8002c20:	b298      	uxth	r0, r3
 8002c22:	8afb      	ldrh	r3, [r7, #22]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	2100      	movs	r1, #0
 8002c28:	f7fe ff96 	bl	8001b58 <MEM_READPAGE>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <read_metadata+0x54>
		free(metadata);
 8002c32:	6938      	ldr	r0, [r7, #16]
 8002c34:	f00c fb66 	bl	800f304 <free>
		return RFS_READ_ERROR;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	e03e      	b.n	8002cba <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2bff      	cmp	r3, #255	; 0xff
 8002c42:	d104      	bne.n	8002c4e <read_metadata+0x66>
		free(metadata);
 8002c44:	6938      	ldr	r0, [r7, #16]
 8002c46:	f00c fb5d 	bl	800f304 <free>
		return RFS_NO_CARD;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e035      	b.n	8002cba <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 8002c4e:	8afb      	ldrh	r3, [r7, #22]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	461a      	mov	r2, r3
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f00c fb5c 	bl	800f314 <memcpy>
	type[metadata_size - 3] = '\0';
 8002c5c:	8afb      	ldrh	r3, [r7, #22]
 8002c5e:	3b03      	subs	r3, #3
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
	result->type = type;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 8002c6e:	8afb      	ldrh	r3, [r7, #22]
 8002c70:	3b03      	subs	r3, #3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 8002c7e:	8afb      	ldrh	r3, [r7, #22]
 8002c80:	3b02      	subs	r3, #2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 8002c8c:	8afb      	ldrh	r3, [r7, #22]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d104      	bne.n	8002ca4 <read_metadata+0xbc>
		free(metadata);
 8002c9a:	6938      	ldr	r0, [r7, #16]
 8002c9c:	f00c fb32 	bl	800f304 <free>
		return RFS_CARD_PROTECTED;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e00a      	b.n	8002cba <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8002cb2:	6938      	ldr	r0, [r7, #16]
 8002cb4:	f00c fb26 	bl	800f304 <free>

	return RFS_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f888 	bl	8002de8 <get_datasize>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8002cdc:	8afb      	ldrh	r3, [r7, #22]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f00c fb08 	bl	800f2f4 <malloc>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8002ce8:	8afb      	ldrh	r3, [r7, #22]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	7912      	ldrb	r2, [r2, #4]
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f00c fafe 	bl	800f2f4 <malloc>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	791b      	ldrb	r3, [r3, #4]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f00c faf7 	bl	800f2f4 <malloc>
 8002d06:	4603      	mov	r3, r0
 8002d08:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	b298      	uxth	r0, r3
 8002d14:	8afb      	ldrh	r3, [r7, #22]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f7fe ff1d 	bl	8001b58 <MEM_READPAGE>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <read_nameuid+0x6c>
		free(raw_data);
 8002d24:	6938      	ldr	r0, [r7, #16]
 8002d26:	f00c faed 	bl	800f304 <free>
		return RFS_READ_ERROR;
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	e030      	b.n	8002d90 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	d104      	bne.n	8002d40 <read_nameuid+0x7e>
		free(raw_data);
 8002d36:	6938      	ldr	r0, [r7, #16]
 8002d38:	f00c fae4 	bl	800f304 <free>
		return RFS_NO_CARD;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e027      	b.n	8002d90 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8002d40:	8afb      	ldrh	r3, [r7, #22]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	7912      	ldrb	r2, [r2, #4]
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6939      	ldr	r1, [r7, #16]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f00c fae1 	bl	800f314 <memcpy>
	name[datasize - result->uidsize] = '\0';
 8002d52:	8afb      	ldrh	r3, [r7, #22]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	7912      	ldrb	r2, [r2, #4]
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
	result->name = name;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7fd fa38 	bl	80001e0 <strlen>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1899      	adds	r1, r3, r2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	791b      	ldrb	r3, [r3, #4]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68b8      	ldr	r0, [r7, #8]
 8002d7e:	f00c fac9 	bl	800f314 <memcpy>
	result->uid = uid;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	601a      	str	r2, [r3, #0]
	free(raw_data);
 8002d88:	6938      	ldr	r0, [r7, #16]
 8002d8a:	f00c fabb 	bl	800f304 <free>

	return RFS_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8b1b      	ldrh	r3, [r3, #24]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00c faa3 	bl	800f2f4 <malloc>
 8002dae:	4603      	mov	r3, r0
 8002db0:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3302      	adds	r3, #2
 8002dba:	b298      	uxth	r0, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8b1b      	ldrh	r3, [r3, #24]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f7fe fec8 	bl	8001b58 <MEM_READPAGE>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <read_cardcontents+0x40>
		free(contents);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f00c fa98 	bl	800f304 <free>
		return RFS_READ_ERROR;
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	e003      	b.n	8002de0 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	460a      	mov	r2, r1
 8002df2:	80fb      	strh	r3, [r7, #6]
 8002df4:	4613      	mov	r3, r2
 8002df6:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8002e00:	e014      	b.n	8002e2c <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	797b      	ldrb	r3, [r7, #5]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b298      	uxth	r0, r3
 8002e10:	f107 020d 	add.w	r2, r7, #13
 8002e14:	89f9      	ldrh	r1, [r7, #14]
 8002e16:	2301      	movs	r3, #1
 8002e18:	f7fe fe9e 	bl	8001b58 <MEM_READPAGE>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8002e22:	2300      	movs	r3, #0
 8002e24:	e008      	b.n	8002e38 <get_datasize+0x50>
		}
		size++;
 8002e26:	89fb      	ldrh	r3, [r7, #14]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 8002e2c:	7b7b      	ldrb	r3, [r7, #13]
 8002e2e:	2bff      	cmp	r3, #255	; 0xff
 8002e30:	d1e7      	bne.n	8002e02 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8002e32:	89fb      	ldrh	r3, [r7, #14]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29b      	uxth	r3, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
	int count = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	e00d      	b.n	8002e6c <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f86a 	bl	8002f2e <entry_present>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <get_number_files+0x36>
			count++;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3301      	adds	r3, #1
 8002e64:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	dbed      	blt.n	8002e50 <get_number_files+0x10>
 8002e74:	e000      	b.n	8002e78 <get_number_files+0x38>
		} else {
			break;
 8002e76:	bf00      	nop
		}

	}

	return count;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 8002e82:	b5b0      	push	{r4, r5, r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	e040      	b.n	8002f12 <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f84a 	bl	8002f2e <entry_present>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13d      	bne.n	8002f1c <get_all_files+0x9a>
			work = read_card_entry(i);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fe72 	bl	8002b8e <read_card_entry>
 8002eaa:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd f995 	bl	80001e0 <strlen>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	1c59      	adds	r1, r3, #1
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	18d4      	adds	r4, r2, r3
 8002ec2:	4608      	mov	r0, r1
 8002ec4:	f00c fa16 	bl	800f2f4 <malloc>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	681c      	ldr	r4, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689d      	ldr	r5, [r3, #8]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd f97e 	bl	80001e0 <strlen>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4629      	mov	r1, r5
 8002eea:	4620      	mov	r0, r4
 8002eec:	f00c fa12 	bl	800f314 <memcpy>
			result[i][strlen(work->name)] = '\0';
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	681c      	ldr	r4, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd f96e 	bl	80001e0 <strlen>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4423      	add	r3, r4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	dbba      	blt.n	8002e90 <get_all_files+0xe>
 8002f1a:	e000      	b.n	8002f1e <get_all_files+0x9c>
		} else {
			break;
 8002f1c:	bf00      	nop
		}
	}

	free(work);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f00c f9f0 	bl	800f304 <free>
	return RFS_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bdb0      	pop	{r4, r5, r7, pc}

08002f2e <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	019b      	lsls	r3, r3, #6
 8002f3c:	b298      	uxth	r0, r3
 8002f3e:	f107 020f 	add.w	r2, r7, #15
 8002f42:	2301      	movs	r3, #1
 8002f44:	2100      	movs	r1, #0
 8002f46:	f7fe fe07 	bl	8001b58 <MEM_READPAGE>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <entry_present+0x26>
		return RFS_READ_ERROR;
 8002f50:	2305      	movs	r3, #5
 8002f52:	e005      	b.n	8002f60 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2bff      	cmp	r3, #255	; 0xff
 8002f58:	d101      	bne.n	8002f5e <entry_present+0x30>
		return RFS_NO_CARD;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <entry_present+0x32>
	}

	return RFS_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ffda 	bl	8002f2e <entry_present>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <get_file_name+0x1c>
		return NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e01a      	b.n	8002fba <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fe01 	bl	8002b8e <read_card_entry>
 8002f8c:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd f924 	bl	80001e0 <strlen>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00c f9a9 	bl	800f2f4 <malloc>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4619      	mov	r1, r3
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f00c fad7 	bl	800f560 <strcpy>
	free(work);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f00c f9a6 	bl	800f304 <free>

	return name;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fcd4 	bl	800197c <block_erase>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_MspInit+0x54>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4a11      	ldr	r2, [pc, #68]	; (8003030 <HAL_MspInit+0x54>)
 8002fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_MspInit+0x54>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_MspInit+0x54>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_MspInit+0x54>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_MspInit+0x54>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	210f      	movs	r1, #15
 800301e:	f06f 0001 	mvn.w	r0, #1
 8003022:	f000 fb79 	bl	8003718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800

08003034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_I2C_MspInit+0x84>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d12b      	bne.n	80030ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <HAL_I2C_MspInit+0x88>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_I2C_MspInit+0x88>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_I2C_MspInit+0x88>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003072:	23c0      	movs	r3, #192	; 0xc0
 8003074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003076:	2312      	movs	r3, #18
 8003078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003082:	2304      	movs	r3, #4
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	480c      	ldr	r0, [pc, #48]	; (80030c0 <HAL_I2C_MspInit+0x8c>)
 800308e:	f000 fb6d 	bl	800376c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_I2C_MspInit+0x88>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <HAL_I2C_MspInit+0x88>)
 800309c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_I2C_MspInit+0x88>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030ae:	bf00      	nop
 80030b0:	3728      	adds	r7, #40	; 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40005400 	.word	0x40005400
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020400 	.word	0x40020400

080030c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_SPI_MspInit+0xe8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12c      	bne.n	8003140 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 80030f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800311e:	23a0      	movs	r3, #160	; 0xa0
 8003120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312a:	2303      	movs	r3, #3
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800312e:	2305      	movs	r3, #5
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	f107 031c 	add.w	r3, r7, #28
 8003136:	4619      	mov	r1, r3
 8003138:	481e      	ldr	r0, [pc, #120]	; (80031b4 <HAL_SPI_MspInit+0xf0>)
 800313a:	f000 fb17 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800313e:	e031      	b.n	80031a4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_SPI_MspInit+0xf4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d12c      	bne.n	80031a4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_SPI_MspInit+0xec>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003182:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003190:	2303      	movs	r3, #3
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003194:	2305      	movs	r3, #5
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003198:	f107 031c 	add.w	r3, r7, #28
 800319c:	4619      	mov	r1, r3
 800319e:	4807      	ldr	r0, [pc, #28]	; (80031bc <HAL_SPI_MspInit+0xf8>)
 80031a0:	f000 fae4 	bl	800376c <HAL_GPIO_Init>
}
 80031a4:	bf00      	nop
 80031a6:	3730      	adds	r7, #48	; 0x30
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40013000 	.word	0x40013000
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40003800 	.word	0x40003800
 80031bc:	40020400 	.word	0x40020400

080031c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_TIM_Base_MspInit+0x64>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_TIM_Base_MspInit+0x64>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_TIM_Base_MspInit+0x64>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031ee:	e012      	b.n	8003216 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <HAL_TIM_Base_MspInit+0x68>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_TIM_Base_MspInit+0x64>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a08      	ldr	r2, [pc, #32]	; (8003224 <HAL_TIM_Base_MspInit+0x64>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_TIM_Base_MspInit+0x64>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	40000400 	.word	0x40000400

0800322c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d11d      	bne.n	800328a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_TIM_MspPostInit+0x68>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_TIM_MspPostInit+0x68>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_TIM_MspPostInit+0x68>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800326a:	2304      	movs	r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800327a:	2301      	movs	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	4619      	mov	r1, r3
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <HAL_TIM_MspPostInit+0x6c>)
 8003286:	f000 fa71 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000

0800329c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08e      	sub	sp, #56	; 0x38
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_InitTick+0xe4>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4a32      	ldr	r2, [pc, #200]	; (8003380 <HAL_InitTick+0xe4>)
 80032b6:	f043 0308 	orr.w	r3, r3, #8
 80032ba:	6413      	str	r3, [r2, #64]	; 0x40
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <HAL_InitTick+0xe4>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032c8:	f107 0210 	add.w	r2, r7, #16
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 fad6 	bl	8006884 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032e2:	f003 fabb 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80032e6:	6378      	str	r0, [r7, #52]	; 0x34
 80032e8:	e004      	b.n	80032f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032ea:	f003 fab7 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80032ee:	4603      	mov	r3, r0
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f6:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_InitTick+0xe8>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	0c9b      	lsrs	r3, r3, #18
 80032fe:	3b01      	subs	r3, #1
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_InitTick+0xec>)
 8003304:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_InitTick+0xf0>)
 8003306:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003308:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <HAL_InitTick+0xec>)
 800330a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800330e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_InitTick+0xec>)
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_InitTick+0xec>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_InitTick+0xec>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_InitTick+0xec>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003328:	4817      	ldr	r0, [pc, #92]	; (8003388 <HAL_InitTick+0xec>)
 800332a:	f003 ff0f 	bl	800714c <HAL_TIM_Base_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003334:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11b      	bne.n	8003374 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800333c:	4812      	ldr	r0, [pc, #72]	; (8003388 <HAL_InitTick+0xec>)
 800333e:	f003 ffd7 	bl	80072f0 <HAL_TIM_Base_Start_IT>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003348:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003350:	2032      	movs	r0, #50	; 0x32
 8003352:	f000 f9fd 	bl	8003750 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0f      	cmp	r3, #15
 800335a:	d808      	bhi.n	800336e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800335c:	2200      	movs	r2, #0
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	2032      	movs	r0, #50	; 0x32
 8003362:	f000 f9d9 	bl	8003718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_InitTick+0xf4>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e002      	b.n	8003374 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003378:	4618      	mov	r0, r3
 800337a:	3738      	adds	r7, #56	; 0x38
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	431bde83 	.word	0x431bde83
 8003388:	20000854 	.word	0x20000854
 800338c:	40000c00 	.word	0x40000c00
 8003390:	2000051c 	.word	0x2000051c

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <NMI_Handler+0x4>

0800339a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <MemManage_Handler+0x4>

080033a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80033c4:	2002      	movs	r0, #2
 80033c6:	f000 fb87 	bl	8003ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM5_IRQHandler+0x10>)
 80033d6:	f004 f95b 	bl	8007690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000854 	.word	0x20000854

080033e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <OTG_FS_IRQHandler+0x10>)
 80033ea:	f001 fc9c 	bl	8004d26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200064f4 	.word	0x200064f4

080033f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003400:	4a14      	ldr	r2, [pc, #80]	; (8003454 <_sbrk+0x5c>)
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <_sbrk+0x60>)
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <_sbrk+0x64>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <_sbrk+0x64>)
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <_sbrk+0x68>)
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <_sbrk+0x64>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	429a      	cmp	r2, r3
 8003426:	d207      	bcs.n	8003438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003428:	f00b ff3a 	bl	800f2a0 <__errno>
 800342c:	4603      	mov	r3, r0
 800342e:	220c      	movs	r2, #12
 8003430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	e009      	b.n	800344c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <_sbrk+0x64>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	4a05      	ldr	r2, [pc, #20]	; (800345c <_sbrk+0x64>)
 8003448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20010000 	.word	0x20010000
 8003458:	00000400 	.word	0x00000400
 800345c:	2000089c 	.word	0x2000089c
 8003460:	20006c30 	.word	0x20006c30

08003464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <SystemInit+0x20>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <SystemInit+0x20>)
 8003470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800348c:	480d      	ldr	r0, [pc, #52]	; (80034c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800348e:	490e      	ldr	r1, [pc, #56]	; (80034c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003490:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003494:	e002      	b.n	800349c <LoopCopyDataInit>

08003496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349a:	3304      	adds	r3, #4

0800349c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800349c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a0:	d3f9      	bcc.n	8003496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034a4:	4c0b      	ldr	r4, [pc, #44]	; (80034d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a8:	e001      	b.n	80034ae <LoopFillZerobss>

080034aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034ac:	3204      	adds	r2, #4

080034ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b0:	d3fb      	bcc.n	80034aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034b2:	f7ff ffd7 	bl	8003464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034b6:	f00b fef9 	bl	800f2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ba:	f7fe fcab 	bl	8001e14 <main>
  bx  lr    
 80034be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c8:	2000067c 	.word	0x2000067c
  ldr r2, =_sidata
 80034cc:	0801040c 	.word	0x0801040c
  ldr r2, =_sbss
 80034d0:	2000067c 	.word	0x2000067c
  ldr r4, =_ebss
 80034d4:	20006c30 	.word	0x20006c30

080034d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d8:	e7fe      	b.n	80034d8 <ADC_IRQHandler>
	...

080034dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_Init+0x40>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <HAL_Init+0x40>)
 80034e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_Init+0x40>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_Init+0x40>)
 80034f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_Init+0x40>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a07      	ldr	r2, [pc, #28]	; (800351c <HAL_Init+0x40>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003504:	2003      	movs	r0, #3
 8003506:	f000 f8fc 	bl	8003702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800350a:	200f      	movs	r0, #15
 800350c:	f7ff fec6 	bl	800329c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003510:	f7ff fd64 	bl	8002fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023c00 	.word	0x40023c00

08003520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_IncTick+0x20>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x24>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_IncTick+0x24>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000520 	.word	0x20000520
 8003544:	200008a0 	.word	0x200008a0

08003548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return uwTick;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_GetTick+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	200008a0 	.word	0x200008a0

08003560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff ffee 	bl	8003548 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d005      	beq.n	8003586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_Delay+0x44>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003586:	bf00      	nop
 8003588:	f7ff ffde 	bl	8003548 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d8f7      	bhi.n	8003588 <HAL_Delay+0x28>
  {
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000520 	.word	0x20000520

080035a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c4:	4013      	ands	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	60d3      	str	r3, [r2, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <__NVIC_GetPriorityGrouping+0x18>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	f003 0307 	and.w	r3, r3, #7
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	db0b      	blt.n	8003636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4907      	ldr	r1, [pc, #28]	; (8003644 <__NVIC_EnableIRQ+0x38>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2001      	movs	r0, #1
 800362e:	fa00 f202 	lsl.w	r2, r0, r2
 8003632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000e100 	.word	0xe000e100

08003648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db0a      	blt.n	8003672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	490c      	ldr	r1, [pc, #48]	; (8003694 <__NVIC_SetPriority+0x4c>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	440b      	add	r3, r1
 800366c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003670:	e00a      	b.n	8003688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <__NVIC_SetPriority+0x50>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3b04      	subs	r3, #4
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	440b      	add	r3, r1
 8003686:	761a      	strb	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000e100 	.word	0xe000e100
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f1c3 0307 	rsb	r3, r3, #7
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf28      	it	cs
 80036ba:	2304      	movcs	r3, #4
 80036bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d902      	bls.n	80036cc <NVIC_EncodePriority+0x30>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3b03      	subs	r3, #3
 80036ca:	e000      	b.n	80036ce <NVIC_EncodePriority+0x32>
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	4313      	orrs	r3, r2
         );
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff4c 	bl	80035a8 <__NVIC_SetPriorityGrouping>
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800372a:	f7ff ff61 	bl	80035f0 <__NVIC_GetPriorityGrouping>
 800372e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f7ff ffb1 	bl	800369c <NVIC_EncodePriority>
 800373a:	4602      	mov	r2, r0
 800373c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff80 	bl	8003648 <__NVIC_SetPriority>
}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ff54 	bl	800360c <__NVIC_EnableIRQ>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e159      	b.n	8003a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	f040 8148 	bne.w	8003a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d005      	beq.n	80037be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d130      	bne.n	8003820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	2203      	movs	r2, #3
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f4:	2201      	movs	r2, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 0201 	and.w	r2, r3, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b03      	cmp	r3, #3
 800382a:	d017      	beq.n	800385c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2203      	movs	r2, #3
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d123      	bne.n	80038b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	08da      	lsrs	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3208      	adds	r2, #8
 8003870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	08da      	lsrs	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3208      	adds	r2, #8
 80038aa:	69b9      	ldr	r1, [r7, #24]
 80038ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a2 	beq.w	8003a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	4a56      	ldr	r2, [pc, #344]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 80038fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	4b54      	ldr	r3, [pc, #336]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800390e:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <HAL_GPIO_Init+0x2ec>)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3302      	adds	r3, #2
 8003916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	220f      	movs	r2, #15
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a49      	ldr	r2, [pc, #292]	; (8003a5c <HAL_GPIO_Init+0x2f0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d019      	beq.n	800396e <HAL_GPIO_Init+0x202>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a48      	ldr	r2, [pc, #288]	; (8003a60 <HAL_GPIO_Init+0x2f4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_GPIO_Init+0x1fe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a47      	ldr	r2, [pc, #284]	; (8003a64 <HAL_GPIO_Init+0x2f8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00d      	beq.n	8003966 <HAL_GPIO_Init+0x1fa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a46      	ldr	r2, [pc, #280]	; (8003a68 <HAL_GPIO_Init+0x2fc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <HAL_GPIO_Init+0x1f6>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a45      	ldr	r2, [pc, #276]	; (8003a6c <HAL_GPIO_Init+0x300>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_GPIO_Init+0x1f2>
 800395a:	2304      	movs	r3, #4
 800395c:	e008      	b.n	8003970 <HAL_GPIO_Init+0x204>
 800395e:	2307      	movs	r3, #7
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x204>
 8003962:	2303      	movs	r3, #3
 8003964:	e004      	b.n	8003970 <HAL_GPIO_Init+0x204>
 8003966:	2302      	movs	r3, #2
 8003968:	e002      	b.n	8003970 <HAL_GPIO_Init+0x204>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_GPIO_Init+0x204>
 800396e:	2300      	movs	r3, #0
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	f002 0203 	and.w	r2, r2, #3
 8003976:	0092      	lsls	r2, r2, #2
 8003978:	4093      	lsls	r3, r2
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003980:	4935      	ldr	r1, [pc, #212]	; (8003a58 <HAL_GPIO_Init+0x2ec>)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <HAL_GPIO_Init+0x304>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b2:	4a2f      	ldr	r2, [pc, #188]	; (8003a70 <HAL_GPIO_Init+0x304>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b8:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_GPIO_Init+0x304>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039dc:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <HAL_GPIO_Init+0x304>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <HAL_GPIO_Init+0x304>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_GPIO_Init+0x304>)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_GPIO_Init+0x304>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a30:	4a0f      	ldr	r2, [pc, #60]	; (8003a70 <HAL_GPIO_Init+0x304>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	f67f aea2 	bls.w	8003788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40013800 	.word	0x40013800
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	40020400 	.word	0x40020400
 8003a64:	40020800 	.word	0x40020800
 8003a68:	40020c00 	.word	0x40020c00
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40013c00 	.word	0x40013c00

08003a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	887b      	ldrh	r3, [r7, #2]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e001      	b.n	8003a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac0:	e003      	b.n	8003aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	041a      	lsls	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aee:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe f93e 	bl	8001d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40013c00 	.word	0x40013c00

08003b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e12b      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fa80 	bl	8003034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f002 fe76 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8003b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a81      	ldr	r2, [pc, #516]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d807      	bhi.n	8003b8c <HAL_I2C_Init+0x84>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a80      	ldr	r2, [pc, #512]	; (8003d80 <HAL_I2C_Init+0x278>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bf94      	ite	ls
 8003b84:	2301      	movls	r3, #1
 8003b86:	2300      	movhi	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e006      	b.n	8003b9a <HAL_I2C_Init+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a7d      	ldr	r2, [pc, #500]	; (8003d84 <HAL_I2C_Init+0x27c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bf94      	ite	ls
 8003b94:	2301      	movls	r3, #1
 8003b96:	2300      	movhi	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0e7      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a78      	ldr	r2, [pc, #480]	; (8003d88 <HAL_I2C_Init+0x280>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0c9b      	lsrs	r3, r3, #18
 8003bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d802      	bhi.n	8003bdc <HAL_I2C_Init+0xd4>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	e009      	b.n	8003bf0 <HAL_I2C_Init+0xe8>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	4a69      	ldr	r2, [pc, #420]	; (8003d8c <HAL_I2C_Init+0x284>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	3301      	adds	r3, #1
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	495c      	ldr	r1, [pc, #368]	; (8003d7c <HAL_I2C_Init+0x274>)
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d819      	bhi.n	8003c44 <HAL_I2C_Init+0x13c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e59      	subs	r1, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c24:	400b      	ands	r3, r1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_I2C_Init+0x138>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e59      	subs	r1, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	e051      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c40:	2304      	movs	r3, #4
 8003c42:	e04f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d111      	bne.n	8003c70 <HAL_I2C_Init+0x168>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e012      	b.n	8003c96 <HAL_I2C_Init+0x18e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	0099      	lsls	r1, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Init+0x196>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e022      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_I2C_Init+0x1bc>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e58      	subs	r0, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	440b      	add	r3, r1
 8003cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	e00f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	0099      	lsls	r1, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	6809      	ldr	r1, [r1, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6911      	ldr	r1, [r2, #16]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	000186a0 	.word	0x000186a0
 8003d80:	001e847f 	.word	0x001e847f
 8003d84:	003d08ff 	.word	0x003d08ff
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003daa:	f7ff fbcd 	bl	8003548 <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	f040 80d9 	bne.w	8003f70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2319      	movs	r3, #25
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	496d      	ldr	r1, [pc, #436]	; (8003f7c <HAL_I2C_Mem_Write+0x1ec>)
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fc7f 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e0cc      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Mem_Write+0x56>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0c5      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d007      	beq.n	8003e0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2221      	movs	r2, #33	; 0x21
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2240      	movs	r2, #64	; 0x40
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a4d      	ldr	r2, [pc, #308]	; (8003f80 <HAL_I2C_Mem_Write+0x1f0>)
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e4e:	88f8      	ldrh	r0, [r7, #6]
 8003e50:	893a      	ldrh	r2, [r7, #8]
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fab6 	bl	80043d0 <I2C_RequestMemoryWrite>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d052      	beq.n	8003f10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e081      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fd00 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d107      	bne.n	8003e96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e06b      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d11b      	bne.n	8003f10 <HAL_I2C_Mem_Write+0x180>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1aa      	bne.n	8003e6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fcec 	bl	80048fa <I2C_WaitOnBTFFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e016      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	00100002 	.word	0x00100002
 8003f80:	ffff0000 	.word	0xffff0000

08003f84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	; 0x30
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	461a      	mov	r2, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	817b      	strh	r3, [r7, #10]
 8003f96:	460b      	mov	r3, r1
 8003f98:	813b      	strh	r3, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f9e:	f7ff fad3 	bl	8003548 <HAL_GetTick>
 8003fa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	f040 8208 	bne.w	80043c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2319      	movs	r3, #25
 8003fb8:	2201      	movs	r2, #1
 8003fba:	497b      	ldr	r1, [pc, #492]	; (80041a8 <HAL_I2C_Mem_Read+0x224>)
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fb85 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e1fb      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Mem_Read+0x56>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e1f4      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d007      	beq.n	8004000 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2222      	movs	r2, #34	; 0x22
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2240      	movs	r2, #64	; 0x40
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a5b      	ldr	r2, [pc, #364]	; (80041ac <HAL_I2C_Mem_Read+0x228>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004042:	88f8      	ldrh	r0, [r7, #6]
 8004044:	893a      	ldrh	r2, [r7, #8]
 8004046:	8979      	ldrh	r1, [r7, #10]
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4603      	mov	r3, r0
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fa52 	bl	80044fc <I2C_RequestMemoryRead>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e1b0      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d113      	bne.n	8004092 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e184      	b.n	800439c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11b      	bne.n	80040d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	e164      	b.n	800439c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d11b      	bne.n	8004112 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	e144      	b.n	800439c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004128:	e138      	b.n	800439c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	2b03      	cmp	r3, #3
 8004130:	f200 80f1 	bhi.w	8004316 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b01      	cmp	r3, #1
 800413a:	d123      	bne.n	8004184 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fc1b 	bl	800497c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e139      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004182:	e10b      	b.n	800439c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	2b02      	cmp	r3, #2
 800418a:	d14e      	bne.n	800422a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	2200      	movs	r2, #0
 8004194:	4906      	ldr	r1, [pc, #24]	; (80041b0 <HAL_I2C_Mem_Read+0x22c>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fa98 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e10e      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
 80041a6:	bf00      	nop
 80041a8:	00100002 	.word	0x00100002
 80041ac:	ffff0000 	.word	0xffff0000
 80041b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004228:	e0b8      	b.n	800439c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	2200      	movs	r2, #0
 8004232:	4966      	ldr	r1, [pc, #408]	; (80043cc <HAL_I2C_Mem_Read+0x448>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fa49 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0bf      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	2200      	movs	r2, #0
 800428e:	494f      	ldr	r1, [pc, #316]	; (80043cc <HAL_I2C_Mem_Read+0x448>)
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fa1b 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e091      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004314:	e042      	b.n	800439c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fb2e 	bl	800497c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e04c      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d118      	bne.n	800439c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f aec2 	bne.w	800412a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	00010004 	.word	0x00010004

080043d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	4608      	mov	r0, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	817b      	strh	r3, [r7, #10]
 80043e2:	460b      	mov	r3, r1
 80043e4:	813b      	strh	r3, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	2200      	movs	r2, #0
 8004402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f960 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004420:	d103      	bne.n	800442a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e05f      	b.n	80044ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800442e:	897b      	ldrh	r3, [r7, #10]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800443c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	492d      	ldr	r1, [pc, #180]	; (80044f8 <I2C_RequestMemoryWrite+0x128>)
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f998 	bl	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e04c      	b.n	80044ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	6a39      	ldr	r1, [r7, #32]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fa02 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b04      	cmp	r3, #4
 8004480:	d107      	bne.n	8004492 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e02b      	b.n	80044ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]
 80044a6:	e021      	b.n	80044ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044a8:	893b      	ldrh	r3, [r7, #8]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	6a39      	ldr	r1, [r7, #32]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f9dc 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d107      	bne.n	80044de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e005      	b.n	80044ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e2:	893b      	ldrh	r3, [r7, #8]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	00010002 	.word	0x00010002

080044fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	461a      	mov	r2, r3
 800450a:	4603      	mov	r3, r0
 800450c:	817b      	strh	r3, [r7, #10]
 800450e:	460b      	mov	r3, r1
 8004510:	813b      	strh	r3, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004524:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	2200      	movs	r2, #0
 800453e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8c2 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455c:	d103      	bne.n	8004566 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e0aa      	b.n	80046c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800456a:	897b      	ldrh	r3, [r7, #10]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	4952      	ldr	r1, [pc, #328]	; (80046c8 <I2C_RequestMemoryRead+0x1cc>)
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f8fa 	bl	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e097      	b.n	80046c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a8:	6a39      	ldr	r1, [r7, #32]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f964 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d107      	bne.n	80045ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e076      	b.n	80046c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d8:	893b      	ldrh	r3, [r7, #8]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]
 80045e2:	e021      	b.n	8004628 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	6a39      	ldr	r1, [r7, #32]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f93e 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2b04      	cmp	r3, #4
 8004608:	d107      	bne.n	800461a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e050      	b.n	80046c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800461e:	893b      	ldrh	r3, [r7, #8]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	6a39      	ldr	r1, [r7, #32]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f923 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	2b04      	cmp	r3, #4
 800463e:	d107      	bne.n	8004650 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e035      	b.n	80046c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004662:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2200      	movs	r2, #0
 800466c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f82b 	bl	80046cc <I2C_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00d      	beq.n	8004698 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d103      	bne.n	8004694 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e013      	b.n	80046c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004698:	897b      	ldrh	r3, [r7, #10]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	6a3a      	ldr	r2, [r7, #32]
 80046ac:	4906      	ldr	r1, [pc, #24]	; (80046c8 <I2C_RequestMemoryRead+0x1cc>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f863 	bl	800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	00010002 	.word	0x00010002

080046cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046dc:	e025      	b.n	800472a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d021      	beq.n	800472a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe ff2f 	bl	8003548 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e023      	b.n	8004772 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10d      	bne.n	8004750 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	e00c      	b.n	800476a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	43da      	mvns	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4013      	ands	r3, r2
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	429a      	cmp	r2, r3
 800476e:	d0b6      	beq.n	80046de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004788:	e051      	b.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004798:	d123      	bne.n	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f043 0204 	orr.w	r2, r3, #4
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e046      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d021      	beq.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fe fead 	bl	8003548 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d116      	bne.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e020      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d10c      	bne.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	e00b      	b.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	43da      	mvns	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4013      	ands	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d18d      	bne.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004884:	e02d      	b.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8ce 	bl	8004a28 <I2C_IsAcknowledgeFailed>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e02d      	b.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d021      	beq.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fe fe53 	bl	8003548 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e007      	b.n	80048f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	d1ca      	bne.n	8004886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004906:	e02d      	b.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f88d 	bl	8004a28 <I2C_IsAcknowledgeFailed>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e02d      	b.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d021      	beq.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004920:	f7fe fe12 	bl	8003548 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d116      	bne.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e007      	b.n	8004974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b04      	cmp	r3, #4
 8004970:	d1ca      	bne.n	8004908 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004988:	e042      	b.n	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b10      	cmp	r3, #16
 8004996:	d119      	bne.n	80049cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0210 	mvn.w	r2, #16
 80049a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e029      	b.n	8004a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049cc:	f7fe fdbc 	bl	8003548 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d302      	bcc.n	80049e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e007      	b.n	8004a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d1b5      	bne.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d11b      	bne.n	8004a78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f043 0204 	orr.w	r2, r3, #4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a88:	b08f      	sub	sp, #60	; 0x3c
 8004a8a:	af0a      	add	r7, sp, #40	; 0x28
 8004a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e10f      	b.n	8004cb8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f00a f8ea 	bl	800ec8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f003 fcf7 	bl	80084ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	687e      	ldr	r6, [r7, #4]
 8004ae4:	466d      	mov	r5, sp
 8004ae6:	f106 0410 	add.w	r4, r6, #16
 8004aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004af6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004afa:	1d33      	adds	r3, r6, #4
 8004afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f003 fbce 	bl	80082a0 <USB_CoreInit>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0d0      	b.n	8004cb8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f003 fce5 	bl	80084ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
 8004b26:	e04a      	b.n	8004bbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	333d      	adds	r3, #61	; 0x3d
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	333c      	adds	r3, #60	; 0x3c
 8004b4c:	7bfa      	ldrb	r2, [r7, #15]
 8004b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b50:	7bfa      	ldrb	r2, [r7, #15]
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	b298      	uxth	r0, r3
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	3344      	adds	r3, #68	; 0x44
 8004b64:	4602      	mov	r2, r0
 8004b66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b68:	7bfa      	ldrb	r2, [r7, #15]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3340      	adds	r3, #64	; 0x40
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b7c:	7bfa      	ldrb	r2, [r7, #15]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3348      	adds	r3, #72	; 0x48
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	334c      	adds	r3, #76	; 0x4c
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3354      	adds	r3, #84	; 0x54
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	7bfa      	ldrb	r2, [r7, #15]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3af      	bcc.n	8004b28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	e044      	b.n	8004c58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004bf6:	7bfa      	ldrb	r2, [r7, #15]
 8004bf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c26:	7bfa      	ldrb	r2, [r7, #15]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	3301      	adds	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d3b5      	bcc.n	8004bce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	687e      	ldr	r6, [r7, #4]
 8004c6a:	466d      	mov	r5, sp
 8004c6c:	f106 0410 	add.w	r4, r6, #16
 8004c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c80:	1d33      	adds	r3, r6, #4
 8004c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c84:	6838      	ldr	r0, [r7, #0]
 8004c86:	f003 fc7d 	bl	8008584 <USB_DevInit>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e00d      	b.n	8004cb8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f004 fdcc 	bl	800984e <USB_DevDisconnect>

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_PCD_Start+0x1c>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e020      	b.n	8004d1e <HAL_PCD_Start+0x5e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d109      	bne.n	8004d00 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d005      	beq.n	8004d00 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f003 fbcf 	bl	80084a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f004 fd7c 	bl	800980c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d26:	b590      	push	{r4, r7, lr}
 8004d28:	b08d      	sub	sp, #52	; 0x34
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f004 fe3a 	bl	80099b6 <USB_GetMode>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f040 848a 	bne.w	800565e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f004 fd9e 	bl	8009890 <USB_ReadInterrupts>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8480 	beq.w	800565c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	0a1b      	lsrs	r3, r3, #8
 8004d66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f004 fd8b 	bl	8009890 <USB_ReadInterrupts>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d107      	bne.n	8004d94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f002 0202 	and.w	r2, r2, #2
 8004d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f004 fd79 	bl	8009890 <USB_ReadInterrupts>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d161      	bne.n	8004e6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0210 	bic.w	r2, r2, #16
 8004db6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	0c5b      	lsrs	r3, r3, #17
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d124      	bne.n	8004e2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d035      	beq.n	8004e5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	6a38      	ldr	r0, [r7, #32]
 8004e04:	f004 fbb0 	bl	8009568 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e14:	441a      	add	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e26:	441a      	add	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
 8004e2c:	e016      	b.n	8004e5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	0c5b      	lsrs	r3, r3, #17
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d110      	bne.n	8004e5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e40:	2208      	movs	r2, #8
 8004e42:	4619      	mov	r1, r3
 8004e44:	6a38      	ldr	r0, [r7, #32]
 8004e46:	f004 fb8f 	bl	8009568 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6a1a      	ldr	r2, [r3, #32]
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e56:	441a      	add	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0210 	orr.w	r2, r2, #16
 8004e6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 fd0d 	bl	8009890 <USB_ReadInterrupts>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e80:	f040 80a7 	bne.w	8004fd2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f004 fd12 	bl	80098b6 <USB_ReadDevAllOutEpInterrupt>
 8004e92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004e94:	e099      	b.n	8004fca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 808e 	beq.w	8004fbe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f004 fd36 	bl	800991e <USB_ReadDevOutEPInterrupt>
 8004eb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2301      	movs	r3, #1
 8004ece:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fec2 	bl	8005c5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00c      	beq.n	8004efc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 ff98 	bl	8005e2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	461a      	mov	r2, r3
 8004f14:	2310      	movs	r3, #16
 8004f16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d030      	beq.n	8004f84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d109      	bne.n	8004f42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	78db      	ldrb	r3, [r3, #3]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d108      	bne.n	8004f72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f009 ff89 	bl	800ee84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2302      	movs	r3, #2
 8004f82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f47f af62 	bne.w	8004e96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f004 fc5a 	bl	8009890 <USB_ReadInterrupts>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe6:	f040 80db 	bne.w	80051a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f004 fc7b 	bl	80098ea <USB_ReadDevAllInEpInterrupt>
 8004ff4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ffa:	e0cd      	b.n	8005198 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80c2 	beq.w	800518c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f004 fca1 	bl	800995a <USB_ReadDevInEPInterrupt>
 8005018:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d057      	beq.n	80050d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	2201      	movs	r2, #1
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	43db      	mvns	r3, r3
 800503e:	69f9      	ldr	r1, [r7, #28]
 8005040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005044:	4013      	ands	r3, r2
 8005046:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	461a      	mov	r2, r3
 8005056:	2301      	movs	r3, #1
 8005058:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d132      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	334c      	adds	r3, #76	; 0x4c
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	4613      	mov	r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4403      	add	r3, r0
 8005082:	3348      	adds	r3, #72	; 0x48
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4419      	add	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4403      	add	r3, r0
 8005096:	334c      	adds	r3, #76	; 0x4c
 8005098:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d113      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x3a2>
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	3354      	adds	r3, #84	; 0x54
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d108      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050c0:	461a      	mov	r2, r3
 80050c2:	2101      	movs	r1, #1
 80050c4:	f004 fca8 	bl	8009a18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f009 fe5d 	bl	800ed8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	461a      	mov	r2, r3
 80050ec:	2308      	movs	r3, #8
 80050ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005106:	461a      	mov	r2, r3
 8005108:	2310      	movs	r3, #16
 800510a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	461a      	mov	r2, r3
 8005124:	2340      	movs	r3, #64	; 0x40
 8005126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d023      	beq.n	800517a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005134:	6a38      	ldr	r0, [r7, #32]
 8005136:	f003 fb89 	bl	800884c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800513a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	3338      	adds	r3, #56	; 0x38
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	78db      	ldrb	r3, [r3, #3]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d108      	bne.n	8005168 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	b2db      	uxtb	r3, r3
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f009 fea0 	bl	800eea8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	461a      	mov	r2, r3
 8005176:	2302      	movs	r3, #2
 8005178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fcdb 	bl	8005b42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	3301      	adds	r3, #1
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	f47f af2e 	bne.w	8004ffc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f004 fb73 	bl	8009890 <USB_ReadInterrupts>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b4:	d122      	bne.n	80051fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d108      	bne.n	80051e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051dc:	2100      	movs	r1, #0
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fec2 	bl	8005f68 <HAL_PCDEx_LPM_Callback>
 80051e4:	e002      	b.n	80051ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f009 fe3e 	bl	800ee68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f004 fb45 	bl	8009890 <USB_ReadInterrupts>
 8005206:	4603      	mov	r3, r0
 8005208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005210:	d112      	bne.n	8005238 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d102      	bne.n	8005228 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f009 fdfa 	bl	800ee1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005236:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f004 fb27 	bl	8009890 <USB_ReadInterrupts>
 8005242:	4603      	mov	r3, r0
 8005244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524c:	f040 80b7 	bne.w	80053be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2110      	movs	r1, #16
 800526a:	4618      	mov	r0, r3
 800526c:	f003 faee 	bl	800884c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005270:	2300      	movs	r3, #0
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005274:	e046      	b.n	8005304 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	461a      	mov	r2, r3
 8005284:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005288:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	461a      	mov	r2, r3
 80052b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	3301      	adds	r3, #1
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d3b3      	bcc.n	8005276 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005320:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	2b00      	cmp	r3, #0
 8005328:	d016      	beq.n	8005358 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533a:	f043 030b 	orr.w	r3, r3, #11
 800533e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005350:	f043 030b 	orr.w	r3, r3, #11
 8005354:	6453      	str	r3, [r2, #68]	; 0x44
 8005356:	e015      	b.n	8005384 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800536a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800536e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537e:	f043 030b 	orr.w	r3, r3, #11
 8005382:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005392:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005396:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053a8:	461a      	mov	r2, r3
 80053aa:	f004 fb35 	bl	8009a18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f004 fa64 	bl	8009890 <USB_ReadInterrupts>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d2:	d124      	bne.n	800541e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 fafa 	bl	80099d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f003 faaf 	bl	8008946 <USB_GetDevSpeed>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681c      	ldr	r4, [r3, #0]
 80053f4:	f001 fa26 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 80053f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	4620      	mov	r0, r4
 8005404:	f002 ffae 	bl	8008364 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f009 fce8 	bl	800edde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800541c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f004 fa34 	bl	8009890 <USB_ReadInterrupts>
 8005428:	4603      	mov	r3, r0
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b08      	cmp	r3, #8
 8005430:	d10a      	bne.n	8005448 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f009 fcc5 	bl	800edc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f002 0208 	and.w	r2, r2, #8
 8005446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f004 fa1f 	bl	8009890 <USB_ReadInterrupts>
 8005452:	4603      	mov	r3, r0
 8005454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005458:	2b80      	cmp	r3, #128	; 0x80
 800545a:	d122      	bne.n	80054a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005468:	2301      	movs	r3, #1
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
 800546c:	e014      	b.n	8005498 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005472:	4613      	mov	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d105      	bne.n	8005492 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	b2db      	uxtb	r3, r3
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fb27 	bl	8005ae0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	3301      	adds	r3, #1
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	429a      	cmp	r2, r3
 80054a0:	d3e5      	bcc.n	800546e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f004 f9f2 	bl	8009890 <USB_ReadInterrupts>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b6:	d13b      	bne.n	8005530 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054b8:	2301      	movs	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
 80054bc:	e02b      	b.n	8005516 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3340      	adds	r3, #64	; 0x40
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d115      	bne.n	8005510 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	da12      	bge.n	8005510 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	4613      	mov	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	333f      	adds	r3, #63	; 0x3f
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fae8 	bl	8005ae0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	3301      	adds	r3, #1
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551c:	429a      	cmp	r2, r3
 800551e:	d3ce      	bcc.n	80054be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800552e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f004 f9ab 	bl	8009890 <USB_ReadInterrupts>
 800553a:	4603      	mov	r3, r0
 800553c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005544:	d155      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005546:	2301      	movs	r3, #1
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	e045      	b.n	80055d8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d12e      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005574:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005576:	2b00      	cmp	r3, #0
 8005578:	da2b      	bge.n	80055d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005586:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800558a:	429a      	cmp	r2, r3
 800558c:	d121      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055a0:	2201      	movs	r2, #1
 80055a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ce:	6053      	str	r3, [r2, #4]
            break;
 80055d0:	e007      	b.n	80055e2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	3301      	adds	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	429a      	cmp	r2, r3
 80055e0:	d3b4      	bcc.n	800554c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80055f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f004 f94a 	bl	8009890 <USB_ReadInterrupts>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d10a      	bne.n	800561e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f009 fc5f 	bl	800eecc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800561c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f004 f934 	bl	8009890 <USB_ReadInterrupts>
 8005628:	4603      	mov	r3, r0
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b04      	cmp	r3, #4
 8005630:	d115      	bne.n	800565e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f009 fc4f 	bl	800eee8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	e000      	b.n	800565e <HAL_PCD_IRQHandler+0x938>
      return;
 800565c:	bf00      	nop
    }
  }
}
 800565e:	3734      	adds	r7, #52	; 0x34
 8005660:	46bd      	mov	sp, r7
 8005662:	bd90      	pop	{r4, r7, pc}

08005664 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_PCD_SetAddress+0x1a>
 800567a:	2302      	movs	r3, #2
 800567c:	e013      	b.n	80056a6 <HAL_PCD_SetAddress+0x42>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	4611      	mov	r1, r2
 8005696:	4618      	mov	r0, r3
 8005698:	f004 f892 	bl	80097c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	461a      	mov	r2, r3
 80056bc:	4603      	mov	r3, r0
 80056be:	70fb      	strb	r3, [r7, #3]
 80056c0:	460b      	mov	r3, r1
 80056c2:	803b      	strh	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da0f      	bge.n	80056f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	3338      	adds	r3, #56	; 0x38
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4413      	add	r3, r2
 80056e8:	3304      	adds	r3, #4
 80056ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	705a      	strb	r2, [r3, #1]
 80056f2:	e00f      	b.n	8005714 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	f003 020f 	and.w	r2, r3, #15
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	3304      	adds	r3, #4
 800570c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005720:	883a      	ldrh	r2, [r7, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	78ba      	ldrb	r2, [r7, #2]
 800572a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800573e:	78bb      	ldrb	r3, [r7, #2]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d102      	bne.n	800574a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_PCD_EP_Open+0xaa>
 8005754:	2302      	movs	r3, #2
 8005756:	e00e      	b.n	8005776 <HAL_PCD_EP_Open+0xc8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68f9      	ldr	r1, [r7, #12]
 8005766:	4618      	mov	r0, r3
 8005768:	f003 f912 	bl	8008990 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005774:	7afb      	ldrb	r3, [r7, #11]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800578a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	da0f      	bge.n	80057b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	3338      	adds	r3, #56	; 0x38
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	705a      	strb	r2, [r3, #1]
 80057b0:	e00f      	b.n	80057d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	f003 020f 	and.w	r2, r3, #15
 80057b8:	4613      	mov	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4413      	add	r3, r2
 80057c8:	3304      	adds	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_PCD_EP_Close+0x6e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e00e      	b.n	800580a <HAL_PCD_EP_Close+0x8c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f003 f950 	bl	8008aa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	460b      	mov	r3, r1
 8005820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	f003 020f 	and.w	r2, r3, #15
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	3304      	adds	r3, #4
 800583a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2200      	movs	r2, #0
 800584c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	b2da      	uxtb	r2, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d102      	bne.n	800586e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800586e:	7afb      	ldrb	r3, [r7, #11]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	6979      	ldr	r1, [r7, #20]
 8005886:	f003 fc2f 	bl	80090e8 <USB_EP0StartXfer>
 800588a:	e008      	b.n	800589e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	6979      	ldr	r1, [r7, #20]
 800589a:	f003 f9dd 	bl	8008c58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	460b      	mov	r3, r1
 80058e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e8:	7afb      	ldrb	r3, [r7, #11]
 80058ea:	f003 020f 	and.w	r2, r3, #15
 80058ee:	4613      	mov	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	3338      	adds	r3, #56	; 0x38
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	3304      	adds	r3, #4
 80058fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2200      	movs	r2, #0
 8005910:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2201      	movs	r2, #1
 8005916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005918:	7afb      	ldrb	r3, [r7, #11]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	b2da      	uxtb	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d102      	bne.n	8005932 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005932:	7afb      	ldrb	r3, [r7, #11]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	f003 fbcd 	bl	80090e8 <USB_EP0StartXfer>
 800594e:	e008      	b.n	8005962 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	6979      	ldr	r1, [r7, #20]
 800595e:	f003 f97b 	bl	8008c58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	f003 020f 	and.w	r2, r3, #15
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d901      	bls.n	800598a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e050      	b.n	8005a2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800598a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	da0f      	bge.n	80059b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	3338      	adds	r3, #56	; 0x38
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	3304      	adds	r3, #4
 80059a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	705a      	strb	r2, [r3, #1]
 80059b0:	e00d      	b.n	80059ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	3304      	adds	r3, #4
 80059c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_PCD_EP_SetStall+0x82>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e01e      	b.n	8005a2c <HAL_PCD_EP_SetStall+0xc0>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f003 fe0b 	bl	8009618 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	b2d9      	uxtb	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f003 fffb 	bl	8009a18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	f003 020f 	and.w	r2, r3, #15
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d901      	bls.n	8005a52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e042      	b.n	8005ad8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da0f      	bge.n	8005a7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 020f 	and.w	r2, r3, #15
 8005a60:	4613      	mov	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	3338      	adds	r3, #56	; 0x38
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3304      	adds	r3, #4
 8005a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	705a      	strb	r2, [r3, #1]
 8005a78:	e00f      	b.n	8005a9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	4613      	mov	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_PCD_EP_ClrStall+0x86>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e00e      	b.n	8005ad8 <HAL_PCD_EP_ClrStall+0xa4>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f003 fe13 	bl	80096f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da0c      	bge.n	8005b0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	f003 020f 	and.w	r2, r3, #15
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	3338      	adds	r3, #56	; 0x38
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	3304      	adds	r3, #4
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e00c      	b.n	8005b28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	f003 020f 	and.w	r2, r3, #15
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68f9      	ldr	r1, [r7, #12]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f003 fc32 	bl	8009398 <USB_EPStopXfer>
 8005b34:	4603      	mov	r3, r0
 8005b36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b38:	7afb      	ldrb	r3, [r7, #11]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08a      	sub	sp, #40	; 0x28
 8005b46:	af02      	add	r7, sp, #8
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	3338      	adds	r3, #56	; 0x38
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d901      	bls.n	8005b7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e06c      	b.n	8005c54 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d902      	bls.n	8005b96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3303      	adds	r3, #3
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b9e:	e02b      	b.n	8005bf8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d902      	bls.n	8005bbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	089b      	lsrs	r3, r3, #2
 8005bc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6919      	ldr	r1, [r3, #16]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	4603      	mov	r3, r0
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f003 fc86 	bl	80094ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	441a      	add	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	441a      	add	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d809      	bhi.n	8005c22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1a      	ldr	r2, [r3, #32]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d203      	bcs.n	8005c22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1be      	bne.n	8005ba0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d811      	bhi.n	8005c52 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	2201      	movs	r2, #1
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	43db      	mvns	r3, r3
 8005c48:	6939      	ldr	r1, [r7, #16]
 8005c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c4e:	4013      	ands	r3, r2
 8005c50:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3720      	adds	r7, #32
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	333c      	adds	r3, #60	; 0x3c
 8005c74:	3304      	adds	r3, #4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d17b      	bne.n	8005d8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d015      	beq.n	8005cc8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4a61      	ldr	r2, [pc, #388]	; (8005e24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	f240 80b9 	bls.w	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80b3 	beq.w	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc4:	6093      	str	r3, [r2, #8]
 8005cc6:	e0a7      	b.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	6093      	str	r3, [r2, #8]
 8005ce4:	e098      	b.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f040 8093 	bne.w	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4a4b      	ldr	r2, [pc, #300]	; (8005e24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d90f      	bls.n	8005d1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	461a      	mov	r2, r3
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	6093      	str	r3, [r2, #8]
 8005d18:	e07e      	b.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	0159      	lsls	r1, r3, #5
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	440b      	add	r3, r1
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d114      	bne.n	8005d7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d64:	461a      	mov	r2, r3
 8005d66:	2101      	movs	r1, #1
 8005d68:	f003 fe56 	bl	8009a18 <USB_EP0_OutStart>
 8005d6c:	e006      	b.n	8005d7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	441a      	add	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f008 ffe8 	bl	800ed58 <HAL_PCD_DataOutStageCallback>
 8005d88:	e046      	b.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d124      	bne.n	8005ddc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	461a      	mov	r2, r3
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	6093      	str	r3, [r2, #8]
 8005db0:	e032      	b.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2320      	movs	r3, #32
 8005dcc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f008 ffbf 	bl	800ed58 <HAL_PCD_DataOutStageCallback>
 8005dda:	e01d      	b.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d114      	bne.n	8005e0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	4613      	mov	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d108      	bne.n	8005e0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e04:	461a      	mov	r2, r3
 8005e06:	2100      	movs	r1, #0
 8005e08:	f003 fe06 	bl	8009a18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f008 ffa0 	bl	800ed58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	4f54300a 	.word	0x4f54300a
 8005e28:	4f54310a 	.word	0x4f54310a

08005e2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	333c      	adds	r3, #60	; 0x3c
 8005e44:	3304      	adds	r3, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d90e      	bls.n	8005e80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f008 ff57 	bl	800ed34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4a0a      	ldr	r2, [pc, #40]	; (8005eb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d90c      	bls.n	8005ea8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d108      	bne.n	8005ea8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	f003 fdb8 	bl	8009a18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	4f54300a 	.word	0x4f54300a

08005eb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ed6:	883b      	ldrh	r3, [r7, #0]
 8005ed8:	0419      	lsls	r1, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee4:	e028      	b.n	8005f38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	0c1b      	lsrs	r3, r3, #16
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
 8005ef8:	e00d      	b.n	8005f16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	3340      	adds	r3, #64	; 0x40
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	3301      	adds	r3, #1
 8005f14:	73fb      	strb	r3, [r7, #15]
 8005f16:	7bfa      	ldrb	r2, [r7, #15]
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d3ec      	bcc.n	8005efa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f20:	883b      	ldrh	r3, [r7, #0]
 8005f22:	0418      	lsls	r0, r3, #16
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6819      	ldr	r1, [r3, #0]
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	4302      	orrs	r2, r0
 8005f30:	3340      	adds	r3, #64	; 0x40
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	887a      	ldrh	r2, [r7, #2]
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e267      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d075      	beq.n	800608a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f9e:	4b88      	ldr	r3, [pc, #544]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005faa:	4b85      	ldr	r3, [pc, #532]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d112      	bne.n	8005fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fb6:	4b82      	ldr	r3, [pc, #520]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fc2:	d10b      	bne.n	8005fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc4:	4b7e      	ldr	r3, [pc, #504]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05b      	beq.n	8006088 <HAL_RCC_OscConfig+0x108>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d157      	bne.n	8006088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e242      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe4:	d106      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x74>
 8005fe6:	4b76      	ldr	r3, [pc, #472]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a75      	ldr	r2, [pc, #468]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e01d      	b.n	8006030 <HAL_RCC_OscConfig+0xb0>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCC_OscConfig+0x98>
 8005ffe:	4b70      	ldr	r3, [pc, #448]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6f      	ldr	r2, [pc, #444]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	4b6d      	ldr	r3, [pc, #436]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6c      	ldr	r2, [pc, #432]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e00b      	b.n	8006030 <HAL_RCC_OscConfig+0xb0>
 8006018:	4b69      	ldr	r3, [pc, #420]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a68      	ldr	r2, [pc, #416]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 800601e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4b66      	ldr	r3, [pc, #408]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a65      	ldr	r2, [pc, #404]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 800602a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d013      	beq.n	8006060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006038:	f7fd fa86 	bl	8003548 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006040:	f7fd fa82 	bl	8003548 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b64      	cmp	r3, #100	; 0x64
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e207      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006052:	4b5b      	ldr	r3, [pc, #364]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0xc0>
 800605e:	e014      	b.n	800608a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006060:	f7fd fa72 	bl	8003548 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006068:	f7fd fa6e 	bl	8003548 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b64      	cmp	r3, #100	; 0x64
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e1f3      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800607a:	4b51      	ldr	r3, [pc, #324]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0xe8>
 8006086:	e000      	b.n	800608a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d063      	beq.n	800615e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006096:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 030c 	and.w	r3, r3, #12
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060a2:	4b47      	ldr	r3, [pc, #284]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d11c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ae:	4b44      	ldr	r3, [pc, #272]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d116      	bne.n	80060e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ba:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_RCC_OscConfig+0x152>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d001      	beq.n	80060d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e1c7      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d2:	4b3b      	ldr	r3, [pc, #236]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4937      	ldr	r1, [pc, #220]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e6:	e03a      	b.n	800615e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d020      	beq.n	8006132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060f0:	4b34      	ldr	r3, [pc, #208]	; (80061c4 <HAL_RCC_OscConfig+0x244>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fd fa27 	bl	8003548 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060fe:	f7fd fa23 	bl	8003548 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e1a8      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006110:	4b2b      	ldr	r3, [pc, #172]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611c:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4925      	ldr	r1, [pc, #148]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 800612c:	4313      	orrs	r3, r2
 800612e:	600b      	str	r3, [r1, #0]
 8006130:	e015      	b.n	800615e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006132:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <HAL_RCC_OscConfig+0x244>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fd fa06 	bl	8003548 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006140:	f7fd fa02 	bl	8003548 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e187      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006152:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f0      	bne.n	8006140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d036      	beq.n	80061d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006172:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <HAL_RCC_OscConfig+0x248>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006178:	f7fd f9e6 	bl	8003548 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006180:	f7fd f9e2 	bl	8003548 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e167      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCC_OscConfig+0x240>)
 8006194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x200>
 800619e:	e01b      	b.n	80061d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a0:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <HAL_RCC_OscConfig+0x248>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a6:	f7fd f9cf 	bl	8003548 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ac:	e00e      	b.n	80061cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ae:	f7fd f9cb 	bl	8003548 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d907      	bls.n	80061cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e150      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
 80061c0:	40023800 	.word	0x40023800
 80061c4:	42470000 	.word	0x42470000
 80061c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	4b88      	ldr	r3, [pc, #544]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 80061ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1ea      	bne.n	80061ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8097 	beq.w	8006314 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ea:	4b81      	ldr	r3, [pc, #516]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	4b7d      	ldr	r3, [pc, #500]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	4a7c      	ldr	r2, [pc, #496]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006204:	6413      	str	r3, [r2, #64]	; 0x40
 8006206:	4b7a      	ldr	r3, [pc, #488]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620e:	60bb      	str	r3, [r7, #8]
 8006210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006216:	4b77      	ldr	r3, [pc, #476]	; (80063f4 <HAL_RCC_OscConfig+0x474>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d118      	bne.n	8006254 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006222:	4b74      	ldr	r3, [pc, #464]	; (80063f4 <HAL_RCC_OscConfig+0x474>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a73      	ldr	r2, [pc, #460]	; (80063f4 <HAL_RCC_OscConfig+0x474>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622e:	f7fd f98b 	bl	8003548 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006236:	f7fd f987 	bl	8003548 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e10c      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006248:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <HAL_RCC_OscConfig+0x474>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d106      	bne.n	800626a <HAL_RCC_OscConfig+0x2ea>
 800625c:	4b64      	ldr	r3, [pc, #400]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a63      	ldr	r2, [pc, #396]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
 8006268:	e01c      	b.n	80062a4 <HAL_RCC_OscConfig+0x324>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b05      	cmp	r3, #5
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0x30c>
 8006272:	4b5f      	ldr	r3, [pc, #380]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	4a5e      	ldr	r2, [pc, #376]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006278:	f043 0304 	orr.w	r3, r3, #4
 800627c:	6713      	str	r3, [r2, #112]	; 0x70
 800627e:	4b5c      	ldr	r3, [pc, #368]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	4a5b      	ldr	r2, [pc, #364]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6713      	str	r3, [r2, #112]	; 0x70
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0x324>
 800628c:	4b58      	ldr	r3, [pc, #352]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	4a57      	ldr	r2, [pc, #348]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	6713      	str	r3, [r2, #112]	; 0x70
 8006298:	4b55      	ldr	r3, [pc, #340]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	4a54      	ldr	r2, [pc, #336]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 800629e:	f023 0304 	bic.w	r3, r3, #4
 80062a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fd f94c 	bl	8003548 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b2:	e00a      	b.n	80062ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b4:	f7fd f948 	bl	8003548 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e0cb      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ca:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0ee      	beq.n	80062b4 <HAL_RCC_OscConfig+0x334>
 80062d6:	e014      	b.n	8006302 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d8:	f7fd f936 	bl	8003548 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062de:	e00a      	b.n	80062f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e0:	f7fd f932 	bl	8003548 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e0b5      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f6:	4b3e      	ldr	r3, [pc, #248]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ee      	bne.n	80062e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d105      	bne.n	8006314 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006308:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	4a38      	ldr	r2, [pc, #224]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 800630e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80a1 	beq.w	8006460 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800631e:	4b34      	ldr	r3, [pc, #208]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b08      	cmp	r3, #8
 8006328:	d05c      	beq.n	80063e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d141      	bne.n	80063b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006332:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <HAL_RCC_OscConfig+0x478>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006338:	f7fd f906 	bl	8003548 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006340:	f7fd f902 	bl	8003548 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e087      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006352:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69da      	ldr	r2, [r3, #28]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	019b      	lsls	r3, r3, #6
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	3b01      	subs	r3, #1
 8006378:	041b      	lsls	r3, r3, #16
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	491b      	ldr	r1, [pc, #108]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 8006384:	4313      	orrs	r3, r2
 8006386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006388:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <HAL_RCC_OscConfig+0x478>)
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638e:	f7fd f8db 	bl	8003548 <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006396:	f7fd f8d7 	bl	8003548 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e05c      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a8:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f0      	beq.n	8006396 <HAL_RCC_OscConfig+0x416>
 80063b4:	e054      	b.n	8006460 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <HAL_RCC_OscConfig+0x478>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063bc:	f7fd f8c4 	bl	8003548 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063c4:	f7fd f8c0 	bl	8003548 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e045      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <HAL_RCC_OscConfig+0x470>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0x444>
 80063e2:	e03d      	b.n	8006460 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d107      	bne.n	80063fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e038      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
 80063f0:	40023800 	.word	0x40023800
 80063f4:	40007000 	.word	0x40007000
 80063f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <HAL_RCC_OscConfig+0x4ec>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d028      	beq.n	800645c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006414:	429a      	cmp	r2, r3
 8006416:	d121      	bne.n	800645c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006422:	429a      	cmp	r2, r3
 8006424:	d11a      	bne.n	800645c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800642c:	4013      	ands	r3, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006434:	4293      	cmp	r3, r2
 8006436:	d111      	bne.n	800645c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	3b01      	subs	r3, #1
 8006446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d107      	bne.n	800645c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40023800 	.word	0x40023800

08006470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0cc      	b.n	800661e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006484:	4b68      	ldr	r3, [pc, #416]	; (8006628 <HAL_RCC_ClockConfig+0x1b8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d90c      	bls.n	80064ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006492:	4b65      	ldr	r3, [pc, #404]	; (8006628 <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649a:	4b63      	ldr	r3, [pc, #396]	; (8006628 <HAL_RCC_ClockConfig+0x1b8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0b8      	b.n	800661e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d020      	beq.n	80064fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064c4:	4b59      	ldr	r3, [pc, #356]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4a58      	ldr	r2, [pc, #352]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064dc:	4b53      	ldr	r3, [pc, #332]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	4a52      	ldr	r2, [pc, #328]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e8:	4b50      	ldr	r3, [pc, #320]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	494d      	ldr	r1, [pc, #308]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d044      	beq.n	8006590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d107      	bne.n	800651e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650e:	4b47      	ldr	r3, [pc, #284]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d119      	bne.n	800654e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e07f      	b.n	800661e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d003      	beq.n	800652e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800652a:	2b03      	cmp	r3, #3
 800652c:	d107      	bne.n	800653e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652e:	4b3f      	ldr	r3, [pc, #252]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e06f      	b.n	800661e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800653e:	4b3b      	ldr	r3, [pc, #236]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e067      	b.n	800661e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800654e:	4b37      	ldr	r3, [pc, #220]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f023 0203 	bic.w	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	4934      	ldr	r1, [pc, #208]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006560:	f7fc fff2 	bl	8003548 <HAL_GetTick>
 8006564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006566:	e00a      	b.n	800657e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006568:	f7fc ffee 	bl	8003548 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f241 3288 	movw	r2, #5000	; 0x1388
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e04f      	b.n	800661e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657e:	4b2b      	ldr	r3, [pc, #172]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 020c 	and.w	r2, r3, #12
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	429a      	cmp	r2, r3
 800658e:	d1eb      	bne.n	8006568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006590:	4b25      	ldr	r3, [pc, #148]	; (8006628 <HAL_RCC_ClockConfig+0x1b8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d20c      	bcs.n	80065b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659e:	4b22      	ldr	r3, [pc, #136]	; (8006628 <HAL_RCC_ClockConfig+0x1b8>)
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	4b20      	ldr	r3, [pc, #128]	; (8006628 <HAL_RCC_ClockConfig+0x1b8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d001      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e032      	b.n	800661e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c4:	4b19      	ldr	r3, [pc, #100]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4916      	ldr	r1, [pc, #88]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d009      	beq.n	80065f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	490e      	ldr	r1, [pc, #56]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065f6:	f000 f821 	bl	800663c <HAL_RCC_GetSysClockFreq>
 80065fa:	4602      	mov	r2, r0
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	091b      	lsrs	r3, r3, #4
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	490a      	ldr	r1, [pc, #40]	; (8006630 <HAL_RCC_ClockConfig+0x1c0>)
 8006608:	5ccb      	ldrb	r3, [r1, r3]
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	4a09      	ldr	r2, [pc, #36]	; (8006634 <HAL_RCC_ClockConfig+0x1c4>)
 8006610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <HAL_RCC_ClockConfig+0x1c8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fc fe40 	bl	800329c <HAL_InitTick>

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40023c00 	.word	0x40023c00
 800662c:	40023800 	.word	0x40023800
 8006630:	080103b0 	.word	0x080103b0
 8006634:	20000518 	.word	0x20000518
 8006638:	2000051c 	.word	0x2000051c

0800663c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800663c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006640:	b094      	sub	sp, #80	; 0x50
 8006642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	647b      	str	r3, [r7, #68]	; 0x44
 8006648:	2300      	movs	r3, #0
 800664a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800664c:	2300      	movs	r3, #0
 800664e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006654:	4b79      	ldr	r3, [pc, #484]	; (800683c <HAL_RCC_GetSysClockFreq+0x200>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 030c 	and.w	r3, r3, #12
 800665c:	2b08      	cmp	r3, #8
 800665e:	d00d      	beq.n	800667c <HAL_RCC_GetSysClockFreq+0x40>
 8006660:	2b08      	cmp	r3, #8
 8006662:	f200 80e1 	bhi.w	8006828 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HAL_RCC_GetSysClockFreq+0x34>
 800666a:	2b04      	cmp	r3, #4
 800666c:	d003      	beq.n	8006676 <HAL_RCC_GetSysClockFreq+0x3a>
 800666e:	e0db      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006670:	4b73      	ldr	r3, [pc, #460]	; (8006840 <HAL_RCC_GetSysClockFreq+0x204>)
 8006672:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006674:	e0db      	b.n	800682e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006676:	4b72      	ldr	r3, [pc, #456]	; (8006840 <HAL_RCC_GetSysClockFreq+0x204>)
 8006678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800667a:	e0d8      	b.n	800682e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800667c:	4b6f      	ldr	r3, [pc, #444]	; (800683c <HAL_RCC_GetSysClockFreq+0x200>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006686:	4b6d      	ldr	r3, [pc, #436]	; (800683c <HAL_RCC_GetSysClockFreq+0x200>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d063      	beq.n	800675a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006692:	4b6a      	ldr	r3, [pc, #424]	; (800683c <HAL_RCC_GetSysClockFreq+0x200>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	099b      	lsrs	r3, r3, #6
 8006698:	2200      	movs	r2, #0
 800669a:	63bb      	str	r3, [r7, #56]	; 0x38
 800669c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
 80066a6:	2300      	movs	r3, #0
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
 80066aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066ae:	4622      	mov	r2, r4
 80066b0:	462b      	mov	r3, r5
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f04f 0100 	mov.w	r1, #0
 80066ba:	0159      	lsls	r1, r3, #5
 80066bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066c0:	0150      	lsls	r0, r2, #5
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4621      	mov	r1, r4
 80066c8:	1a51      	subs	r1, r2, r1
 80066ca:	6139      	str	r1, [r7, #16]
 80066cc:	4629      	mov	r1, r5
 80066ce:	eb63 0301 	sbc.w	r3, r3, r1
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066e0:	4659      	mov	r1, fp
 80066e2:	018b      	lsls	r3, r1, #6
 80066e4:	4651      	mov	r1, sl
 80066e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066ea:	4651      	mov	r1, sl
 80066ec:	018a      	lsls	r2, r1, #6
 80066ee:	4651      	mov	r1, sl
 80066f0:	ebb2 0801 	subs.w	r8, r2, r1
 80066f4:	4659      	mov	r1, fp
 80066f6:	eb63 0901 	sbc.w	r9, r3, r1
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800670a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800670e:	4690      	mov	r8, r2
 8006710:	4699      	mov	r9, r3
 8006712:	4623      	mov	r3, r4
 8006714:	eb18 0303 	adds.w	r3, r8, r3
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	462b      	mov	r3, r5
 800671c:	eb49 0303 	adc.w	r3, r9, r3
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800672e:	4629      	mov	r1, r5
 8006730:	028b      	lsls	r3, r1, #10
 8006732:	4621      	mov	r1, r4
 8006734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006738:	4621      	mov	r1, r4
 800673a:	028a      	lsls	r2, r1, #10
 800673c:	4610      	mov	r0, r2
 800673e:	4619      	mov	r1, r3
 8006740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006742:	2200      	movs	r2, #0
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
 8006746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006748:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800674c:	f7f9 fda0 	bl	8000290 <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4613      	mov	r3, r2
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006758:	e058      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675a:	4b38      	ldr	r3, [pc, #224]	; (800683c <HAL_RCC_GetSysClockFreq+0x200>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	099b      	lsrs	r3, r3, #6
 8006760:	2200      	movs	r2, #0
 8006762:	4618      	mov	r0, r3
 8006764:	4611      	mov	r1, r2
 8006766:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800676a:	623b      	str	r3, [r7, #32]
 800676c:	2300      	movs	r3, #0
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
 8006770:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	f04f 0000 	mov.w	r0, #0
 800677c:	f04f 0100 	mov.w	r1, #0
 8006780:	0159      	lsls	r1, r3, #5
 8006782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006786:	0150      	lsls	r0, r2, #5
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4641      	mov	r1, r8
 800678e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006792:	4649      	mov	r1, r9
 8006794:	eb63 0b01 	sbc.w	fp, r3, r1
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067ac:	ebb2 040a 	subs.w	r4, r2, sl
 80067b0:	eb63 050b 	sbc.w	r5, r3, fp
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	00eb      	lsls	r3, r5, #3
 80067be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067c2:	00e2      	lsls	r2, r4, #3
 80067c4:	4614      	mov	r4, r2
 80067c6:	461d      	mov	r5, r3
 80067c8:	4643      	mov	r3, r8
 80067ca:	18e3      	adds	r3, r4, r3
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	464b      	mov	r3, r9
 80067d0:	eb45 0303 	adc.w	r3, r5, r3
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067e2:	4629      	mov	r1, r5
 80067e4:	028b      	lsls	r3, r1, #10
 80067e6:	4621      	mov	r1, r4
 80067e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067ec:	4621      	mov	r1, r4
 80067ee:	028a      	lsls	r2, r1, #10
 80067f0:	4610      	mov	r0, r2
 80067f2:	4619      	mov	r1, r3
 80067f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f6:	2200      	movs	r2, #0
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	61fa      	str	r2, [r7, #28]
 80067fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006800:	f7f9 fd46 	bl	8000290 <__aeabi_uldivmod>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4613      	mov	r3, r2
 800680a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_RCC_GetSysClockFreq+0x200>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	3301      	adds	r3, #1
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800681c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800681e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006826:	e002      	b.n	800682e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCC_GetSysClockFreq+0x204>)
 800682a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800682c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800682e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006830:	4618      	mov	r0, r3
 8006832:	3750      	adds	r7, #80	; 0x50
 8006834:	46bd      	mov	sp, r7
 8006836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800683a:	bf00      	nop
 800683c:	40023800 	.word	0x40023800
 8006840:	00f42400 	.word	0x00f42400

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000518 	.word	0x20000518

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006860:	f7ff fff0 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006864:	4602      	mov	r2, r0
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	0a9b      	lsrs	r3, r3, #10
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4903      	ldr	r1, [pc, #12]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006872:	5ccb      	ldrb	r3, [r1, r3]
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40023800 	.word	0x40023800
 8006880:	080103c0 	.word	0x080103c0

08006884 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	220f      	movs	r2, #15
 8006892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006894:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <HAL_RCC_GetClockConfig+0x5c>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0203 	and.w	r2, r3, #3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <HAL_RCC_GetClockConfig+0x5c>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <HAL_RCC_GetClockConfig+0x5c>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80068b8:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <HAL_RCC_GetClockConfig+0x5c>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	08db      	lsrs	r3, r3, #3
 80068be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068c6:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <HAL_RCC_GetClockConfig+0x60>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0207 	and.w	r2, r3, #7
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	601a      	str	r2, [r3, #0]
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40023800 	.word	0x40023800
 80068e4:	40023c00 	.word	0x40023c00

080068e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e07b      	b.n	80069f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690a:	d009      	beq.n	8006920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	61da      	str	r2, [r3, #28]
 8006912:	e005      	b.n	8006920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fc fbc2 	bl	80030c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006956:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a4:	ea42 0103 	orr.w	r1, r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	f003 0104 	and.w	r1, r3, #4
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f003 0210 	and.w	r2, r3, #16
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b088      	sub	sp, #32
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_SPI_Transmit+0x22>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e126      	b.n	8006c6a <HAL_SPI_Transmit+0x270>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a24:	f7fc fd90 	bl	8003548 <HAL_GetTick>
 8006a28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d002      	beq.n	8006a40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a3e:	e10b      	b.n	8006c58 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_Transmit+0x52>
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a50:	e102      	b.n	8006c58 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2203      	movs	r2, #3
 8006a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	88fa      	ldrh	r2, [r7, #6]
 8006a6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a98:	d10f      	bne.n	8006aba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b40      	cmp	r3, #64	; 0x40
 8006ac6:	d007      	beq.n	8006ad8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae0:	d14b      	bne.n	8006b7a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_SPI_Transmit+0xf6>
 8006aea:	8afb      	ldrh	r3, [r7, #22]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d13e      	bne.n	8006b6e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	881a      	ldrh	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	1c9a      	adds	r2, r3, #2
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b14:	e02b      	b.n	8006b6e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d112      	bne.n	8006b4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	881a      	ldrh	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b48:	e011      	b.n	8006b6e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b4a:	f7fc fcfd 	bl	8003548 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d803      	bhi.n	8006b62 <HAL_SPI_Transmit+0x168>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d102      	bne.n	8006b68 <HAL_SPI_Transmit+0x16e>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b6c:	e074      	b.n	8006c58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1ce      	bne.n	8006b16 <HAL_SPI_Transmit+0x11c>
 8006b78:	e04c      	b.n	8006c14 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_SPI_Transmit+0x18e>
 8006b82:	8afb      	ldrh	r3, [r7, #22]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d140      	bne.n	8006c0a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	7812      	ldrb	r2, [r2, #0]
 8006b94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bae:	e02c      	b.n	8006c0a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d113      	bne.n	8006be6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	7812      	ldrb	r2, [r2, #0]
 8006bca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006be4:	e011      	b.n	8006c0a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be6:	f7fc fcaf 	bl	8003548 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d803      	bhi.n	8006bfe <HAL_SPI_Transmit+0x204>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfc:	d102      	bne.n	8006c04 <HAL_SPI_Transmit+0x20a>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c08:	e026      	b.n	8006c58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1cd      	bne.n	8006bb0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fa55 	bl	80070c8 <SPI_EndRxTxTransaction>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e000      	b.n	8006c58 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c68:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b08c      	sub	sp, #48	; 0x30
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c80:	2301      	movs	r3, #1
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_SPI_TransmitReceive+0x26>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e18a      	b.n	8006fae <HAL_SPI_TransmitReceive+0x33c>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ca0:	f7fc fc52 	bl	8003548 <HAL_GetTick>
 8006ca4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006cb6:	887b      	ldrh	r3, [r7, #2]
 8006cb8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d00f      	beq.n	8006ce2 <HAL_SPI_TransmitReceive+0x70>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc8:	d107      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d103      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x68>
 8006cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d003      	beq.n	8006ce2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ce0:	e15b      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x82>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x82>
 8006cee:	887b      	ldrh	r3, [r7, #2]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d103      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006cfa:	e14e      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d003      	beq.n	8006d10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	887a      	ldrh	r2, [r7, #2]
 8006d20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	887a      	ldrh	r2, [r7, #2]
 8006d26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	887a      	ldrh	r2, [r7, #2]
 8006d32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	887a      	ldrh	r2, [r7, #2]
 8006d38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d007      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	d178      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_SPI_TransmitReceive+0x10a>
 8006d76:	8b7b      	ldrh	r3, [r7, #26]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d166      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	881a      	ldrh	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006da0:	e053      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d11b      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x176>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d016      	beq.n	8006de8 <HAL_SPI_TransmitReceive+0x176>
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d113      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	881a      	ldrh	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	1c9a      	adds	r2, r3, #2
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d119      	bne.n	8006e2a <HAL_SPI_TransmitReceive+0x1b8>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d014      	beq.n	8006e2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	b292      	uxth	r2, r2
 8006e0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	1c9a      	adds	r2, r3, #2
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e26:	2301      	movs	r3, #1
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e2a:	f7fc fb8d 	bl	8003548 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d807      	bhi.n	8006e4a <HAL_SPI_TransmitReceive+0x1d8>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e40:	d003      	beq.n	8006e4a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e48:	e0a7      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1a6      	bne.n	8006da2 <HAL_SPI_TransmitReceive+0x130>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1a1      	bne.n	8006da2 <HAL_SPI_TransmitReceive+0x130>
 8006e5e:	e07c      	b.n	8006f5a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x1fc>
 8006e68:	8b7b      	ldrh	r3, [r7, #26]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d16b      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	7812      	ldrb	r2, [r2, #0]
 8006e7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e94:	e057      	b.n	8006f46 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d11c      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x26c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d017      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x26c>
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d114      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d119      	bne.n	8006f20 <HAL_SPI_TransmitReceive+0x2ae>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d014      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f20:	f7fc fb12 	bl	8003548 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d803      	bhi.n	8006f38 <HAL_SPI_TransmitReceive+0x2c6>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d102      	bne.n	8006f3e <HAL_SPI_TransmitReceive+0x2cc>
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f44:	e029      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1a2      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x224>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d19d      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f8b2 	bl	80070c8 <SPI_EndRxTxTransaction>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d006      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006f76:	e010      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	e000      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006faa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3730      	adds	r7, #48	; 0x30
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fc8:	f7fc fabe 	bl	8003548 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fd8:	f7fc fab6 	bl	8003548 <HAL_GetTick>
 8006fdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fde:	4b39      	ldr	r3, [pc, #228]	; (80070c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	015b      	lsls	r3, r3, #5
 8006fe4:	0d1b      	lsrs	r3, r3, #20
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fee:	e054      	b.n	800709a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff6:	d050      	beq.n	800709a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ff8:	f7fc faa6 	bl	8003548 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	429a      	cmp	r2, r3
 8007006:	d902      	bls.n	800700e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d13d      	bne.n	800708a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800701c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007026:	d111      	bne.n	800704c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007030:	d004      	beq.n	800703c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703a:	d107      	bne.n	800704c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800704a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007054:	d10f      	bne.n	8007076 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007074:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e017      	b.n	80070ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	3b01      	subs	r3, #1
 8007098:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4013      	ands	r3, r2
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	bf0c      	ite	eq
 80070aa:	2301      	moveq	r3, #1
 80070ac:	2300      	movne	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d19b      	bne.n	8006ff0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000518 	.word	0x20000518

080070c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070d4:	4b1b      	ldr	r3, [pc, #108]	; (8007144 <SPI_EndRxTxTransaction+0x7c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1b      	ldr	r2, [pc, #108]	; (8007148 <SPI_EndRxTxTransaction+0x80>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	0d5b      	lsrs	r3, r3, #21
 80070e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070e4:	fb02 f303 	mul.w	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f2:	d112      	bne.n	800711a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	2180      	movs	r1, #128	; 0x80
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff ff5a 	bl	8006fb8 <SPI_WaitFlagStateUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	f043 0220 	orr.w	r2, r3, #32
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e00f      	b.n	800713a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	3b01      	subs	r3, #1
 8007124:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b80      	cmp	r3, #128	; 0x80
 8007132:	d0f2      	beq.n	800711a <SPI_EndRxTxTransaction+0x52>
 8007134:	e000      	b.n	8007138 <SPI_EndRxTxTransaction+0x70>
        break;
 8007136:	bf00      	nop
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000518 	.word	0x20000518
 8007148:	165e9f81 	.word	0x165e9f81

0800714c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e041      	b.n	80071e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fc f824 	bl	80031c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f000 fd3a 	bl	8007c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d001      	beq.n	8007204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e03c      	b.n	800727e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1e      	ldr	r2, [pc, #120]	; (800728c <HAL_TIM_Base_Start+0xa0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d018      	beq.n	8007248 <HAL_TIM_Base_Start+0x5c>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721e:	d013      	beq.n	8007248 <HAL_TIM_Base_Start+0x5c>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1a      	ldr	r2, [pc, #104]	; (8007290 <HAL_TIM_Base_Start+0xa4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00e      	beq.n	8007248 <HAL_TIM_Base_Start+0x5c>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a19      	ldr	r2, [pc, #100]	; (8007294 <HAL_TIM_Base_Start+0xa8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_TIM_Base_Start+0x5c>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a17      	ldr	r2, [pc, #92]	; (8007298 <HAL_TIM_Base_Start+0xac>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIM_Base_Start+0x5c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a16      	ldr	r2, [pc, #88]	; (800729c <HAL_TIM_Base_Start+0xb0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d111      	bne.n	800726c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b06      	cmp	r3, #6
 8007258:	d010      	beq.n	800727c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726a:	e007      	b.n	800727c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40010000 	.word	0x40010000
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40014000 	.word	0x40014000

080072a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6a1a      	ldr	r2, [r3, #32]
 80072ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10f      	bne.n	80072d8 <HAL_TIM_Base_Stop+0x38>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	f240 4344 	movw	r3, #1092	; 0x444
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d107      	bne.n	80072d8 <HAL_TIM_Base_Stop+0x38>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0201 	bic.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b01      	cmp	r3, #1
 8007302:	d001      	beq.n	8007308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e044      	b.n	8007392 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0201 	orr.w	r2, r2, #1
 800731e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d018      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x6c>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d013      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x6c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00e      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x6c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a19      	ldr	r2, [pc, #100]	; (80073a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d009      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x6c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <HAL_TIM_Base_Start_IT+0xbc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x6c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a16      	ldr	r2, [pc, #88]	; (80073b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d111      	bne.n	8007380 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b06      	cmp	r3, #6
 800736c:	d010      	beq.n	8007390 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737e:	e007      	b.n	8007390 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40000c00 	.word	0x40000c00
 80073b0:	40014000 	.word	0x40014000

080073b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e041      	b.n	800744a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f839 	bl	8007452 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f000 fc06 	bl	8007c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d109      	bne.n	800748c <HAL_TIM_PWM_Start+0x24>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b01      	cmp	r3, #1
 8007482:	bf14      	ite	ne
 8007484:	2301      	movne	r3, #1
 8007486:	2300      	moveq	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	e022      	b.n	80074d2 <HAL_TIM_PWM_Start+0x6a>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b04      	cmp	r3, #4
 8007490:	d109      	bne.n	80074a6 <HAL_TIM_PWM_Start+0x3e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	e015      	b.n	80074d2 <HAL_TIM_PWM_Start+0x6a>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d109      	bne.n	80074c0 <HAL_TIM_PWM_Start+0x58>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	bf14      	ite	ne
 80074b8:	2301      	movne	r3, #1
 80074ba:	2300      	moveq	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	e008      	b.n	80074d2 <HAL_TIM_PWM_Start+0x6a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e068      	b.n	80075ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_TIM_PWM_Start+0x82>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e8:	e013      	b.n	8007512 <HAL_TIM_PWM_Start+0xaa>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d104      	bne.n	80074fa <HAL_TIM_PWM_Start+0x92>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f8:	e00b      	b.n	8007512 <HAL_TIM_PWM_Start+0xaa>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d104      	bne.n	800750a <HAL_TIM_PWM_Start+0xa2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007508:	e003      	b.n	8007512 <HAL_TIM_PWM_Start+0xaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2201      	movs	r2, #1
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fe18 	bl	8008150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a23      	ldr	r2, [pc, #140]	; (80075b4 <HAL_TIM_PWM_Start+0x14c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d107      	bne.n	800753a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <HAL_TIM_PWM_Start+0x14c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d018      	beq.n	8007576 <HAL_TIM_PWM_Start+0x10e>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754c:	d013      	beq.n	8007576 <HAL_TIM_PWM_Start+0x10e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <HAL_TIM_PWM_Start+0x150>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00e      	beq.n	8007576 <HAL_TIM_PWM_Start+0x10e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a17      	ldr	r2, [pc, #92]	; (80075bc <HAL_TIM_PWM_Start+0x154>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_TIM_PWM_Start+0x10e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <HAL_TIM_PWM_Start+0x158>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <HAL_TIM_PWM_Start+0x10e>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a14      	ldr	r2, [pc, #80]	; (80075c4 <HAL_TIM_PWM_Start+0x15c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d111      	bne.n	800759a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b06      	cmp	r3, #6
 8007586:	d010      	beq.n	80075aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0201 	orr.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007598:	e007      	b.n	80075aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	40014000 	.word	0x40014000

080075c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fdb8 	bl	8008150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a29      	ldr	r2, [pc, #164]	; (800768c <HAL_TIM_PWM_Stop+0xc4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d117      	bne.n	800761a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6a1a      	ldr	r2, [r3, #32]
 80075f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10f      	bne.n	800761a <HAL_TIM_PWM_Stop+0x52>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	f240 4344 	movw	r3, #1092	; 0x444
 8007604:	4013      	ands	r3, r2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d107      	bne.n	800761a <HAL_TIM_PWM_Stop+0x52>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6a1a      	ldr	r2, [r3, #32]
 8007620:	f241 1311 	movw	r3, #4369	; 0x1111
 8007624:	4013      	ands	r3, r2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10f      	bne.n	800764a <HAL_TIM_PWM_Stop+0x82>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a1a      	ldr	r2, [r3, #32]
 8007630:	f240 4344 	movw	r3, #1092	; 0x444
 8007634:	4013      	ands	r3, r2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d107      	bne.n	800764a <HAL_TIM_PWM_Stop+0x82>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0201 	bic.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <HAL_TIM_PWM_Stop+0x92>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007658:	e013      	b.n	8007682 <HAL_TIM_PWM_Stop+0xba>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b04      	cmp	r3, #4
 800765e:	d104      	bne.n	800766a <HAL_TIM_PWM_Stop+0xa2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007668:	e00b      	b.n	8007682 <HAL_TIM_PWM_Stop+0xba>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d104      	bne.n	800767a <HAL_TIM_PWM_Stop+0xb2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007678:	e003      	b.n	8007682 <HAL_TIM_PWM_Stop+0xba>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40010000 	.word	0x40010000

08007690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d122      	bne.n	80076ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d11b      	bne.n	80076ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0202 	mvn.w	r2, #2
 80076bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa77 	bl	8007bc6 <HAL_TIM_IC_CaptureCallback>
 80076d8:	e005      	b.n	80076e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa69 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa7a 	bl	8007bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d122      	bne.n	8007740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d11b      	bne.n	8007740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0204 	mvn.w	r2, #4
 8007710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa4d 	bl	8007bc6 <HAL_TIM_IC_CaptureCallback>
 800772c:	e005      	b.n	800773a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa3f 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa50 	bl	8007bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b08      	cmp	r3, #8
 800774c:	d122      	bne.n	8007794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b08      	cmp	r3, #8
 800775a:	d11b      	bne.n	8007794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0208 	mvn.w	r2, #8
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa23 	bl	8007bc6 <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa15 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa26 	bl	8007bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b10      	cmp	r3, #16
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0210 	mvn.w	r2, #16
 80077b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2208      	movs	r2, #8
 80077be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9f9 	bl	8007bc6 <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9eb 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9fc 	bl	8007bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d10e      	bne.n	8007814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b01      	cmp	r3, #1
 8007802:	d107      	bne.n	8007814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0201 	mvn.w	r2, #1
 800780c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fb f8f2 	bl	80029f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781e:	2b80      	cmp	r3, #128	; 0x80
 8007820:	d10e      	bne.n	8007840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	2b80      	cmp	r3, #128	; 0x80
 800782e:	d107      	bne.n	8007840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fd26 	bl	800828c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d10e      	bne.n	800786c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b40      	cmp	r3, #64	; 0x40
 800785a:	d107      	bne.n	800786c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9c1 	bl	8007bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b20      	cmp	r3, #32
 8007878:	d10e      	bne.n	8007898 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b20      	cmp	r3, #32
 8007886:	d107      	bne.n	8007898 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0220 	mvn.w	r2, #32
 8007890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fcf0 	bl	8008278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e0ae      	b.n	8007a1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b0c      	cmp	r3, #12
 80078ca:	f200 809f 	bhi.w	8007a0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078ce:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	08007909 	.word	0x08007909
 80078d8:	08007a0d 	.word	0x08007a0d
 80078dc:	08007a0d 	.word	0x08007a0d
 80078e0:	08007a0d 	.word	0x08007a0d
 80078e4:	08007949 	.word	0x08007949
 80078e8:	08007a0d 	.word	0x08007a0d
 80078ec:	08007a0d 	.word	0x08007a0d
 80078f0:	08007a0d 	.word	0x08007a0d
 80078f4:	0800798b 	.word	0x0800798b
 80078f8:	08007a0d 	.word	0x08007a0d
 80078fc:	08007a0d 	.word	0x08007a0d
 8007900:	08007a0d 	.word	0x08007a0d
 8007904:	080079cb 	.word	0x080079cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f9f8 	bl	8007d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0208 	orr.w	r2, r2, #8
 8007922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0204 	bic.w	r2, r2, #4
 8007932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6999      	ldr	r1, [r3, #24]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	619a      	str	r2, [r3, #24]
      break;
 8007946:	e064      	b.n	8007a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fa3e 	bl	8007dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6999      	ldr	r1, [r3, #24]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	021a      	lsls	r2, r3, #8
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	619a      	str	r2, [r3, #24]
      break;
 8007988:	e043      	b.n	8007a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fa89 	bl	8007ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0208 	orr.w	r2, r2, #8
 80079a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0204 	bic.w	r2, r2, #4
 80079b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69d9      	ldr	r1, [r3, #28]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	61da      	str	r2, [r3, #28]
      break;
 80079c8:	e023      	b.n	8007a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fad3 	bl	8007f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69da      	ldr	r2, [r3, #28]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69d9      	ldr	r1, [r3, #28]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	021a      	lsls	r2, r3, #8
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	61da      	str	r2, [r3, #28]
      break;
 8007a0a:	e002      	b.n	8007a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_TIM_ConfigClockSource+0x1c>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e0b4      	b.n	8007baa <HAL_TIM_ConfigClockSource+0x186>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a78:	d03e      	beq.n	8007af8 <HAL_TIM_ConfigClockSource+0xd4>
 8007a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7e:	f200 8087 	bhi.w	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a86:	f000 8086 	beq.w	8007b96 <HAL_TIM_ConfigClockSource+0x172>
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	d87f      	bhi.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007a90:	2b70      	cmp	r3, #112	; 0x70
 8007a92:	d01a      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0xa6>
 8007a94:	2b70      	cmp	r3, #112	; 0x70
 8007a96:	d87b      	bhi.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007a98:	2b60      	cmp	r3, #96	; 0x60
 8007a9a:	d050      	beq.n	8007b3e <HAL_TIM_ConfigClockSource+0x11a>
 8007a9c:	2b60      	cmp	r3, #96	; 0x60
 8007a9e:	d877      	bhi.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007aa0:	2b50      	cmp	r3, #80	; 0x50
 8007aa2:	d03c      	beq.n	8007b1e <HAL_TIM_ConfigClockSource+0xfa>
 8007aa4:	2b50      	cmp	r3, #80	; 0x50
 8007aa6:	d873      	bhi.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007aa8:	2b40      	cmp	r3, #64	; 0x40
 8007aaa:	d058      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x13a>
 8007aac:	2b40      	cmp	r3, #64	; 0x40
 8007aae:	d86f      	bhi.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007ab0:	2b30      	cmp	r3, #48	; 0x30
 8007ab2:	d064      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0x15a>
 8007ab4:	2b30      	cmp	r3, #48	; 0x30
 8007ab6:	d86b      	bhi.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	d060      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0x15a>
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	d867      	bhi.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d05c      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0x15a>
 8007ac4:	2b10      	cmp	r3, #16
 8007ac6:	d05a      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0x15a>
 8007ac8:	e062      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6818      	ldr	r0, [r3, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6899      	ldr	r1, [r3, #8]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f000 fb19 	bl	8008110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	609a      	str	r2, [r3, #8]
      break;
 8007af6:	e04f      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6899      	ldr	r1, [r3, #8]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f000 fb02 	bl	8008110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b1a:	609a      	str	r2, [r3, #8]
      break;
 8007b1c:	e03c      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	6859      	ldr	r1, [r3, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	f000 fa76 	bl	800801c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2150      	movs	r1, #80	; 0x50
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 facf 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b3c:	e02c      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	6859      	ldr	r1, [r3, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f000 fa95 	bl	800807a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2160      	movs	r1, #96	; 0x60
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fabf 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b5c:	e01c      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6818      	ldr	r0, [r3, #0]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	6859      	ldr	r1, [r3, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f000 fa56 	bl	800801c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2140      	movs	r1, #64	; 0x40
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 faaf 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b7c:	e00c      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f000 faa6 	bl	80080da <TIM_ITRx_SetConfig>
      break;
 8007b8e:	e003      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
      break;
 8007b94:	e000      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a34      	ldr	r2, [pc, #208]	; (8007ce8 <TIM_Base_SetConfig+0xe4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00f      	beq.n	8007c3c <TIM_Base_SetConfig+0x38>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c22:	d00b      	beq.n	8007c3c <TIM_Base_SetConfig+0x38>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a31      	ldr	r2, [pc, #196]	; (8007cec <TIM_Base_SetConfig+0xe8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d007      	beq.n	8007c3c <TIM_Base_SetConfig+0x38>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a30      	ldr	r2, [pc, #192]	; (8007cf0 <TIM_Base_SetConfig+0xec>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_Base_SetConfig+0x38>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a2f      	ldr	r2, [pc, #188]	; (8007cf4 <TIM_Base_SetConfig+0xf0>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d108      	bne.n	8007c4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a25      	ldr	r2, [pc, #148]	; (8007ce8 <TIM_Base_SetConfig+0xe4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01b      	beq.n	8007c8e <TIM_Base_SetConfig+0x8a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5c:	d017      	beq.n	8007c8e <TIM_Base_SetConfig+0x8a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a22      	ldr	r2, [pc, #136]	; (8007cec <TIM_Base_SetConfig+0xe8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <TIM_Base_SetConfig+0x8a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a21      	ldr	r2, [pc, #132]	; (8007cf0 <TIM_Base_SetConfig+0xec>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00f      	beq.n	8007c8e <TIM_Base_SetConfig+0x8a>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a20      	ldr	r2, [pc, #128]	; (8007cf4 <TIM_Base_SetConfig+0xf0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00b      	beq.n	8007c8e <TIM_Base_SetConfig+0x8a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1f      	ldr	r2, [pc, #124]	; (8007cf8 <TIM_Base_SetConfig+0xf4>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d007      	beq.n	8007c8e <TIM_Base_SetConfig+0x8a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a1e      	ldr	r2, [pc, #120]	; (8007cfc <TIM_Base_SetConfig+0xf8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d003      	beq.n	8007c8e <TIM_Base_SetConfig+0x8a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <TIM_Base_SetConfig+0xfc>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d108      	bne.n	8007ca0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <TIM_Base_SetConfig+0xe4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d103      	bne.n	8007cd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	691a      	ldr	r2, [r3, #16]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	615a      	str	r2, [r3, #20]
}
 8007cda:	bf00      	nop
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40000c00 	.word	0x40000c00
 8007cf8:	40014000 	.word	0x40014000
 8007cfc:	40014400 	.word	0x40014400
 8007d00:	40014800 	.word	0x40014800

08007d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 0302 	bic.w	r3, r3, #2
 8007d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <TIM_OC1_SetConfig+0xc8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d10c      	bne.n	8007d7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f023 0308 	bic.w	r3, r3, #8
 8007d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f023 0304 	bic.w	r3, r3, #4
 8007d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <TIM_OC1_SetConfig+0xc8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d111      	bne.n	8007da6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	621a      	str	r2, [r3, #32]
}
 8007dc0:	bf00      	nop
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40010000 	.word	0x40010000

08007dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f023 0210 	bic.w	r2, r3, #16
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 0320 	bic.w	r3, r3, #32
 8007e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <TIM_OC2_SetConfig+0xd4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d10d      	bne.n	8007e4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a15      	ldr	r2, [pc, #84]	; (8007ea4 <TIM_OC2_SetConfig+0xd4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d113      	bne.n	8007e7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	621a      	str	r2, [r3, #32]
}
 8007e96:	bf00      	nop
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40010000 	.word	0x40010000

08007ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <TIM_OC3_SetConfig+0xd0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10d      	bne.n	8007f22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a14      	ldr	r2, [pc, #80]	; (8007f78 <TIM_OC3_SetConfig+0xd0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d113      	bne.n	8007f52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	621a      	str	r2, [r3, #32]
}
 8007f6c:	bf00      	nop
 8007f6e:	371c      	adds	r7, #28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	40010000 	.word	0x40010000

08007f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	031b      	lsls	r3, r3, #12
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a10      	ldr	r2, [pc, #64]	; (8008018 <TIM_OC4_SetConfig+0x9c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d109      	bne.n	8007ff0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	019b      	lsls	r3, r3, #6
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	621a      	str	r2, [r3, #32]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40010000 	.word	0x40010000

0800801c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f023 0201 	bic.w	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 030a 	bic.w	r3, r3, #10
 8008058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807a:	b480      	push	{r7}
 800807c:	b087      	sub	sp, #28
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f023 0210 	bic.w	r2, r3, #16
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	031b      	lsls	r3, r3, #12
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080da:	b480      	push	{r7}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f043 0307 	orr.w	r3, r3, #7
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800812a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	021a      	lsls	r2, r3, #8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	431a      	orrs	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	609a      	str	r2, [r3, #8]
}
 8008144:	bf00      	nop
 8008146:	371c      	adds	r7, #28
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	2201      	movs	r2, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1a      	ldr	r2, [r3, #32]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	43db      	mvns	r3, r3
 8008172:	401a      	ands	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	fa01 f303 	lsl.w	r3, r1, r3
 8008188:	431a      	orrs	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e050      	b.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d018      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008200:	d013      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a18      	ldr	r2, [pc, #96]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00e      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a16      	ldr	r2, [pc, #88]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a15      	ldr	r2, [pc, #84]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d004      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d10c      	bne.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4313      	orrs	r3, r2
 800823a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40014000 	.word	0x40014000

08008278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a0:	b084      	sub	sp, #16
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	f107 001c 	add.w	r0, r7, #28
 80082ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d122      	bne.n	80082fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d105      	bne.n	80082f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fbee 	bl	8009ad4 <USB_CoreReset>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
 80082fc:	e01a      	b.n	8008334 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 fbe2 	bl	8009ad4 <USB_CoreReset>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
 8008326:	e005      	b.n	8008334 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	2b01      	cmp	r3, #1
 8008338:	d10b      	bne.n	8008352 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f043 0206 	orr.w	r2, r3, #6
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f043 0220 	orr.w	r2, r3, #32
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800835e:	b004      	add	sp, #16
 8008360:	4770      	bx	lr
	...

08008364 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d165      	bne.n	8008444 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4a41      	ldr	r2, [pc, #260]	; (8008480 <USB_SetTurnaroundTime+0x11c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d906      	bls.n	800838e <USB_SetTurnaroundTime+0x2a>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4a40      	ldr	r2, [pc, #256]	; (8008484 <USB_SetTurnaroundTime+0x120>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d202      	bcs.n	800838e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008388:	230f      	movs	r3, #15
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	e062      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4a3c      	ldr	r2, [pc, #240]	; (8008484 <USB_SetTurnaroundTime+0x120>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d306      	bcc.n	80083a4 <USB_SetTurnaroundTime+0x40>
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4a3b      	ldr	r2, [pc, #236]	; (8008488 <USB_SetTurnaroundTime+0x124>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d202      	bcs.n	80083a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800839e:	230e      	movs	r3, #14
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	e057      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4a38      	ldr	r2, [pc, #224]	; (8008488 <USB_SetTurnaroundTime+0x124>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d306      	bcc.n	80083ba <USB_SetTurnaroundTime+0x56>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4a37      	ldr	r2, [pc, #220]	; (800848c <USB_SetTurnaroundTime+0x128>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d202      	bcs.n	80083ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083b4:	230d      	movs	r3, #13
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	e04c      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	4a33      	ldr	r2, [pc, #204]	; (800848c <USB_SetTurnaroundTime+0x128>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d306      	bcc.n	80083d0 <USB_SetTurnaroundTime+0x6c>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4a32      	ldr	r2, [pc, #200]	; (8008490 <USB_SetTurnaroundTime+0x12c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d802      	bhi.n	80083d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083ca:	230c      	movs	r3, #12
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	e041      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4a2f      	ldr	r2, [pc, #188]	; (8008490 <USB_SetTurnaroundTime+0x12c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d906      	bls.n	80083e6 <USB_SetTurnaroundTime+0x82>
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	4a2e      	ldr	r2, [pc, #184]	; (8008494 <USB_SetTurnaroundTime+0x130>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d802      	bhi.n	80083e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083e0:	230b      	movs	r3, #11
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	e036      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	4a2a      	ldr	r2, [pc, #168]	; (8008494 <USB_SetTurnaroundTime+0x130>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d906      	bls.n	80083fc <USB_SetTurnaroundTime+0x98>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4a29      	ldr	r2, [pc, #164]	; (8008498 <USB_SetTurnaroundTime+0x134>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d802      	bhi.n	80083fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083f6:	230a      	movs	r3, #10
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e02b      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4a26      	ldr	r2, [pc, #152]	; (8008498 <USB_SetTurnaroundTime+0x134>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d906      	bls.n	8008412 <USB_SetTurnaroundTime+0xae>
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4a25      	ldr	r2, [pc, #148]	; (800849c <USB_SetTurnaroundTime+0x138>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d202      	bcs.n	8008412 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800840c:	2309      	movs	r3, #9
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	e020      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	4a21      	ldr	r2, [pc, #132]	; (800849c <USB_SetTurnaroundTime+0x138>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d306      	bcc.n	8008428 <USB_SetTurnaroundTime+0xc4>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	4a20      	ldr	r2, [pc, #128]	; (80084a0 <USB_SetTurnaroundTime+0x13c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d802      	bhi.n	8008428 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008422:	2308      	movs	r3, #8
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	e015      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4a1d      	ldr	r2, [pc, #116]	; (80084a0 <USB_SetTurnaroundTime+0x13c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d906      	bls.n	800843e <USB_SetTurnaroundTime+0xda>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4a1c      	ldr	r2, [pc, #112]	; (80084a4 <USB_SetTurnaroundTime+0x140>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d202      	bcs.n	800843e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008438:	2307      	movs	r3, #7
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	e00a      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800843e:	2306      	movs	r3, #6
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	e007      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d102      	bne.n	8008450 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800844a:	2309      	movs	r3, #9
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e001      	b.n	8008454 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008450:	2309      	movs	r3, #9
 8008452:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	029b      	lsls	r3, r3, #10
 8008468:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800846c:	431a      	orrs	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	00d8acbf 	.word	0x00d8acbf
 8008484:	00e4e1c0 	.word	0x00e4e1c0
 8008488:	00f42400 	.word	0x00f42400
 800848c:	01067380 	.word	0x01067380
 8008490:	011a499f 	.word	0x011a499f
 8008494:	01312cff 	.word	0x01312cff
 8008498:	014ca43f 	.word	0x014ca43f
 800849c:	016e3600 	.word	0x016e3600
 80084a0:	01a6ab1f 	.word	0x01a6ab1f
 80084a4:	01e84800 	.word	0x01e84800

080084a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f043 0201 	orr.w	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f023 0201 	bic.w	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d115      	bne.n	800853a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800851a:	2001      	movs	r0, #1
 800851c:	f7fb f820 	bl	8003560 <HAL_Delay>
      ms++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3301      	adds	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f001 fa45 	bl	80099b6 <USB_GetMode>
 800852c:	4603      	mov	r3, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	d01e      	beq.n	8008570 <USB_SetCurrentMode+0x84>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b31      	cmp	r3, #49	; 0x31
 8008536:	d9f0      	bls.n	800851a <USB_SetCurrentMode+0x2e>
 8008538:	e01a      	b.n	8008570 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d115      	bne.n	800856c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800854c:	2001      	movs	r0, #1
 800854e:	f7fb f807 	bl	8003560 <HAL_Delay>
      ms++;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 fa2c 	bl	80099b6 <USB_GetMode>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <USB_SetCurrentMode+0x84>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b31      	cmp	r3, #49	; 0x31
 8008568:	d9f0      	bls.n	800854c <USB_SetCurrentMode+0x60>
 800856a:	e001      	b.n	8008570 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e005      	b.n	800857c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b32      	cmp	r3, #50	; 0x32
 8008574:	d101      	bne.n	800857a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008584:	b084      	sub	sp, #16
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800859e:	2300      	movs	r3, #0
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	e009      	b.n	80085b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3340      	adds	r3, #64	; 0x40
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	2200      	movs	r2, #0
 80085b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3301      	adds	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	2b0e      	cmp	r3, #14
 80085bc:	d9f2      	bls.n	80085a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d11c      	bne.n	80085fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d2:	f043 0302 	orr.w	r3, r3, #2
 80085d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
 80085fc:	e00b      	b.n	8008616 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800861c:	461a      	mov	r2, r3
 800861e:	2300      	movs	r3, #0
 8008620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008628:	4619      	mov	r1, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008630:	461a      	mov	r2, r3
 8008632:	680b      	ldr	r3, [r1, #0]
 8008634:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	2b01      	cmp	r3, #1
 800863a:	d10c      	bne.n	8008656 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008642:	2100      	movs	r1, #0
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f965 	bl	8008914 <USB_SetDevSpeed>
 800864a:	e008      	b.n	800865e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800864c:	2101      	movs	r1, #1
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f960 	bl	8008914 <USB_SetDevSpeed>
 8008654:	e003      	b.n	800865e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008656:	2103      	movs	r1, #3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f95b 	bl	8008914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800865e:	2110      	movs	r1, #16
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f8f3 	bl	800884c <USB_FlushTxFifo>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f91f 	bl	80088b4 <USB_FlushRxFifo>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	461a      	mov	r2, r3
 8008688:	2300      	movs	r3, #0
 800868a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008692:	461a      	mov	r2, r3
 8008694:	2300      	movs	r3, #0
 8008696:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869e:	461a      	mov	r2, r3
 80086a0:	2300      	movs	r3, #0
 80086a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086a4:	2300      	movs	r3, #0
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	e043      	b.n	8008732 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086c0:	d118      	bne.n	80086f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d4:	461a      	mov	r2, r3
 80086d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	e013      	b.n	8008706 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ea:	461a      	mov	r2, r3
 80086ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	e008      	b.n	8008706 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	461a      	mov	r2, r3
 8008702:	2300      	movs	r3, #0
 8008704:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008712:	461a      	mov	r2, r3
 8008714:	2300      	movs	r3, #0
 8008716:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008724:	461a      	mov	r2, r3
 8008726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800872a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	3301      	adds	r3, #1
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	429a      	cmp	r2, r3
 8008738:	d3b7      	bcc.n	80086aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800873a:	2300      	movs	r3, #0
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	e043      	b.n	80087c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008756:	d118      	bne.n	800878a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876a:	461a      	mov	r2, r3
 800876c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	e013      	b.n	800879c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008780:	461a      	mov	r2, r3
 8008782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e008      	b.n	800879c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008796:	461a      	mov	r2, r3
 8008798:	2300      	movs	r3, #0
 800879a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	461a      	mov	r2, r3
 80087aa:	2300      	movs	r3, #0
 80087ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ba:	461a      	mov	r2, r3
 80087bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	3301      	adds	r3, #1
 80087c6:	613b      	str	r3, [r7, #16]
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d3b7      	bcc.n	8008740 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d105      	bne.n	8008804 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f043 0210 	orr.w	r2, r3, #16
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <USB_DevInit+0x2c4>)
 800880a:	4313      	orrs	r3, r2
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	f043 0208 	orr.w	r2, r3, #8
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008824:	2b01      	cmp	r3, #1
 8008826:	d107      	bne.n	8008838 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008830:	f043 0304 	orr.w	r3, r3, #4
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008844:	b004      	add	sp, #16
 8008846:	4770      	bx	lr
 8008848:	803c3800 	.word	0x803c3800

0800884c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <USB_FlushTxFifo+0x64>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d901      	bls.n	800886c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e01b      	b.n	80088a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	daf2      	bge.n	800885a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	019b      	lsls	r3, r3, #6
 800887c:	f043 0220 	orr.w	r2, r3, #32
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4a08      	ldr	r2, [pc, #32]	; (80088b0 <USB_FlushTxFifo+0x64>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e006      	b.n	80088a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d0f0      	beq.n	8008884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	00030d40 	.word	0x00030d40

080088b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3301      	adds	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4a11      	ldr	r2, [pc, #68]	; (8008910 <USB_FlushRxFifo+0x5c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d901      	bls.n	80088d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e018      	b.n	8008904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	daf2      	bge.n	80088c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2210      	movs	r2, #16
 80088e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4a08      	ldr	r2, [pc, #32]	; (8008910 <USB_FlushRxFifo+0x5c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d901      	bls.n	80088f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e006      	b.n	8008904 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d0f0      	beq.n	80088e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	00030d40 	.word	0x00030d40

08008914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008934:	4313      	orrs	r3, r2
 8008936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f003 0306 	and.w	r3, r3, #6
 800895e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d102      	bne.n	800896c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
 800896a:	e00a      	b.n	8008982 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d002      	beq.n	8008978 <USB_GetDevSpeed+0x32>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b06      	cmp	r3, #6
 8008976:	d102      	bne.n	800897e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008978:	2302      	movs	r3, #2
 800897a:	75fb      	strb	r3, [r7, #23]
 800897c:	e001      	b.n	8008982 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800897e:	230f      	movs	r3, #15
 8008980:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
}
 8008984:	4618      	mov	r0, r3
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d13a      	bne.n	8008a22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b2:	69da      	ldr	r2, [r3, #28]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	f003 030f 	and.w	r3, r3, #15
 80089bc:	2101      	movs	r1, #1
 80089be:	fa01 f303 	lsl.w	r3, r1, r3
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	68f9      	ldr	r1, [r7, #12]
 80089c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089ca:	4313      	orrs	r3, r2
 80089cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d155      	bne.n	8008a90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	791b      	ldrb	r3, [r3, #4]
 80089fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	059b      	lsls	r3, r3, #22
 8008a06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	e036      	b.n	8008a90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a28:	69da      	ldr	r2, [r3, #28]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	2101      	movs	r1, #1
 8008a34:	fa01 f303 	lsl.w	r3, r1, r3
 8008a38:	041b      	lsls	r3, r3, #16
 8008a3a:	68f9      	ldr	r1, [r7, #12]
 8008a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a40:	4313      	orrs	r3, r2
 8008a42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d11a      	bne.n	8008a90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	791b      	ldrb	r3, [r3, #4]
 8008a74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a76:	430b      	orrs	r3, r1
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	0151      	lsls	r1, r2, #5
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	440a      	add	r2, r1
 8008a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
	...

08008aa0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d161      	bne.n	8008b80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ad2:	d11f      	bne.n	8008b14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008af2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	2101      	movs	r1, #1
 8008b26:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b34:	4013      	ands	r3, r2
 8008b36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	2101      	movs	r1, #1
 8008b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	43db      	mvns	r3, r3
 8008b52:	68f9      	ldr	r1, [r7, #12]
 8008b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b58:	4013      	ands	r3, r2
 8008b5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	0159      	lsls	r1, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	440b      	add	r3, r1
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	4619      	mov	r1, r3
 8008b78:	4b35      	ldr	r3, [pc, #212]	; (8008c50 <USB_DeactivateEndpoint+0x1b0>)
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	600b      	str	r3, [r1, #0]
 8008b7e:	e060      	b.n	8008c42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b96:	d11f      	bne.n	8008bd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	0151      	lsls	r1, r2, #5
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	440a      	add	r2, r1
 8008bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	2101      	movs	r1, #1
 8008bea:	fa01 f303 	lsl.w	r3, r1, r3
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c12:	041b      	lsls	r3, r3, #16
 8008c14:	43db      	mvns	r3, r3
 8008c16:	68f9      	ldr	r1, [r7, #12]
 8008c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	0159      	lsls	r1, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	440b      	add	r3, r1
 8008c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <USB_DeactivateEndpoint+0x1b4>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	ec337800 	.word	0xec337800
 8008c54:	eff37800 	.word	0xeff37800

08008c58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08a      	sub	sp, #40	; 0x28
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	f040 815c 	bne.w	8008f32 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d132      	bne.n	8008ce8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ca0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	0151      	lsls	r1, r2, #5
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	440a      	add	r2, r1
 8008cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce0:	0cdb      	lsrs	r3, r3, #19
 8008ce2:	04db      	lsls	r3, r3, #19
 8008ce4:	6113      	str	r3, [r2, #16]
 8008ce6:	e074      	b.n	8008dd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	0151      	lsls	r1, r2, #5
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	440a      	add	r2, r1
 8008cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d02:	0cdb      	lsrs	r3, r3, #19
 8008d04:	04db      	lsls	r3, r3, #19
 8008d06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	0151      	lsls	r1, r2, #5
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	440a      	add	r2, r1
 8008d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6999      	ldr	r1, [r3, #24]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	440b      	add	r3, r1
 8008d44:	1e59      	subs	r1, r3, #1
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d50:	4b9d      	ldr	r3, [pc, #628]	; (8008fc8 <USB_EPStartXfer+0x370>)
 8008d52:	400b      	ands	r3, r1
 8008d54:	69b9      	ldr	r1, [r7, #24]
 8008d56:	0148      	lsls	r0, r1, #5
 8008d58:	69f9      	ldr	r1, [r7, #28]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d60:	4313      	orrs	r3, r2
 8008d62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d7a:	69b9      	ldr	r1, [r7, #24]
 8008d7c:	0148      	lsls	r0, r1, #5
 8008d7e:	69f9      	ldr	r1, [r7, #28]
 8008d80:	4401      	add	r1, r0
 8008d82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d86:	4313      	orrs	r3, r2
 8008d88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	791b      	ldrb	r3, [r3, #4]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d11f      	bne.n	8008dd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	0151      	lsls	r1, r2, #5
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	440a      	add	r2, r1
 8008da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008db0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	0151      	lsls	r1, r2, #5
 8008dc4:	69fa      	ldr	r2, [r7, #28]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d14b      	bne.n	8008e70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d009      	beq.n	8008df4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dec:	461a      	mov	r2, r3
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	791b      	ldrb	r3, [r3, #4]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d128      	bne.n	8008e4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d110      	bne.n	8008e2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	0151      	lsls	r1, r2, #5
 8008e1e:	69fa      	ldr	r2, [r7, #28]
 8008e20:	440a      	add	r2, r1
 8008e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	e00f      	b.n	8008e4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	0151      	lsls	r1, r2, #5
 8008e60:	69fa      	ldr	r2, [r7, #28]
 8008e62:	440a      	add	r2, r1
 8008e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	e133      	b.n	80090d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	0151      	lsls	r1, r2, #5
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	440a      	add	r2, r1
 8008e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	791b      	ldrb	r3, [r3, #4]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d015      	beq.n	8008ec4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 811b 	beq.w	80090d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb8:	69f9      	ldr	r1, [r7, #28]
 8008eba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	634b      	str	r3, [r1, #52]	; 0x34
 8008ec2:	e109      	b.n	80090d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d110      	bne.n	8008ef6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	e00f      	b.n	8008f16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6919      	ldr	r1, [r3, #16]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	b298      	uxth	r0, r3
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	4603      	mov	r3, r0
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fade 	bl	80094ec <USB_WritePacket>
 8008f30:	e0d2      	b.n	80090d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	69fa      	ldr	r2, [r7, #28]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4c:	0cdb      	lsrs	r3, r3, #19
 8008f4e:	04db      	lsls	r3, r3, #19
 8008f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	69fa      	ldr	r2, [r7, #28]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d126      	bne.n	8008fcc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f94:	69b9      	ldr	r1, [r7, #24]
 8008f96:	0148      	lsls	r0, r1, #5
 8008f98:	69f9      	ldr	r1, [r7, #28]
 8008f9a:	4401      	add	r1, r0
 8008f9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fc2:	6113      	str	r3, [r2, #16]
 8008fc4:	e03a      	b.n	800903c <USB_EPStartXfer+0x3e4>
 8008fc6:	bf00      	nop
 8008fc8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	699a      	ldr	r2, [r3, #24]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	1e5a      	subs	r2, r3, #1
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	8afa      	ldrh	r2, [r7, #22]
 8008fe8:	fb03 f202 	mul.w	r2, r3, r2
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffc:	691a      	ldr	r2, [r3, #16]
 8008ffe:	8afb      	ldrh	r3, [r7, #22]
 8009000:	04d9      	lsls	r1, r3, #19
 8009002:	4b38      	ldr	r3, [pc, #224]	; (80090e4 <USB_EPStartXfer+0x48c>)
 8009004:	400b      	ands	r3, r1
 8009006:	69b9      	ldr	r1, [r7, #24]
 8009008:	0148      	lsls	r0, r1, #5
 800900a:	69f9      	ldr	r1, [r7, #28]
 800900c:	4401      	add	r1, r0
 800900e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009012:	4313      	orrs	r3, r2
 8009014:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009022:	691a      	ldr	r2, [r3, #16]
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800902c:	69b9      	ldr	r1, [r7, #24]
 800902e:	0148      	lsls	r0, r1, #5
 8009030:	69f9      	ldr	r1, [r7, #28]
 8009032:	4401      	add	r1, r0
 8009034:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009038:	4313      	orrs	r3, r2
 800903a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d10d      	bne.n	800905e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	6919      	ldr	r1, [r3, #16]
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	460a      	mov	r2, r1
 800905c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	791b      	ldrb	r3, [r3, #4]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d128      	bne.n	80090b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009072:	2b00      	cmp	r3, #0
 8009074:	d110      	bne.n	8009098 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	69fa      	ldr	r2, [r7, #28]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009090:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	e00f      	b.n	80090b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	1ff80000 	.word	0x1ff80000

080090e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	785b      	ldrb	r3, [r3, #1]
 8009104:	2b01      	cmp	r3, #1
 8009106:	f040 80ce 	bne.w	80092a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d132      	bne.n	8009178 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	0151      	lsls	r1, r2, #5
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	440a      	add	r2, r1
 8009128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009130:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	0151      	lsls	r1, r2, #5
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	440a      	add	r2, r1
 800914c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	0151      	lsls	r1, r2, #5
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	440a      	add	r2, r1
 800916c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009170:	0cdb      	lsrs	r3, r3, #19
 8009172:	04db      	lsls	r3, r3, #19
 8009174:	6113      	str	r3, [r2, #16]
 8009176:	e04e      	b.n	8009216 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009192:	0cdb      	lsrs	r3, r3, #19
 8009194:	04db      	lsls	r3, r3, #19
 8009196:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d903      	bls.n	80091d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009206:	6939      	ldr	r1, [r7, #16]
 8009208:	0148      	lsls	r0, r1, #5
 800920a:	6979      	ldr	r1, [r7, #20]
 800920c:	4401      	add	r1, r0
 800920e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009212:	4313      	orrs	r3, r2
 8009214:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d11e      	bne.n	800925a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009230:	461a      	mov	r2, r3
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	e097      	b.n	800938a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	0151      	lsls	r1, r2, #5
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	440a      	add	r2, r1
 8009270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009278:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	f000 8083 	beq.w	800938a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	f003 030f 	and.w	r3, r3, #15
 8009294:	2101      	movs	r1, #1
 8009296:	fa01 f303 	lsl.w	r3, r1, r3
 800929a:	6979      	ldr	r1, [r7, #20]
 800929c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092a0:	4313      	orrs	r3, r2
 80092a2:	634b      	str	r3, [r1, #52]	; 0x34
 80092a4:	e071      	b.n	800938a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	0151      	lsls	r1, r2, #5
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	440a      	add	r2, r1
 80092bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c0:	0cdb      	lsrs	r3, r3, #19
 80092c2:	04db      	lsls	r3, r3, #19
 80092c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	68da      	ldr	r2, [r3, #12]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932e:	691a      	ldr	r2, [r3, #16]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009338:	6939      	ldr	r1, [r7, #16]
 800933a:	0148      	lsls	r0, r1, #5
 800933c:	6979      	ldr	r1, [r7, #20]
 800933e:	4401      	add	r1, r0
 8009340:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009344:	4313      	orrs	r3, r2
 8009346:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d10d      	bne.n	800936a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6919      	ldr	r1, [r3, #16]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009366:	460a      	mov	r2, r1
 8009368:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009388:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	371c      	adds	r7, #28
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d14a      	bne.n	800944c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093ce:	f040 8086 	bne.w	80094de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	7812      	ldrb	r2, [r2, #0]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009418:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3301      	adds	r3, #1
 800941e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f242 7210 	movw	r2, #10000	; 0x2710
 8009426:	4293      	cmp	r3, r2
 8009428:	d902      	bls.n	8009430 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	75fb      	strb	r3, [r7, #23]
          break;
 800942e:	e056      	b.n	80094de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009448:	d0e7      	beq.n	800941a <USB_EPStopXfer+0x82>
 800944a:	e048      	b.n	80094de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009464:	d13b      	bne.n	80094de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009484:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009488:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	0151      	lsls	r1, r2, #5
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	440a      	add	r2, r1
 80094a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d902      	bls.n	80094c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	75fb      	strb	r3, [r7, #23]
          break;
 80094c2:	e00c      	b.n	80094de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094dc:	d0e7      	beq.n	80094ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094de:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	371c      	adds	r7, #28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b089      	sub	sp, #36	; 0x24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4611      	mov	r1, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	460b      	mov	r3, r1
 80094fc:	71fb      	strb	r3, [r7, #7]
 80094fe:	4613      	mov	r3, r2
 8009500:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800950a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d123      	bne.n	800955a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009512:	88bb      	ldrh	r3, [r7, #4]
 8009514:	3303      	adds	r3, #3
 8009516:	089b      	lsrs	r3, r3, #2
 8009518:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800951a:	2300      	movs	r3, #0
 800951c:	61bb      	str	r3, [r7, #24]
 800951e:	e018      	b.n	8009552 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	031a      	lsls	r2, r3, #12
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	4413      	add	r3, r2
 8009528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952c:	461a      	mov	r2, r3
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	3301      	adds	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	3301      	adds	r3, #1
 800953e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	3301      	adds	r3, #1
 8009544:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	3301      	adds	r3, #1
 800954a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	3301      	adds	r3, #1
 8009550:	61bb      	str	r3, [r7, #24]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	429a      	cmp	r2, r3
 8009558:	d3e2      	bcc.n	8009520 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3724      	adds	r7, #36	; 0x24
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009568:	b480      	push	{r7}
 800956a:	b08b      	sub	sp, #44	; 0x2c
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	089b      	lsrs	r3, r3, #2
 8009582:	b29b      	uxth	r3, r3
 8009584:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	f003 0303 	and.w	r3, r3, #3
 800958c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800958e:	2300      	movs	r3, #0
 8009590:	623b      	str	r3, [r7, #32]
 8009592:	e014      	b.n	80095be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	601a      	str	r2, [r3, #0]
    pDest++;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	3301      	adds	r3, #1
 80095a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	3301      	adds	r3, #1
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	3301      	adds	r3, #1
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	3301      	adds	r3, #1
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	3301      	adds	r3, #1
 80095bc:	623b      	str	r3, [r7, #32]
 80095be:	6a3a      	ldr	r2, [r7, #32]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d3e6      	bcc.n	8009594 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095c6:	8bfb      	ldrh	r3, [r7, #30]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01e      	beq.n	800960a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d6:	461a      	mov	r2, r3
 80095d8:	f107 0310 	add.w	r3, r7, #16
 80095dc:	6812      	ldr	r2, [r2, #0]
 80095de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	fa22 f303 	lsr.w	r3, r2, r3
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	701a      	strb	r2, [r3, #0]
      i++;
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	3301      	adds	r3, #1
 80095f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	3301      	adds	r3, #1
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80095fe:	8bfb      	ldrh	r3, [r7, #30]
 8009600:	3b01      	subs	r3, #1
 8009602:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009604:	8bfb      	ldrh	r3, [r7, #30]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1ea      	bne.n	80095e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800960c:	4618      	mov	r0, r3
 800960e:	372c      	adds	r7, #44	; 0x2c
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d12c      	bne.n	800968e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	db12      	blt.n	800966c <USB_EPSetStall+0x54>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00f      	beq.n	800966c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	440a      	add	r2, r1
 8009662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009666:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800966a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	e02b      	b.n	80096e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	db12      	blt.n	80096c6 <USB_EPSetStall+0xae>
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00f      	beq.n	80096c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	0151      	lsls	r1, r2, #5
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	440a      	add	r2, r1
 80096bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	0151      	lsls	r1, r2, #5
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	440a      	add	r2, r1
 80096dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	785b      	ldrb	r3, [r3, #1]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d128      	bne.n	8009762 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800972a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800972e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	791b      	ldrb	r3, [r3, #4]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d003      	beq.n	8009740 <USB_EPClearStall+0x4c>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	791b      	ldrb	r3, [r3, #4]
 800973c:	2b02      	cmp	r3, #2
 800973e:	d138      	bne.n	80097b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	0151      	lsls	r1, r2, #5
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	440a      	add	r2, r1
 8009756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800975a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	e027      	b.n	80097b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	0151      	lsls	r1, r2, #5
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	440a      	add	r2, r1
 8009778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800977c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009780:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	791b      	ldrb	r3, [r3, #4]
 8009786:	2b03      	cmp	r3, #3
 8009788:	d003      	beq.n	8009792 <USB_EPClearStall+0x9e>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	791b      	ldrb	r3, [r3, #4]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d10f      	bne.n	80097b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80097e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80097f4:	68f9      	ldr	r1, [r7, #12]
 80097f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097fa:	4313      	orrs	r3, r2
 80097fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009826:	f023 0303 	bic.w	r3, r3, #3
 800982a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800983a:	f023 0302 	bic.w	r3, r3, #2
 800983e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009868:	f023 0303 	bic.w	r3, r3, #3
 800986c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4013      	ands	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098a8:	68fb      	ldr	r3, [r7, #12]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	4013      	ands	r3, r2
 80098d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	0c1b      	lsrs	r3, r3, #16
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b085      	sub	sp, #20
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	4013      	ands	r3, r2
 800990c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	b29b      	uxth	r3, r3
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800991e:	b480      	push	{r7}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4413      	add	r3, r2
 8009936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	4013      	ands	r3, r2
 800994a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800994c:	68bb      	ldr	r3, [r7, #8]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800995a:	b480      	push	{r7}
 800995c:	b087      	sub	sp, #28
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	f003 030f 	and.w	r3, r3, #15
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	fa22 f303 	lsr.w	r3, r2, r3
 800998a:	01db      	lsls	r3, r3, #7
 800998c:	b2db      	uxtb	r3, r3
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	4013      	ands	r3, r2
 80099a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099a8:	68bb      	ldr	r3, [r7, #8]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f003 0301 	and.w	r3, r3, #1
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80099f0:	f023 0307 	bic.w	r3, r3, #7
 80099f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	460b      	mov	r3, r1
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	333c      	adds	r3, #60	; 0x3c
 8009a2e:	3304      	adds	r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	4a26      	ldr	r2, [pc, #152]	; (8009ad0 <USB_EP0_OutStart+0xb8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d90a      	bls.n	8009a52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a4c:	d101      	bne.n	8009a52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e037      	b.n	8009ac2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a80:	f043 0318 	orr.w	r3, r3, #24
 8009a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009a98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10f      	bne.n	8009ac0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009abe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	371c      	adds	r7, #28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	4f54300a 	.word	0x4f54300a

08009ad4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4a13      	ldr	r2, [pc, #76]	; (8009b38 <USB_CoreReset+0x64>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d901      	bls.n	8009af2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e01b      	b.n	8009b2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	daf2      	bge.n	8009ae0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f043 0201 	orr.w	r2, r3, #1
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4a09      	ldr	r2, [pc, #36]	; (8009b38 <USB_CoreReset+0x64>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d901      	bls.n	8009b1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e006      	b.n	8009b2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d0f0      	beq.n	8009b0a <USB_CoreReset+0x36>

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	00030d40 	.word	0x00030d40

08009b3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b4c:	f005 fb64 	bl	800f218 <USBD_static_malloc>
 8009b50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d109      	bne.n	8009b6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	32b0      	adds	r2, #176	; 0xb0
 8009b62:	2100      	movs	r1, #0
 8009b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e0d4      	b.n	8009d16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009b70:	2100      	movs	r1, #0
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f005 fbdc 	bl	800f330 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	32b0      	adds	r2, #176	; 0xb0
 8009b82:	68f9      	ldr	r1, [r7, #12]
 8009b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	32b0      	adds	r2, #176	; 0xb0
 8009b92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	7c1b      	ldrb	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d138      	bne.n	8009c16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ba4:	4b5e      	ldr	r3, [pc, #376]	; (8009d20 <USBD_CDC_Init+0x1e4>)
 8009ba6:	7819      	ldrb	r1, [r3, #0]
 8009ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bac:	2202      	movs	r2, #2
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f005 fa0f 	bl	800efd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bb4:	4b5a      	ldr	r3, [pc, #360]	; (8009d20 <USBD_CDC_Init+0x1e4>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 020f 	and.w	r2, r3, #15
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	440b      	add	r3, r1
 8009bc8:	3324      	adds	r3, #36	; 0x24
 8009bca:	2201      	movs	r2, #1
 8009bcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bce:	4b55      	ldr	r3, [pc, #340]	; (8009d24 <USBD_CDC_Init+0x1e8>)
 8009bd0:	7819      	ldrb	r1, [r3, #0]
 8009bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f005 f9fa 	bl	800efd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bde:	4b51      	ldr	r3, [pc, #324]	; (8009d24 <USBD_CDC_Init+0x1e8>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	f003 020f 	and.w	r2, r3, #15
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bfa:	4b4b      	ldr	r3, [pc, #300]	; (8009d28 <USBD_CDC_Init+0x1ec>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	f003 020f 	and.w	r2, r3, #15
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3326      	adds	r3, #38	; 0x26
 8009c10:	2210      	movs	r2, #16
 8009c12:	801a      	strh	r2, [r3, #0]
 8009c14:	e035      	b.n	8009c82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c16:	4b42      	ldr	r3, [pc, #264]	; (8009d20 <USBD_CDC_Init+0x1e4>)
 8009c18:	7819      	ldrb	r1, [r3, #0]
 8009c1a:	2340      	movs	r3, #64	; 0x40
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f005 f9d7 	bl	800efd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c24:	4b3e      	ldr	r3, [pc, #248]	; (8009d20 <USBD_CDC_Init+0x1e4>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f003 020f 	and.w	r2, r3, #15
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	3324      	adds	r3, #36	; 0x24
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c3e:	4b39      	ldr	r3, [pc, #228]	; (8009d24 <USBD_CDC_Init+0x1e8>)
 8009c40:	7819      	ldrb	r1, [r3, #0]
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	2202      	movs	r2, #2
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f005 f9c3 	bl	800efd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c4c:	4b35      	ldr	r3, [pc, #212]	; (8009d24 <USBD_CDC_Init+0x1e8>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c64:	2201      	movs	r2, #1
 8009c66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c68:	4b2f      	ldr	r3, [pc, #188]	; (8009d28 <USBD_CDC_Init+0x1ec>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3326      	adds	r3, #38	; 0x26
 8009c7e:	2210      	movs	r2, #16
 8009c80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c82:	4b29      	ldr	r3, [pc, #164]	; (8009d28 <USBD_CDC_Init+0x1ec>)
 8009c84:	7819      	ldrb	r1, [r3, #0]
 8009c86:	2308      	movs	r3, #8
 8009c88:	2203      	movs	r2, #3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f005 f9a1 	bl	800efd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c90:	4b25      	ldr	r3, [pc, #148]	; (8009d28 <USBD_CDC_Init+0x1ec>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 020f 	and.w	r2, r3, #15
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3324      	adds	r3, #36	; 0x24
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	33b0      	adds	r3, #176	; 0xb0
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e018      	b.n	8009d16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7c1b      	ldrb	r3, [r3, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cec:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <USBD_CDC_Init+0x1e8>)
 8009cee:	7819      	ldrb	r1, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f005 fa58 	bl	800f1b0 <USBD_LL_PrepareReceive>
 8009d00:	e008      	b.n	8009d14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <USBD_CDC_Init+0x1e8>)
 8009d04:	7819      	ldrb	r1, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f005 fa4e 	bl	800f1b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	200005ab 	.word	0x200005ab
 8009d24:	200005ac 	.word	0x200005ac
 8009d28:	200005ad 	.word	0x200005ad

08009d2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d38:	4b3a      	ldr	r3, [pc, #232]	; (8009e24 <USBD_CDC_DeInit+0xf8>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f005 f96d 	bl	800f01e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d44:	4b37      	ldr	r3, [pc, #220]	; (8009e24 <USBD_CDC_DeInit+0xf8>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f003 020f 	and.w	r2, r3, #15
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	440b      	add	r3, r1
 8009d58:	3324      	adds	r3, #36	; 0x24
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d5e:	4b32      	ldr	r3, [pc, #200]	; (8009e28 <USBD_CDC_DeInit+0xfc>)
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f005 f95a 	bl	800f01e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d6a:	4b2f      	ldr	r3, [pc, #188]	; (8009e28 <USBD_CDC_DeInit+0xfc>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	f003 020f 	and.w	r2, r3, #15
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d82:	2200      	movs	r2, #0
 8009d84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d86:	4b29      	ldr	r3, [pc, #164]	; (8009e2c <USBD_CDC_DeInit+0x100>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f005 f946 	bl	800f01e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d92:	4b26      	ldr	r3, [pc, #152]	; (8009e2c <USBD_CDC_DeInit+0x100>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 020f 	and.w	r2, r3, #15
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	440b      	add	r3, r1
 8009da6:	3324      	adds	r3, #36	; 0x24
 8009da8:	2200      	movs	r2, #0
 8009daa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009dac:	4b1f      	ldr	r3, [pc, #124]	; (8009e2c <USBD_CDC_DeInit+0x100>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 020f 	and.w	r2, r3, #15
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3326      	adds	r3, #38	; 0x26
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	32b0      	adds	r2, #176	; 0xb0
 8009dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01f      	beq.n	8009e18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	33b0      	adds	r3, #176	; 0xb0
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	32b0      	adds	r2, #176	; 0xb0
 8009df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f005 fa1a 	bl	800f234 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	32b0      	adds	r2, #176	; 0xb0
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	200005ab 	.word	0x200005ab
 8009e28:	200005ac 	.word	0x200005ac
 8009e2c:	200005ad 	.word	0x200005ad

08009e30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	32b0      	adds	r2, #176	; 0xb0
 8009e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e0bf      	b.n	8009fe0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d050      	beq.n	8009f0e <USBD_CDC_Setup+0xde>
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	f040 80af 	bne.w	8009fd0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	88db      	ldrh	r3, [r3, #6]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d03a      	beq.n	8009ef0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	b25b      	sxtb	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	da1b      	bge.n	8009ebc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	33b0      	adds	r3, #176	; 0xb0
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	88d2      	ldrh	r2, [r2, #6]
 8009ea0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	88db      	ldrh	r3, [r3, #6]
 8009ea6:	2b07      	cmp	r3, #7
 8009ea8:	bf28      	it	cs
 8009eaa:	2307      	movcs	r3, #7
 8009eac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	89fa      	ldrh	r2, [r7, #14]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 fd43 	bl	800b940 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009eba:	e090      	b.n	8009fde <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	785a      	ldrb	r2, [r3, #1]
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	88db      	ldrh	r3, [r3, #6]
 8009eca:	2b3f      	cmp	r3, #63	; 0x3f
 8009ecc:	d803      	bhi.n	8009ed6 <USBD_CDC_Setup+0xa6>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	88db      	ldrh	r3, [r3, #6]
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	e000      	b.n	8009ed8 <USBD_CDC_Setup+0xa8>
 8009ed6:	2240      	movs	r2, #64	; 0x40
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009ede:	6939      	ldr	r1, [r7, #16]
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 fd55 	bl	800b998 <USBD_CtlPrepareRx>
      break;
 8009eee:	e076      	b.n	8009fde <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	33b0      	adds	r3, #176	; 0xb0
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	7850      	ldrb	r0, [r2, #1]
 8009f06:	2200      	movs	r2, #0
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	4798      	blx	r3
      break;
 8009f0c:	e067      	b.n	8009fde <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b0b      	cmp	r3, #11
 8009f14:	d851      	bhi.n	8009fba <USBD_CDC_Setup+0x18a>
 8009f16:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <USBD_CDC_Setup+0xec>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f4d 	.word	0x08009f4d
 8009f20:	08009fc9 	.word	0x08009fc9
 8009f24:	08009fbb 	.word	0x08009fbb
 8009f28:	08009fbb 	.word	0x08009fbb
 8009f2c:	08009fbb 	.word	0x08009fbb
 8009f30:	08009fbb 	.word	0x08009fbb
 8009f34:	08009fbb 	.word	0x08009fbb
 8009f38:	08009fbb 	.word	0x08009fbb
 8009f3c:	08009fbb 	.word	0x08009fbb
 8009f40:	08009fbb 	.word	0x08009fbb
 8009f44:	08009f77 	.word	0x08009f77
 8009f48:	08009fa1 	.word	0x08009fa1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d107      	bne.n	8009f68 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f58:	f107 030a 	add.w	r3, r7, #10
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 fced 	bl	800b940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f66:	e032      	b.n	8009fce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 fc77 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f70:	2303      	movs	r3, #3
 8009f72:	75fb      	strb	r3, [r7, #23]
          break;
 8009f74:	e02b      	b.n	8009fce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d107      	bne.n	8009f92 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f82:	f107 030d 	add.w	r3, r7, #13
 8009f86:	2201      	movs	r2, #1
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fcd8 	bl	800b940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f90:	e01d      	b.n	8009fce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f001 fc62 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f9e:	e016      	b.n	8009fce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b03      	cmp	r3, #3
 8009faa:	d00f      	beq.n	8009fcc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fc55 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fb8:	e008      	b.n	8009fcc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fc4e 	bl	800b85e <USBD_CtlError>
          ret = USBD_FAIL;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fc6:	e002      	b.n	8009fce <USBD_CDC_Setup+0x19e>
          break;
 8009fc8:	bf00      	nop
 8009fca:	e008      	b.n	8009fde <USBD_CDC_Setup+0x1ae>
          break;
 8009fcc:	bf00      	nop
      }
      break;
 8009fce:	e006      	b.n	8009fde <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f001 fc43 	bl	800b85e <USBD_CtlError>
      ret = USBD_FAIL;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	75fb      	strb	r3, [r7, #23]
      break;
 8009fdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ffa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	32b0      	adds	r2, #176	; 0xb0
 800a006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a00e:	2303      	movs	r3, #3
 800a010:	e065      	b.n	800a0de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	32b0      	adds	r2, #176	; 0xb0
 800a01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a020:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	f003 020f 	and.w	r2, r3, #15
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	3318      	adds	r3, #24
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d02f      	beq.n	800a09c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	f003 020f 	and.w	r2, r3, #15
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	440b      	add	r3, r1
 800a04e:	3318      	adds	r3, #24
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	f003 010f 	and.w	r1, r3, #15
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	460b      	mov	r3, r1
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	440b      	add	r3, r1
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4403      	add	r3, r0
 800a064:	3348      	adds	r3, #72	; 0x48
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	fbb2 f1f3 	udiv	r1, r2, r3
 800a06c:	fb01 f303 	mul.w	r3, r1, r3
 800a070:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a072:	2b00      	cmp	r3, #0
 800a074:	d112      	bne.n	800a09c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a076:	78fb      	ldrb	r3, [r7, #3]
 800a078:	f003 020f 	and.w	r2, r3, #15
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	4613      	mov	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	440b      	add	r3, r1
 800a088:	3318      	adds	r3, #24
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a08e:	78f9      	ldrb	r1, [r7, #3]
 800a090:	2300      	movs	r3, #0
 800a092:	2200      	movs	r2, #0
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f005 f86a 	bl	800f16e <USBD_LL_Transmit>
 800a09a:	e01f      	b.n	800a0dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	33b0      	adds	r3, #176	; 0xb0
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d010      	beq.n	800a0dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	33b0      	adds	r3, #176	; 0xb0
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a0d8:	78fa      	ldrb	r2, [r7, #3]
 800a0da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	32b0      	adds	r2, #176	; 0xb0
 800a0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a100:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	32b0      	adds	r2, #176	; 0xb0
 800a10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a114:	2303      	movs	r3, #3
 800a116:	e01a      	b.n	800a14e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f005 f868 	bl	800f1f2 <USBD_LL_GetRxDataSize>
 800a122:	4602      	mov	r2, r0
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	33b0      	adds	r3, #176	; 0xb0
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a148:	4611      	mov	r1, r2
 800a14a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	32b0      	adds	r2, #176	; 0xb0
 800a168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a174:	2303      	movs	r3, #3
 800a176:	e025      	b.n	800a1c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	33b0      	adds	r3, #176	; 0xb0
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01a      	beq.n	800a1c2 <USBD_CDC_EP0_RxReady+0x6c>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a192:	2bff      	cmp	r3, #255	; 0xff
 800a194:	d015      	beq.n	800a1c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	33b0      	adds	r3, #176	; 0xb0
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	22ff      	movs	r2, #255	; 0xff
 800a1be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1d4:	2182      	movs	r1, #130	; 0x82
 800a1d6:	4818      	ldr	r0, [pc, #96]	; (800a238 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1d8:	f000 fd09 	bl	800abee <USBD_GetEpDesc>
 800a1dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1de:	2101      	movs	r1, #1
 800a1e0:	4815      	ldr	r0, [pc, #84]	; (800a238 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1e2:	f000 fd04 	bl	800abee <USBD_GetEpDesc>
 800a1e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1e8:	2181      	movs	r1, #129	; 0x81
 800a1ea:	4813      	ldr	r0, [pc, #76]	; (800a238 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1ec:	f000 fcff 	bl	800abee <USBD_GetEpDesc>
 800a1f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2210      	movs	r2, #16
 800a1fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d006      	beq.n	800a212 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	2200      	movs	r2, #0
 800a208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a20c:	711a      	strb	r2, [r3, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d006      	beq.n	800a226 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a220:	711a      	strb	r2, [r3, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2243      	movs	r2, #67	; 0x43
 800a22a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a22c:	4b02      	ldr	r3, [pc, #8]	; (800a238 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000568 	.word	0x20000568

0800a23c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a244:	2182      	movs	r1, #130	; 0x82
 800a246:	4818      	ldr	r0, [pc, #96]	; (800a2a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a248:	f000 fcd1 	bl	800abee <USBD_GetEpDesc>
 800a24c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a24e:	2101      	movs	r1, #1
 800a250:	4815      	ldr	r0, [pc, #84]	; (800a2a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a252:	f000 fccc 	bl	800abee <USBD_GetEpDesc>
 800a256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a258:	2181      	movs	r1, #129	; 0x81
 800a25a:	4813      	ldr	r0, [pc, #76]	; (800a2a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a25c:	f000 fcc7 	bl	800abee <USBD_GetEpDesc>
 800a260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2210      	movs	r2, #16
 800a26c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d006      	beq.n	800a282 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	2200      	movs	r2, #0
 800a278:	711a      	strb	r2, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f042 0202 	orr.w	r2, r2, #2
 800a280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d006      	beq.n	800a296 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	711a      	strb	r2, [r3, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f042 0202 	orr.w	r2, r2, #2
 800a294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2243      	movs	r2, #67	; 0x43
 800a29a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20000568 	.word	0x20000568

0800a2ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2b4:	2182      	movs	r1, #130	; 0x82
 800a2b6:	4818      	ldr	r0, [pc, #96]	; (800a318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2b8:	f000 fc99 	bl	800abee <USBD_GetEpDesc>
 800a2bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2be:	2101      	movs	r1, #1
 800a2c0:	4815      	ldr	r0, [pc, #84]	; (800a318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2c2:	f000 fc94 	bl	800abee <USBD_GetEpDesc>
 800a2c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2c8:	2181      	movs	r1, #129	; 0x81
 800a2ca:	4813      	ldr	r0, [pc, #76]	; (800a318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2cc:	f000 fc8f 	bl	800abee <USBD_GetEpDesc>
 800a2d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2210      	movs	r2, #16
 800a2dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d006      	beq.n	800a2f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2ec:	711a      	strb	r2, [r3, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d006      	beq.n	800a306 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a300:	711a      	strb	r2, [r3, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2243      	movs	r2, #67	; 0x43
 800a30a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a30c:	4b02      	ldr	r3, [pc, #8]	; (800a318 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20000568 	.word	0x20000568

0800a31c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	220a      	movs	r2, #10
 800a328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a32a:	4b03      	ldr	r3, [pc, #12]	; (800a338 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	20000524 	.word	0x20000524

0800a33c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e009      	b.n	800a364 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	33b0      	adds	r3, #176	; 0xb0
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	32b0      	adds	r2, #176	; 0xb0
 800a386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a38a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a392:	2303      	movs	r3, #3
 800a394:	e008      	b.n	800a3a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	371c      	adds	r7, #28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	32b0      	adds	r2, #176	; 0xb0
 800a3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e004      	b.n	800a3e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	32b0      	adds	r2, #176	; 0xb0
 800a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a406:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	32b0      	adds	r2, #176	; 0xb0
 800a412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e018      	b.n	800a450 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	7c1b      	ldrb	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10a      	bne.n	800a43c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <USBD_CDC_ReceivePacket+0x68>)
 800a428:	7819      	ldrb	r1, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a430:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f004 febb 	bl	800f1b0 <USBD_LL_PrepareReceive>
 800a43a:	e008      	b.n	800a44e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a43c:	4b06      	ldr	r3, [pc, #24]	; (800a458 <USBD_CDC_ReceivePacket+0x68>)
 800a43e:	7819      	ldrb	r1, [r3, #0]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f004 feb1 	bl	800f1b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	200005ac 	.word	0x200005ac

0800a45c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a470:	2303      	movs	r3, #3
 800a472:	e01f      	b.n	800a4b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	79fa      	ldrb	r2, [r7, #7]
 800a4a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f004 fd2b 	bl	800ef04 <USBD_LL_Init>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e025      	b.n	800a520 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	32ae      	adds	r2, #174	; 0xae
 800a4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00f      	beq.n	800a510 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	32ae      	adds	r2, #174	; 0xae
 800a4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	f107 020e 	add.w	r2, r7, #14
 800a504:	4610      	mov	r0, r2
 800a506:	4798      	blx	r3
 800a508:	4602      	mov	r2, r0
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f004 fd33 	bl	800ef9c <USBD_LL_Start>
 800a536:	4603      	mov	r3, r0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a548:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d009      	beq.n	800a584 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	78fa      	ldrb	r2, [r7, #3]
 800a57a:	4611      	mov	r1, r2
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 f908 	bl	800b7ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5f6:	f003 031f 	and.w	r3, r3, #31
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d01a      	beq.n	800a634 <USBD_LL_SetupStage+0x72>
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d822      	bhi.n	800a648 <USBD_LL_SetupStage+0x86>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d002      	beq.n	800a60c <USBD_LL_SetupStage+0x4a>
 800a606:	2b01      	cmp	r3, #1
 800a608:	d00a      	beq.n	800a620 <USBD_LL_SetupStage+0x5e>
 800a60a:	e01d      	b.n	800a648 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fb5f 	bl	800acd8 <USBD_StdDevReq>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]
      break;
 800a61e:	e020      	b.n	800a662 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fbc7 	bl	800adbc <USBD_StdItfReq>
 800a62e:	4603      	mov	r3, r0
 800a630:	73fb      	strb	r3, [r7, #15]
      break;
 800a632:	e016      	b.n	800a662 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fc29 	bl	800ae94 <USBD_StdEPReq>
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]
      break;
 800a646:	e00c      	b.n	800a662 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a64e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a652:	b2db      	uxtb	r3, r3
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f004 fd00 	bl	800f05c <USBD_LL_StallEP>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	bf00      	nop
  }

  return ret;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	460b      	mov	r3, r1
 800a676:	607a      	str	r2, [r7, #4]
 800a678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d16e      	bne.n	800a762 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a68a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a692:	2b03      	cmp	r3, #3
 800a694:	f040 8098 	bne.w	800a7c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d913      	bls.n	800a6cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	1ad2      	subs	r2, r2, r3
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	bf28      	it	cs
 800a6be:	4613      	movcs	r3, r2
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6879      	ldr	r1, [r7, #4]
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f001 f984 	bl	800b9d2 <USBD_CtlContinueRx>
 800a6ca:	e07d      	b.n	800a7c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6d2:	f003 031f 	and.w	r3, r3, #31
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d014      	beq.n	800a704 <USBD_LL_DataOutStage+0x98>
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d81d      	bhi.n	800a71a <USBD_LL_DataOutStage+0xae>
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <USBD_LL_DataOutStage+0x7c>
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d003      	beq.n	800a6ee <USBD_LL_DataOutStage+0x82>
 800a6e6:	e018      	b.n	800a71a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	75bb      	strb	r3, [r7, #22]
            break;
 800a6ec:	e018      	b.n	800a720 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 fa5e 	bl	800abba <USBD_CoreFindIF>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75bb      	strb	r3, [r7, #22]
            break;
 800a702:	e00d      	b.n	800a720 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4619      	mov	r1, r3
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 fa60 	bl	800abd4 <USBD_CoreFindEP>
 800a714:	4603      	mov	r3, r0
 800a716:	75bb      	strb	r3, [r7, #22]
            break;
 800a718:	e002      	b.n	800a720 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75bb      	strb	r3, [r7, #22]
            break;
 800a71e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a720:	7dbb      	ldrb	r3, [r7, #22]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d119      	bne.n	800a75a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d113      	bne.n	800a75a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a732:	7dba      	ldrb	r2, [r7, #22]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	32ae      	adds	r2, #174	; 0xae
 800a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00b      	beq.n	800a75a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a742:	7dba      	ldrb	r2, [r7, #22]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a74a:	7dba      	ldrb	r2, [r7, #22]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	32ae      	adds	r2, #174	; 0xae
 800a750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f001 f94a 	bl	800b9f4 <USBD_CtlSendStatus>
 800a760:	e032      	b.n	800a7c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	4619      	mov	r1, r3
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 fa31 	bl	800abd4 <USBD_CoreFindEP>
 800a772:	4603      	mov	r3, r0
 800a774:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a776:	7dbb      	ldrb	r3, [r7, #22]
 800a778:	2bff      	cmp	r3, #255	; 0xff
 800a77a:	d025      	beq.n	800a7c8 <USBD_LL_DataOutStage+0x15c>
 800a77c:	7dbb      	ldrb	r3, [r7, #22]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d122      	bne.n	800a7c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d117      	bne.n	800a7be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a78e:	7dba      	ldrb	r2, [r7, #22]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	32ae      	adds	r2, #174	; 0xae
 800a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00f      	beq.n	800a7be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a79e:	7dba      	ldrb	r2, [r7, #22]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7a6:	7dba      	ldrb	r2, [r7, #22]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	32ae      	adds	r2, #174	; 0xae
 800a7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	7afa      	ldrb	r2, [r7, #11]
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	4798      	blx	r3
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a7c4:	7dfb      	ldrb	r3, [r7, #23]
 800a7c6:	e000      	b.n	800a7ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b086      	sub	sp, #24
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	607a      	str	r2, [r7, #4]
 800a7de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a7e0:	7afb      	ldrb	r3, [r7, #11]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d16f      	bne.n	800a8c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3314      	adds	r3, #20
 800a7ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d15a      	bne.n	800a8ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d914      	bls.n	800a82c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	1ad2      	subs	r2, r2, r3
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	461a      	mov	r2, r3
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f001 f8ac 	bl	800b976 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a81e:	2300      	movs	r3, #0
 800a820:	2200      	movs	r2, #0
 800a822:	2100      	movs	r1, #0
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f004 fcc3 	bl	800f1b0 <USBD_LL_PrepareReceive>
 800a82a:	e03f      	b.n	800a8ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	68da      	ldr	r2, [r3, #12]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	429a      	cmp	r2, r3
 800a836:	d11c      	bne.n	800a872 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a840:	429a      	cmp	r2, r3
 800a842:	d316      	bcc.n	800a872 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a84e:	429a      	cmp	r2, r3
 800a850:	d20f      	bcs.n	800a872 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a852:	2200      	movs	r2, #0
 800a854:	2100      	movs	r1, #0
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f001 f88d 	bl	800b976 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a864:	2300      	movs	r3, #0
 800a866:	2200      	movs	r2, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f004 fca0 	bl	800f1b0 <USBD_LL_PrepareReceive>
 800a870:	e01c      	b.n	800a8ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d10f      	bne.n	800a89e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d009      	beq.n	800a89e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a89e:	2180      	movs	r1, #128	; 0x80
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f004 fbdb 	bl	800f05c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f001 f8b7 	bl	800ba1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d03a      	beq.n	800a92c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fe42 	bl	800a540 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a8c4:	e032      	b.n	800a92c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f97f 	bl	800abd4 <USBD_CoreFindEP>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	2bff      	cmp	r3, #255	; 0xff
 800a8de:	d025      	beq.n	800a92c <USBD_LL_DataInStage+0x15a>
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d122      	bne.n	800a92c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d11c      	bne.n	800a92c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a8f2:	7dfa      	ldrb	r2, [r7, #23]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	32ae      	adds	r2, #174	; 0xae
 800a8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d014      	beq.n	800a92c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a902:	7dfa      	ldrb	r2, [r7, #23]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a90a:	7dfa      	ldrb	r2, [r7, #23]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	32ae      	adds	r2, #174	; 0xae
 800a910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	7afa      	ldrb	r2, [r7, #11]
 800a918:	4611      	mov	r1, r2
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	4798      	blx	r3
 800a91e:	4603      	mov	r3, r0
 800a920:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a922:	7dbb      	ldrb	r3, [r7, #22]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a928:	7dbb      	ldrb	r3, [r7, #22]
 800a92a:	e000      	b.n	800a92e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d014      	beq.n	800a99c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00e      	beq.n	800a99c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6852      	ldr	r2, [r2, #4]
 800a98a:	b2d2      	uxtb	r2, r2
 800a98c:	4611      	mov	r1, r2
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a998:	2303      	movs	r3, #3
 800a99a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a99c:	2340      	movs	r3, #64	; 0x40
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f004 fb15 	bl	800efd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2240      	movs	r2, #64	; 0x40
 800a9b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9b8:	2340      	movs	r3, #64	; 0x40
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2180      	movs	r1, #128	; 0x80
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f004 fb07 	bl	800efd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2240      	movs	r2, #64	; 0x40
 800a9ce:	621a      	str	r2, [r3, #32]

  return ret;
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	78fa      	ldrb	r2, [r7, #3]
 800a9ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2204      	movs	r2, #4
 800aa14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d106      	bne.n	800aa48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d110      	bne.n	800aa8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	32ae      	adds	r2, #174	; 0xae
 800aaac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e01c      	b.n	800aaf2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d115      	bne.n	800aaf0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	32ae      	adds	r2, #174	; 0xae
 800aace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00b      	beq.n	800aaf0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	32ae      	adds	r2, #174	; 0xae
 800aae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	78fa      	ldrb	r2, [r7, #3]
 800aaea:	4611      	mov	r1, r2
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	460b      	mov	r3, r1
 800ab04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	32ae      	adds	r2, #174	; 0xae
 800ab10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e01c      	b.n	800ab56 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d115      	bne.n	800ab54 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	32ae      	adds	r2, #174	; 0xae
 800ab32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	32ae      	adds	r2, #174	; 0xae
 800ab46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	78fa      	ldrb	r2, [r7, #3]
 800ab4e:	4611      	mov	r1, r2
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00e      	beq.n	800abb0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	6852      	ldr	r2, [r2, #4]
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	4611      	mov	r1, r2
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abac:	2303      	movs	r3, #3
 800abae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abc6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abc8:	4618      	mov	r0, r3
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abe0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b086      	sub	sp, #24
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	885b      	ldrh	r3, [r3, #2]
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d920      	bls.n	800ac58 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac1e:	e013      	b.n	800ac48 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac20:	f107 030a 	add.w	r3, r7, #10
 800ac24:	4619      	mov	r1, r3
 800ac26:	6978      	ldr	r0, [r7, #20]
 800ac28:	f000 f81b 	bl	800ac62 <USBD_GetNextDesc>
 800ac2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	2b05      	cmp	r3, #5
 800ac34:	d108      	bne.n	800ac48 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	789b      	ldrb	r3, [r3, #2]
 800ac3e:	78fa      	ldrb	r2, [r7, #3]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d008      	beq.n	800ac56 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac44:	2300      	movs	r3, #0
 800ac46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	885b      	ldrh	r3, [r3, #2]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	897b      	ldrh	r3, [r7, #10]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d8e5      	bhi.n	800ac20 <USBD_GetEpDesc+0x32>
 800ac54:	e000      	b.n	800ac58 <USBD_GetEpDesc+0x6a>
          break;
 800ac56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac58:	693b      	ldr	r3, [r7, #16]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	881a      	ldrh	r2, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	461a      	mov	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	3301      	adds	r3, #1
 800acb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acba:	8a3b      	ldrh	r3, [r7, #16]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	b21a      	sxth	r2, r3
 800acc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	b21b      	sxth	r3, r3
 800acc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acca:	89fb      	ldrh	r3, [r7, #14]
}
 800accc:	4618      	mov	r0, r3
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acee:	2b40      	cmp	r3, #64	; 0x40
 800acf0:	d005      	beq.n	800acfe <USBD_StdDevReq+0x26>
 800acf2:	2b40      	cmp	r3, #64	; 0x40
 800acf4:	d857      	bhi.n	800ada6 <USBD_StdDevReq+0xce>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00f      	beq.n	800ad1a <USBD_StdDevReq+0x42>
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	d153      	bne.n	800ada6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	32ae      	adds	r2, #174	; 0xae
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	4798      	blx	r3
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]
      break;
 800ad18:	e04a      	b.n	800adb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	785b      	ldrb	r3, [r3, #1]
 800ad1e:	2b09      	cmp	r3, #9
 800ad20:	d83b      	bhi.n	800ad9a <USBD_StdDevReq+0xc2>
 800ad22:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <USBD_StdDevReq+0x50>)
 800ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad28:	0800ad7d 	.word	0x0800ad7d
 800ad2c:	0800ad91 	.word	0x0800ad91
 800ad30:	0800ad9b 	.word	0x0800ad9b
 800ad34:	0800ad87 	.word	0x0800ad87
 800ad38:	0800ad9b 	.word	0x0800ad9b
 800ad3c:	0800ad5b 	.word	0x0800ad5b
 800ad40:	0800ad51 	.word	0x0800ad51
 800ad44:	0800ad9b 	.word	0x0800ad9b
 800ad48:	0800ad73 	.word	0x0800ad73
 800ad4c:	0800ad65 	.word	0x0800ad65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa3c 	bl	800b1d0 <USBD_GetDescriptor>
          break;
 800ad58:	e024      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fba1 	bl	800b4a4 <USBD_SetAddress>
          break;
 800ad62:	e01f      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fbe0 	bl	800b52c <USBD_SetConfig>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad70:	e018      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fc83 	bl	800b680 <USBD_GetConfig>
          break;
 800ad7a:	e013      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fcb4 	bl	800b6ec <USBD_GetStatus>
          break;
 800ad84:	e00e      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fce3 	bl	800b754 <USBD_SetFeature>
          break;
 800ad8e:	e009      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fd07 	bl	800b7a6 <USBD_ClrFeature>
          break;
 800ad98:	e004      	b.n	800ada4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fd5e 	bl	800b85e <USBD_CtlError>
          break;
 800ada2:	bf00      	nop
      }
      break;
 800ada4:	e004      	b.n	800adb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fd58 	bl	800b85e <USBD_CtlError>
      break;
 800adae:	bf00      	nop
  }

  return ret;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop

0800adbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800add2:	2b40      	cmp	r3, #64	; 0x40
 800add4:	d005      	beq.n	800ade2 <USBD_StdItfReq+0x26>
 800add6:	2b40      	cmp	r3, #64	; 0x40
 800add8:	d852      	bhi.n	800ae80 <USBD_StdItfReq+0xc4>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <USBD_StdItfReq+0x26>
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d14e      	bne.n	800ae80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	2b02      	cmp	r3, #2
 800adee:	d840      	bhi.n	800ae72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	889b      	ldrh	r3, [r3, #4]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d836      	bhi.n	800ae68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	889b      	ldrh	r3, [r3, #4]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fed9 	bl	800abba <USBD_CoreFindIF>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	2bff      	cmp	r3, #255	; 0xff
 800ae10:	d01d      	beq.n	800ae4e <USBD_StdItfReq+0x92>
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11a      	bne.n	800ae4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae18:	7bba      	ldrb	r2, [r7, #14]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	32ae      	adds	r2, #174	; 0xae
 800ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00f      	beq.n	800ae48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae28:	7bba      	ldrb	r2, [r7, #14]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae30:	7bba      	ldrb	r2, [r7, #14]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	32ae      	adds	r2, #174	; 0xae
 800ae36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae46:	e004      	b.n	800ae52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae4c:	e001      	b.n	800ae52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	88db      	ldrh	r3, [r3, #6]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d110      	bne.n	800ae7c <USBD_StdItfReq+0xc0>
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10d      	bne.n	800ae7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fdc7 	bl	800b9f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae66:	e009      	b.n	800ae7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fcf7 	bl	800b85e <USBD_CtlError>
          break;
 800ae70:	e004      	b.n	800ae7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fcf2 	bl	800b85e <USBD_CtlError>
          break;
 800ae7a:	e000      	b.n	800ae7e <USBD_StdItfReq+0xc2>
          break;
 800ae7c:	bf00      	nop
      }
      break;
 800ae7e:	e004      	b.n	800ae8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fceb 	bl	800b85e <USBD_CtlError>
      break;
 800ae88:	bf00      	nop
  }

  return ret;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	889b      	ldrh	r3, [r3, #4]
 800aea6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeb0:	2b40      	cmp	r3, #64	; 0x40
 800aeb2:	d007      	beq.n	800aec4 <USBD_StdEPReq+0x30>
 800aeb4:	2b40      	cmp	r3, #64	; 0x40
 800aeb6:	f200 817f 	bhi.w	800b1b8 <USBD_StdEPReq+0x324>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d02a      	beq.n	800af14 <USBD_StdEPReq+0x80>
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	f040 817a 	bne.w	800b1b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fe83 	bl	800abd4 <USBD_CoreFindEP>
 800aece:	4603      	mov	r3, r0
 800aed0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aed2:	7b7b      	ldrb	r3, [r7, #13]
 800aed4:	2bff      	cmp	r3, #255	; 0xff
 800aed6:	f000 8174 	beq.w	800b1c2 <USBD_StdEPReq+0x32e>
 800aeda:	7b7b      	ldrb	r3, [r7, #13]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f040 8170 	bne.w	800b1c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aee2:	7b7a      	ldrb	r2, [r7, #13]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aeea:	7b7a      	ldrb	r2, [r7, #13]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	32ae      	adds	r2, #174	; 0xae
 800aef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 8163 	beq.w	800b1c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aefc:	7b7a      	ldrb	r2, [r7, #13]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	32ae      	adds	r2, #174	; 0xae
 800af02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	4798      	blx	r3
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af12:	e156      	b.n	800b1c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	785b      	ldrb	r3, [r3, #1]
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d008      	beq.n	800af2e <USBD_StdEPReq+0x9a>
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	f300 8145 	bgt.w	800b1ac <USBD_StdEPReq+0x318>
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 809b 	beq.w	800b05e <USBD_StdEPReq+0x1ca>
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d03c      	beq.n	800afa6 <USBD_StdEPReq+0x112>
 800af2c:	e13e      	b.n	800b1ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d002      	beq.n	800af40 <USBD_StdEPReq+0xac>
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d016      	beq.n	800af6c <USBD_StdEPReq+0xd8>
 800af3e:	e02c      	b.n	800af9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00d      	beq.n	800af62 <USBD_StdEPReq+0xce>
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	2b80      	cmp	r3, #128	; 0x80
 800af4a:	d00a      	beq.n	800af62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f004 f883 	bl	800f05c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af56:	2180      	movs	r1, #128	; 0x80
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f004 f87f 	bl	800f05c <USBD_LL_StallEP>
 800af5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af60:	e020      	b.n	800afa4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fc7a 	bl	800b85e <USBD_CtlError>
              break;
 800af6a:	e01b      	b.n	800afa4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	885b      	ldrh	r3, [r3, #2]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10e      	bne.n	800af92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <USBD_StdEPReq+0xfe>
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b80      	cmp	r3, #128	; 0x80
 800af7e:	d008      	beq.n	800af92 <USBD_StdEPReq+0xfe>
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	88db      	ldrh	r3, [r3, #6]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d104      	bne.n	800af92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f004 f865 	bl	800f05c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fd2e 	bl	800b9f4 <USBD_CtlSendStatus>

              break;
 800af98:	e004      	b.n	800afa4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fc5e 	bl	800b85e <USBD_CtlError>
              break;
 800afa2:	bf00      	nop
          }
          break;
 800afa4:	e107      	b.n	800b1b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d002      	beq.n	800afb8 <USBD_StdEPReq+0x124>
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d016      	beq.n	800afe4 <USBD_StdEPReq+0x150>
 800afb6:	e04b      	b.n	800b050 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00d      	beq.n	800afda <USBD_StdEPReq+0x146>
 800afbe:	7bbb      	ldrb	r3, [r7, #14]
 800afc0:	2b80      	cmp	r3, #128	; 0x80
 800afc2:	d00a      	beq.n	800afda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f004 f847 	bl	800f05c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afce:	2180      	movs	r1, #128	; 0x80
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f004 f843 	bl	800f05c <USBD_LL_StallEP>
 800afd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afd8:	e040      	b.n	800b05c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fc3e 	bl	800b85e <USBD_CtlError>
              break;
 800afe2:	e03b      	b.n	800b05c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	885b      	ldrh	r3, [r3, #2]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d136      	bne.n	800b05a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d004      	beq.n	800b000 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f004 f84d 	bl	800f09a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fcf7 	bl	800b9f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff fde2 	bl	800abd4 <USBD_CoreFindEP>
 800b010:	4603      	mov	r3, r0
 800b012:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b014:	7b7b      	ldrb	r3, [r7, #13]
 800b016:	2bff      	cmp	r3, #255	; 0xff
 800b018:	d01f      	beq.n	800b05a <USBD_StdEPReq+0x1c6>
 800b01a:	7b7b      	ldrb	r3, [r7, #13]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d11c      	bne.n	800b05a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b020:	7b7a      	ldrb	r2, [r7, #13]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b028:	7b7a      	ldrb	r2, [r7, #13]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	32ae      	adds	r2, #174	; 0xae
 800b02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d010      	beq.n	800b05a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b038:	7b7a      	ldrb	r2, [r7, #13]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32ae      	adds	r2, #174	; 0xae
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
 800b04a:	4603      	mov	r3, r0
 800b04c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b04e:	e004      	b.n	800b05a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fc03 	bl	800b85e <USBD_CtlError>
              break;
 800b058:	e000      	b.n	800b05c <USBD_StdEPReq+0x1c8>
              break;
 800b05a:	bf00      	nop
          }
          break;
 800b05c:	e0ab      	b.n	800b1b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d002      	beq.n	800b070 <USBD_StdEPReq+0x1dc>
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d032      	beq.n	800b0d4 <USBD_StdEPReq+0x240>
 800b06e:	e097      	b.n	800b1a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d007      	beq.n	800b086 <USBD_StdEPReq+0x1f2>
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	2b80      	cmp	r3, #128	; 0x80
 800b07a:	d004      	beq.n	800b086 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fbed 	bl	800b85e <USBD_CtlError>
                break;
 800b084:	e091      	b.n	800b1aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	da0b      	bge.n	800b0a6 <USBD_StdEPReq+0x212>
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	3310      	adds	r3, #16
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	e00b      	b.n	800b0be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	3304      	adds	r3, #4
 800b0be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc37 	bl	800b940 <USBD_CtlSendData>
              break;
 800b0d2:	e06a      	b.n	800b1aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	da11      	bge.n	800b100 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	f003 020f 	and.w	r2, r3, #15
 800b0e2:	6879      	ldr	r1, [r7, #4]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	440b      	add	r3, r1
 800b0ee:	3324      	adds	r3, #36	; 0x24
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d117      	bne.n	800b126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fbb0 	bl	800b85e <USBD_CtlError>
                  break;
 800b0fe:	e054      	b.n	800b1aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	f003 020f 	and.w	r2, r3, #15
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	4613      	mov	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	440b      	add	r3, r1
 800b112:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fb9d 	bl	800b85e <USBD_CtlError>
                  break;
 800b124:	e041      	b.n	800b1aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	da0b      	bge.n	800b146 <USBD_StdEPReq+0x2b2>
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b134:	4613      	mov	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	3310      	adds	r3, #16
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	4413      	add	r3, r2
 800b142:	3304      	adds	r3, #4
 800b144:	e00b      	b.n	800b15e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b14c:	4613      	mov	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	4413      	add	r3, r2
 800b15c:	3304      	adds	r3, #4
 800b15e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <USBD_StdEPReq+0x2d8>
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	2b80      	cmp	r3, #128	; 0x80
 800b16a:	d103      	bne.n	800b174 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	e00e      	b.n	800b192 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f003 ffad 	bl	800f0d8 <USBD_LL_IsStallEP>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2201      	movs	r2, #1
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	e002      	b.n	800b192 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2202      	movs	r2, #2
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fbd1 	bl	800b940 <USBD_CtlSendData>
              break;
 800b19e:	e004      	b.n	800b1aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fb5b 	bl	800b85e <USBD_CtlError>
              break;
 800b1a8:	bf00      	nop
          }
          break;
 800b1aa:	e004      	b.n	800b1b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fb55 	bl	800b85e <USBD_CtlError>
          break;
 800b1b4:	bf00      	nop
      }
      break;
 800b1b6:	e005      	b.n	800b1c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fb4f 	bl	800b85e <USBD_CtlError>
      break;
 800b1c0:	e000      	b.n	800b1c4 <USBD_StdEPReq+0x330>
      break;
 800b1c2:	bf00      	nop
  }

  return ret;
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	885b      	ldrh	r3, [r3, #2]
 800b1ea:	0a1b      	lsrs	r3, r3, #8
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	2b06      	cmp	r3, #6
 800b1f2:	f200 8128 	bhi.w	800b446 <USBD_GetDescriptor+0x276>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <USBD_GetDescriptor+0x2c>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b219 	.word	0x0800b219
 800b200:	0800b231 	.word	0x0800b231
 800b204:	0800b271 	.word	0x0800b271
 800b208:	0800b447 	.word	0x0800b447
 800b20c:	0800b447 	.word	0x0800b447
 800b210:	0800b3e7 	.word	0x0800b3e7
 800b214:	0800b413 	.word	0x0800b413
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	7c12      	ldrb	r2, [r2, #16]
 800b224:	f107 0108 	add.w	r1, r7, #8
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
 800b22c:	60f8      	str	r0, [r7, #12]
      break;
 800b22e:	e112      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7c1b      	ldrb	r3, [r3, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10d      	bne.n	800b254 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b240:	f107 0208 	add.w	r2, r7, #8
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
 800b248:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3301      	adds	r3, #1
 800b24e:	2202      	movs	r2, #2
 800b250:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b252:	e100      	b.n	800b456 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	f107 0208 	add.w	r2, r7, #8
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	2202      	movs	r2, #2
 800b26c:	701a      	strb	r2, [r3, #0]
      break;
 800b26e:	e0f2      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b05      	cmp	r3, #5
 800b278:	f200 80ac 	bhi.w	800b3d4 <USBD_GetDescriptor+0x204>
 800b27c:	a201      	add	r2, pc, #4	; (adr r2, 800b284 <USBD_GetDescriptor+0xb4>)
 800b27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b282:	bf00      	nop
 800b284:	0800b29d 	.word	0x0800b29d
 800b288:	0800b2d1 	.word	0x0800b2d1
 800b28c:	0800b305 	.word	0x0800b305
 800b290:	0800b339 	.word	0x0800b339
 800b294:	0800b36d 	.word	0x0800b36d
 800b298:	0800b3a1 	.word	0x0800b3a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7c12      	ldrb	r2, [r2, #16]
 800b2b4:	f107 0108 	add.w	r1, r7, #8
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
 800b2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2be:	e091      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 facb 	bl	800b85e <USBD_CtlError>
            err++;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ce:	e089      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f2:	e077      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fab1 	bl	800b85e <USBD_CtlError>
            err++;
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	3301      	adds	r3, #1
 800b300:	72fb      	strb	r3, [r7, #11]
          break;
 800b302:	e06f      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00b      	beq.n	800b328 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b326:	e05d      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa97 	bl	800b85e <USBD_CtlError>
            err++;
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	3301      	adds	r3, #1
 800b334:	72fb      	strb	r3, [r7, #11]
          break;
 800b336:	e055      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	7c12      	ldrb	r2, [r2, #16]
 800b350:	f107 0108 	add.w	r1, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35a:	e043      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa7d 	bl	800b85e <USBD_CtlError>
            err++;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	3301      	adds	r3, #1
 800b368:	72fb      	strb	r3, [r7, #11]
          break;
 800b36a:	e03b      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	7c12      	ldrb	r2, [r2, #16]
 800b384:	f107 0108 	add.w	r1, r7, #8
 800b388:	4610      	mov	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b38e:	e029      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa63 	bl	800b85e <USBD_CtlError>
            err++;
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	3301      	adds	r3, #1
 800b39c:	72fb      	strb	r3, [r7, #11]
          break;
 800b39e:	e021      	b.n	800b3e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7c12      	ldrb	r2, [r2, #16]
 800b3b8:	f107 0108 	add.w	r1, r7, #8
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4798      	blx	r3
 800b3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c2:	e00f      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa49 	bl	800b85e <USBD_CtlError>
            err++;
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d2:	e007      	b.n	800b3e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa41 	bl	800b85e <USBD_CtlError>
          err++;
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3e2:	bf00      	nop
      }
      break;
 800b3e4:	e037      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	f107 0208 	add.w	r2, r7, #8
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4798      	blx	r3
 800b3fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b400:	e029      	b.n	800b456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fa2a 	bl	800b85e <USBD_CtlError>
        err++;
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	3301      	adds	r3, #1
 800b40e:	72fb      	strb	r3, [r7, #11]
      break;
 800b410:	e021      	b.n	800b456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7c1b      	ldrb	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10d      	bne.n	800b436 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b422:	f107 0208 	add.w	r2, r7, #8
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
 800b42a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	2207      	movs	r2, #7
 800b432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b434:	e00f      	b.n	800b456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fa10 	bl	800b85e <USBD_CtlError>
        err++;
 800b43e:	7afb      	ldrb	r3, [r7, #11]
 800b440:	3301      	adds	r3, #1
 800b442:	72fb      	strb	r3, [r7, #11]
      break;
 800b444:	e007      	b.n	800b456 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa08 	bl	800b85e <USBD_CtlError>
      err++;
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	3301      	adds	r3, #1
 800b452:	72fb      	strb	r3, [r7, #11]
      break;
 800b454:	bf00      	nop
  }

  if (err != 0U)
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11e      	bne.n	800b49a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	88db      	ldrh	r3, [r3, #6]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d016      	beq.n	800b492 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b464:	893b      	ldrh	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	88da      	ldrh	r2, [r3, #6]
 800b46e:	893b      	ldrh	r3, [r7, #8]
 800b470:	4293      	cmp	r3, r2
 800b472:	bf28      	it	cs
 800b474:	4613      	movcs	r3, r2
 800b476:	b29b      	uxth	r3, r3
 800b478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b47a:	893b      	ldrh	r3, [r7, #8]
 800b47c:	461a      	mov	r2, r3
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fa5d 	bl	800b940 <USBD_CtlSendData>
 800b486:	e009      	b.n	800b49c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f9e7 	bl	800b85e <USBD_CtlError>
 800b490:	e004      	b.n	800b49c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 faae 	bl	800b9f4 <USBD_CtlSendStatus>
 800b498:	e000      	b.n	800b49c <USBD_GetDescriptor+0x2cc>
    return;
 800b49a:	bf00      	nop
  }
}
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop

0800b4a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	889b      	ldrh	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d131      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88db      	ldrh	r3, [r3, #6]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d12d      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	885b      	ldrh	r3, [r3, #2]
 800b4c2:	2b7f      	cmp	r3, #127	; 0x7f
 800b4c4:	d829      	bhi.n	800b51a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	d104      	bne.n	800b4e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f9bc 	bl	800b85e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e6:	e01d      	b.n	800b524 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7bfa      	ldrb	r2, [r7, #15]
 800b4ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f003 fe1b 	bl	800f130 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fa7a 	bl	800b9f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d004      	beq.n	800b510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2202      	movs	r2, #2
 800b50a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50e:	e009      	b.n	800b524 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b518:	e004      	b.n	800b524 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f99e 	bl	800b85e <USBD_CtlError>
  }
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	885b      	ldrh	r3, [r3, #2]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <USBD_SetConfig+0x150>)
 800b542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b544:	4b4d      	ldr	r3, [pc, #308]	; (800b67c <USBD_SetConfig+0x150>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d905      	bls.n	800b558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f985 	bl	800b85e <USBD_CtlError>
    return USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	e08c      	b.n	800b672 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d002      	beq.n	800b56a <USBD_SetConfig+0x3e>
 800b564:	2b03      	cmp	r3, #3
 800b566:	d029      	beq.n	800b5bc <USBD_SetConfig+0x90>
 800b568:	e075      	b.n	800b656 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b56a:	4b44      	ldr	r3, [pc, #272]	; (800b67c <USBD_SetConfig+0x150>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d020      	beq.n	800b5b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b572:	4b42      	ldr	r3, [pc, #264]	; (800b67c <USBD_SetConfig+0x150>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b57c:	4b3f      	ldr	r3, [pc, #252]	; (800b67c <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7fe ffe7 	bl	800a556 <USBD_SetClassConfig>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d008      	beq.n	800b5a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f962 	bl	800b85e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5a2:	e065      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa25 	bl	800b9f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5b2:	e05d      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa1d 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b5ba:	e059      	b.n	800b670 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5bc:	4b2f      	ldr	r3, [pc, #188]	; (800b67c <USBD_SetConfig+0x150>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d112      	bne.n	800b5ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b5cc:	4b2b      	ldr	r3, [pc, #172]	; (800b67c <USBD_SetConfig+0x150>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5d6:	4b29      	ldr	r3, [pc, #164]	; (800b67c <USBD_SetConfig+0x150>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7fe ffd6 	bl	800a58e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa06 	bl	800b9f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5e8:	e042      	b.n	800b670 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5ea:	4b24      	ldr	r3, [pc, #144]	; (800b67c <USBD_SetConfig+0x150>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d02a      	beq.n	800b64e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7fe ffc4 	bl	800a58e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b606:	4b1d      	ldr	r3, [pc, #116]	; (800b67c <USBD_SetConfig+0x150>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b610:	4b1a      	ldr	r3, [pc, #104]	; (800b67c <USBD_SetConfig+0x150>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fe ff9d 	bl	800a556 <USBD_SetClassConfig>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f918 	bl	800b85e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe ffa9 	bl	800a58e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b644:	e014      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f9d4 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b64c:	e010      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9d0 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b654:	e00c      	b.n	800b670 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f900 	bl	800b85e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <USBD_SetConfig+0x150>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7fe ff92 	bl	800a58e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	73fb      	strb	r3, [r7, #15]
      break;
 800b66e:	bf00      	nop
  }

  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200008a4 	.word	0x200008a4

0800b680 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	88db      	ldrh	r3, [r3, #6]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d004      	beq.n	800b69c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8e2 	bl	800b85e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b69a:	e023      	b.n	800b6e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	dc02      	bgt.n	800b6ae <USBD_GetConfig+0x2e>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dc03      	bgt.n	800b6b4 <USBD_GetConfig+0x34>
 800b6ac:	e015      	b.n	800b6da <USBD_GetConfig+0x5a>
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d00b      	beq.n	800b6ca <USBD_GetConfig+0x4a>
 800b6b2:	e012      	b.n	800b6da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f93c 	bl	800b940 <USBD_CtlSendData>
        break;
 800b6c8:	e00c      	b.n	800b6e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f934 	bl	800b940 <USBD_CtlSendData>
        break;
 800b6d8:	e004      	b.n	800b6e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f8be 	bl	800b85e <USBD_CtlError>
        break;
 800b6e2:	bf00      	nop
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	3b01      	subs	r3, #1
 800b700:	2b02      	cmp	r3, #2
 800b702:	d81e      	bhi.n	800b742 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	88db      	ldrh	r3, [r3, #6]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d004      	beq.n	800b716 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f8a5 	bl	800b85e <USBD_CtlError>
        break;
 800b714:	e01a      	b.n	800b74c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f043 0202 	orr.w	r2, r3, #2
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	330c      	adds	r3, #12
 800b736:	2202      	movs	r2, #2
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f900 	bl	800b940 <USBD_CtlSendData>
      break;
 800b740:	e004      	b.n	800b74c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f88a 	bl	800b85e <USBD_CtlError>
      break;
 800b74a:	bf00      	nop
  }
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	885b      	ldrh	r3, [r3, #2]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d107      	bne.n	800b776 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f940 	bl	800b9f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b774:	e013      	b.n	800b79e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	885b      	ldrh	r3, [r3, #2]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d10b      	bne.n	800b796 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	889b      	ldrh	r3, [r3, #4]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b29b      	uxth	r3, r3
 800b786:	b2da      	uxtb	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f930 	bl	800b9f4 <USBD_CtlSendStatus>
}
 800b794:	e003      	b.n	800b79e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f860 	bl	800b85e <USBD_CtlError>
}
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d80b      	bhi.n	800b7d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	885b      	ldrh	r3, [r3, #2]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d10c      	bne.n	800b7e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f910 	bl	800b9f4 <USBD_CtlSendStatus>
      }
      break;
 800b7d4:	e004      	b.n	800b7e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f840 	bl	800b85e <USBD_CtlError>
      break;
 800b7de:	e000      	b.n	800b7e2 <USBD_ClrFeature+0x3c>
      break;
 800b7e0:	bf00      	nop
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	781a      	ldrb	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff fa41 	bl	800ac9c <SWAPBYTE>
 800b81a:	4603      	mov	r3, r0
 800b81c:	461a      	mov	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3301      	adds	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fa34 	bl	800ac9c <SWAPBYTE>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3301      	adds	r3, #1
 800b846:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff fa27 	bl	800ac9c <SWAPBYTE>
 800b84e:	4603      	mov	r3, r0
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	80da      	strh	r2, [r3, #6]
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b868:	2180      	movs	r1, #128	; 0x80
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f003 fbf6 	bl	800f05c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b870:	2100      	movs	r1, #0
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f003 fbf2 	bl	800f05c <USBD_LL_StallEP>
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d036      	beq.n	800b904 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b89a:	6938      	ldr	r0, [r7, #16]
 800b89c:	f000 f836 	bl	800b90c <USBD_GetLen>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	7812      	ldrb	r2, [r2, #0]
 800b8b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8d0:	e013      	b.n	800b8fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	7812      	ldrb	r2, [r2, #0]
 800b8dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	613b      	str	r3, [r7, #16]
    idx++;
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e7      	bne.n	800b8d2 <USBD_GetString+0x52>
 800b902:	e000      	b.n	800b906 <USBD_GetString+0x86>
    return;
 800b904:	bf00      	nop
  }
}
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b91c:	e005      	b.n	800b92a <USBD_GetLen+0x1e>
  {
    len++;
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	3301      	adds	r3, #1
 800b922:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3301      	adds	r3, #1
 800b928:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1f5      	bne.n	800b91e <USBD_GetLen+0x12>
  }

  return len;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2202      	movs	r2, #2
 800b950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	2100      	movs	r1, #0
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f003 fc01 	bl	800f16e <USBD_LL_Transmit>

  return USBD_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	2100      	movs	r1, #0
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f003 fbf0 	bl	800f16e <USBD_LL_Transmit>

  return USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f003 fbf4 	bl	800f1b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b084      	sub	sp, #16
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f003 fbe3 	bl	800f1b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2204      	movs	r2, #4
 800ba00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba04:	2300      	movs	r3, #0
 800ba06:	2200      	movs	r2, #0
 800ba08:	2100      	movs	r1, #0
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f003 fbaf 	bl	800f16e <USBD_LL_Transmit>

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2205      	movs	r2, #5
 800ba26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f003 fbbd 	bl	800f1b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <__NVIC_SetPriority>:
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	4603      	mov	r3, r0
 800ba48:	6039      	str	r1, [r7, #0]
 800ba4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	db0a      	blt.n	800ba6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	490c      	ldr	r1, [pc, #48]	; (800ba8c <__NVIC_SetPriority+0x4c>)
 800ba5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba5e:	0112      	lsls	r2, r2, #4
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	440b      	add	r3, r1
 800ba64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ba68:	e00a      	b.n	800ba80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	b2da      	uxtb	r2, r3
 800ba6e:	4908      	ldr	r1, [pc, #32]	; (800ba90 <__NVIC_SetPriority+0x50>)
 800ba70:	79fb      	ldrb	r3, [r7, #7]
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	3b04      	subs	r3, #4
 800ba78:	0112      	lsls	r2, r2, #4
 800ba7a:	b2d2      	uxtb	r2, r2
 800ba7c:	440b      	add	r3, r1
 800ba7e:	761a      	strb	r2, [r3, #24]
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	e000e100 	.word	0xe000e100
 800ba90:	e000ed00 	.word	0xe000ed00

0800ba94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <SysTick_Handler+0x1c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba9c:	f001 feb2 	bl	800d804 <xTaskGetSchedulerState>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d001      	beq.n	800baaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800baa6:	f002 fc97 	bl	800e3d8 <xPortSysTickHandler>
  }
}
 800baaa:	bf00      	nop
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	e000e010 	.word	0xe000e010

0800bab4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bab8:	2100      	movs	r1, #0
 800baba:	f06f 0004 	mvn.w	r0, #4
 800babe:	f7ff ffbf 	bl	800ba40 <__NVIC_SetPriority>
#endif
}
 800bac2:	bf00      	nop
 800bac4:	bd80      	pop	{r7, pc}
	...

0800bac8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bace:	f3ef 8305 	mrs	r3, IPSR
 800bad2:	603b      	str	r3, [r7, #0]
  return(result);
 800bad4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bada:	f06f 0305 	mvn.w	r3, #5
 800bade:	607b      	str	r3, [r7, #4]
 800bae0:	e00c      	b.n	800bafc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bae2:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <osKernelInitialize+0x44>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d105      	bne.n	800baf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800baea:	4b08      	ldr	r3, [pc, #32]	; (800bb0c <osKernelInitialize+0x44>)
 800baec:	2201      	movs	r2, #1
 800baee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	607b      	str	r3, [r7, #4]
 800baf4:	e002      	b.n	800bafc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800baf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bafa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bafc:	687b      	ldr	r3, [r7, #4]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	200008a8 	.word	0x200008a8

0800bb10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb16:	f3ef 8305 	mrs	r3, IPSR
 800bb1a:	603b      	str	r3, [r7, #0]
  return(result);
 800bb1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bb22:	f06f 0305 	mvn.w	r3, #5
 800bb26:	607b      	str	r3, [r7, #4]
 800bb28:	e010      	b.n	800bb4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bb2a:	4b0b      	ldr	r3, [pc, #44]	; (800bb58 <osKernelStart+0x48>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d109      	bne.n	800bb46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb32:	f7ff ffbf 	bl	800bab4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bb36:	4b08      	ldr	r3, [pc, #32]	; (800bb58 <osKernelStart+0x48>)
 800bb38:	2202      	movs	r2, #2
 800bb3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb3c:	f001 fa1a 	bl	800cf74 <vTaskStartScheduler>
      stat = osOK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	607b      	str	r3, [r7, #4]
 800bb44:	e002      	b.n	800bb4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bb46:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb4c:	687b      	ldr	r3, [r7, #4]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	200008a8 	.word	0x200008a8

0800bb5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08e      	sub	sp, #56	; 0x38
 800bb60:	af04      	add	r7, sp, #16
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb6c:	f3ef 8305 	mrs	r3, IPSR
 800bb70:	617b      	str	r3, [r7, #20]
  return(result);
 800bb72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d17f      	bne.n	800bc78 <osThreadNew+0x11c>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d07c      	beq.n	800bc78 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800bb7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb82:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb84:	2318      	movs	r3, #24
 800bb86:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bb8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d045      	beq.n	800bc24 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <osThreadNew+0x4a>
        name = attr->name;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d002      	beq.n	800bbb4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d008      	beq.n	800bbcc <osThreadNew+0x70>
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	2b38      	cmp	r3, #56	; 0x38
 800bbbe:	d805      	bhi.n	800bbcc <osThreadNew+0x70>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f003 0301 	and.w	r3, r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <osThreadNew+0x74>
        return (NULL);
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e054      	b.n	800bc7a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	089b      	lsrs	r3, r3, #2
 800bbde:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00e      	beq.n	800bc06 <osThreadNew+0xaa>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	2b6b      	cmp	r3, #107	; 0x6b
 800bbee:	d90a      	bls.n	800bc06 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d006      	beq.n	800bc06 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <osThreadNew+0xaa>
        mem = 1;
 800bc00:	2301      	movs	r3, #1
 800bc02:	61bb      	str	r3, [r7, #24]
 800bc04:	e010      	b.n	800bc28 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10c      	bne.n	800bc28 <osThreadNew+0xcc>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d108      	bne.n	800bc28 <osThreadNew+0xcc>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d104      	bne.n	800bc28 <osThreadNew+0xcc>
          mem = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	e001      	b.n	800bc28 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d110      	bne.n	800bc50 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc36:	9202      	str	r2, [sp, #8]
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	6a3a      	ldr	r2, [r7, #32]
 800bc42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 feb9 	bl	800c9bc <xTaskCreateStatic>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	613b      	str	r3, [r7, #16]
 800bc4e:	e013      	b.n	800bc78 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d110      	bne.n	800bc78 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc56:	6a3b      	ldr	r3, [r7, #32]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	f107 0310 	add.w	r3, r7, #16
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 ff04 	bl	800ca76 <xTaskCreate>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d001      	beq.n	800bc78 <osThreadNew+0x11c>
            hTask = NULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc78:	693b      	ldr	r3, [r7, #16]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3728      	adds	r7, #40	; 0x28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc8a:	f3ef 8305 	mrs	r3, IPSR
 800bc8e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <osDelay+0x1c>
    stat = osErrorISR;
 800bc96:	f06f 0305 	mvn.w	r3, #5
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e007      	b.n	800bcae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <osDelay+0x2c>
      vTaskDelay(ticks);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f001 f829 	bl	800cd00 <vTaskDelay>
    }
  }

  return (stat);
 800bcae:	68fb      	ldr	r3, [r7, #12]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08a      	sub	sp, #40	; 0x28
 800bcbc:	af02      	add	r7, sp, #8
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcc8:	f3ef 8305 	mrs	r3, IPSR
 800bccc:	613b      	str	r3, [r7, #16]
  return(result);
 800bcce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d15f      	bne.n	800bd94 <osMessageQueueNew+0xdc>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d05c      	beq.n	800bd94 <osMessageQueueNew+0xdc>
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d059      	beq.n	800bd94 <osMessageQueueNew+0xdc>
    mem = -1;
 800bce0:	f04f 33ff 	mov.w	r3, #4294967295
 800bce4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d029      	beq.n	800bd40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d012      	beq.n	800bd1a <osMessageQueueNew+0x62>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	2b4f      	cmp	r3, #79	; 0x4f
 800bcfa:	d90e      	bls.n	800bd1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00a      	beq.n	800bd1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	695a      	ldr	r2, [r3, #20]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	68b9      	ldr	r1, [r7, #8]
 800bd0c:	fb01 f303 	mul.w	r3, r1, r3
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d302      	bcc.n	800bd1a <osMessageQueueNew+0x62>
        mem = 1;
 800bd14:	2301      	movs	r3, #1
 800bd16:	61bb      	str	r3, [r7, #24]
 800bd18:	e014      	b.n	800bd44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d110      	bne.n	800bd44 <osMessageQueueNew+0x8c>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10c      	bne.n	800bd44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d108      	bne.n	800bd44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d104      	bne.n	800bd44 <osMessageQueueNew+0x8c>
          mem = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	61bb      	str	r3, [r7, #24]
 800bd3e:	e001      	b.n	800bd44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d10b      	bne.n	800bd62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	691a      	ldr	r2, [r3, #16]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	2100      	movs	r1, #0
 800bd54:	9100      	str	r1, [sp, #0]
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 f971 	bl	800c040 <xQueueGenericCreateStatic>
 800bd5e:	61f8      	str	r0, [r7, #28]
 800bd60:	e008      	b.n	800bd74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d105      	bne.n	800bd74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bd68:	2200      	movs	r2, #0
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f000 f9df 	bl	800c130 <xQueueGenericCreate>
 800bd72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00c      	beq.n	800bd94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d003      	beq.n	800bd88 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	617b      	str	r3, [r7, #20]
 800bd86:	e001      	b.n	800bd8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bd8c:	6979      	ldr	r1, [r7, #20]
 800bd8e:	69f8      	ldr	r0, [r7, #28]
 800bd90:	f000 fdb6 	bl	800c900 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bd94:	69fb      	ldr	r3, [r7, #28]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3720      	adds	r7, #32
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
	...

0800bda0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a07      	ldr	r2, [pc, #28]	; (800bdcc <vApplicationGetIdleTaskMemory+0x2c>)
 800bdb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	4a06      	ldr	r2, [pc, #24]	; (800bdd0 <vApplicationGetIdleTaskMemory+0x30>)
 800bdb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdbe:	601a      	str	r2, [r3, #0]
}
 800bdc0:	bf00      	nop
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	200008ac 	.word	0x200008ac
 800bdd0:	20000918 	.word	0x20000918

0800bdd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4a07      	ldr	r2, [pc, #28]	; (800be00 <vApplicationGetTimerTaskMemory+0x2c>)
 800bde4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	4a06      	ldr	r2, [pc, #24]	; (800be04 <vApplicationGetTimerTaskMemory+0x30>)
 800bdea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdf2:	601a      	str	r2, [r3, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	20000d18 	.word	0x20000d18
 800be04:	20000d84 	.word	0x20000d84

0800be08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 0208 	add.w	r2, r3, #8
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f04f 32ff 	mov.w	r2, #4294967295
 800be20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f103 0208 	add.w	r2, r3, #8
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f103 0208 	add.w	r2, r3, #8
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be62:	b480      	push	{r7}
 800be64:	b085      	sub	sp, #20
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
}
 800be9e:	bf00      	nop
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beaa:	b480      	push	{r7}
 800beac:	b085      	sub	sp, #20
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec0:	d103      	bne.n	800beca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e00c      	b.n	800bee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3308      	adds	r3, #8
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e002      	b.n	800bed8 <vListInsert+0x2e>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d2f6      	bcs.n	800bed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	601a      	str	r2, [r3, #0]
}
 800bf10:	bf00      	nop
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	6892      	ldr	r2, [r2, #8]
 800bf32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6852      	ldr	r2, [r2, #4]
 800bf3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d103      	bne.n	800bf50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	1e5a      	subs	r2, r3, #1
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10a      	bne.n	800bf9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf9a:	f002 f98b 	bl	800e2b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfaa:	fb01 f303 	mul.w	r3, r1, r3
 800bfae:	441a      	add	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	68f9      	ldr	r1, [r7, #12]
 800bfce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfd0:	fb01 f303 	mul.w	r3, r1, r3
 800bfd4:	441a      	add	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	22ff      	movs	r2, #255	; 0xff
 800bfde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	22ff      	movs	r2, #255	; 0xff
 800bfe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d114      	bne.n	800c01a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01a      	beq.n	800c02e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3310      	adds	r3, #16
 800bffc:	4618      	mov	r0, r3
 800bffe:	f001 fa43 	bl	800d488 <xTaskRemoveFromEventList>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d012      	beq.n	800c02e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <xQueueGenericReset+0xcc>)
 800c00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c00e:	601a      	str	r2, [r3, #0]
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	e009      	b.n	800c02e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	3310      	adds	r3, #16
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff fef2 	bl	800be08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3324      	adds	r3, #36	; 0x24
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff feed 	bl	800be08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c02e:	f002 f971 	bl	800e314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c032:	2301      	movs	r3, #1
}
 800c034:	4618      	mov	r0, r3
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	e000ed04 	.word	0xe000ed04

0800c040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08e      	sub	sp, #56	; 0x38
 800c044:	af02      	add	r7, sp, #8
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10a      	bne.n	800c06a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c058:	f383 8811 	msr	BASEPRI, r3
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c066:	bf00      	nop
 800c068:	e7fe      	b.n	800c068 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10a      	bne.n	800c086 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c082:	bf00      	nop
 800c084:	e7fe      	b.n	800c084 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <xQueueGenericCreateStatic+0x52>
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <xQueueGenericCreateStatic+0x56>
 800c092:	2301      	movs	r3, #1
 800c094:	e000      	b.n	800c098 <xQueueGenericCreateStatic+0x58>
 800c096:	2300      	movs	r3, #0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10a      	bne.n	800c0b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	623b      	str	r3, [r7, #32]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d102      	bne.n	800c0be <xQueueGenericCreateStatic+0x7e>
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d101      	bne.n	800c0c2 <xQueueGenericCreateStatic+0x82>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e000      	b.n	800c0c4 <xQueueGenericCreateStatic+0x84>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10a      	bne.n	800c0de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	61fb      	str	r3, [r7, #28]
}
 800c0da:	bf00      	nop
 800c0dc:	e7fe      	b.n	800c0dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0de:	2350      	movs	r3, #80	; 0x50
 800c0e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b50      	cmp	r3, #80	; 0x50
 800c0e6:	d00a      	beq.n	800c0fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ec:	f383 8811 	msr	BASEPRI, r3
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	61bb      	str	r3, [r7, #24]
}
 800c0fa:	bf00      	nop
 800c0fc:	e7fe      	b.n	800c0fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c0fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00d      	beq.n	800c126 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c112:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	4613      	mov	r3, r2
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	68b9      	ldr	r1, [r7, #8]
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 f83f 	bl	800c1a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c128:	4618      	mov	r0, r3
 800c12a:	3730      	adds	r7, #48	; 0x30
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c130:	b580      	push	{r7, lr}
 800c132:	b08a      	sub	sp, #40	; 0x28
 800c134:	af02      	add	r7, sp, #8
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	4613      	mov	r3, r2
 800c13c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	613b      	str	r3, [r7, #16]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	fb02 f303 	mul.w	r3, r2, r3
 800c162:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	3350      	adds	r3, #80	; 0x50
 800c168:	4618      	mov	r0, r3
 800c16a:	f002 f9c5 	bl	800e4f8 <pvPortMalloc>
 800c16e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d011      	beq.n	800c19a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	3350      	adds	r3, #80	; 0x50
 800c17e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c188:	79fa      	ldrb	r2, [r7, #7]
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	4613      	mov	r3, r2
 800c190:	697a      	ldr	r2, [r7, #20]
 800c192:	68b9      	ldr	r1, [r7, #8]
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 f805 	bl	800c1a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c19a:	69bb      	ldr	r3, [r7, #24]
	}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3720      	adds	r7, #32
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
 800c1b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d103      	bne.n	800c1c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	69ba      	ldr	r2, [r7, #24]
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	e002      	b.n	800c1c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1d2:	2101      	movs	r1, #1
 800c1d4:	69b8      	ldr	r0, [r7, #24]
 800c1d6:	f7ff fecb 	bl	800bf70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	78fa      	ldrb	r2, [r7, #3]
 800c1de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1e2:	bf00      	nop
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08e      	sub	sp, #56	; 0x38
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <xQueueGenericSend+0x32>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c21a:	bf00      	nop
 800c21c:	e7fe      	b.n	800c21c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d103      	bne.n	800c22c <xQueueGenericSend+0x40>
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <xQueueGenericSend+0x44>
 800c22c:	2301      	movs	r3, #1
 800c22e:	e000      	b.n	800c232 <xQueueGenericSend+0x46>
 800c230:	2300      	movs	r3, #0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d10a      	bne.n	800c24c <xQueueGenericSend+0x60>
	__asm volatile
 800c236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23a:	f383 8811 	msr	BASEPRI, r3
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c248:	bf00      	nop
 800c24a:	e7fe      	b.n	800c24a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d103      	bne.n	800c25a <xQueueGenericSend+0x6e>
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c256:	2b01      	cmp	r3, #1
 800c258:	d101      	bne.n	800c25e <xQueueGenericSend+0x72>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e000      	b.n	800c260 <xQueueGenericSend+0x74>
 800c25e:	2300      	movs	r3, #0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10a      	bne.n	800c27a <xQueueGenericSend+0x8e>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	623b      	str	r3, [r7, #32]
}
 800c276:	bf00      	nop
 800c278:	e7fe      	b.n	800c278 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c27a:	f001 fac3 	bl	800d804 <xTaskGetSchedulerState>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d102      	bne.n	800c28a <xQueueGenericSend+0x9e>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d101      	bne.n	800c28e <xQueueGenericSend+0xa2>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e000      	b.n	800c290 <xQueueGenericSend+0xa4>
 800c28e:	2300      	movs	r3, #0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10a      	bne.n	800c2aa <xQueueGenericSend+0xbe>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	61fb      	str	r3, [r7, #28]
}
 800c2a6:	bf00      	nop
 800c2a8:	e7fe      	b.n	800c2a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2aa:	f002 f803 	bl	800e2b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d302      	bcc.n	800c2c0 <xQueueGenericSend+0xd4>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d129      	bne.n	800c314 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2c0:	683a      	ldr	r2, [r7, #0]
 800c2c2:	68b9      	ldr	r1, [r7, #8]
 800c2c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2c6:	f000 fa0b 	bl	800c6e0 <prvCopyDataToQueue>
 800c2ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d010      	beq.n	800c2f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d6:	3324      	adds	r3, #36	; 0x24
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f001 f8d5 	bl	800d488 <xTaskRemoveFromEventList>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d013      	beq.n	800c30c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2e4:	4b3f      	ldr	r3, [pc, #252]	; (800c3e4 <xQueueGenericSend+0x1f8>)
 800c2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	e00a      	b.n	800c30c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d007      	beq.n	800c30c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2fc:	4b39      	ldr	r3, [pc, #228]	; (800c3e4 <xQueueGenericSend+0x1f8>)
 800c2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c30c:	f002 f802 	bl	800e314 <vPortExitCritical>
				return pdPASS;
 800c310:	2301      	movs	r3, #1
 800c312:	e063      	b.n	800c3dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d103      	bne.n	800c322 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c31a:	f001 fffb 	bl	800e314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c31e:	2300      	movs	r3, #0
 800c320:	e05c      	b.n	800c3dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c328:	f107 0314 	add.w	r3, r7, #20
 800c32c:	4618      	mov	r0, r3
 800c32e:	f001 f90f 	bl	800d550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c332:	2301      	movs	r3, #1
 800c334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c336:	f001 ffed 	bl	800e314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c33a:	f000 fe81 	bl	800d040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c33e:	f001 ffb9 	bl	800e2b4 <vPortEnterCritical>
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c348:	b25b      	sxtb	r3, r3
 800c34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34e:	d103      	bne.n	800c358 <xQueueGenericSend+0x16c>
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	2200      	movs	r2, #0
 800c354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c35e:	b25b      	sxtb	r3, r3
 800c360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c364:	d103      	bne.n	800c36e <xQueueGenericSend+0x182>
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c36e:	f001 ffd1 	bl	800e314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c372:	1d3a      	adds	r2, r7, #4
 800c374:	f107 0314 	add.w	r3, r7, #20
 800c378:	4611      	mov	r1, r2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f001 f8fe 	bl	800d57c <xTaskCheckForTimeOut>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d124      	bne.n	800c3d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c388:	f000 faa2 	bl	800c8d0 <prvIsQueueFull>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d018      	beq.n	800c3c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	3310      	adds	r3, #16
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	4611      	mov	r1, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 f824 	bl	800d3e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3a2:	f000 fa2d 	bl	800c800 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3a6:	f000 fe59 	bl	800d05c <xTaskResumeAll>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f47f af7c 	bne.w	800c2aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <xQueueGenericSend+0x1f8>)
 800c3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b8:	601a      	str	r2, [r3, #0]
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	e772      	b.n	800c2aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3c6:	f000 fa1b 	bl	800c800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3ca:	f000 fe47 	bl	800d05c <xTaskResumeAll>
 800c3ce:	e76c      	b.n	800c2aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3d2:	f000 fa15 	bl	800c800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3d6:	f000 fe41 	bl	800d05c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3738      	adds	r7, #56	; 0x38
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	e000ed04 	.word	0xe000ed04

0800c3e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b090      	sub	sp, #64	; 0x40
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10a      	bne.n	800c416 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c412:	bf00      	nop
 800c414:	e7fe      	b.n	800c414 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d103      	bne.n	800c424 <xQueueGenericSendFromISR+0x3c>
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c420:	2b00      	cmp	r3, #0
 800c422:	d101      	bne.n	800c428 <xQueueGenericSendFromISR+0x40>
 800c424:	2301      	movs	r3, #1
 800c426:	e000      	b.n	800c42a <xQueueGenericSendFromISR+0x42>
 800c428:	2300      	movs	r3, #0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10a      	bne.n	800c444 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c440:	bf00      	nop
 800c442:	e7fe      	b.n	800c442 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	2b02      	cmp	r3, #2
 800c448:	d103      	bne.n	800c452 <xQueueGenericSendFromISR+0x6a>
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d101      	bne.n	800c456 <xQueueGenericSendFromISR+0x6e>
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <xQueueGenericSendFromISR+0x70>
 800c456:	2300      	movs	r3, #0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	623b      	str	r3, [r7, #32]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c472:	f002 f801 	bl	800e478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c476:	f3ef 8211 	mrs	r2, BASEPRI
 800c47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	61fa      	str	r2, [r7, #28]
 800c48c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c48e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c490:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d302      	bcc.n	800c4a4 <xQueueGenericSendFromISR+0xbc>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d12f      	bne.n	800c504 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	68b9      	ldr	r1, [r7, #8]
 800c4b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4ba:	f000 f911 	bl	800c6e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c6:	d112      	bne.n	800c4ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d016      	beq.n	800c4fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	3324      	adds	r3, #36	; 0x24
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 ffd7 	bl	800d488 <xTaskRemoveFromEventList>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00e      	beq.n	800c4fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00b      	beq.n	800c4fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	e007      	b.n	800c4fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	b25a      	sxtb	r2, r3
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4fe:	2301      	movs	r3, #1
 800c500:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c502:	e001      	b.n	800c508 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c504:	2300      	movs	r3, #0
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c512:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c516:	4618      	mov	r0, r3
 800c518:	3740      	adds	r7, #64	; 0x40
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08c      	sub	sp, #48	; 0x30
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c52c:	2300      	movs	r3, #0
 800c52e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10a      	bne.n	800c550 <xQueueReceive+0x30>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	623b      	str	r3, [r7, #32]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <xQueueReceive+0x3e>
 800c556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <xQueueReceive+0x42>
 800c55e:	2301      	movs	r3, #1
 800c560:	e000      	b.n	800c564 <xQueueReceive+0x44>
 800c562:	2300      	movs	r3, #0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10a      	bne.n	800c57e <xQueueReceive+0x5e>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	61fb      	str	r3, [r7, #28]
}
 800c57a:	bf00      	nop
 800c57c:	e7fe      	b.n	800c57c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c57e:	f001 f941 	bl	800d804 <xTaskGetSchedulerState>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <xQueueReceive+0x6e>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <xQueueReceive+0x72>
 800c58e:	2301      	movs	r3, #1
 800c590:	e000      	b.n	800c594 <xQueueReceive+0x74>
 800c592:	2300      	movs	r3, #0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10a      	bne.n	800c5ae <xQueueReceive+0x8e>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	61bb      	str	r3, [r7, #24]
}
 800c5aa:	bf00      	nop
 800c5ac:	e7fe      	b.n	800c5ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5ae:	f001 fe81 	bl	800e2b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d01f      	beq.n	800c5fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5be:	68b9      	ldr	r1, [r7, #8]
 800c5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5c2:	f000 f8f7 	bl	800c7b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c8:	1e5a      	subs	r2, r3, #1
 800c5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00f      	beq.n	800c5f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d8:	3310      	adds	r3, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 ff54 	bl	800d488 <xTaskRemoveFromEventList>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5e6:	4b3d      	ldr	r3, [pc, #244]	; (800c6dc <xQueueReceive+0x1bc>)
 800c5e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5f6:	f001 fe8d 	bl	800e314 <vPortExitCritical>
				return pdPASS;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e069      	b.n	800c6d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c604:	f001 fe86 	bl	800e314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c608:	2300      	movs	r3, #0
 800c60a:	e062      	b.n	800c6d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d106      	bne.n	800c620 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c612:	f107 0310 	add.w	r3, r7, #16
 800c616:	4618      	mov	r0, r3
 800c618:	f000 ff9a 	bl	800d550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c61c:	2301      	movs	r3, #1
 800c61e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c620:	f001 fe78 	bl	800e314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c624:	f000 fd0c 	bl	800d040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c628:	f001 fe44 	bl	800e2b4 <vPortEnterCritical>
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c632:	b25b      	sxtb	r3, r3
 800c634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c638:	d103      	bne.n	800c642 <xQueueReceive+0x122>
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c648:	b25b      	sxtb	r3, r3
 800c64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64e:	d103      	bne.n	800c658 <xQueueReceive+0x138>
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	2200      	movs	r2, #0
 800c654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c658:	f001 fe5c 	bl	800e314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c65c:	1d3a      	adds	r2, r7, #4
 800c65e:	f107 0310 	add.w	r3, r7, #16
 800c662:	4611      	mov	r1, r2
 800c664:	4618      	mov	r0, r3
 800c666:	f000 ff89 	bl	800d57c <xTaskCheckForTimeOut>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d123      	bne.n	800c6b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c672:	f000 f917 	bl	800c8a4 <prvIsQueueEmpty>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d017      	beq.n	800c6ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	3324      	adds	r3, #36	; 0x24
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f000 feaf 	bl	800d3e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c68a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c68c:	f000 f8b8 	bl	800c800 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c690:	f000 fce4 	bl	800d05c <xTaskResumeAll>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d189      	bne.n	800c5ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c69a:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <xQueueReceive+0x1bc>)
 800c69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	e780      	b.n	800c5ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ae:	f000 f8a7 	bl	800c800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6b2:	f000 fcd3 	bl	800d05c <xTaskResumeAll>
 800c6b6:	e77a      	b.n	800c5ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ba:	f000 f8a1 	bl	800c800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6be:	f000 fccd 	bl	800d05c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c4:	f000 f8ee 	bl	800c8a4 <prvIsQueueEmpty>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f43f af6f 	beq.w	800c5ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3730      	adds	r7, #48	; 0x30
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	e000ed04 	.word	0xe000ed04

0800c6e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10d      	bne.n	800c71a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d14d      	bne.n	800c7a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f898 	bl	800d840 <xTaskPriorityDisinherit>
 800c710:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2200      	movs	r2, #0
 800c716:	609a      	str	r2, [r3, #8]
 800c718:	e043      	b.n	800c7a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d119      	bne.n	800c754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6858      	ldr	r0, [r3, #4]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c728:	461a      	mov	r2, r3
 800c72a:	68b9      	ldr	r1, [r7, #8]
 800c72c:	f002 fdf2 	bl	800f314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c738:	441a      	add	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	429a      	cmp	r2, r3
 800c748:	d32b      	bcc.n	800c7a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	605a      	str	r2, [r3, #4]
 800c752:	e026      	b.n	800c7a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	68d8      	ldr	r0, [r3, #12]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75c:	461a      	mov	r2, r3
 800c75e:	68b9      	ldr	r1, [r7, #8]
 800c760:	f002 fdd8 	bl	800f314 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	68da      	ldr	r2, [r3, #12]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76c:	425b      	negs	r3, r3
 800c76e:	441a      	add	r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68da      	ldr	r2, [r3, #12]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d207      	bcs.n	800c790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	689a      	ldr	r2, [r3, #8]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c788:	425b      	negs	r3, r3
 800c78a:	441a      	add	r2, r3
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d105      	bne.n	800c7a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c7aa:	697b      	ldr	r3, [r7, #20]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3718      	adds	r7, #24
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d018      	beq.n	800c7f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	68da      	ldr	r2, [r3, #12]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ce:	441a      	add	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68da      	ldr	r2, [r3, #12]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d303      	bcc.n	800c7e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68d9      	ldr	r1, [r3, #12]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	6838      	ldr	r0, [r7, #0]
 800c7f4:	f002 fd8e 	bl	800f314 <memcpy>
	}
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c808:	f001 fd54 	bl	800e2b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c812:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c814:	e011      	b.n	800c83a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d012      	beq.n	800c844 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3324      	adds	r3, #36	; 0x24
 800c822:	4618      	mov	r0, r3
 800c824:	f000 fe30 	bl	800d488 <xTaskRemoveFromEventList>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c82e:	f000 ff07 	bl	800d640 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
 800c834:	3b01      	subs	r3, #1
 800c836:	b2db      	uxtb	r3, r3
 800c838:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	dce9      	bgt.n	800c816 <prvUnlockQueue+0x16>
 800c842:	e000      	b.n	800c846 <prvUnlockQueue+0x46>
					break;
 800c844:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	22ff      	movs	r2, #255	; 0xff
 800c84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c84e:	f001 fd61 	bl	800e314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c852:	f001 fd2f 	bl	800e2b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c85c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c85e:	e011      	b.n	800c884 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d012      	beq.n	800c88e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	3310      	adds	r3, #16
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 fe0b 	bl	800d488 <xTaskRemoveFromEventList>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c878:	f000 fee2 	bl	800d640 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
 800c87e:	3b01      	subs	r3, #1
 800c880:	b2db      	uxtb	r3, r3
 800c882:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	dce9      	bgt.n	800c860 <prvUnlockQueue+0x60>
 800c88c:	e000      	b.n	800c890 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c88e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	22ff      	movs	r2, #255	; 0xff
 800c894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c898:	f001 fd3c 	bl	800e314 <vPortExitCritical>
}
 800c89c:	bf00      	nop
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8ac:	f001 fd02 	bl	800e2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d102      	bne.n	800c8be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	e001      	b.n	800c8c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8c2:	f001 fd27 	bl	800e314 <vPortExitCritical>

	return xReturn;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8d8:	f001 fcec 	bl	800e2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d102      	bne.n	800c8ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	e001      	b.n	800c8f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8f2:	f001 fd0f 	bl	800e314 <vPortExitCritical>

	return xReturn;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c90a:	2300      	movs	r3, #0
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e014      	b.n	800c93a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c910:	4a0f      	ldr	r2, [pc, #60]	; (800c950 <vQueueAddToRegistry+0x50>)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10b      	bne.n	800c934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c91c:	490c      	ldr	r1, [pc, #48]	; (800c950 <vQueueAddToRegistry+0x50>)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c926:	4a0a      	ldr	r2, [pc, #40]	; (800c950 <vQueueAddToRegistry+0x50>)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	4413      	add	r3, r2
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c932:	e006      	b.n	800c942 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3301      	adds	r3, #1
 800c938:	60fb      	str	r3, [r7, #12]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b07      	cmp	r3, #7
 800c93e:	d9e7      	bls.n	800c910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	20001584 	.word	0x20001584

0800c954 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c964:	f001 fca6 	bl	800e2b4 <vPortEnterCritical>
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c96e:	b25b      	sxtb	r3, r3
 800c970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c974:	d103      	bne.n	800c97e <vQueueWaitForMessageRestricted+0x2a>
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c984:	b25b      	sxtb	r3, r3
 800c986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98a:	d103      	bne.n	800c994 <vQueueWaitForMessageRestricted+0x40>
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c994:	f001 fcbe 	bl	800e314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d106      	bne.n	800c9ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	3324      	adds	r3, #36	; 0x24
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	68b9      	ldr	r1, [r7, #8]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 fd41 	bl	800d430 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9ae:	6978      	ldr	r0, [r7, #20]
 800c9b0:	f7ff ff26 	bl	800c800 <prvUnlockQueue>
	}
 800c9b4:	bf00      	nop
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08e      	sub	sp, #56	; 0x38
 800c9c0:	af04      	add	r7, sp, #16
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10a      	bne.n	800c9e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	623b      	str	r3, [r7, #32]
}
 800c9e2:	bf00      	nop
 800c9e4:	e7fe      	b.n	800c9e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10a      	bne.n	800ca02 <xTaskCreateStatic+0x46>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	61fb      	str	r3, [r7, #28]
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca02:	236c      	movs	r3, #108	; 0x6c
 800ca04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2b6c      	cmp	r3, #108	; 0x6c
 800ca0a:	d00a      	beq.n	800ca22 <xTaskCreateStatic+0x66>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	61bb      	str	r3, [r7, #24]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d01e      	beq.n	800ca68 <xTaskCreateStatic+0xac>
 800ca2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d01b      	beq.n	800ca68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	2202      	movs	r2, #2
 800ca3e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca42:	2300      	movs	r3, #0
 800ca44:	9303      	str	r3, [sp, #12]
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	9302      	str	r3, [sp, #8]
 800ca4a:	f107 0314 	add.w	r3, r7, #20
 800ca4e:	9301      	str	r3, [sp, #4]
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	68b9      	ldr	r1, [r7, #8]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 f850 	bl	800cb00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca62:	f000 f8dd 	bl	800cc20 <prvAddNewTaskToReadyList>
 800ca66:	e001      	b.n	800ca6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca6c:	697b      	ldr	r3, [r7, #20]
	}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3728      	adds	r7, #40	; 0x28
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b08c      	sub	sp, #48	; 0x30
 800ca7a:	af04      	add	r7, sp, #16
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	60b9      	str	r1, [r7, #8]
 800ca80:	603b      	str	r3, [r7, #0]
 800ca82:	4613      	mov	r3, r2
 800ca84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca86:	88fb      	ldrh	r3, [r7, #6]
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f001 fd34 	bl	800e4f8 <pvPortMalloc>
 800ca90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00e      	beq.n	800cab6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca98:	206c      	movs	r0, #108	; 0x6c
 800ca9a:	f001 fd2d 	bl	800e4f8 <pvPortMalloc>
 800ca9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	697a      	ldr	r2, [r7, #20]
 800caaa:	631a      	str	r2, [r3, #48]	; 0x30
 800caac:	e005      	b.n	800caba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800caae:	6978      	ldr	r0, [r7, #20]
 800cab0:	f001 fdee 	bl	800e690 <vPortFree>
 800cab4:	e001      	b.n	800caba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d017      	beq.n	800caf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cac8:	88fa      	ldrh	r2, [r7, #6]
 800caca:	2300      	movs	r3, #0
 800cacc:	9303      	str	r3, [sp, #12]
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	9302      	str	r3, [sp, #8]
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	9301      	str	r3, [sp, #4]
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f000 f80e 	bl	800cb00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cae4:	69f8      	ldr	r0, [r7, #28]
 800cae6:	f000 f89b 	bl	800cc20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800caea:	2301      	movs	r3, #1
 800caec:	61bb      	str	r3, [r7, #24]
 800caee:	e002      	b.n	800caf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800caf0:	f04f 33ff 	mov.w	r3, #4294967295
 800caf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800caf6:	69bb      	ldr	r3, [r7, #24]
	}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3720      	adds	r7, #32
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	461a      	mov	r2, r3
 800cb18:	21a5      	movs	r1, #165	; 0xa5
 800cb1a:	f002 fc09 	bl	800f330 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	f023 0307 	bic.w	r3, r3, #7
 800cb36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	f003 0307 	and.w	r3, r3, #7
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00a      	beq.n	800cb58 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	617b      	str	r3, [r7, #20]
}
 800cb54:	bf00      	nop
 800cb56:	e7fe      	b.n	800cb56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d01f      	beq.n	800cb9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb5e:	2300      	movs	r3, #0
 800cb60:	61fb      	str	r3, [r7, #28]
 800cb62:	e012      	b.n	800cb8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	4413      	add	r3, r2
 800cb6a:	7819      	ldrb	r1, [r3, #0]
 800cb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	4413      	add	r3, r2
 800cb72:	3334      	adds	r3, #52	; 0x34
 800cb74:	460a      	mov	r2, r1
 800cb76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d006      	beq.n	800cb92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	3301      	adds	r3, #1
 800cb88:	61fb      	str	r3, [r7, #28]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	2b1d      	cmp	r3, #29
 800cb8e:	d9e9      	bls.n	800cb64 <prvInitialiseNewTask+0x64>
 800cb90:	e000      	b.n	800cb94 <prvInitialiseNewTask+0x94>
			{
				break;
 800cb92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800cb9c:	e003      	b.n	800cba6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	2b37      	cmp	r3, #55	; 0x37
 800cbaa:	d901      	bls.n	800cbb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbac:	2337      	movs	r3, #55	; 0x37
 800cbae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbba:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7ff f93e 	bl	800be48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	3318      	adds	r3, #24
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff f939 	bl	800be48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	2200      	movs	r2, #0
 800cbf0:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	68f9      	ldr	r1, [r7, #12]
 800cbfe:	69b8      	ldr	r0, [r7, #24]
 800cc00:	f001 fa2e 	bl	800e060 <pxPortInitialiseStack>
 800cc04:	4602      	mov	r2, r0
 800cc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d002      	beq.n	800cc16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc16:	bf00      	nop
 800cc18:	3720      	adds	r7, #32
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
	...

0800cc20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc28:	f001 fb44 	bl	800e2b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc2c:	4b2d      	ldr	r3, [pc, #180]	; (800cce4 <prvAddNewTaskToReadyList+0xc4>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3301      	adds	r3, #1
 800cc32:	4a2c      	ldr	r2, [pc, #176]	; (800cce4 <prvAddNewTaskToReadyList+0xc4>)
 800cc34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc36:	4b2c      	ldr	r3, [pc, #176]	; (800cce8 <prvAddNewTaskToReadyList+0xc8>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d109      	bne.n	800cc52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc3e:	4a2a      	ldr	r2, [pc, #168]	; (800cce8 <prvAddNewTaskToReadyList+0xc8>)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc44:	4b27      	ldr	r3, [pc, #156]	; (800cce4 <prvAddNewTaskToReadyList+0xc4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d110      	bne.n	800cc6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc4c:	f000 fd1c 	bl	800d688 <prvInitialiseTaskLists>
 800cc50:	e00d      	b.n	800cc6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc52:	4b26      	ldr	r3, [pc, #152]	; (800ccec <prvAddNewTaskToReadyList+0xcc>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d109      	bne.n	800cc6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc5a:	4b23      	ldr	r3, [pc, #140]	; (800cce8 <prvAddNewTaskToReadyList+0xc8>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d802      	bhi.n	800cc6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc68:	4a1f      	ldr	r2, [pc, #124]	; (800cce8 <prvAddNewTaskToReadyList+0xc8>)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc6e:	4b20      	ldr	r3, [pc, #128]	; (800ccf0 <prvAddNewTaskToReadyList+0xd0>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3301      	adds	r3, #1
 800cc74:	4a1e      	ldr	r2, [pc, #120]	; (800ccf0 <prvAddNewTaskToReadyList+0xd0>)
 800cc76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc78:	4b1d      	ldr	r3, [pc, #116]	; (800ccf0 <prvAddNewTaskToReadyList+0xd0>)
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc84:	4b1b      	ldr	r3, [pc, #108]	; (800ccf4 <prvAddNewTaskToReadyList+0xd4>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d903      	bls.n	800cc94 <prvAddNewTaskToReadyList+0x74>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc90:	4a18      	ldr	r2, [pc, #96]	; (800ccf4 <prvAddNewTaskToReadyList+0xd4>)
 800cc92:	6013      	str	r3, [r2, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	4613      	mov	r3, r2
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <prvAddNewTaskToReadyList+0xd8>)
 800cca2:	441a      	add	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3304      	adds	r3, #4
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4610      	mov	r0, r2
 800ccac:	f7ff f8d9 	bl	800be62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ccb0:	f001 fb30 	bl	800e314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccb4:	4b0d      	ldr	r3, [pc, #52]	; (800ccec <prvAddNewTaskToReadyList+0xcc>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00e      	beq.n	800ccda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccbc:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <prvAddNewTaskToReadyList+0xc8>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d207      	bcs.n	800ccda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ccca:	4b0c      	ldr	r3, [pc, #48]	; (800ccfc <prvAddNewTaskToReadyList+0xdc>)
 800cccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccda:	bf00      	nop
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	20001a98 	.word	0x20001a98
 800cce8:	200015c4 	.word	0x200015c4
 800ccec:	20001aa4 	.word	0x20001aa4
 800ccf0:	20001ab4 	.word	0x20001ab4
 800ccf4:	20001aa0 	.word	0x20001aa0
 800ccf8:	200015c8 	.word	0x200015c8
 800ccfc:	e000ed04 	.word	0xe000ed04

0800cd00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d017      	beq.n	800cd42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd12:	4b13      	ldr	r3, [pc, #76]	; (800cd60 <vTaskDelay+0x60>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00a      	beq.n	800cd30 <vTaskDelay+0x30>
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	60bb      	str	r3, [r7, #8]
}
 800cd2c:	bf00      	nop
 800cd2e:	e7fe      	b.n	800cd2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd30:	f000 f986 	bl	800d040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd34:	2100      	movs	r1, #0
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fdf0 	bl	800d91c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd3c:	f000 f98e 	bl	800d05c <xTaskResumeAll>
 800cd40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d107      	bne.n	800cd58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd48:	4b06      	ldr	r3, [pc, #24]	; (800cd64 <vTaskDelay+0x64>)
 800cd4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd58:	bf00      	nop
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20001ac0 	.word	0x20001ac0
 800cd64:	e000ed04 	.word	0xe000ed04

0800cd68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cd70:	f001 faa0 	bl	800e2b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d102      	bne.n	800cd80 <vTaskSuspend+0x18>
 800cd7a:	4b30      	ldr	r3, [pc, #192]	; (800ce3c <vTaskSuspend+0xd4>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	e000      	b.n	800cd82 <vTaskSuspend+0x1a>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7ff f8c7 	bl	800bf1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d004      	beq.n	800cda0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3318      	adds	r3, #24
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff f8be 	bl	800bf1c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	4826      	ldr	r0, [pc, #152]	; (800ce40 <vTaskSuspend+0xd8>)
 800cda8:	f7ff f85b 	bl	800be62 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d103      	bne.n	800cdc0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800cdc0:	f001 faa8 	bl	800e314 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800cdc4:	4b1f      	ldr	r3, [pc, #124]	; (800ce44 <vTaskSuspend+0xdc>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d005      	beq.n	800cdd8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800cdcc:	f001 fa72 	bl	800e2b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800cdd0:	f000 fcf8 	bl	800d7c4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800cdd4:	f001 fa9e 	bl	800e314 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800cdd8:	4b18      	ldr	r3, [pc, #96]	; (800ce3c <vTaskSuspend+0xd4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d127      	bne.n	800ce32 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800cde2:	4b18      	ldr	r3, [pc, #96]	; (800ce44 <vTaskSuspend+0xdc>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d017      	beq.n	800ce1a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800cdea:	4b17      	ldr	r3, [pc, #92]	; (800ce48 <vTaskSuspend+0xe0>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00a      	beq.n	800ce08 <vTaskSuspend+0xa0>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	60bb      	str	r3, [r7, #8]
}
 800ce04:	bf00      	nop
 800ce06:	e7fe      	b.n	800ce06 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ce08:	4b10      	ldr	r3, [pc, #64]	; (800ce4c <vTaskSuspend+0xe4>)
 800ce0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce18:	e00b      	b.n	800ce32 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ce1a:	4b09      	ldr	r3, [pc, #36]	; (800ce40 <vTaskSuspend+0xd8>)
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <vTaskSuspend+0xe8>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d103      	bne.n	800ce2e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ce26:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <vTaskSuspend+0xd4>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
	}
 800ce2c:	e001      	b.n	800ce32 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ce2e:	f000 fa7d 	bl	800d32c <vTaskSwitchContext>
	}
 800ce32:	bf00      	nop
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	200015c4 	.word	0x200015c4
 800ce40:	20001a84 	.word	0x20001a84
 800ce44:	20001aa4 	.word	0x20001aa4
 800ce48:	20001ac0 	.word	0x20001ac0
 800ce4c:	e000ed04 	.word	0xe000ed04
 800ce50:	20001a98 	.word	0x20001a98

0800ce54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ce54:	b480      	push	{r7}
 800ce56:	b087      	sub	sp, #28
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	60fb      	str	r3, [r7, #12]
}
 800ce7c:	bf00      	nop
 800ce7e:	e7fe      	b.n	800ce7e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	695b      	ldr	r3, [r3, #20]
 800ce84:	4a0a      	ldr	r2, [pc, #40]	; (800ceb0 <prvTaskIsTaskSuspended+0x5c>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d10a      	bne.n	800cea0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8e:	4a09      	ldr	r2, [pc, #36]	; (800ceb4 <prvTaskIsTaskSuspended+0x60>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d005      	beq.n	800cea0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cea0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800cea2:	4618      	mov	r0, r3
 800cea4:	371c      	adds	r7, #28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20001a84 	.word	0x20001a84
 800ceb4:	20001a58 	.word	0x20001a58

0800ceb8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10a      	bne.n	800cee0 <vTaskResume+0x28>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	60bb      	str	r3, [r7, #8]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800cee0:	4b20      	ldr	r3, [pc, #128]	; (800cf64 <vTaskResume+0xac>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d038      	beq.n	800cf5c <vTaskResume+0xa4>
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d035      	beq.n	800cf5c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800cef0:	f001 f9e0 	bl	800e2b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7ff ffad 	bl	800ce54 <prvTaskIsTaskSuspended>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d02b      	beq.n	800cf58 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	3304      	adds	r3, #4
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff f809 	bl	800bf1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf0e:	4b16      	ldr	r3, [pc, #88]	; (800cf68 <vTaskResume+0xb0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d903      	bls.n	800cf1e <vTaskResume+0x66>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1a:	4a13      	ldr	r2, [pc, #76]	; (800cf68 <vTaskResume+0xb0>)
 800cf1c:	6013      	str	r3, [r2, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4a10      	ldr	r2, [pc, #64]	; (800cf6c <vTaskResume+0xb4>)
 800cf2c:	441a      	add	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	3304      	adds	r3, #4
 800cf32:	4619      	mov	r1, r3
 800cf34:	4610      	mov	r0, r2
 800cf36:	f7fe ff94 	bl	800be62 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3e:	4b09      	ldr	r3, [pc, #36]	; (800cf64 <vTaskResume+0xac>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d307      	bcc.n	800cf58 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800cf48:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <vTaskResume+0xb8>)
 800cf4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf4e:	601a      	str	r2, [r3, #0]
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800cf58:	f001 f9dc 	bl	800e314 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf5c:	bf00      	nop
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	200015c4 	.word	0x200015c4
 800cf68:	20001aa0 	.word	0x20001aa0
 800cf6c:	200015c8 	.word	0x200015c8
 800cf70:	e000ed04 	.word	0xe000ed04

0800cf74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08a      	sub	sp, #40	; 0x28
 800cf78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf82:	463a      	mov	r2, r7
 800cf84:	1d39      	adds	r1, r7, #4
 800cf86:	f107 0308 	add.w	r3, r7, #8
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe ff08 	bl	800bda0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	9202      	str	r2, [sp, #8]
 800cf98:	9301      	str	r3, [sp, #4]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	460a      	mov	r2, r1
 800cfa2:	4921      	ldr	r1, [pc, #132]	; (800d028 <vTaskStartScheduler+0xb4>)
 800cfa4:	4821      	ldr	r0, [pc, #132]	; (800d02c <vTaskStartScheduler+0xb8>)
 800cfa6:	f7ff fd09 	bl	800c9bc <xTaskCreateStatic>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	4a20      	ldr	r2, [pc, #128]	; (800d030 <vTaskStartScheduler+0xbc>)
 800cfae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfb0:	4b1f      	ldr	r3, [pc, #124]	; (800d030 <vTaskStartScheduler+0xbc>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
 800cfbc:	e001      	b.n	800cfc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d102      	bne.n	800cfce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cfc8:	f000 fcfc 	bl	800d9c4 <xTimerCreateTimerTask>
 800cfcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d116      	bne.n	800d002 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	613b      	str	r3, [r7, #16]
}
 800cfe6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfe8:	4b12      	ldr	r3, [pc, #72]	; (800d034 <vTaskStartScheduler+0xc0>)
 800cfea:	f04f 32ff 	mov.w	r2, #4294967295
 800cfee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cff0:	4b11      	ldr	r3, [pc, #68]	; (800d038 <vTaskStartScheduler+0xc4>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cff6:	4b11      	ldr	r3, [pc, #68]	; (800d03c <vTaskStartScheduler+0xc8>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cffc:	f001 f8b8 	bl	800e170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d000:	e00e      	b.n	800d020 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d008:	d10a      	bne.n	800d020 <vTaskStartScheduler+0xac>
	__asm volatile
 800d00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	60fb      	str	r3, [r7, #12]
}
 800d01c:	bf00      	nop
 800d01e:	e7fe      	b.n	800d01e <vTaskStartScheduler+0xaa>
}
 800d020:	bf00      	nop
 800d022:	3718      	adds	r7, #24
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	0800ff30 	.word	0x0800ff30
 800d02c:	0800d659 	.word	0x0800d659
 800d030:	20001abc 	.word	0x20001abc
 800d034:	20001ab8 	.word	0x20001ab8
 800d038:	20001aa4 	.word	0x20001aa4
 800d03c:	20001a9c 	.word	0x20001a9c

0800d040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d040:	b480      	push	{r7}
 800d042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d044:	4b04      	ldr	r3, [pc, #16]	; (800d058 <vTaskSuspendAll+0x18>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3301      	adds	r3, #1
 800d04a:	4a03      	ldr	r2, [pc, #12]	; (800d058 <vTaskSuspendAll+0x18>)
 800d04c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d04e:	bf00      	nop
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	20001ac0 	.word	0x20001ac0

0800d05c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d062:	2300      	movs	r3, #0
 800d064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d066:	2300      	movs	r3, #0
 800d068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d06a:	4b42      	ldr	r3, [pc, #264]	; (800d174 <xTaskResumeAll+0x118>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10a      	bne.n	800d088 <xTaskResumeAll+0x2c>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	603b      	str	r3, [r7, #0]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d088:	f001 f914 	bl	800e2b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d08c:	4b39      	ldr	r3, [pc, #228]	; (800d174 <xTaskResumeAll+0x118>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3b01      	subs	r3, #1
 800d092:	4a38      	ldr	r2, [pc, #224]	; (800d174 <xTaskResumeAll+0x118>)
 800d094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d096:	4b37      	ldr	r3, [pc, #220]	; (800d174 <xTaskResumeAll+0x118>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d162      	bne.n	800d164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d09e:	4b36      	ldr	r3, [pc, #216]	; (800d178 <xTaskResumeAll+0x11c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d05e      	beq.n	800d164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0a6:	e02f      	b.n	800d108 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a8:	4b34      	ldr	r3, [pc, #208]	; (800d17c <xTaskResumeAll+0x120>)
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3318      	adds	r3, #24
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe ff31 	bl	800bf1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe ff2c 	bl	800bf1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c8:	4b2d      	ldr	r3, [pc, #180]	; (800d180 <xTaskResumeAll+0x124>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d903      	bls.n	800d0d8 <xTaskResumeAll+0x7c>
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d4:	4a2a      	ldr	r2, [pc, #168]	; (800d180 <xTaskResumeAll+0x124>)
 800d0d6:	6013      	str	r3, [r2, #0]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0dc:	4613      	mov	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	4413      	add	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4a27      	ldr	r2, [pc, #156]	; (800d184 <xTaskResumeAll+0x128>)
 800d0e6:	441a      	add	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	4610      	mov	r0, r2
 800d0f0:	f7fe feb7 	bl	800be62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f8:	4b23      	ldr	r3, [pc, #140]	; (800d188 <xTaskResumeAll+0x12c>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d302      	bcc.n	800d108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d102:	4b22      	ldr	r3, [pc, #136]	; (800d18c <xTaskResumeAll+0x130>)
 800d104:	2201      	movs	r2, #1
 800d106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d108:	4b1c      	ldr	r3, [pc, #112]	; (800d17c <xTaskResumeAll+0x120>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1cb      	bne.n	800d0a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d116:	f000 fb55 	bl	800d7c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d11a:	4b1d      	ldr	r3, [pc, #116]	; (800d190 <xTaskResumeAll+0x134>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d010      	beq.n	800d148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d126:	f000 f847 	bl	800d1b8 <xTaskIncrementTick>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d130:	4b16      	ldr	r3, [pc, #88]	; (800d18c <xTaskResumeAll+0x130>)
 800d132:	2201      	movs	r2, #1
 800d134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	3b01      	subs	r3, #1
 800d13a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1f1      	bne.n	800d126 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d142:	4b13      	ldr	r3, [pc, #76]	; (800d190 <xTaskResumeAll+0x134>)
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d148:	4b10      	ldr	r3, [pc, #64]	; (800d18c <xTaskResumeAll+0x130>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d009      	beq.n	800d164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d150:	2301      	movs	r3, #1
 800d152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d154:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <xTaskResumeAll+0x138>)
 800d156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d15a:	601a      	str	r2, [r3, #0]
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d164:	f001 f8d6 	bl	800e314 <vPortExitCritical>

	return xAlreadyYielded;
 800d168:	68bb      	ldr	r3, [r7, #8]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	20001ac0 	.word	0x20001ac0
 800d178:	20001a98 	.word	0x20001a98
 800d17c:	20001a58 	.word	0x20001a58
 800d180:	20001aa0 	.word	0x20001aa0
 800d184:	200015c8 	.word	0x200015c8
 800d188:	200015c4 	.word	0x200015c4
 800d18c:	20001aac 	.word	0x20001aac
 800d190:	20001aa8 	.word	0x20001aa8
 800d194:	e000ed04 	.word	0xe000ed04

0800d198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d19e:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <xTaskGetTickCount+0x1c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1a4:	687b      	ldr	r3, [r7, #4]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	20001a9c 	.word	0x20001a9c

0800d1b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1c2:	4b4f      	ldr	r3, [pc, #316]	; (800d300 <xTaskIncrementTick+0x148>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f040 808f 	bne.w	800d2ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1cc:	4b4d      	ldr	r3, [pc, #308]	; (800d304 <xTaskIncrementTick+0x14c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1d4:	4a4b      	ldr	r2, [pc, #300]	; (800d304 <xTaskIncrementTick+0x14c>)
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d120      	bne.n	800d222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1e0:	4b49      	ldr	r3, [pc, #292]	; (800d308 <xTaskIncrementTick+0x150>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00a      	beq.n	800d200 <xTaskIncrementTick+0x48>
	__asm volatile
 800d1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ee:	f383 8811 	msr	BASEPRI, r3
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	603b      	str	r3, [r7, #0]
}
 800d1fc:	bf00      	nop
 800d1fe:	e7fe      	b.n	800d1fe <xTaskIncrementTick+0x46>
 800d200:	4b41      	ldr	r3, [pc, #260]	; (800d308 <xTaskIncrementTick+0x150>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	60fb      	str	r3, [r7, #12]
 800d206:	4b41      	ldr	r3, [pc, #260]	; (800d30c <xTaskIncrementTick+0x154>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a3f      	ldr	r2, [pc, #252]	; (800d308 <xTaskIncrementTick+0x150>)
 800d20c:	6013      	str	r3, [r2, #0]
 800d20e:	4a3f      	ldr	r2, [pc, #252]	; (800d30c <xTaskIncrementTick+0x154>)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	4b3e      	ldr	r3, [pc, #248]	; (800d310 <xTaskIncrementTick+0x158>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3301      	adds	r3, #1
 800d21a:	4a3d      	ldr	r2, [pc, #244]	; (800d310 <xTaskIncrementTick+0x158>)
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	f000 fad1 	bl	800d7c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d222:	4b3c      	ldr	r3, [pc, #240]	; (800d314 <xTaskIncrementTick+0x15c>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d349      	bcc.n	800d2c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d22c:	4b36      	ldr	r3, [pc, #216]	; (800d308 <xTaskIncrementTick+0x150>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d104      	bne.n	800d240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d236:	4b37      	ldr	r3, [pc, #220]	; (800d314 <xTaskIncrementTick+0x15c>)
 800d238:	f04f 32ff 	mov.w	r2, #4294967295
 800d23c:	601a      	str	r2, [r3, #0]
					break;
 800d23e:	e03f      	b.n	800d2c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d240:	4b31      	ldr	r3, [pc, #196]	; (800d308 <xTaskIncrementTick+0x150>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d250:	693a      	ldr	r2, [r7, #16]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	429a      	cmp	r2, r3
 800d256:	d203      	bcs.n	800d260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d258:	4a2e      	ldr	r2, [pc, #184]	; (800d314 <xTaskIncrementTick+0x15c>)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d25e:	e02f      	b.n	800d2c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	3304      	adds	r3, #4
 800d264:	4618      	mov	r0, r3
 800d266:	f7fe fe59 	bl	800bf1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	3318      	adds	r3, #24
 800d276:	4618      	mov	r0, r3
 800d278:	f7fe fe50 	bl	800bf1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d280:	4b25      	ldr	r3, [pc, #148]	; (800d318 <xTaskIncrementTick+0x160>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	429a      	cmp	r2, r3
 800d286:	d903      	bls.n	800d290 <xTaskIncrementTick+0xd8>
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28c:	4a22      	ldr	r2, [pc, #136]	; (800d318 <xTaskIncrementTick+0x160>)
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4a1f      	ldr	r2, [pc, #124]	; (800d31c <xTaskIncrementTick+0x164>)
 800d29e:	441a      	add	r2, r3
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	3304      	adds	r3, #4
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	4610      	mov	r0, r2
 800d2a8:	f7fe fddb 	bl	800be62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b0:	4b1b      	ldr	r3, [pc, #108]	; (800d320 <xTaskIncrementTick+0x168>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d3b8      	bcc.n	800d22c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2be:	e7b5      	b.n	800d22c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2c0:	4b17      	ldr	r3, [pc, #92]	; (800d320 <xTaskIncrementTick+0x168>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c6:	4915      	ldr	r1, [pc, #84]	; (800d31c <xTaskIncrementTick+0x164>)
 800d2c8:	4613      	mov	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4413      	add	r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	440b      	add	r3, r1
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d901      	bls.n	800d2dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2dc:	4b11      	ldr	r3, [pc, #68]	; (800d324 <xTaskIncrementTick+0x16c>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d007      	beq.n	800d2f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	e004      	b.n	800d2f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d2ea:	4b0f      	ldr	r3, [pc, #60]	; (800d328 <xTaskIncrementTick+0x170>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	4a0d      	ldr	r2, [pc, #52]	; (800d328 <xTaskIncrementTick+0x170>)
 800d2f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d2f4:	697b      	ldr	r3, [r7, #20]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20001ac0 	.word	0x20001ac0
 800d304:	20001a9c 	.word	0x20001a9c
 800d308:	20001a50 	.word	0x20001a50
 800d30c:	20001a54 	.word	0x20001a54
 800d310:	20001ab0 	.word	0x20001ab0
 800d314:	20001ab8 	.word	0x20001ab8
 800d318:	20001aa0 	.word	0x20001aa0
 800d31c:	200015c8 	.word	0x200015c8
 800d320:	200015c4 	.word	0x200015c4
 800d324:	20001aac 	.word	0x20001aac
 800d328:	20001aa8 	.word	0x20001aa8

0800d32c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d332:	4b28      	ldr	r3, [pc, #160]	; (800d3d4 <vTaskSwitchContext+0xa8>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d33a:	4b27      	ldr	r3, [pc, #156]	; (800d3d8 <vTaskSwitchContext+0xac>)
 800d33c:	2201      	movs	r2, #1
 800d33e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d340:	e041      	b.n	800d3c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d342:	4b25      	ldr	r3, [pc, #148]	; (800d3d8 <vTaskSwitchContext+0xac>)
 800d344:	2200      	movs	r2, #0
 800d346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d348:	4b24      	ldr	r3, [pc, #144]	; (800d3dc <vTaskSwitchContext+0xb0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	60fb      	str	r3, [r7, #12]
 800d34e:	e010      	b.n	800d372 <vTaskSwitchContext+0x46>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d10a      	bne.n	800d36c <vTaskSwitchContext+0x40>
	__asm volatile
 800d356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	607b      	str	r3, [r7, #4]
}
 800d368:	bf00      	nop
 800d36a:	e7fe      	b.n	800d36a <vTaskSwitchContext+0x3e>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	3b01      	subs	r3, #1
 800d370:	60fb      	str	r3, [r7, #12]
 800d372:	491b      	ldr	r1, [pc, #108]	; (800d3e0 <vTaskSwitchContext+0xb4>)
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	4613      	mov	r3, r2
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4413      	add	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	440b      	add	r3, r1
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0e4      	beq.n	800d350 <vTaskSwitchContext+0x24>
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	4613      	mov	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4a13      	ldr	r2, [pc, #76]	; (800d3e0 <vTaskSwitchContext+0xb4>)
 800d392:	4413      	add	r3, r2
 800d394:	60bb      	str	r3, [r7, #8]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	605a      	str	r2, [r3, #4]
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d104      	bne.n	800d3b6 <vTaskSwitchContext+0x8a>
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	605a      	str	r2, [r3, #4]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	4a09      	ldr	r2, [pc, #36]	; (800d3e4 <vTaskSwitchContext+0xb8>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	4a06      	ldr	r2, [pc, #24]	; (800d3dc <vTaskSwitchContext+0xb0>)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6013      	str	r3, [r2, #0]
}
 800d3c6:	bf00      	nop
 800d3c8:	3714      	adds	r7, #20
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	20001ac0 	.word	0x20001ac0
 800d3d8:	20001aac 	.word	0x20001aac
 800d3dc:	20001aa0 	.word	0x20001aa0
 800d3e0:	200015c8 	.word	0x200015c8
 800d3e4:	200015c4 	.word	0x200015c4

0800d3e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	60fb      	str	r3, [r7, #12]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d40e:	4b07      	ldr	r3, [pc, #28]	; (800d42c <vTaskPlaceOnEventList+0x44>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	3318      	adds	r3, #24
 800d414:	4619      	mov	r1, r3
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7fe fd47 	bl	800beaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d41c:	2101      	movs	r1, #1
 800d41e:	6838      	ldr	r0, [r7, #0]
 800d420:	f000 fa7c 	bl	800d91c <prvAddCurrentTaskToDelayedList>
}
 800d424:	bf00      	nop
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	200015c4 	.word	0x200015c4

0800d430 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10a      	bne.n	800d458 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	617b      	str	r3, [r7, #20]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d458:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <vTaskPlaceOnEventListRestricted+0x54>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3318      	adds	r3, #24
 800d45e:	4619      	mov	r1, r3
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f7fe fcfe 	bl	800be62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d46c:	f04f 33ff 	mov.w	r3, #4294967295
 800d470:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d472:	6879      	ldr	r1, [r7, #4]
 800d474:	68b8      	ldr	r0, [r7, #8]
 800d476:	f000 fa51 	bl	800d91c <prvAddCurrentTaskToDelayedList>
	}
 800d47a:	bf00      	nop
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	200015c4 	.word	0x200015c4

0800d488 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10a      	bne.n	800d4b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	60fb      	str	r3, [r7, #12]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	3318      	adds	r3, #24
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fe fd2f 	bl	800bf1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4be:	4b1e      	ldr	r3, [pc, #120]	; (800d538 <xTaskRemoveFromEventList+0xb0>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d11d      	bne.n	800d502 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fe fd26 	bl	800bf1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d4:	4b19      	ldr	r3, [pc, #100]	; (800d53c <xTaskRemoveFromEventList+0xb4>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d903      	bls.n	800d4e4 <xTaskRemoveFromEventList+0x5c>
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e0:	4a16      	ldr	r2, [pc, #88]	; (800d53c <xTaskRemoveFromEventList+0xb4>)
 800d4e2:	6013      	str	r3, [r2, #0]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4a13      	ldr	r2, [pc, #76]	; (800d540 <xTaskRemoveFromEventList+0xb8>)
 800d4f2:	441a      	add	r2, r3
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	3304      	adds	r3, #4
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	f7fe fcb1 	bl	800be62 <vListInsertEnd>
 800d500:	e005      	b.n	800d50e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	3318      	adds	r3, #24
 800d506:	4619      	mov	r1, r3
 800d508:	480e      	ldr	r0, [pc, #56]	; (800d544 <xTaskRemoveFromEventList+0xbc>)
 800d50a:	f7fe fcaa 	bl	800be62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d512:	4b0d      	ldr	r3, [pc, #52]	; (800d548 <xTaskRemoveFromEventList+0xc0>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d518:	429a      	cmp	r2, r3
 800d51a:	d905      	bls.n	800d528 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d51c:	2301      	movs	r3, #1
 800d51e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d520:	4b0a      	ldr	r3, [pc, #40]	; (800d54c <xTaskRemoveFromEventList+0xc4>)
 800d522:	2201      	movs	r2, #1
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	e001      	b.n	800d52c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d528:	2300      	movs	r3, #0
 800d52a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d52c:	697b      	ldr	r3, [r7, #20]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3718      	adds	r7, #24
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20001ac0 	.word	0x20001ac0
 800d53c:	20001aa0 	.word	0x20001aa0
 800d540:	200015c8 	.word	0x200015c8
 800d544:	20001a58 	.word	0x20001a58
 800d548:	200015c4 	.word	0x200015c4
 800d54c:	20001aac 	.word	0x20001aac

0800d550 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d558:	4b06      	ldr	r3, [pc, #24]	; (800d574 <vTaskInternalSetTimeOutState+0x24>)
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d560:	4b05      	ldr	r3, [pc, #20]	; (800d578 <vTaskInternalSetTimeOutState+0x28>)
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	605a      	str	r2, [r3, #4]
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	20001ab0 	.word	0x20001ab0
 800d578:	20001a9c 	.word	0x20001a9c

0800d57c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b088      	sub	sp, #32
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10a      	bne.n	800d5a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	613b      	str	r3, [r7, #16]
}
 800d59e:	bf00      	nop
 800d5a0:	e7fe      	b.n	800d5a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10a      	bne.n	800d5be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	60fb      	str	r3, [r7, #12]
}
 800d5ba:	bf00      	nop
 800d5bc:	e7fe      	b.n	800d5bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d5be:	f000 fe79 	bl	800e2b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5c2:	4b1d      	ldr	r3, [pc, #116]	; (800d638 <xTaskCheckForTimeOut+0xbc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	69ba      	ldr	r2, [r7, #24]
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5da:	d102      	bne.n	800d5e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	61fb      	str	r3, [r7, #28]
 800d5e0:	e023      	b.n	800d62a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	4b15      	ldr	r3, [pc, #84]	; (800d63c <xTaskCheckForTimeOut+0xc0>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d007      	beq.n	800d5fe <xTaskCheckForTimeOut+0x82>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	69ba      	ldr	r2, [r7, #24]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d302      	bcc.n	800d5fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	61fb      	str	r3, [r7, #28]
 800d5fc:	e015      	b.n	800d62a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	429a      	cmp	r2, r3
 800d606:	d20b      	bcs.n	800d620 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	1ad2      	subs	r2, r2, r3
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff ff9b 	bl	800d550 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d61a:	2300      	movs	r3, #0
 800d61c:	61fb      	str	r3, [r7, #28]
 800d61e:	e004      	b.n	800d62a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d626:	2301      	movs	r3, #1
 800d628:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d62a:	f000 fe73 	bl	800e314 <vPortExitCritical>

	return xReturn;
 800d62e:	69fb      	ldr	r3, [r7, #28]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3720      	adds	r7, #32
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	20001a9c 	.word	0x20001a9c
 800d63c:	20001ab0 	.word	0x20001ab0

0800d640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d640:	b480      	push	{r7}
 800d642:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d644:	4b03      	ldr	r3, [pc, #12]	; (800d654 <vTaskMissedYield+0x14>)
 800d646:	2201      	movs	r2, #1
 800d648:	601a      	str	r2, [r3, #0]
}
 800d64a:	bf00      	nop
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr
 800d654:	20001aac 	.word	0x20001aac

0800d658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d660:	f000 f852 	bl	800d708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d664:	4b06      	ldr	r3, [pc, #24]	; (800d680 <prvIdleTask+0x28>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d9f9      	bls.n	800d660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d66c:	4b05      	ldr	r3, [pc, #20]	; (800d684 <prvIdleTask+0x2c>)
 800d66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d67c:	e7f0      	b.n	800d660 <prvIdleTask+0x8>
 800d67e:	bf00      	nop
 800d680:	200015c8 	.word	0x200015c8
 800d684:	e000ed04 	.word	0xe000ed04

0800d688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d68e:	2300      	movs	r3, #0
 800d690:	607b      	str	r3, [r7, #4]
 800d692:	e00c      	b.n	800d6ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	4613      	mov	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4a12      	ldr	r2, [pc, #72]	; (800d6e8 <prvInitialiseTaskLists+0x60>)
 800d6a0:	4413      	add	r3, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fe fbb0 	bl	800be08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	607b      	str	r3, [r7, #4]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b37      	cmp	r3, #55	; 0x37
 800d6b2:	d9ef      	bls.n	800d694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6b4:	480d      	ldr	r0, [pc, #52]	; (800d6ec <prvInitialiseTaskLists+0x64>)
 800d6b6:	f7fe fba7 	bl	800be08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6ba:	480d      	ldr	r0, [pc, #52]	; (800d6f0 <prvInitialiseTaskLists+0x68>)
 800d6bc:	f7fe fba4 	bl	800be08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6c0:	480c      	ldr	r0, [pc, #48]	; (800d6f4 <prvInitialiseTaskLists+0x6c>)
 800d6c2:	f7fe fba1 	bl	800be08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6c6:	480c      	ldr	r0, [pc, #48]	; (800d6f8 <prvInitialiseTaskLists+0x70>)
 800d6c8:	f7fe fb9e 	bl	800be08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6cc:	480b      	ldr	r0, [pc, #44]	; (800d6fc <prvInitialiseTaskLists+0x74>)
 800d6ce:	f7fe fb9b 	bl	800be08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6d2:	4b0b      	ldr	r3, [pc, #44]	; (800d700 <prvInitialiseTaskLists+0x78>)
 800d6d4:	4a05      	ldr	r2, [pc, #20]	; (800d6ec <prvInitialiseTaskLists+0x64>)
 800d6d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6d8:	4b0a      	ldr	r3, [pc, #40]	; (800d704 <prvInitialiseTaskLists+0x7c>)
 800d6da:	4a05      	ldr	r2, [pc, #20]	; (800d6f0 <prvInitialiseTaskLists+0x68>)
 800d6dc:	601a      	str	r2, [r3, #0]
}
 800d6de:	bf00      	nop
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	200015c8 	.word	0x200015c8
 800d6ec:	20001a28 	.word	0x20001a28
 800d6f0:	20001a3c 	.word	0x20001a3c
 800d6f4:	20001a58 	.word	0x20001a58
 800d6f8:	20001a6c 	.word	0x20001a6c
 800d6fc:	20001a84 	.word	0x20001a84
 800d700:	20001a50 	.word	0x20001a50
 800d704:	20001a54 	.word	0x20001a54

0800d708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d70e:	e019      	b.n	800d744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d710:	f000 fdd0 	bl	800e2b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d714:	4b10      	ldr	r3, [pc, #64]	; (800d758 <prvCheckTasksWaitingTermination+0x50>)
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	3304      	adds	r3, #4
 800d720:	4618      	mov	r0, r3
 800d722:	f7fe fbfb 	bl	800bf1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d726:	4b0d      	ldr	r3, [pc, #52]	; (800d75c <prvCheckTasksWaitingTermination+0x54>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	4a0b      	ldr	r2, [pc, #44]	; (800d75c <prvCheckTasksWaitingTermination+0x54>)
 800d72e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d730:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <prvCheckTasksWaitingTermination+0x58>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3b01      	subs	r3, #1
 800d736:	4a0a      	ldr	r2, [pc, #40]	; (800d760 <prvCheckTasksWaitingTermination+0x58>)
 800d738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d73a:	f000 fdeb 	bl	800e314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f810 	bl	800d764 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d744:	4b06      	ldr	r3, [pc, #24]	; (800d760 <prvCheckTasksWaitingTermination+0x58>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1e1      	bne.n	800d710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d74c:	bf00      	nop
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20001a6c 	.word	0x20001a6c
 800d75c:	20001a98 	.word	0x20001a98
 800d760:	20001a80 	.word	0x20001a80

0800d764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d772:	2b00      	cmp	r3, #0
 800d774:	d108      	bne.n	800d788 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 ff88 	bl	800e690 <vPortFree>
				vPortFree( pxTCB );
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 ff85 	bl	800e690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d786:	e018      	b.n	800d7ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d103      	bne.n	800d79a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 ff7c 	bl	800e690 <vPortFree>
	}
 800d798:	e00f      	b.n	800d7ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d7a0:	2b02      	cmp	r3, #2
 800d7a2:	d00a      	beq.n	800d7ba <prvDeleteTCB+0x56>
	__asm volatile
 800d7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	60fb      	str	r3, [r7, #12]
}
 800d7b6:	bf00      	nop
 800d7b8:	e7fe      	b.n	800d7b8 <prvDeleteTCB+0x54>
	}
 800d7ba:	bf00      	nop
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7ca:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <prvResetNextTaskUnblockTime+0x38>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d104      	bne.n	800d7de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	; (800d800 <prvResetNextTaskUnblockTime+0x3c>)
 800d7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7dc:	e008      	b.n	800d7f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7de:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <prvResetNextTaskUnblockTime+0x38>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	4a04      	ldr	r2, [pc, #16]	; (800d800 <prvResetNextTaskUnblockTime+0x3c>)
 800d7ee:	6013      	str	r3, [r2, #0]
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	20001a50 	.word	0x20001a50
 800d800:	20001ab8 	.word	0x20001ab8

0800d804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d80a:	4b0b      	ldr	r3, [pc, #44]	; (800d838 <xTaskGetSchedulerState+0x34>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d102      	bne.n	800d818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d812:	2301      	movs	r3, #1
 800d814:	607b      	str	r3, [r7, #4]
 800d816:	e008      	b.n	800d82a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d818:	4b08      	ldr	r3, [pc, #32]	; (800d83c <xTaskGetSchedulerState+0x38>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d820:	2302      	movs	r3, #2
 800d822:	607b      	str	r3, [r7, #4]
 800d824:	e001      	b.n	800d82a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d826:	2300      	movs	r3, #0
 800d828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d82a:	687b      	ldr	r3, [r7, #4]
	}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr
 800d838:	20001aa4 	.word	0x20001aa4
 800d83c:	20001ac0 	.word	0x20001ac0

0800d840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d84c:	2300      	movs	r3, #0
 800d84e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d056      	beq.n	800d904 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d856:	4b2e      	ldr	r3, [pc, #184]	; (800d910 <xTaskPriorityDisinherit+0xd0>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	693a      	ldr	r2, [r7, #16]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d00a      	beq.n	800d876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10a      	bne.n	800d894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	60bb      	str	r3, [r7, #8]
}
 800d890:	bf00      	nop
 800d892:	e7fe      	b.n	800d892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d898:	1e5a      	subs	r2, r3, #1
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d02c      	beq.n	800d904 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d128      	bne.n	800d904 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fe fb30 	bl	800bf1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d4:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <xTaskPriorityDisinherit+0xd4>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d903      	bls.n	800d8e4 <xTaskPriorityDisinherit+0xa4>
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e0:	4a0c      	ldr	r2, [pc, #48]	; (800d914 <xTaskPriorityDisinherit+0xd4>)
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4413      	add	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4a09      	ldr	r2, [pc, #36]	; (800d918 <xTaskPriorityDisinherit+0xd8>)
 800d8f2:	441a      	add	r2, r3
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	4610      	mov	r0, r2
 800d8fc:	f7fe fab1 	bl	800be62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d900:	2301      	movs	r3, #1
 800d902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d904:	697b      	ldr	r3, [r7, #20]
	}
 800d906:	4618      	mov	r0, r3
 800d908:	3718      	adds	r7, #24
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	200015c4 	.word	0x200015c4
 800d914:	20001aa0 	.word	0x20001aa0
 800d918:	200015c8 	.word	0x200015c8

0800d91c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d926:	4b21      	ldr	r3, [pc, #132]	; (800d9ac <prvAddCurrentTaskToDelayedList+0x90>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d92c:	4b20      	ldr	r3, [pc, #128]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3304      	adds	r3, #4
 800d932:	4618      	mov	r0, r3
 800d934:	f7fe faf2 	bl	800bf1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93e:	d10a      	bne.n	800d956 <prvAddCurrentTaskToDelayedList+0x3a>
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d007      	beq.n	800d956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d946:	4b1a      	ldr	r3, [pc, #104]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4619      	mov	r1, r3
 800d94e:	4819      	ldr	r0, [pc, #100]	; (800d9b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d950:	f7fe fa87 	bl	800be62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d954:	e026      	b.n	800d9a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4413      	add	r3, r2
 800d95c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d95e:	4b14      	ldr	r3, [pc, #80]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d966:	68ba      	ldr	r2, [r7, #8]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d209      	bcs.n	800d982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d96e:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	4b0f      	ldr	r3, [pc, #60]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3304      	adds	r3, #4
 800d978:	4619      	mov	r1, r3
 800d97a:	4610      	mov	r0, r2
 800d97c:	f7fe fa95 	bl	800beaa <vListInsert>
}
 800d980:	e010      	b.n	800d9a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d982:	4b0e      	ldr	r3, [pc, #56]	; (800d9bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	4b0a      	ldr	r3, [pc, #40]	; (800d9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	3304      	adds	r3, #4
 800d98c:	4619      	mov	r1, r3
 800d98e:	4610      	mov	r0, r2
 800d990:	f7fe fa8b 	bl	800beaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d994:	4b0a      	ldr	r3, [pc, #40]	; (800d9c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d202      	bcs.n	800d9a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d99e:	4a08      	ldr	r2, [pc, #32]	; (800d9c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	6013      	str	r3, [r2, #0]
}
 800d9a4:	bf00      	nop
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	20001a9c 	.word	0x20001a9c
 800d9b0:	200015c4 	.word	0x200015c4
 800d9b4:	20001a84 	.word	0x20001a84
 800d9b8:	20001a54 	.word	0x20001a54
 800d9bc:	20001a50 	.word	0x20001a50
 800d9c0:	20001ab8 	.word	0x20001ab8

0800d9c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	; 0x28
 800d9c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d9ce:	f000 fb07 	bl	800dfe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d9d2:	4b1c      	ldr	r3, [pc, #112]	; (800da44 <xTimerCreateTimerTask+0x80>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d021      	beq.n	800da1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9e2:	1d3a      	adds	r2, r7, #4
 800d9e4:	f107 0108 	add.w	r1, r7, #8
 800d9e8:	f107 030c 	add.w	r3, r7, #12
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe f9f1 	bl	800bdd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	9202      	str	r2, [sp, #8]
 800d9fa:	9301      	str	r3, [sp, #4]
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	2300      	movs	r3, #0
 800da02:	460a      	mov	r2, r1
 800da04:	4910      	ldr	r1, [pc, #64]	; (800da48 <xTimerCreateTimerTask+0x84>)
 800da06:	4811      	ldr	r0, [pc, #68]	; (800da4c <xTimerCreateTimerTask+0x88>)
 800da08:	f7fe ffd8 	bl	800c9bc <xTaskCreateStatic>
 800da0c:	4603      	mov	r3, r0
 800da0e:	4a10      	ldr	r2, [pc, #64]	; (800da50 <xTimerCreateTimerTask+0x8c>)
 800da10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da12:	4b0f      	ldr	r3, [pc, #60]	; (800da50 <xTimerCreateTimerTask+0x8c>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da1a:	2301      	movs	r3, #1
 800da1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10a      	bne.n	800da3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	613b      	str	r3, [r7, #16]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da3a:	697b      	ldr	r3, [r7, #20]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	20001af4 	.word	0x20001af4
 800da48:	0800ff38 	.word	0x0800ff38
 800da4c:	0800db89 	.word	0x0800db89
 800da50:	20001af8 	.word	0x20001af8

0800da54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08a      	sub	sp, #40	; 0x28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
 800da60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da62:	2300      	movs	r3, #0
 800da64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10a      	bne.n	800da82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	623b      	str	r3, [r7, #32]
}
 800da7e:	bf00      	nop
 800da80:	e7fe      	b.n	800da80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da82:	4b1a      	ldr	r3, [pc, #104]	; (800daec <xTimerGenericCommand+0x98>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d02a      	beq.n	800dae0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b05      	cmp	r3, #5
 800da9a:	dc18      	bgt.n	800dace <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da9c:	f7ff feb2 	bl	800d804 <xTaskGetSchedulerState>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d109      	bne.n	800daba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800daa6:	4b11      	ldr	r3, [pc, #68]	; (800daec <xTimerGenericCommand+0x98>)
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	f107 0110 	add.w	r1, r7, #16
 800daae:	2300      	movs	r3, #0
 800dab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab2:	f7fe fb9b 	bl	800c1ec <xQueueGenericSend>
 800dab6:	6278      	str	r0, [r7, #36]	; 0x24
 800dab8:	e012      	b.n	800dae0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800daba:	4b0c      	ldr	r3, [pc, #48]	; (800daec <xTimerGenericCommand+0x98>)
 800dabc:	6818      	ldr	r0, [r3, #0]
 800dabe:	f107 0110 	add.w	r1, r7, #16
 800dac2:	2300      	movs	r3, #0
 800dac4:	2200      	movs	r2, #0
 800dac6:	f7fe fb91 	bl	800c1ec <xQueueGenericSend>
 800daca:	6278      	str	r0, [r7, #36]	; 0x24
 800dacc:	e008      	b.n	800dae0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dace:	4b07      	ldr	r3, [pc, #28]	; (800daec <xTimerGenericCommand+0x98>)
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	f107 0110 	add.w	r1, r7, #16
 800dad6:	2300      	movs	r3, #0
 800dad8:	683a      	ldr	r2, [r7, #0]
 800dada:	f7fe fc85 	bl	800c3e8 <xQueueGenericSendFromISR>
 800dade:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3728      	adds	r7, #40	; 0x28
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	20001af4 	.word	0x20001af4

0800daf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b088      	sub	sp, #32
 800daf4:	af02      	add	r7, sp, #8
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dafa:	4b22      	ldr	r3, [pc, #136]	; (800db84 <prvProcessExpiredTimer+0x94>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	3304      	adds	r3, #4
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe fa07 	bl	800bf1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d022      	beq.n	800db62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	699a      	ldr	r2, [r3, #24]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	18d1      	adds	r1, r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	6978      	ldr	r0, [r7, #20]
 800db2a:	f000 f8d1 	bl	800dcd0 <prvInsertTimerInActiveList>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d01f      	beq.n	800db74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db34:	2300      	movs	r3, #0
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	2300      	movs	r3, #0
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	2100      	movs	r1, #0
 800db3e:	6978      	ldr	r0, [r7, #20]
 800db40:	f7ff ff88 	bl	800da54 <xTimerGenericCommand>
 800db44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d113      	bne.n	800db74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	60fb      	str	r3, [r7, #12]
}
 800db5e:	bf00      	nop
 800db60:	e7fe      	b.n	800db60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db68:	f023 0301 	bic.w	r3, r3, #1
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	6a1b      	ldr	r3, [r3, #32]
 800db78:	6978      	ldr	r0, [r7, #20]
 800db7a:	4798      	blx	r3
}
 800db7c:	bf00      	nop
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20001aec 	.word	0x20001aec

0800db88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db90:	f107 0308 	add.w	r3, r7, #8
 800db94:	4618      	mov	r0, r3
 800db96:	f000 f857 	bl	800dc48 <prvGetNextExpireTime>
 800db9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	4619      	mov	r1, r3
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f000 f803 	bl	800dbac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dba6:	f000 f8d5 	bl	800dd54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbaa:	e7f1      	b.n	800db90 <prvTimerTask+0x8>

0800dbac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dbb6:	f7ff fa43 	bl	800d040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbba:	f107 0308 	add.w	r3, r7, #8
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 f866 	bl	800dc90 <prvSampleTimeNow>
 800dbc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d130      	bne.n	800dc2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10a      	bne.n	800dbe8 <prvProcessTimerOrBlockTask+0x3c>
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d806      	bhi.n	800dbe8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dbda:	f7ff fa3f 	bl	800d05c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dbde:	68f9      	ldr	r1, [r7, #12]
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff ff85 	bl	800daf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dbe6:	e024      	b.n	800dc32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d008      	beq.n	800dc00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbee:	4b13      	ldr	r3, [pc, #76]	; (800dc3c <prvProcessTimerOrBlockTask+0x90>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d101      	bne.n	800dbfc <prvProcessTimerOrBlockTask+0x50>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e000      	b.n	800dbfe <prvProcessTimerOrBlockTask+0x52>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc00:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <prvProcessTimerOrBlockTask+0x94>)
 800dc02:	6818      	ldr	r0, [r3, #0]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	f7fe fea1 	bl	800c954 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc12:	f7ff fa23 	bl	800d05c <xTaskResumeAll>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10a      	bne.n	800dc32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <prvProcessTimerOrBlockTask+0x98>)
 800dc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc22:	601a      	str	r2, [r3, #0]
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	f3bf 8f6f 	isb	sy
}
 800dc2c:	e001      	b.n	800dc32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc2e:	f7ff fa15 	bl	800d05c <xTaskResumeAll>
}
 800dc32:	bf00      	nop
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20001af0 	.word	0x20001af0
 800dc40:	20001af4 	.word	0x20001af4
 800dc44:	e000ed04 	.word	0xe000ed04

0800dc48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc50:	4b0e      	ldr	r3, [pc, #56]	; (800dc8c <prvGetNextExpireTime+0x44>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <prvGetNextExpireTime+0x16>
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	e000      	b.n	800dc60 <prvGetNextExpireTime+0x18>
 800dc5e:	2200      	movs	r2, #0
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d105      	bne.n	800dc78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc6c:	4b07      	ldr	r3, [pc, #28]	; (800dc8c <prvGetNextExpireTime+0x44>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	60fb      	str	r3, [r7, #12]
 800dc76:	e001      	b.n	800dc7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3714      	adds	r7, #20
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	20001aec 	.word	0x20001aec

0800dc90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc98:	f7ff fa7e 	bl	800d198 <xTaskGetTickCount>
 800dc9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc9e:	4b0b      	ldr	r3, [pc, #44]	; (800dccc <prvSampleTimeNow+0x3c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d205      	bcs.n	800dcb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dca8:	f000 f936 	bl	800df18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	e002      	b.n	800dcba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dcba:	4a04      	ldr	r2, [pc, #16]	; (800dccc <prvSampleTimeNow+0x3c>)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	20001afc 	.word	0x20001afc

0800dcd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
 800dcdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dcde:	2300      	movs	r3, #0
 800dce0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d812      	bhi.n	800dd1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	1ad2      	subs	r2, r2, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d302      	bcc.n	800dd0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd04:	2301      	movs	r3, #1
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	e01b      	b.n	800dd42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd0a:	4b10      	ldr	r3, [pc, #64]	; (800dd4c <prvInsertTimerInActiveList+0x7c>)
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3304      	adds	r3, #4
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7fe f8c8 	bl	800beaa <vListInsert>
 800dd1a:	e012      	b.n	800dd42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d206      	bcs.n	800dd32 <prvInsertTimerInActiveList+0x62>
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d302      	bcc.n	800dd32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	617b      	str	r3, [r7, #20]
 800dd30:	e007      	b.n	800dd42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd32:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <prvInsertTimerInActiveList+0x80>)
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	f7fe f8b4 	bl	800beaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd42:	697b      	ldr	r3, [r7, #20]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	20001af0 	.word	0x20001af0
 800dd50:	20001aec 	.word	0x20001aec

0800dd54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08e      	sub	sp, #56	; 0x38
 800dd58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd5a:	e0ca      	b.n	800def2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	da18      	bge.n	800dd94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd62:	1d3b      	adds	r3, r7, #4
 800dd64:	3304      	adds	r3, #4
 800dd66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10a      	bne.n	800dd84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	61fb      	str	r3, [r7, #28]
}
 800dd80:	bf00      	nop
 800dd82:	e7fe      	b.n	800dd82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd8a:	6850      	ldr	r0, [r2, #4]
 800dd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd8e:	6892      	ldr	r2, [r2, #8]
 800dd90:	4611      	mov	r1, r2
 800dd92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f2c0 80aa 	blt.w	800def0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d004      	beq.n	800ddb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	3304      	adds	r3, #4
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7fe f8b5 	bl	800bf1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ddb2:	463b      	mov	r3, r7
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7ff ff6b 	bl	800dc90 <prvSampleTimeNow>
 800ddba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b09      	cmp	r3, #9
 800ddc0:	f200 8097 	bhi.w	800def2 <prvProcessReceivedCommands+0x19e>
 800ddc4:	a201      	add	r2, pc, #4	; (adr r2, 800ddcc <prvProcessReceivedCommands+0x78>)
 800ddc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddca:	bf00      	nop
 800ddcc:	0800ddf5 	.word	0x0800ddf5
 800ddd0:	0800ddf5 	.word	0x0800ddf5
 800ddd4:	0800ddf5 	.word	0x0800ddf5
 800ddd8:	0800de69 	.word	0x0800de69
 800dddc:	0800de7d 	.word	0x0800de7d
 800dde0:	0800dec7 	.word	0x0800dec7
 800dde4:	0800ddf5 	.word	0x0800ddf5
 800dde8:	0800ddf5 	.word	0x0800ddf5
 800ddec:	0800de69 	.word	0x0800de69
 800ddf0:	0800de7d 	.word	0x0800de7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddfa:	f043 0301 	orr.w	r3, r3, #1
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	18d1      	adds	r1, r2, r3
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de14:	f7ff ff5c 	bl	800dcd0 <prvInsertTimerInActiveList>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d069      	beq.n	800def2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de20:	6a1b      	ldr	r3, [r3, #32]
 800de22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de2c:	f003 0304 	and.w	r3, r3, #4
 800de30:	2b00      	cmp	r3, #0
 800de32:	d05e      	beq.n	800def2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	441a      	add	r2, r3
 800de3c:	2300      	movs	r3, #0
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	2300      	movs	r3, #0
 800de42:	2100      	movs	r1, #0
 800de44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de46:	f7ff fe05 	bl	800da54 <xTimerGenericCommand>
 800de4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de4c:	6a3b      	ldr	r3, [r7, #32]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d14f      	bne.n	800def2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	61bb      	str	r3, [r7, #24]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de6e:	f023 0301 	bic.w	r3, r3, #1
 800de72:	b2da      	uxtb	r2, r3
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de7a:	e03a      	b.n	800def2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de82:	f043 0301 	orr.w	r3, r3, #1
 800de86:	b2da      	uxtb	r2, r3
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	699b      	ldr	r3, [r3, #24]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d10a      	bne.n	800deb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea0:	f383 8811 	msr	BASEPRI, r3
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	617b      	str	r3, [r7, #20]
}
 800deae:	bf00      	nop
 800deb0:	e7fe      	b.n	800deb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	699a      	ldr	r2, [r3, #24]
 800deb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb8:	18d1      	adds	r1, r2, r3
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800debe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dec0:	f7ff ff06 	bl	800dcd0 <prvInsertTimerInActiveList>
					break;
 800dec4:	e015      	b.n	800def2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800decc:	f003 0302 	and.w	r3, r3, #2
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d103      	bne.n	800dedc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ded4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ded6:	f000 fbdb 	bl	800e690 <vPortFree>
 800deda:	e00a      	b.n	800def2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800deee:	e000      	b.n	800def2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800def0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800def2:	4b08      	ldr	r3, [pc, #32]	; (800df14 <prvProcessReceivedCommands+0x1c0>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	1d39      	adds	r1, r7, #4
 800def8:	2200      	movs	r2, #0
 800defa:	4618      	mov	r0, r3
 800defc:	f7fe fb10 	bl	800c520 <xQueueReceive>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	f47f af2a 	bne.w	800dd5c <prvProcessReceivedCommands+0x8>
	}
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	3730      	adds	r7, #48	; 0x30
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20001af4 	.word	0x20001af4

0800df18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b088      	sub	sp, #32
 800df1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df1e:	e048      	b.n	800dfb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df20:	4b2d      	ldr	r3, [pc, #180]	; (800dfd8 <prvSwitchTimerLists+0xc0>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df2a:	4b2b      	ldr	r3, [pc, #172]	; (800dfd8 <prvSwitchTimerLists+0xc0>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3304      	adds	r3, #4
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fd ffef 	bl	800bf1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d02e      	beq.n	800dfb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	4413      	add	r3, r2
 800df5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	429a      	cmp	r2, r3
 800df64:	d90e      	bls.n	800df84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df72:	4b19      	ldr	r3, [pc, #100]	; (800dfd8 <prvSwitchTimerLists+0xc0>)
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3304      	adds	r3, #4
 800df7a:	4619      	mov	r1, r3
 800df7c:	4610      	mov	r0, r2
 800df7e:	f7fd ff94 	bl	800beaa <vListInsert>
 800df82:	e016      	b.n	800dfb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df84:	2300      	movs	r3, #0
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	2300      	movs	r3, #0
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	2100      	movs	r1, #0
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7ff fd60 	bl	800da54 <xTimerGenericCommand>
 800df94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10a      	bne.n	800dfb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	603b      	str	r3, [r7, #0]
}
 800dfae:	bf00      	nop
 800dfb0:	e7fe      	b.n	800dfb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfb2:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <prvSwitchTimerLists+0xc0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1b1      	bne.n	800df20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dfbc:	4b06      	ldr	r3, [pc, #24]	; (800dfd8 <prvSwitchTimerLists+0xc0>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dfc2:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <prvSwitchTimerLists+0xc4>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a04      	ldr	r2, [pc, #16]	; (800dfd8 <prvSwitchTimerLists+0xc0>)
 800dfc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dfca:	4a04      	ldr	r2, [pc, #16]	; (800dfdc <prvSwitchTimerLists+0xc4>)
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	6013      	str	r3, [r2, #0]
}
 800dfd0:	bf00      	nop
 800dfd2:	3718      	adds	r7, #24
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	20001aec 	.word	0x20001aec
 800dfdc:	20001af0 	.word	0x20001af0

0800dfe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dfe6:	f000 f965 	bl	800e2b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfea:	4b15      	ldr	r3, [pc, #84]	; (800e040 <prvCheckForValidListAndQueue+0x60>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d120      	bne.n	800e034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dff2:	4814      	ldr	r0, [pc, #80]	; (800e044 <prvCheckForValidListAndQueue+0x64>)
 800dff4:	f7fd ff08 	bl	800be08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dff8:	4813      	ldr	r0, [pc, #76]	; (800e048 <prvCheckForValidListAndQueue+0x68>)
 800dffa:	f7fd ff05 	bl	800be08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dffe:	4b13      	ldr	r3, [pc, #76]	; (800e04c <prvCheckForValidListAndQueue+0x6c>)
 800e000:	4a10      	ldr	r2, [pc, #64]	; (800e044 <prvCheckForValidListAndQueue+0x64>)
 800e002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e004:	4b12      	ldr	r3, [pc, #72]	; (800e050 <prvCheckForValidListAndQueue+0x70>)
 800e006:	4a10      	ldr	r2, [pc, #64]	; (800e048 <prvCheckForValidListAndQueue+0x68>)
 800e008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e00a:	2300      	movs	r3, #0
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	4b11      	ldr	r3, [pc, #68]	; (800e054 <prvCheckForValidListAndQueue+0x74>)
 800e010:	4a11      	ldr	r2, [pc, #68]	; (800e058 <prvCheckForValidListAndQueue+0x78>)
 800e012:	2110      	movs	r1, #16
 800e014:	200a      	movs	r0, #10
 800e016:	f7fe f813 	bl	800c040 <xQueueGenericCreateStatic>
 800e01a:	4603      	mov	r3, r0
 800e01c:	4a08      	ldr	r2, [pc, #32]	; (800e040 <prvCheckForValidListAndQueue+0x60>)
 800e01e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e020:	4b07      	ldr	r3, [pc, #28]	; (800e040 <prvCheckForValidListAndQueue+0x60>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e028:	4b05      	ldr	r3, [pc, #20]	; (800e040 <prvCheckForValidListAndQueue+0x60>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	490b      	ldr	r1, [pc, #44]	; (800e05c <prvCheckForValidListAndQueue+0x7c>)
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fe fc66 	bl	800c900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e034:	f000 f96e 	bl	800e314 <vPortExitCritical>
}
 800e038:	bf00      	nop
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	20001af4 	.word	0x20001af4
 800e044:	20001ac4 	.word	0x20001ac4
 800e048:	20001ad8 	.word	0x20001ad8
 800e04c:	20001aec 	.word	0x20001aec
 800e050:	20001af0 	.word	0x20001af0
 800e054:	20001ba0 	.word	0x20001ba0
 800e058:	20001b00 	.word	0x20001b00
 800e05c:	0800ff40 	.word	0x0800ff40

0800e060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3b04      	subs	r3, #4
 800e070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3b04      	subs	r3, #4
 800e07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	f023 0201 	bic.w	r2, r3, #1
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	3b04      	subs	r3, #4
 800e08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e090:	4a0c      	ldr	r2, [pc, #48]	; (800e0c4 <pxPortInitialiseStack+0x64>)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3b14      	subs	r3, #20
 800e09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3b04      	subs	r3, #4
 800e0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f06f 0202 	mvn.w	r2, #2
 800e0ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	3b20      	subs	r3, #32
 800e0b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	0800e0c9 	.word	0x0800e0c9

0800e0c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e0d2:	4b12      	ldr	r3, [pc, #72]	; (800e11c <prvTaskExitError+0x54>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0da:	d00a      	beq.n	800e0f2 <prvTaskExitError+0x2a>
	__asm volatile
 800e0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	60fb      	str	r3, [r7, #12]
}
 800e0ee:	bf00      	nop
 800e0f0:	e7fe      	b.n	800e0f0 <prvTaskExitError+0x28>
	__asm volatile
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	60bb      	str	r3, [r7, #8]
}
 800e104:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e106:	bf00      	nop
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0fc      	beq.n	800e108 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e10e:	bf00      	nop
 800e110:	bf00      	nop
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	200005b0 	.word	0x200005b0

0800e120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e120:	4b07      	ldr	r3, [pc, #28]	; (800e140 <pxCurrentTCBConst2>)
 800e122:	6819      	ldr	r1, [r3, #0]
 800e124:	6808      	ldr	r0, [r1, #0]
 800e126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12a:	f380 8809 	msr	PSP, r0
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f04f 0000 	mov.w	r0, #0
 800e136:	f380 8811 	msr	BASEPRI, r0
 800e13a:	4770      	bx	lr
 800e13c:	f3af 8000 	nop.w

0800e140 <pxCurrentTCBConst2>:
 800e140:	200015c4 	.word	0x200015c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e144:	bf00      	nop
 800e146:	bf00      	nop

0800e148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e148:	4808      	ldr	r0, [pc, #32]	; (800e16c <prvPortStartFirstTask+0x24>)
 800e14a:	6800      	ldr	r0, [r0, #0]
 800e14c:	6800      	ldr	r0, [r0, #0]
 800e14e:	f380 8808 	msr	MSP, r0
 800e152:	f04f 0000 	mov.w	r0, #0
 800e156:	f380 8814 	msr	CONTROL, r0
 800e15a:	b662      	cpsie	i
 800e15c:	b661      	cpsie	f
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	df00      	svc	0
 800e168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e16a:	bf00      	nop
 800e16c:	e000ed08 	.word	0xe000ed08

0800e170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e176:	4b46      	ldr	r3, [pc, #280]	; (800e290 <xPortStartScheduler+0x120>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a46      	ldr	r2, [pc, #280]	; (800e294 <xPortStartScheduler+0x124>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d10a      	bne.n	800e196 <xPortStartScheduler+0x26>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	613b      	str	r3, [r7, #16]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e196:	4b3e      	ldr	r3, [pc, #248]	; (800e290 <xPortStartScheduler+0x120>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a3f      	ldr	r2, [pc, #252]	; (800e298 <xPortStartScheduler+0x128>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d10a      	bne.n	800e1b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	60fb      	str	r3, [r7, #12]
}
 800e1b2:	bf00      	nop
 800e1b4:	e7fe      	b.n	800e1b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e1b6:	4b39      	ldr	r3, [pc, #228]	; (800e29c <xPortStartScheduler+0x12c>)
 800e1b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	22ff      	movs	r2, #255	; 0xff
 800e1c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e1d0:	78fb      	ldrb	r3, [r7, #3]
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	4b31      	ldr	r3, [pc, #196]	; (800e2a0 <xPortStartScheduler+0x130>)
 800e1dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e1de:	4b31      	ldr	r3, [pc, #196]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e1e0:	2207      	movs	r2, #7
 800e1e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1e4:	e009      	b.n	800e1fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e1e6:	4b2f      	ldr	r3, [pc, #188]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	4a2d      	ldr	r2, [pc, #180]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e1ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1f0:	78fb      	ldrb	r3, [r7, #3]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	005b      	lsls	r3, r3, #1
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1fa:	78fb      	ldrb	r3, [r7, #3]
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e202:	2b80      	cmp	r3, #128	; 0x80
 800e204:	d0ef      	beq.n	800e1e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e206:	4b27      	ldr	r3, [pc, #156]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f1c3 0307 	rsb	r3, r3, #7
 800e20e:	2b04      	cmp	r3, #4
 800e210:	d00a      	beq.n	800e228 <xPortStartScheduler+0xb8>
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	60bb      	str	r3, [r7, #8]
}
 800e224:	bf00      	nop
 800e226:	e7fe      	b.n	800e226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e228:	4b1e      	ldr	r3, [pc, #120]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	021b      	lsls	r3, r3, #8
 800e22e:	4a1d      	ldr	r2, [pc, #116]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e232:	4b1c      	ldr	r3, [pc, #112]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e23a:	4a1a      	ldr	r2, [pc, #104]	; (800e2a4 <xPortStartScheduler+0x134>)
 800e23c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	b2da      	uxtb	r2, r3
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e246:	4b18      	ldr	r3, [pc, #96]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a17      	ldr	r2, [pc, #92]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e24c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e252:	4b15      	ldr	r3, [pc, #84]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a14      	ldr	r2, [pc, #80]	; (800e2a8 <xPortStartScheduler+0x138>)
 800e258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e25c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e25e:	f000 f8dd 	bl	800e41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e262:	4b12      	ldr	r3, [pc, #72]	; (800e2ac <xPortStartScheduler+0x13c>)
 800e264:	2200      	movs	r2, #0
 800e266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e268:	f000 f8fc 	bl	800e464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e26c:	4b10      	ldr	r3, [pc, #64]	; (800e2b0 <xPortStartScheduler+0x140>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a0f      	ldr	r2, [pc, #60]	; (800e2b0 <xPortStartScheduler+0x140>)
 800e272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e278:	f7ff ff66 	bl	800e148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e27c:	f7ff f856 	bl	800d32c <vTaskSwitchContext>
	prvTaskExitError();
 800e280:	f7ff ff22 	bl	800e0c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e284:	2300      	movs	r3, #0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3718      	adds	r7, #24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	e000ed00 	.word	0xe000ed00
 800e294:	410fc271 	.word	0x410fc271
 800e298:	410fc270 	.word	0x410fc270
 800e29c:	e000e400 	.word	0xe000e400
 800e2a0:	20001bf0 	.word	0x20001bf0
 800e2a4:	20001bf4 	.word	0x20001bf4
 800e2a8:	e000ed20 	.word	0xe000ed20
 800e2ac:	200005b0 	.word	0x200005b0
 800e2b0:	e000ef34 	.word	0xe000ef34

0800e2b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2be:	f383 8811 	msr	BASEPRI, r3
 800e2c2:	f3bf 8f6f 	isb	sy
 800e2c6:	f3bf 8f4f 	dsb	sy
 800e2ca:	607b      	str	r3, [r7, #4]
}
 800e2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e2ce:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <vPortEnterCritical+0x58>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	4a0d      	ldr	r2, [pc, #52]	; (800e30c <vPortEnterCritical+0x58>)
 800e2d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e2d8:	4b0c      	ldr	r3, [pc, #48]	; (800e30c <vPortEnterCritical+0x58>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d10f      	bne.n	800e300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2e0:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <vPortEnterCritical+0x5c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00a      	beq.n	800e300 <vPortEnterCritical+0x4c>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	603b      	str	r3, [r7, #0]
}
 800e2fc:	bf00      	nop
 800e2fe:	e7fe      	b.n	800e2fe <vPortEnterCritical+0x4a>
	}
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	200005b0 	.word	0x200005b0
 800e310:	e000ed04 	.word	0xe000ed04

0800e314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e31a:	4b12      	ldr	r3, [pc, #72]	; (800e364 <vPortExitCritical+0x50>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10a      	bne.n	800e338 <vPortExitCritical+0x24>
	__asm volatile
 800e322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e326:	f383 8811 	msr	BASEPRI, r3
 800e32a:	f3bf 8f6f 	isb	sy
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	607b      	str	r3, [r7, #4]
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e338:	4b0a      	ldr	r3, [pc, #40]	; (800e364 <vPortExitCritical+0x50>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	4a09      	ldr	r2, [pc, #36]	; (800e364 <vPortExitCritical+0x50>)
 800e340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e342:	4b08      	ldr	r3, [pc, #32]	; (800e364 <vPortExitCritical+0x50>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d105      	bne.n	800e356 <vPortExitCritical+0x42>
 800e34a:	2300      	movs	r3, #0
 800e34c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	f383 8811 	msr	BASEPRI, r3
}
 800e354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e356:	bf00      	nop
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	200005b0 	.word	0x200005b0
	...

0800e370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e370:	f3ef 8009 	mrs	r0, PSP
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	4b15      	ldr	r3, [pc, #84]	; (800e3d0 <pxCurrentTCBConst>)
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	f01e 0f10 	tst.w	lr, #16
 800e380:	bf08      	it	eq
 800e382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38a:	6010      	str	r0, [r2, #0]
 800e38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e394:	f380 8811 	msr	BASEPRI, r0
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f7fe ffc4 	bl	800d32c <vTaskSwitchContext>
 800e3a4:	f04f 0000 	mov.w	r0, #0
 800e3a8:	f380 8811 	msr	BASEPRI, r0
 800e3ac:	bc09      	pop	{r0, r3}
 800e3ae:	6819      	ldr	r1, [r3, #0]
 800e3b0:	6808      	ldr	r0, [r1, #0]
 800e3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b6:	f01e 0f10 	tst.w	lr, #16
 800e3ba:	bf08      	it	eq
 800e3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e3c0:	f380 8809 	msr	PSP, r0
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	f3af 8000 	nop.w

0800e3d0 <pxCurrentTCBConst>:
 800e3d0:	200015c4 	.word	0x200015c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop

0800e3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	607b      	str	r3, [r7, #4]
}
 800e3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3f2:	f7fe fee1 	bl	800d1b8 <xTaskIncrementTick>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3fc:	4b06      	ldr	r3, [pc, #24]	; (800e418 <xPortSysTickHandler+0x40>)
 800e3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	2300      	movs	r3, #0
 800e406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f383 8811 	msr	BASEPRI, r3
}
 800e40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e410:	bf00      	nop
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	e000ed04 	.word	0xe000ed04

0800e41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e420:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <vPortSetupTimerInterrupt+0x34>)
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e426:	4b0b      	ldr	r3, [pc, #44]	; (800e454 <vPortSetupTimerInterrupt+0x38>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e42c:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <vPortSetupTimerInterrupt+0x3c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a0a      	ldr	r2, [pc, #40]	; (800e45c <vPortSetupTimerInterrupt+0x40>)
 800e432:	fba2 2303 	umull	r2, r3, r2, r3
 800e436:	099b      	lsrs	r3, r3, #6
 800e438:	4a09      	ldr	r2, [pc, #36]	; (800e460 <vPortSetupTimerInterrupt+0x44>)
 800e43a:	3b01      	subs	r3, #1
 800e43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e43e:	4b04      	ldr	r3, [pc, #16]	; (800e450 <vPortSetupTimerInterrupt+0x34>)
 800e440:	2207      	movs	r2, #7
 800e442:	601a      	str	r2, [r3, #0]
}
 800e444:	bf00      	nop
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	e000e010 	.word	0xe000e010
 800e454:	e000e018 	.word	0xe000e018
 800e458:	20000518 	.word	0x20000518
 800e45c:	10624dd3 	.word	0x10624dd3
 800e460:	e000e014 	.word	0xe000e014

0800e464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e474 <vPortEnableVFP+0x10>
 800e468:	6801      	ldr	r1, [r0, #0]
 800e46a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e46e:	6001      	str	r1, [r0, #0]
 800e470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e472:	bf00      	nop
 800e474:	e000ed88 	.word	0xe000ed88

0800e478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e47e:	f3ef 8305 	mrs	r3, IPSR
 800e482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2b0f      	cmp	r3, #15
 800e488:	d914      	bls.n	800e4b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e48a:	4a17      	ldr	r2, [pc, #92]	; (800e4e8 <vPortValidateInterruptPriority+0x70>)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e494:	4b15      	ldr	r3, [pc, #84]	; (800e4ec <vPortValidateInterruptPriority+0x74>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	7afa      	ldrb	r2, [r7, #11]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d20a      	bcs.n	800e4b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	607b      	str	r3, [r7, #4]
}
 800e4b0:	bf00      	nop
 800e4b2:	e7fe      	b.n	800e4b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4b4:	4b0e      	ldr	r3, [pc, #56]	; (800e4f0 <vPortValidateInterruptPriority+0x78>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e4bc:	4b0d      	ldr	r3, [pc, #52]	; (800e4f4 <vPortValidateInterruptPriority+0x7c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d90a      	bls.n	800e4da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	603b      	str	r3, [r7, #0]
}
 800e4d6:	bf00      	nop
 800e4d8:	e7fe      	b.n	800e4d8 <vPortValidateInterruptPriority+0x60>
	}
 800e4da:	bf00      	nop
 800e4dc:	3714      	adds	r7, #20
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop
 800e4e8:	e000e3f0 	.word	0xe000e3f0
 800e4ec:	20001bf0 	.word	0x20001bf0
 800e4f0:	e000ed0c 	.word	0xe000ed0c
 800e4f4:	20001bf4 	.word	0x20001bf4

0800e4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08a      	sub	sp, #40	; 0x28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e500:	2300      	movs	r3, #0
 800e502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e504:	f7fe fd9c 	bl	800d040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e508:	4b5b      	ldr	r3, [pc, #364]	; (800e678 <pvPortMalloc+0x180>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e510:	f000 f920 	bl	800e754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e514:	4b59      	ldr	r3, [pc, #356]	; (800e67c <pvPortMalloc+0x184>)
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4013      	ands	r3, r2
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	f040 8093 	bne.w	800e648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d01d      	beq.n	800e564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e528:	2208      	movs	r2, #8
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4413      	add	r3, r2
 800e52e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	2b00      	cmp	r3, #0
 800e538:	d014      	beq.n	800e564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f023 0307 	bic.w	r3, r3, #7
 800e540:	3308      	adds	r3, #8
 800e542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00a      	beq.n	800e564 <pvPortMalloc+0x6c>
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	617b      	str	r3, [r7, #20]
}
 800e560:	bf00      	nop
 800e562:	e7fe      	b.n	800e562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d06e      	beq.n	800e648 <pvPortMalloc+0x150>
 800e56a:	4b45      	ldr	r3, [pc, #276]	; (800e680 <pvPortMalloc+0x188>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	429a      	cmp	r2, r3
 800e572:	d869      	bhi.n	800e648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e574:	4b43      	ldr	r3, [pc, #268]	; (800e684 <pvPortMalloc+0x18c>)
 800e576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e578:	4b42      	ldr	r3, [pc, #264]	; (800e684 <pvPortMalloc+0x18c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e57e:	e004      	b.n	800e58a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	429a      	cmp	r2, r3
 800e592:	d903      	bls.n	800e59c <pvPortMalloc+0xa4>
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1f1      	bne.n	800e580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e59c:	4b36      	ldr	r3, [pc, #216]	; (800e678 <pvPortMalloc+0x180>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d050      	beq.n	800e648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2208      	movs	r2, #8
 800e5ac:	4413      	add	r3, r2
 800e5ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	685a      	ldr	r2, [r3, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	1ad2      	subs	r2, r2, r3
 800e5c0:	2308      	movs	r3, #8
 800e5c2:	005b      	lsls	r3, r3, #1
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d91f      	bls.n	800e608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	f003 0307 	and.w	r3, r3, #7
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00a      	beq.n	800e5f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	613b      	str	r3, [r7, #16]
}
 800e5ec:	bf00      	nop
 800e5ee:	e7fe      	b.n	800e5ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	685a      	ldr	r2, [r3, #4]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	1ad2      	subs	r2, r2, r3
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e602:	69b8      	ldr	r0, [r7, #24]
 800e604:	f000 f908 	bl	800e818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e608:	4b1d      	ldr	r3, [pc, #116]	; (800e680 <pvPortMalloc+0x188>)
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	4a1b      	ldr	r2, [pc, #108]	; (800e680 <pvPortMalloc+0x188>)
 800e614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e616:	4b1a      	ldr	r3, [pc, #104]	; (800e680 <pvPortMalloc+0x188>)
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	4b1b      	ldr	r3, [pc, #108]	; (800e688 <pvPortMalloc+0x190>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d203      	bcs.n	800e62a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e622:	4b17      	ldr	r3, [pc, #92]	; (800e680 <pvPortMalloc+0x188>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a18      	ldr	r2, [pc, #96]	; (800e688 <pvPortMalloc+0x190>)
 800e628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	685a      	ldr	r2, [r3, #4]
 800e62e:	4b13      	ldr	r3, [pc, #76]	; (800e67c <pvPortMalloc+0x184>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	431a      	orrs	r2, r3
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e63e:	4b13      	ldr	r3, [pc, #76]	; (800e68c <pvPortMalloc+0x194>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3301      	adds	r3, #1
 800e644:	4a11      	ldr	r2, [pc, #68]	; (800e68c <pvPortMalloc+0x194>)
 800e646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e648:	f7fe fd08 	bl	800d05c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	f003 0307 	and.w	r3, r3, #7
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00a      	beq.n	800e66c <pvPortMalloc+0x174>
	__asm volatile
 800e656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	60fb      	str	r3, [r7, #12]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <pvPortMalloc+0x172>
	return pvReturn;
 800e66c:	69fb      	ldr	r3, [r7, #28]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3728      	adds	r7, #40	; 0x28
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20005800 	.word	0x20005800
 800e67c:	20005814 	.word	0x20005814
 800e680:	20005804 	.word	0x20005804
 800e684:	200057f8 	.word	0x200057f8
 800e688:	20005808 	.word	0x20005808
 800e68c:	2000580c 	.word	0x2000580c

0800e690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d04d      	beq.n	800e73e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6a2:	2308      	movs	r3, #8
 800e6a4:	425b      	negs	r3, r3
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	685a      	ldr	r2, [r3, #4]
 800e6b4:	4b24      	ldr	r3, [pc, #144]	; (800e748 <vPortFree+0xb8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10a      	bne.n	800e6d4 <vPortFree+0x44>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	60fb      	str	r3, [r7, #12]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00a      	beq.n	800e6f2 <vPortFree+0x62>
	__asm volatile
 800e6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	60bb      	str	r3, [r7, #8]
}
 800e6ee:	bf00      	nop
 800e6f0:	e7fe      	b.n	800e6f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <vPortFree+0xb8>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4013      	ands	r3, r2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01e      	beq.n	800e73e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d11a      	bne.n	800e73e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	4b0e      	ldr	r3, [pc, #56]	; (800e748 <vPortFree+0xb8>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	43db      	mvns	r3, r3
 800e712:	401a      	ands	r2, r3
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e718:	f7fe fc92 	bl	800d040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	4b0a      	ldr	r3, [pc, #40]	; (800e74c <vPortFree+0xbc>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4413      	add	r3, r2
 800e726:	4a09      	ldr	r2, [pc, #36]	; (800e74c <vPortFree+0xbc>)
 800e728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	f000 f874 	bl	800e818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <vPortFree+0xc0>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3301      	adds	r3, #1
 800e736:	4a06      	ldr	r2, [pc, #24]	; (800e750 <vPortFree+0xc0>)
 800e738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e73a:	f7fe fc8f 	bl	800d05c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e73e:	bf00      	nop
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	20005814 	.word	0x20005814
 800e74c:	20005804 	.word	0x20005804
 800e750:	20005810 	.word	0x20005810

0800e754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e75a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e75e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e760:	4b27      	ldr	r3, [pc, #156]	; (800e800 <prvHeapInit+0xac>)
 800e762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00c      	beq.n	800e788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3307      	adds	r3, #7
 800e772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f023 0307 	bic.w	r3, r3, #7
 800e77a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	4a1f      	ldr	r2, [pc, #124]	; (800e800 <prvHeapInit+0xac>)
 800e784:	4413      	add	r3, r2
 800e786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e78c:	4a1d      	ldr	r2, [pc, #116]	; (800e804 <prvHeapInit+0xb0>)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e792:	4b1c      	ldr	r3, [pc, #112]	; (800e804 <prvHeapInit+0xb0>)
 800e794:	2200      	movs	r2, #0
 800e796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	4413      	add	r3, r2
 800e79e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7a0:	2208      	movs	r2, #8
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	1a9b      	subs	r3, r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f023 0307 	bic.w	r3, r3, #7
 800e7ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	4a15      	ldr	r2, [pc, #84]	; (800e808 <prvHeapInit+0xb4>)
 800e7b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7b6:	4b14      	ldr	r3, [pc, #80]	; (800e808 <prvHeapInit+0xb4>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7be:	4b12      	ldr	r3, [pc, #72]	; (800e808 <prvHeapInit+0xb4>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	1ad2      	subs	r2, r2, r3
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7d4:	4b0c      	ldr	r3, [pc, #48]	; (800e808 <prvHeapInit+0xb4>)
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	4a0a      	ldr	r2, [pc, #40]	; (800e80c <prvHeapInit+0xb8>)
 800e7e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	4a09      	ldr	r2, [pc, #36]	; (800e810 <prvHeapInit+0xbc>)
 800e7ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7ec:	4b09      	ldr	r3, [pc, #36]	; (800e814 <prvHeapInit+0xc0>)
 800e7ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7f2:	601a      	str	r2, [r3, #0]
}
 800e7f4:	bf00      	nop
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	20001bf8 	.word	0x20001bf8
 800e804:	200057f8 	.word	0x200057f8
 800e808:	20005800 	.word	0x20005800
 800e80c:	20005808 	.word	0x20005808
 800e810:	20005804 	.word	0x20005804
 800e814:	20005814 	.word	0x20005814

0800e818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e820:	4b28      	ldr	r3, [pc, #160]	; (800e8c4 <prvInsertBlockIntoFreeList+0xac>)
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	e002      	b.n	800e82c <prvInsertBlockIntoFreeList+0x14>
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	60fb      	str	r3, [r7, #12]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	429a      	cmp	r2, r3
 800e834:	d8f7      	bhi.n	800e826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	4413      	add	r3, r2
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	429a      	cmp	r2, r3
 800e846:	d108      	bne.n	800e85a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	685a      	ldr	r2, [r3, #4]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	441a      	add	r2, r3
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	441a      	add	r2, r3
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d118      	bne.n	800e8a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	4b15      	ldr	r3, [pc, #84]	; (800e8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	d00d      	beq.n	800e896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	441a      	add	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	e008      	b.n	800e8a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e896:	4b0c      	ldr	r3, [pc, #48]	; (800e8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	601a      	str	r2, [r3, #0]
 800e89e:	e003      	b.n	800e8a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d002      	beq.n	800e8b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8b6:	bf00      	nop
 800e8b8:	3714      	adds	r7, #20
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	200057f8 	.word	0x200057f8
 800e8c8:	20005800 	.word	0x20005800

0800e8cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	4912      	ldr	r1, [pc, #72]	; (800e91c <MX_USB_DEVICE_Init+0x50>)
 800e8d4:	4812      	ldr	r0, [pc, #72]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e8d6:	f7fb fdc1 	bl	800a45c <USBD_Init>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d001      	beq.n	800e8e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8e0:	f7f4 f89c 	bl	8002a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8e4:	490f      	ldr	r1, [pc, #60]	; (800e924 <MX_USB_DEVICE_Init+0x58>)
 800e8e6:	480e      	ldr	r0, [pc, #56]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e8e8:	f7fb fde8 	bl	800a4bc <USBD_RegisterClass>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d001      	beq.n	800e8f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8f2:	f7f4 f893 	bl	8002a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8f6:	490c      	ldr	r1, [pc, #48]	; (800e928 <MX_USB_DEVICE_Init+0x5c>)
 800e8f8:	4809      	ldr	r0, [pc, #36]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e8fa:	f7fb fd1f 	bl	800a33c <USBD_CDC_RegisterInterface>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e904:	f7f4 f88a 	bl	8002a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e908:	4805      	ldr	r0, [pc, #20]	; (800e920 <MX_USB_DEVICE_Init+0x54>)
 800e90a:	f7fb fe0d 	bl	800a528 <USBD_Start>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e914:	f7f4 f882 	bl	8002a1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e918:	bf00      	nop
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	200005c8 	.word	0x200005c8
 800e920:	20005818 	.word	0x20005818
 800e924:	20000530 	.word	0x20000530
 800e928:	200005b4 	.word	0x200005b4

0800e92c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e930:	2200      	movs	r2, #0
 800e932:	4905      	ldr	r1, [pc, #20]	; (800e948 <CDC_Init_FS+0x1c>)
 800e934:	4805      	ldr	r0, [pc, #20]	; (800e94c <CDC_Init_FS+0x20>)
 800e936:	f7fb fd1b 	bl	800a370 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e93a:	4905      	ldr	r1, [pc, #20]	; (800e950 <CDC_Init_FS+0x24>)
 800e93c:	4803      	ldr	r0, [pc, #12]	; (800e94c <CDC_Init_FS+0x20>)
 800e93e:	f7fb fd39 	bl	800a3b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e942:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e944:	4618      	mov	r0, r3
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20005ef4 	.word	0x20005ef4
 800e94c:	20005818 	.word	0x20005818
 800e950:	20005af4 	.word	0x20005af4

0800e954 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e958:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	4603      	mov	r3, r0
 800e96c:	6039      	str	r1, [r7, #0]
 800e96e:	71fb      	strb	r3, [r7, #7]
 800e970:	4613      	mov	r3, r2
 800e972:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e974:	79fb      	ldrb	r3, [r7, #7]
 800e976:	2b23      	cmp	r3, #35	; 0x23
 800e978:	d84a      	bhi.n	800ea10 <CDC_Control_FS+0xac>
 800e97a:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <CDC_Control_FS+0x1c>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800ea11 	.word	0x0800ea11
 800e984:	0800ea11 	.word	0x0800ea11
 800e988:	0800ea11 	.word	0x0800ea11
 800e98c:	0800ea11 	.word	0x0800ea11
 800e990:	0800ea11 	.word	0x0800ea11
 800e994:	0800ea11 	.word	0x0800ea11
 800e998:	0800ea11 	.word	0x0800ea11
 800e99c:	0800ea11 	.word	0x0800ea11
 800e9a0:	0800ea11 	.word	0x0800ea11
 800e9a4:	0800ea11 	.word	0x0800ea11
 800e9a8:	0800ea11 	.word	0x0800ea11
 800e9ac:	0800ea11 	.word	0x0800ea11
 800e9b0:	0800ea11 	.word	0x0800ea11
 800e9b4:	0800ea11 	.word	0x0800ea11
 800e9b8:	0800ea11 	.word	0x0800ea11
 800e9bc:	0800ea11 	.word	0x0800ea11
 800e9c0:	0800ea11 	.word	0x0800ea11
 800e9c4:	0800ea11 	.word	0x0800ea11
 800e9c8:	0800ea11 	.word	0x0800ea11
 800e9cc:	0800ea11 	.word	0x0800ea11
 800e9d0:	0800ea11 	.word	0x0800ea11
 800e9d4:	0800ea11 	.word	0x0800ea11
 800e9d8:	0800ea11 	.word	0x0800ea11
 800e9dc:	0800ea11 	.word	0x0800ea11
 800e9e0:	0800ea11 	.word	0x0800ea11
 800e9e4:	0800ea11 	.word	0x0800ea11
 800e9e8:	0800ea11 	.word	0x0800ea11
 800e9ec:	0800ea11 	.word	0x0800ea11
 800e9f0:	0800ea11 	.word	0x0800ea11
 800e9f4:	0800ea11 	.word	0x0800ea11
 800e9f8:	0800ea11 	.word	0x0800ea11
 800e9fc:	0800ea11 	.word	0x0800ea11
 800ea00:	0800ea11 	.word	0x0800ea11
 800ea04:	0800ea11 	.word	0x0800ea11
 800ea08:	0800ea11 	.word	0x0800ea11
 800ea0c:	0800ea11 	.word	0x0800ea11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea10:	bf00      	nop
  }

  return (USBD_OK);
 800ea12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea2a:	6879      	ldr	r1, [r7, #4]
 800ea2c:	4805      	ldr	r0, [pc, #20]	; (800ea44 <CDC_Receive_FS+0x24>)
 800ea2e:	f7fb fcc1 	bl	800a3b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea32:	4804      	ldr	r0, [pc, #16]	; (800ea44 <CDC_Receive_FS+0x24>)
 800ea34:	f7fb fcdc 	bl	800a3f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20005818 	.word	0x20005818

0800ea48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	4613      	mov	r3, r2
 800ea54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ea5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	371c      	adds	r7, #28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
	...

0800ea6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	6039      	str	r1, [r7, #0]
 800ea76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	2212      	movs	r2, #18
 800ea7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea7e:	4b03      	ldr	r3, [pc, #12]	; (800ea8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	200005e4 	.word	0x200005e4

0800ea90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	4603      	mov	r3, r0
 800ea98:	6039      	str	r1, [r7, #0]
 800ea9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2204      	movs	r2, #4
 800eaa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eaa2:	4b03      	ldr	r3, [pc, #12]	; (800eab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	200005f8 	.word	0x200005f8

0800eab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	4603      	mov	r3, r0
 800eabc:	6039      	str	r1, [r7, #0]
 800eabe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d105      	bne.n	800ead2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eac6:	683a      	ldr	r2, [r7, #0]
 800eac8:	4907      	ldr	r1, [pc, #28]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800eaca:	4808      	ldr	r0, [pc, #32]	; (800eaec <USBD_FS_ProductStrDescriptor+0x38>)
 800eacc:	f7fc fed8 	bl	800b880 <USBD_GetString>
 800ead0:	e004      	b.n	800eadc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	4904      	ldr	r1, [pc, #16]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ead6:	4805      	ldr	r0, [pc, #20]	; (800eaec <USBD_FS_ProductStrDescriptor+0x38>)
 800ead8:	f7fc fed2 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eadc:	4b02      	ldr	r3, [pc, #8]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	200062f4 	.word	0x200062f4
 800eaec:	0800ff48 	.word	0x0800ff48

0800eaf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	6039      	str	r1, [r7, #0]
 800eafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	4904      	ldr	r1, [pc, #16]	; (800eb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb00:	4804      	ldr	r0, [pc, #16]	; (800eb14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb02:	f7fc febd 	bl	800b880 <USBD_GetString>
  return USBD_StrDesc;
 800eb06:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	200062f4 	.word	0x200062f4
 800eb14:	0800ff60 	.word	0x0800ff60

0800eb18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	6039      	str	r1, [r7, #0]
 800eb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	221a      	movs	r2, #26
 800eb28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb2a:	f000 f843 	bl	800ebb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb2e:	4b02      	ldr	r3, [pc, #8]	; (800eb38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	200005fc 	.word	0x200005fc

0800eb3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	6039      	str	r1, [r7, #0]
 800eb46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb48:	79fb      	ldrb	r3, [r7, #7]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d105      	bne.n	800eb5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	4907      	ldr	r1, [pc, #28]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb52:	4808      	ldr	r0, [pc, #32]	; (800eb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb54:	f7fc fe94 	bl	800b880 <USBD_GetString>
 800eb58:	e004      	b.n	800eb64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	4904      	ldr	r1, [pc, #16]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb5e:	4805      	ldr	r0, [pc, #20]	; (800eb74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb60:	f7fc fe8e 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb64:	4b02      	ldr	r3, [pc, #8]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	200062f4 	.word	0x200062f4
 800eb74:	0800ff74 	.word	0x0800ff74

0800eb78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	6039      	str	r1, [r7, #0]
 800eb82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb84:	79fb      	ldrb	r3, [r7, #7]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d105      	bne.n	800eb96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	4907      	ldr	r1, [pc, #28]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb8e:	4808      	ldr	r0, [pc, #32]	; (800ebb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb90:	f7fc fe76 	bl	800b880 <USBD_GetString>
 800eb94:	e004      	b.n	800eba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	4904      	ldr	r1, [pc, #16]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb9a:	4805      	ldr	r0, [pc, #20]	; (800ebb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb9c:	f7fc fe70 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eba0:	4b02      	ldr	r3, [pc, #8]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	200062f4 	.word	0x200062f4
 800ebb0:	0800ff80 	.word	0x0800ff80

0800ebb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ebba:	4b0f      	ldr	r3, [pc, #60]	; (800ebf8 <Get_SerialNum+0x44>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ebc0:	4b0e      	ldr	r3, [pc, #56]	; (800ebfc <Get_SerialNum+0x48>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebc6:	4b0e      	ldr	r3, [pc, #56]	; (800ec00 <Get_SerialNum+0x4c>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d009      	beq.n	800ebee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebda:	2208      	movs	r2, #8
 800ebdc:	4909      	ldr	r1, [pc, #36]	; (800ec04 <Get_SerialNum+0x50>)
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f000 f814 	bl	800ec0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ebe4:	2204      	movs	r2, #4
 800ebe6:	4908      	ldr	r1, [pc, #32]	; (800ec08 <Get_SerialNum+0x54>)
 800ebe8:	68b8      	ldr	r0, [r7, #8]
 800ebea:	f000 f80f 	bl	800ec0c <IntToUnicode>
  }
}
 800ebee:	bf00      	nop
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	1fff7a10 	.word	0x1fff7a10
 800ebfc:	1fff7a14 	.word	0x1fff7a14
 800ec00:	1fff7a18 	.word	0x1fff7a18
 800ec04:	200005fe 	.word	0x200005fe
 800ec08:	2000060e 	.word	0x2000060e

0800ec0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b087      	sub	sp, #28
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	4613      	mov	r3, r2
 800ec18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec1e:	2300      	movs	r3, #0
 800ec20:	75fb      	strb	r3, [r7, #23]
 800ec22:	e027      	b.n	800ec74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	0f1b      	lsrs	r3, r3, #28
 800ec28:	2b09      	cmp	r3, #9
 800ec2a:	d80b      	bhi.n	800ec44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	0f1b      	lsrs	r3, r3, #28
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	4619      	mov	r1, r3
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	440b      	add	r3, r1
 800ec3c:	3230      	adds	r2, #48	; 0x30
 800ec3e:	b2d2      	uxtb	r2, r2
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	e00a      	b.n	800ec5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	0f1b      	lsrs	r3, r3, #28
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	7dfb      	ldrb	r3, [r7, #23]
 800ec4c:	005b      	lsls	r3, r3, #1
 800ec4e:	4619      	mov	r1, r3
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	440b      	add	r3, r1
 800ec54:	3237      	adds	r2, #55	; 0x37
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	011b      	lsls	r3, r3, #4
 800ec5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	3301      	adds	r3, #1
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	4413      	add	r3, r2
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
 800ec70:	3301      	adds	r3, #1
 800ec72:	75fb      	strb	r3, [r7, #23]
 800ec74:	7dfa      	ldrb	r2, [r7, #23]
 800ec76:	79fb      	ldrb	r3, [r7, #7]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d3d3      	bcc.n	800ec24 <IntToUnicode+0x18>
  }
}
 800ec7c:	bf00      	nop
 800ec7e:	bf00      	nop
 800ec80:	371c      	adds	r7, #28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
	...

0800ec8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b08a      	sub	sp, #40	; 0x28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec94:	f107 0314 	add.w	r3, r7, #20
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	605a      	str	r2, [r3, #4]
 800ec9e:	609a      	str	r2, [r3, #8]
 800eca0:	60da      	str	r2, [r3, #12]
 800eca2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ecac:	d13a      	bne.n	800ed24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecae:	2300      	movs	r3, #0
 800ecb0:	613b      	str	r3, [r7, #16]
 800ecb2:	4b1e      	ldr	r3, [pc, #120]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb6:	4a1d      	ldr	r2, [pc, #116]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecb8:	f043 0301 	orr.w	r3, r3, #1
 800ecbc:	6313      	str	r3, [r2, #48]	; 0x30
 800ecbe:	4b1b      	ldr	r3, [pc, #108]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc2:	f003 0301 	and.w	r3, r3, #1
 800ecc6:	613b      	str	r3, [r7, #16]
 800ecc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ecca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ecce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecd0:	2302      	movs	r3, #2
 800ecd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecd8:	2303      	movs	r3, #3
 800ecda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ecdc:	230a      	movs	r3, #10
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ece0:	f107 0314 	add.w	r3, r7, #20
 800ece4:	4619      	mov	r1, r3
 800ece6:	4812      	ldr	r0, [pc, #72]	; (800ed30 <HAL_PCD_MspInit+0xa4>)
 800ece8:	f7f4 fd40 	bl	800376c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ecec:	4b0f      	ldr	r3, [pc, #60]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecf0:	4a0e      	ldr	r2, [pc, #56]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecf6:	6353      	str	r3, [r2, #52]	; 0x34
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	4b0b      	ldr	r3, [pc, #44]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ecfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed00:	4a0a      	ldr	r2, [pc, #40]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ed02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed06:	6453      	str	r3, [r2, #68]	; 0x44
 800ed08:	4b08      	ldr	r3, [pc, #32]	; (800ed2c <HAL_PCD_MspInit+0xa0>)
 800ed0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed10:	60fb      	str	r3, [r7, #12]
 800ed12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ed14:	2200      	movs	r2, #0
 800ed16:	2105      	movs	r1, #5
 800ed18:	2043      	movs	r0, #67	; 0x43
 800ed1a:	f7f4 fcfd 	bl	8003718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed1e:	2043      	movs	r0, #67	; 0x43
 800ed20:	f7f4 fd16 	bl	8003750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed24:	bf00      	nop
 800ed26:	3728      	adds	r7, #40	; 0x28
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	40023800 	.word	0x40023800
 800ed30:	40020000 	.word	0x40020000

0800ed34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	f7fb fc39 	bl	800a5c2 <USBD_LL_SetupStage>
}
 800ed50:	bf00      	nop
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ed6a:	78fa      	ldrb	r2, [r7, #3]
 800ed6c:	6879      	ldr	r1, [r7, #4]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	4413      	add	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	440b      	add	r3, r1
 800ed78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	78fb      	ldrb	r3, [r7, #3]
 800ed80:	4619      	mov	r1, r3
 800ed82:	f7fb fc73 	bl	800a66c <USBD_LL_DataOutStage>
}
 800ed86:	bf00      	nop
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b082      	sub	sp, #8
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
 800ed96:	460b      	mov	r3, r1
 800ed98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eda0:	78fa      	ldrb	r2, [r7, #3]
 800eda2:	6879      	ldr	r1, [r7, #4]
 800eda4:	4613      	mov	r3, r2
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	4413      	add	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	440b      	add	r3, r1
 800edae:	334c      	adds	r3, #76	; 0x4c
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	4619      	mov	r1, r3
 800edb6:	f7fb fd0c 	bl	800a7d2 <USBD_LL_DataInStage>
}
 800edba:	bf00      	nop
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b082      	sub	sp, #8
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fb fe40 	bl	800aa56 <USBD_LL_SOF>
}
 800edd6:	bf00      	nop
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b084      	sub	sp, #16
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ede6:	2301      	movs	r3, #1
 800ede8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d001      	beq.n	800edf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800edf2:	f7f3 fe13 	bl	8002a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800edfc:	7bfa      	ldrb	r2, [r7, #15]
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7fb fdea 	bl	800a9da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fb fd92 	bl	800a936 <USBD_LL_Reset>
}
 800ee12:	bf00      	nop
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
	...

0800ee1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fb fde5 	bl	800a9fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	6812      	ldr	r2, [r2, #0]
 800ee3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee42:	f043 0301 	orr.w	r3, r3, #1
 800ee46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6a1b      	ldr	r3, [r3, #32]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d005      	beq.n	800ee5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee50:	4b04      	ldr	r3, [pc, #16]	; (800ee64 <HAL_PCD_SuspendCallback+0x48>)
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	4a03      	ldr	r2, [pc, #12]	; (800ee64 <HAL_PCD_SuspendCallback+0x48>)
 800ee56:	f043 0306 	orr.w	r3, r3, #6
 800ee5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee5c:	bf00      	nop
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	e000ed00 	.word	0xe000ed00

0800ee68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fb fdd5 	bl	800aa26 <USBD_LL_Resume>
}
 800ee7c:	bf00      	nop
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee96:	78fa      	ldrb	r2, [r7, #3]
 800ee98:	4611      	mov	r1, r2
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fb fe2d 	bl	800aafa <USBD_LL_IsoOUTIncomplete>
}
 800eea0:	bf00      	nop
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeba:	78fa      	ldrb	r2, [r7, #3]
 800eebc:	4611      	mov	r1, r2
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fb fde9 	bl	800aa96 <USBD_LL_IsoINIncomplete>
}
 800eec4:	bf00      	nop
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fb fe3f 	bl	800ab5e <USBD_LL_DevConnected>
}
 800eee0:	bf00      	nop
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fb fe3c 	bl	800ab74 <USBD_LL_DevDisconnected>
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d13c      	bne.n	800ef8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef14:	4a20      	ldr	r2, [pc, #128]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a1e      	ldr	r2, [pc, #120]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef20:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef24:	4b1c      	ldr	r3, [pc, #112]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef2c:	4b1a      	ldr	r3, [pc, #104]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef2e:	2204      	movs	r2, #4
 800ef30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef32:	4b19      	ldr	r3, [pc, #100]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef34:	2202      	movs	r2, #2
 800ef36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef38:	4b17      	ldr	r3, [pc, #92]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef3e:	4b16      	ldr	r3, [pc, #88]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef40:	2202      	movs	r2, #2
 800ef42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef44:	4b14      	ldr	r3, [pc, #80]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef46:	2200      	movs	r2, #0
 800ef48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef4a:	4b13      	ldr	r3, [pc, #76]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef50:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ef56:	4b10      	ldr	r3, [pc, #64]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ef5c:	4b0e      	ldr	r3, [pc, #56]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ef62:	480d      	ldr	r0, [pc, #52]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef64:	f7f5 fd8f 	bl	8004a86 <HAL_PCD_Init>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d001      	beq.n	800ef72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ef6e:	f7f3 fd55 	bl	8002a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ef72:	2180      	movs	r1, #128	; 0x80
 800ef74:	4808      	ldr	r0, [pc, #32]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef76:	f7f6 ffe6 	bl	8005f46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ef7a:	2240      	movs	r2, #64	; 0x40
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	4806      	ldr	r0, [pc, #24]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef80:	f7f6 ff9a 	bl	8005eb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ef84:	2280      	movs	r2, #128	; 0x80
 800ef86:	2101      	movs	r1, #1
 800ef88:	4803      	ldr	r0, [pc, #12]	; (800ef98 <USBD_LL_Init+0x94>)
 800ef8a:	f7f6 ff95 	bl	8005eb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	200064f4 	.word	0x200064f4

0800ef9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7f5 fe84 	bl	8004cc0 <HAL_PCD_Start>
 800efb8:	4603      	mov	r3, r0
 800efba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efbc:	7bfb      	ldrb	r3, [r7, #15]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f000 f942 	bl	800f248 <USBD_Get_USB_Status>
 800efc4:	4603      	mov	r3, r0
 800efc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	4608      	mov	r0, r1
 800efdc:	4611      	mov	r1, r2
 800efde:	461a      	mov	r2, r3
 800efe0:	4603      	mov	r3, r0
 800efe2:	70fb      	strb	r3, [r7, #3]
 800efe4:	460b      	mov	r3, r1
 800efe6:	70bb      	strb	r3, [r7, #2]
 800efe8:	4613      	mov	r3, r2
 800efea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efec:	2300      	movs	r3, #0
 800efee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800effa:	78bb      	ldrb	r3, [r7, #2]
 800effc:	883a      	ldrh	r2, [r7, #0]
 800effe:	78f9      	ldrb	r1, [r7, #3]
 800f000:	f7f6 fb55 	bl	80056ae <HAL_PCD_EP_Open>
 800f004:	4603      	mov	r3, r0
 800f006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f008:	7bfb      	ldrb	r3, [r7, #15]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f000 f91c 	bl	800f248 <USBD_Get_USB_Status>
 800f010:	4603      	mov	r3, r0
 800f012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f014:	7bbb      	ldrb	r3, [r7, #14]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b084      	sub	sp, #16
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	460b      	mov	r3, r1
 800f028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f02a:	2300      	movs	r3, #0
 800f02c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f038:	78fa      	ldrb	r2, [r7, #3]
 800f03a:	4611      	mov	r1, r2
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f6 fb9e 	bl	800577e <HAL_PCD_EP_Close>
 800f042:	4603      	mov	r3, r0
 800f044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f046:	7bfb      	ldrb	r3, [r7, #15]
 800f048:	4618      	mov	r0, r3
 800f04a:	f000 f8fd 	bl	800f248 <USBD_Get_USB_Status>
 800f04e:	4603      	mov	r3, r0
 800f050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f052:	7bbb      	ldrb	r3, [r7, #14]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	460b      	mov	r3, r1
 800f066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f068:	2300      	movs	r3, #0
 800f06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f076:	78fa      	ldrb	r2, [r7, #3]
 800f078:	4611      	mov	r1, r2
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7f6 fc76 	bl	800596c <HAL_PCD_EP_SetStall>
 800f080:	4603      	mov	r3, r0
 800f082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f084:	7bfb      	ldrb	r3, [r7, #15]
 800f086:	4618      	mov	r0, r3
 800f088:	f000 f8de 	bl	800f248 <USBD_Get_USB_Status>
 800f08c:	4603      	mov	r3, r0
 800f08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f090:	7bbb      	ldrb	r3, [r7, #14]
}
 800f092:	4618      	mov	r0, r3
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b084      	sub	sp, #16
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0b4:	78fa      	ldrb	r2, [r7, #3]
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7f6 fcbb 	bl	8005a34 <HAL_PCD_EP_ClrStall>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0c2:	7bfb      	ldrb	r3, [r7, #15]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f000 f8bf 	bl	800f248 <USBD_Get_USB_Status>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f0ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	da0b      	bge.n	800f10c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0f4:	78fb      	ldrb	r3, [r7, #3]
 800f0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f0fa:	68f9      	ldr	r1, [r7, #12]
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	4413      	add	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	440b      	add	r3, r1
 800f106:	333e      	adds	r3, #62	; 0x3e
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	e00b      	b.n	800f124 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f10c:	78fb      	ldrb	r3, [r7, #3]
 800f10e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f112:	68f9      	ldr	r1, [r7, #12]
 800f114:	4613      	mov	r3, r2
 800f116:	00db      	lsls	r3, r3, #3
 800f118:	4413      	add	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	440b      	add	r3, r1
 800f11e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f122:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f124:	4618      	mov	r0, r3
 800f126:	3714      	adds	r7, #20
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	460b      	mov	r3, r1
 800f13a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f13c:	2300      	movs	r3, #0
 800f13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f14a:	78fa      	ldrb	r2, [r7, #3]
 800f14c:	4611      	mov	r1, r2
 800f14e:	4618      	mov	r0, r3
 800f150:	f7f6 fa88 	bl	8005664 <HAL_PCD_SetAddress>
 800f154:	4603      	mov	r3, r0
 800f156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f158:	7bfb      	ldrb	r3, [r7, #15]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 f874 	bl	800f248 <USBD_Get_USB_Status>
 800f160:	4603      	mov	r3, r0
 800f162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f164:	7bbb      	ldrb	r3, [r7, #14]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b086      	sub	sp, #24
 800f172:	af00      	add	r7, sp, #0
 800f174:	60f8      	str	r0, [r7, #12]
 800f176:	607a      	str	r2, [r7, #4]
 800f178:	603b      	str	r3, [r7, #0]
 800f17a:	460b      	mov	r3, r1
 800f17c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f182:	2300      	movs	r3, #0
 800f184:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f18c:	7af9      	ldrb	r1, [r7, #11]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	f7f6 fba1 	bl	80058d8 <HAL_PCD_EP_Transmit>
 800f196:	4603      	mov	r3, r0
 800f198:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 f853 	bl	800f248 <USBD_Get_USB_Status>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3718      	adds	r7, #24
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b086      	sub	sp, #24
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	607a      	str	r2, [r7, #4]
 800f1ba:	603b      	str	r3, [r7, #0]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1ce:	7af9      	ldrb	r1, [r7, #11]
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	f7f6 fb1d 	bl	8005812 <HAL_PCD_EP_Receive>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1dc:	7dfb      	ldrb	r3, [r7, #23]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 f832 	bl	800f248 <USBD_Get_USB_Status>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3718      	adds	r7, #24
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b082      	sub	sp, #8
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f204:	78fa      	ldrb	r2, [r7, #3]
 800f206:	4611      	mov	r1, r2
 800f208:	4618      	mov	r0, r3
 800f20a:	f7f6 fb4d 	bl	80058a8 <HAL_PCD_EP_GetRxCount>
 800f20e:	4603      	mov	r3, r0
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f220:	4b03      	ldr	r3, [pc, #12]	; (800f230 <USBD_static_malloc+0x18>)
}
 800f222:	4618      	mov	r0, r3
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	20006a00 	.word	0x20006a00

0800f234 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]

}
 800f23c:	bf00      	nop
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f248:	b480      	push	{r7}
 800f24a:	b085      	sub	sp, #20
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	4603      	mov	r3, r0
 800f250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f256:	79fb      	ldrb	r3, [r7, #7]
 800f258:	2b03      	cmp	r3, #3
 800f25a:	d817      	bhi.n	800f28c <USBD_Get_USB_Status+0x44>
 800f25c:	a201      	add	r2, pc, #4	; (adr r2, 800f264 <USBD_Get_USB_Status+0x1c>)
 800f25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f262:	bf00      	nop
 800f264:	0800f275 	.word	0x0800f275
 800f268:	0800f27b 	.word	0x0800f27b
 800f26c:	0800f281 	.word	0x0800f281
 800f270:	0800f287 	.word	0x0800f287
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f274:	2300      	movs	r3, #0
 800f276:	73fb      	strb	r3, [r7, #15]
    break;
 800f278:	e00b      	b.n	800f292 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f27a:	2303      	movs	r3, #3
 800f27c:	73fb      	strb	r3, [r7, #15]
    break;
 800f27e:	e008      	b.n	800f292 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f280:	2301      	movs	r3, #1
 800f282:	73fb      	strb	r3, [r7, #15]
    break;
 800f284:	e005      	b.n	800f292 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f286:	2303      	movs	r3, #3
 800f288:	73fb      	strb	r3, [r7, #15]
    break;
 800f28a:	e002      	b.n	800f292 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f28c:	2303      	movs	r3, #3
 800f28e:	73fb      	strb	r3, [r7, #15]
    break;
 800f290:	bf00      	nop
  }
  return usb_status;
 800f292:	7bfb      	ldrb	r3, [r7, #15]
}
 800f294:	4618      	mov	r0, r3
 800f296:	3714      	adds	r7, #20
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <__errno>:
 800f2a0:	4b01      	ldr	r3, [pc, #4]	; (800f2a8 <__errno+0x8>)
 800f2a2:	6818      	ldr	r0, [r3, #0]
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	20000618 	.word	0x20000618

0800f2ac <__libc_init_array>:
 800f2ac:	b570      	push	{r4, r5, r6, lr}
 800f2ae:	4d0d      	ldr	r5, [pc, #52]	; (800f2e4 <__libc_init_array+0x38>)
 800f2b0:	4c0d      	ldr	r4, [pc, #52]	; (800f2e8 <__libc_init_array+0x3c>)
 800f2b2:	1b64      	subs	r4, r4, r5
 800f2b4:	10a4      	asrs	r4, r4, #2
 800f2b6:	2600      	movs	r6, #0
 800f2b8:	42a6      	cmp	r6, r4
 800f2ba:	d109      	bne.n	800f2d0 <__libc_init_array+0x24>
 800f2bc:	4d0b      	ldr	r5, [pc, #44]	; (800f2ec <__libc_init_array+0x40>)
 800f2be:	4c0c      	ldr	r4, [pc, #48]	; (800f2f0 <__libc_init_array+0x44>)
 800f2c0:	f000 fcba 	bl	800fc38 <_init>
 800f2c4:	1b64      	subs	r4, r4, r5
 800f2c6:	10a4      	asrs	r4, r4, #2
 800f2c8:	2600      	movs	r6, #0
 800f2ca:	42a6      	cmp	r6, r4
 800f2cc:	d105      	bne.n	800f2da <__libc_init_array+0x2e>
 800f2ce:	bd70      	pop	{r4, r5, r6, pc}
 800f2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2d4:	4798      	blx	r3
 800f2d6:	3601      	adds	r6, #1
 800f2d8:	e7ee      	b.n	800f2b8 <__libc_init_array+0xc>
 800f2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2de:	4798      	blx	r3
 800f2e0:	3601      	adds	r6, #1
 800f2e2:	e7f2      	b.n	800f2ca <__libc_init_array+0x1e>
 800f2e4:	08010404 	.word	0x08010404
 800f2e8:	08010404 	.word	0x08010404
 800f2ec:	08010404 	.word	0x08010404
 800f2f0:	08010408 	.word	0x08010408

0800f2f4 <malloc>:
 800f2f4:	4b02      	ldr	r3, [pc, #8]	; (800f300 <malloc+0xc>)
 800f2f6:	4601      	mov	r1, r0
 800f2f8:	6818      	ldr	r0, [r3, #0]
 800f2fa:	f000 b88d 	b.w	800f418 <_malloc_r>
 800f2fe:	bf00      	nop
 800f300:	20000618 	.word	0x20000618

0800f304 <free>:
 800f304:	4b02      	ldr	r3, [pc, #8]	; (800f310 <free+0xc>)
 800f306:	4601      	mov	r1, r0
 800f308:	6818      	ldr	r0, [r3, #0]
 800f30a:	f000 b819 	b.w	800f340 <_free_r>
 800f30e:	bf00      	nop
 800f310:	20000618 	.word	0x20000618

0800f314 <memcpy>:
 800f314:	440a      	add	r2, r1
 800f316:	4291      	cmp	r1, r2
 800f318:	f100 33ff 	add.w	r3, r0, #4294967295
 800f31c:	d100      	bne.n	800f320 <memcpy+0xc>
 800f31e:	4770      	bx	lr
 800f320:	b510      	push	{r4, lr}
 800f322:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f32a:	4291      	cmp	r1, r2
 800f32c:	d1f9      	bne.n	800f322 <memcpy+0xe>
 800f32e:	bd10      	pop	{r4, pc}

0800f330 <memset>:
 800f330:	4402      	add	r2, r0
 800f332:	4603      	mov	r3, r0
 800f334:	4293      	cmp	r3, r2
 800f336:	d100      	bne.n	800f33a <memset+0xa>
 800f338:	4770      	bx	lr
 800f33a:	f803 1b01 	strb.w	r1, [r3], #1
 800f33e:	e7f9      	b.n	800f334 <memset+0x4>

0800f340 <_free_r>:
 800f340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f342:	2900      	cmp	r1, #0
 800f344:	d044      	beq.n	800f3d0 <_free_r+0x90>
 800f346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f34a:	9001      	str	r0, [sp, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f1a1 0404 	sub.w	r4, r1, #4
 800f352:	bfb8      	it	lt
 800f354:	18e4      	addlt	r4, r4, r3
 800f356:	f000 f91f 	bl	800f598 <__malloc_lock>
 800f35a:	4a1e      	ldr	r2, [pc, #120]	; (800f3d4 <_free_r+0x94>)
 800f35c:	9801      	ldr	r0, [sp, #4]
 800f35e:	6813      	ldr	r3, [r2, #0]
 800f360:	b933      	cbnz	r3, 800f370 <_free_r+0x30>
 800f362:	6063      	str	r3, [r4, #4]
 800f364:	6014      	str	r4, [r2, #0]
 800f366:	b003      	add	sp, #12
 800f368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f36c:	f000 b91a 	b.w	800f5a4 <__malloc_unlock>
 800f370:	42a3      	cmp	r3, r4
 800f372:	d908      	bls.n	800f386 <_free_r+0x46>
 800f374:	6825      	ldr	r5, [r4, #0]
 800f376:	1961      	adds	r1, r4, r5
 800f378:	428b      	cmp	r3, r1
 800f37a:	bf01      	itttt	eq
 800f37c:	6819      	ldreq	r1, [r3, #0]
 800f37e:	685b      	ldreq	r3, [r3, #4]
 800f380:	1949      	addeq	r1, r1, r5
 800f382:	6021      	streq	r1, [r4, #0]
 800f384:	e7ed      	b.n	800f362 <_free_r+0x22>
 800f386:	461a      	mov	r2, r3
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	b10b      	cbz	r3, 800f390 <_free_r+0x50>
 800f38c:	42a3      	cmp	r3, r4
 800f38e:	d9fa      	bls.n	800f386 <_free_r+0x46>
 800f390:	6811      	ldr	r1, [r2, #0]
 800f392:	1855      	adds	r5, r2, r1
 800f394:	42a5      	cmp	r5, r4
 800f396:	d10b      	bne.n	800f3b0 <_free_r+0x70>
 800f398:	6824      	ldr	r4, [r4, #0]
 800f39a:	4421      	add	r1, r4
 800f39c:	1854      	adds	r4, r2, r1
 800f39e:	42a3      	cmp	r3, r4
 800f3a0:	6011      	str	r1, [r2, #0]
 800f3a2:	d1e0      	bne.n	800f366 <_free_r+0x26>
 800f3a4:	681c      	ldr	r4, [r3, #0]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	6053      	str	r3, [r2, #4]
 800f3aa:	4421      	add	r1, r4
 800f3ac:	6011      	str	r1, [r2, #0]
 800f3ae:	e7da      	b.n	800f366 <_free_r+0x26>
 800f3b0:	d902      	bls.n	800f3b8 <_free_r+0x78>
 800f3b2:	230c      	movs	r3, #12
 800f3b4:	6003      	str	r3, [r0, #0]
 800f3b6:	e7d6      	b.n	800f366 <_free_r+0x26>
 800f3b8:	6825      	ldr	r5, [r4, #0]
 800f3ba:	1961      	adds	r1, r4, r5
 800f3bc:	428b      	cmp	r3, r1
 800f3be:	bf04      	itt	eq
 800f3c0:	6819      	ldreq	r1, [r3, #0]
 800f3c2:	685b      	ldreq	r3, [r3, #4]
 800f3c4:	6063      	str	r3, [r4, #4]
 800f3c6:	bf04      	itt	eq
 800f3c8:	1949      	addeq	r1, r1, r5
 800f3ca:	6021      	streq	r1, [r4, #0]
 800f3cc:	6054      	str	r4, [r2, #4]
 800f3ce:	e7ca      	b.n	800f366 <_free_r+0x26>
 800f3d0:	b003      	add	sp, #12
 800f3d2:	bd30      	pop	{r4, r5, pc}
 800f3d4:	20006c20 	.word	0x20006c20

0800f3d8 <sbrk_aligned>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	4e0e      	ldr	r6, [pc, #56]	; (800f414 <sbrk_aligned+0x3c>)
 800f3dc:	460c      	mov	r4, r1
 800f3de:	6831      	ldr	r1, [r6, #0]
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	b911      	cbnz	r1, 800f3ea <sbrk_aligned+0x12>
 800f3e4:	f000 f88c 	bl	800f500 <_sbrk_r>
 800f3e8:	6030      	str	r0, [r6, #0]
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f000 f887 	bl	800f500 <_sbrk_r>
 800f3f2:	1c43      	adds	r3, r0, #1
 800f3f4:	d00a      	beq.n	800f40c <sbrk_aligned+0x34>
 800f3f6:	1cc4      	adds	r4, r0, #3
 800f3f8:	f024 0403 	bic.w	r4, r4, #3
 800f3fc:	42a0      	cmp	r0, r4
 800f3fe:	d007      	beq.n	800f410 <sbrk_aligned+0x38>
 800f400:	1a21      	subs	r1, r4, r0
 800f402:	4628      	mov	r0, r5
 800f404:	f000 f87c 	bl	800f500 <_sbrk_r>
 800f408:	3001      	adds	r0, #1
 800f40a:	d101      	bne.n	800f410 <sbrk_aligned+0x38>
 800f40c:	f04f 34ff 	mov.w	r4, #4294967295
 800f410:	4620      	mov	r0, r4
 800f412:	bd70      	pop	{r4, r5, r6, pc}
 800f414:	20006c24 	.word	0x20006c24

0800f418 <_malloc_r>:
 800f418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41c:	1ccd      	adds	r5, r1, #3
 800f41e:	f025 0503 	bic.w	r5, r5, #3
 800f422:	3508      	adds	r5, #8
 800f424:	2d0c      	cmp	r5, #12
 800f426:	bf38      	it	cc
 800f428:	250c      	movcc	r5, #12
 800f42a:	2d00      	cmp	r5, #0
 800f42c:	4607      	mov	r7, r0
 800f42e:	db01      	blt.n	800f434 <_malloc_r+0x1c>
 800f430:	42a9      	cmp	r1, r5
 800f432:	d905      	bls.n	800f440 <_malloc_r+0x28>
 800f434:	230c      	movs	r3, #12
 800f436:	603b      	str	r3, [r7, #0]
 800f438:	2600      	movs	r6, #0
 800f43a:	4630      	mov	r0, r6
 800f43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f440:	4e2e      	ldr	r6, [pc, #184]	; (800f4fc <_malloc_r+0xe4>)
 800f442:	f000 f8a9 	bl	800f598 <__malloc_lock>
 800f446:	6833      	ldr	r3, [r6, #0]
 800f448:	461c      	mov	r4, r3
 800f44a:	bb34      	cbnz	r4, 800f49a <_malloc_r+0x82>
 800f44c:	4629      	mov	r1, r5
 800f44e:	4638      	mov	r0, r7
 800f450:	f7ff ffc2 	bl	800f3d8 <sbrk_aligned>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	4604      	mov	r4, r0
 800f458:	d14d      	bne.n	800f4f6 <_malloc_r+0xde>
 800f45a:	6834      	ldr	r4, [r6, #0]
 800f45c:	4626      	mov	r6, r4
 800f45e:	2e00      	cmp	r6, #0
 800f460:	d140      	bne.n	800f4e4 <_malloc_r+0xcc>
 800f462:	6823      	ldr	r3, [r4, #0]
 800f464:	4631      	mov	r1, r6
 800f466:	4638      	mov	r0, r7
 800f468:	eb04 0803 	add.w	r8, r4, r3
 800f46c:	f000 f848 	bl	800f500 <_sbrk_r>
 800f470:	4580      	cmp	r8, r0
 800f472:	d13a      	bne.n	800f4ea <_malloc_r+0xd2>
 800f474:	6821      	ldr	r1, [r4, #0]
 800f476:	3503      	adds	r5, #3
 800f478:	1a6d      	subs	r5, r5, r1
 800f47a:	f025 0503 	bic.w	r5, r5, #3
 800f47e:	3508      	adds	r5, #8
 800f480:	2d0c      	cmp	r5, #12
 800f482:	bf38      	it	cc
 800f484:	250c      	movcc	r5, #12
 800f486:	4629      	mov	r1, r5
 800f488:	4638      	mov	r0, r7
 800f48a:	f7ff ffa5 	bl	800f3d8 <sbrk_aligned>
 800f48e:	3001      	adds	r0, #1
 800f490:	d02b      	beq.n	800f4ea <_malloc_r+0xd2>
 800f492:	6823      	ldr	r3, [r4, #0]
 800f494:	442b      	add	r3, r5
 800f496:	6023      	str	r3, [r4, #0]
 800f498:	e00e      	b.n	800f4b8 <_malloc_r+0xa0>
 800f49a:	6822      	ldr	r2, [r4, #0]
 800f49c:	1b52      	subs	r2, r2, r5
 800f49e:	d41e      	bmi.n	800f4de <_malloc_r+0xc6>
 800f4a0:	2a0b      	cmp	r2, #11
 800f4a2:	d916      	bls.n	800f4d2 <_malloc_r+0xba>
 800f4a4:	1961      	adds	r1, r4, r5
 800f4a6:	42a3      	cmp	r3, r4
 800f4a8:	6025      	str	r5, [r4, #0]
 800f4aa:	bf18      	it	ne
 800f4ac:	6059      	strne	r1, [r3, #4]
 800f4ae:	6863      	ldr	r3, [r4, #4]
 800f4b0:	bf08      	it	eq
 800f4b2:	6031      	streq	r1, [r6, #0]
 800f4b4:	5162      	str	r2, [r4, r5]
 800f4b6:	604b      	str	r3, [r1, #4]
 800f4b8:	4638      	mov	r0, r7
 800f4ba:	f104 060b 	add.w	r6, r4, #11
 800f4be:	f000 f871 	bl	800f5a4 <__malloc_unlock>
 800f4c2:	f026 0607 	bic.w	r6, r6, #7
 800f4c6:	1d23      	adds	r3, r4, #4
 800f4c8:	1af2      	subs	r2, r6, r3
 800f4ca:	d0b6      	beq.n	800f43a <_malloc_r+0x22>
 800f4cc:	1b9b      	subs	r3, r3, r6
 800f4ce:	50a3      	str	r3, [r4, r2]
 800f4d0:	e7b3      	b.n	800f43a <_malloc_r+0x22>
 800f4d2:	6862      	ldr	r2, [r4, #4]
 800f4d4:	42a3      	cmp	r3, r4
 800f4d6:	bf0c      	ite	eq
 800f4d8:	6032      	streq	r2, [r6, #0]
 800f4da:	605a      	strne	r2, [r3, #4]
 800f4dc:	e7ec      	b.n	800f4b8 <_malloc_r+0xa0>
 800f4de:	4623      	mov	r3, r4
 800f4e0:	6864      	ldr	r4, [r4, #4]
 800f4e2:	e7b2      	b.n	800f44a <_malloc_r+0x32>
 800f4e4:	4634      	mov	r4, r6
 800f4e6:	6876      	ldr	r6, [r6, #4]
 800f4e8:	e7b9      	b.n	800f45e <_malloc_r+0x46>
 800f4ea:	230c      	movs	r3, #12
 800f4ec:	603b      	str	r3, [r7, #0]
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	f000 f858 	bl	800f5a4 <__malloc_unlock>
 800f4f4:	e7a1      	b.n	800f43a <_malloc_r+0x22>
 800f4f6:	6025      	str	r5, [r4, #0]
 800f4f8:	e7de      	b.n	800f4b8 <_malloc_r+0xa0>
 800f4fa:	bf00      	nop
 800f4fc:	20006c20 	.word	0x20006c20

0800f500 <_sbrk_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4d06      	ldr	r5, [pc, #24]	; (800f51c <_sbrk_r+0x1c>)
 800f504:	2300      	movs	r3, #0
 800f506:	4604      	mov	r4, r0
 800f508:	4608      	mov	r0, r1
 800f50a:	602b      	str	r3, [r5, #0]
 800f50c:	f7f3 ff74 	bl	80033f8 <_sbrk>
 800f510:	1c43      	adds	r3, r0, #1
 800f512:	d102      	bne.n	800f51a <_sbrk_r+0x1a>
 800f514:	682b      	ldr	r3, [r5, #0]
 800f516:	b103      	cbz	r3, 800f51a <_sbrk_r+0x1a>
 800f518:	6023      	str	r3, [r4, #0]
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
 800f51c:	20006c28 	.word	0x20006c28

0800f520 <siprintf>:
 800f520:	b40e      	push	{r1, r2, r3}
 800f522:	b500      	push	{lr}
 800f524:	b09c      	sub	sp, #112	; 0x70
 800f526:	ab1d      	add	r3, sp, #116	; 0x74
 800f528:	9002      	str	r0, [sp, #8]
 800f52a:	9006      	str	r0, [sp, #24]
 800f52c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f530:	4809      	ldr	r0, [pc, #36]	; (800f558 <siprintf+0x38>)
 800f532:	9107      	str	r1, [sp, #28]
 800f534:	9104      	str	r1, [sp, #16]
 800f536:	4909      	ldr	r1, [pc, #36]	; (800f55c <siprintf+0x3c>)
 800f538:	f853 2b04 	ldr.w	r2, [r3], #4
 800f53c:	9105      	str	r1, [sp, #20]
 800f53e:	6800      	ldr	r0, [r0, #0]
 800f540:	9301      	str	r3, [sp, #4]
 800f542:	a902      	add	r1, sp, #8
 800f544:	f000 f890 	bl	800f668 <_svfiprintf_r>
 800f548:	9b02      	ldr	r3, [sp, #8]
 800f54a:	2200      	movs	r2, #0
 800f54c:	701a      	strb	r2, [r3, #0]
 800f54e:	b01c      	add	sp, #112	; 0x70
 800f550:	f85d eb04 	ldr.w	lr, [sp], #4
 800f554:	b003      	add	sp, #12
 800f556:	4770      	bx	lr
 800f558:	20000618 	.word	0x20000618
 800f55c:	ffff0208 	.word	0xffff0208

0800f560 <strcpy>:
 800f560:	4603      	mov	r3, r0
 800f562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f566:	f803 2b01 	strb.w	r2, [r3], #1
 800f56a:	2a00      	cmp	r2, #0
 800f56c:	d1f9      	bne.n	800f562 <strcpy+0x2>
 800f56e:	4770      	bx	lr

0800f570 <strncpy>:
 800f570:	b510      	push	{r4, lr}
 800f572:	3901      	subs	r1, #1
 800f574:	4603      	mov	r3, r0
 800f576:	b132      	cbz	r2, 800f586 <strncpy+0x16>
 800f578:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f57c:	f803 4b01 	strb.w	r4, [r3], #1
 800f580:	3a01      	subs	r2, #1
 800f582:	2c00      	cmp	r4, #0
 800f584:	d1f7      	bne.n	800f576 <strncpy+0x6>
 800f586:	441a      	add	r2, r3
 800f588:	2100      	movs	r1, #0
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d100      	bne.n	800f590 <strncpy+0x20>
 800f58e:	bd10      	pop	{r4, pc}
 800f590:	f803 1b01 	strb.w	r1, [r3], #1
 800f594:	e7f9      	b.n	800f58a <strncpy+0x1a>
	...

0800f598 <__malloc_lock>:
 800f598:	4801      	ldr	r0, [pc, #4]	; (800f5a0 <__malloc_lock+0x8>)
 800f59a:	f000 baf9 	b.w	800fb90 <__retarget_lock_acquire_recursive>
 800f59e:	bf00      	nop
 800f5a0:	20006c2c 	.word	0x20006c2c

0800f5a4 <__malloc_unlock>:
 800f5a4:	4801      	ldr	r0, [pc, #4]	; (800f5ac <__malloc_unlock+0x8>)
 800f5a6:	f000 baf4 	b.w	800fb92 <__retarget_lock_release_recursive>
 800f5aa:	bf00      	nop
 800f5ac:	20006c2c 	.word	0x20006c2c

0800f5b0 <__ssputs_r>:
 800f5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b4:	688e      	ldr	r6, [r1, #8]
 800f5b6:	429e      	cmp	r6, r3
 800f5b8:	4682      	mov	sl, r0
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	4690      	mov	r8, r2
 800f5be:	461f      	mov	r7, r3
 800f5c0:	d838      	bhi.n	800f634 <__ssputs_r+0x84>
 800f5c2:	898a      	ldrh	r2, [r1, #12]
 800f5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5c8:	d032      	beq.n	800f630 <__ssputs_r+0x80>
 800f5ca:	6825      	ldr	r5, [r4, #0]
 800f5cc:	6909      	ldr	r1, [r1, #16]
 800f5ce:	eba5 0901 	sub.w	r9, r5, r1
 800f5d2:	6965      	ldr	r5, [r4, #20]
 800f5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5dc:	3301      	adds	r3, #1
 800f5de:	444b      	add	r3, r9
 800f5e0:	106d      	asrs	r5, r5, #1
 800f5e2:	429d      	cmp	r5, r3
 800f5e4:	bf38      	it	cc
 800f5e6:	461d      	movcc	r5, r3
 800f5e8:	0553      	lsls	r3, r2, #21
 800f5ea:	d531      	bpl.n	800f650 <__ssputs_r+0xa0>
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	f7ff ff13 	bl	800f418 <_malloc_r>
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	b950      	cbnz	r0, 800f60c <__ssputs_r+0x5c>
 800f5f6:	230c      	movs	r3, #12
 800f5f8:	f8ca 3000 	str.w	r3, [sl]
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60c:	6921      	ldr	r1, [r4, #16]
 800f60e:	464a      	mov	r2, r9
 800f610:	f7ff fe80 	bl	800f314 <memcpy>
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f61e:	81a3      	strh	r3, [r4, #12]
 800f620:	6126      	str	r6, [r4, #16]
 800f622:	6165      	str	r5, [r4, #20]
 800f624:	444e      	add	r6, r9
 800f626:	eba5 0509 	sub.w	r5, r5, r9
 800f62a:	6026      	str	r6, [r4, #0]
 800f62c:	60a5      	str	r5, [r4, #8]
 800f62e:	463e      	mov	r6, r7
 800f630:	42be      	cmp	r6, r7
 800f632:	d900      	bls.n	800f636 <__ssputs_r+0x86>
 800f634:	463e      	mov	r6, r7
 800f636:	6820      	ldr	r0, [r4, #0]
 800f638:	4632      	mov	r2, r6
 800f63a:	4641      	mov	r1, r8
 800f63c:	f000 faaa 	bl	800fb94 <memmove>
 800f640:	68a3      	ldr	r3, [r4, #8]
 800f642:	1b9b      	subs	r3, r3, r6
 800f644:	60a3      	str	r3, [r4, #8]
 800f646:	6823      	ldr	r3, [r4, #0]
 800f648:	4433      	add	r3, r6
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	2000      	movs	r0, #0
 800f64e:	e7db      	b.n	800f608 <__ssputs_r+0x58>
 800f650:	462a      	mov	r2, r5
 800f652:	f000 fab9 	bl	800fbc8 <_realloc_r>
 800f656:	4606      	mov	r6, r0
 800f658:	2800      	cmp	r0, #0
 800f65a:	d1e1      	bne.n	800f620 <__ssputs_r+0x70>
 800f65c:	6921      	ldr	r1, [r4, #16]
 800f65e:	4650      	mov	r0, sl
 800f660:	f7ff fe6e 	bl	800f340 <_free_r>
 800f664:	e7c7      	b.n	800f5f6 <__ssputs_r+0x46>
	...

0800f668 <_svfiprintf_r>:
 800f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66c:	4698      	mov	r8, r3
 800f66e:	898b      	ldrh	r3, [r1, #12]
 800f670:	061b      	lsls	r3, r3, #24
 800f672:	b09d      	sub	sp, #116	; 0x74
 800f674:	4607      	mov	r7, r0
 800f676:	460d      	mov	r5, r1
 800f678:	4614      	mov	r4, r2
 800f67a:	d50e      	bpl.n	800f69a <_svfiprintf_r+0x32>
 800f67c:	690b      	ldr	r3, [r1, #16]
 800f67e:	b963      	cbnz	r3, 800f69a <_svfiprintf_r+0x32>
 800f680:	2140      	movs	r1, #64	; 0x40
 800f682:	f7ff fec9 	bl	800f418 <_malloc_r>
 800f686:	6028      	str	r0, [r5, #0]
 800f688:	6128      	str	r0, [r5, #16]
 800f68a:	b920      	cbnz	r0, 800f696 <_svfiprintf_r+0x2e>
 800f68c:	230c      	movs	r3, #12
 800f68e:	603b      	str	r3, [r7, #0]
 800f690:	f04f 30ff 	mov.w	r0, #4294967295
 800f694:	e0d1      	b.n	800f83a <_svfiprintf_r+0x1d2>
 800f696:	2340      	movs	r3, #64	; 0x40
 800f698:	616b      	str	r3, [r5, #20]
 800f69a:	2300      	movs	r3, #0
 800f69c:	9309      	str	r3, [sp, #36]	; 0x24
 800f69e:	2320      	movs	r3, #32
 800f6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6a8:	2330      	movs	r3, #48	; 0x30
 800f6aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f854 <_svfiprintf_r+0x1ec>
 800f6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6b2:	f04f 0901 	mov.w	r9, #1
 800f6b6:	4623      	mov	r3, r4
 800f6b8:	469a      	mov	sl, r3
 800f6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6be:	b10a      	cbz	r2, 800f6c4 <_svfiprintf_r+0x5c>
 800f6c0:	2a25      	cmp	r2, #37	; 0x25
 800f6c2:	d1f9      	bne.n	800f6b8 <_svfiprintf_r+0x50>
 800f6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f6c8:	d00b      	beq.n	800f6e2 <_svfiprintf_r+0x7a>
 800f6ca:	465b      	mov	r3, fp
 800f6cc:	4622      	mov	r2, r4
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	f7ff ff6d 	bl	800f5b0 <__ssputs_r>
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	f000 80aa 	beq.w	800f830 <_svfiprintf_r+0x1c8>
 800f6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6de:	445a      	add	r2, fp
 800f6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800f6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f000 80a2 	beq.w	800f830 <_svfiprintf_r+0x1c8>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6f6:	f10a 0a01 	add.w	sl, sl, #1
 800f6fa:	9304      	str	r3, [sp, #16]
 800f6fc:	9307      	str	r3, [sp, #28]
 800f6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f702:	931a      	str	r3, [sp, #104]	; 0x68
 800f704:	4654      	mov	r4, sl
 800f706:	2205      	movs	r2, #5
 800f708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70c:	4851      	ldr	r0, [pc, #324]	; (800f854 <_svfiprintf_r+0x1ec>)
 800f70e:	f7f0 fd6f 	bl	80001f0 <memchr>
 800f712:	9a04      	ldr	r2, [sp, #16]
 800f714:	b9d8      	cbnz	r0, 800f74e <_svfiprintf_r+0xe6>
 800f716:	06d0      	lsls	r0, r2, #27
 800f718:	bf44      	itt	mi
 800f71a:	2320      	movmi	r3, #32
 800f71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f720:	0711      	lsls	r1, r2, #28
 800f722:	bf44      	itt	mi
 800f724:	232b      	movmi	r3, #43	; 0x2b
 800f726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f72a:	f89a 3000 	ldrb.w	r3, [sl]
 800f72e:	2b2a      	cmp	r3, #42	; 0x2a
 800f730:	d015      	beq.n	800f75e <_svfiprintf_r+0xf6>
 800f732:	9a07      	ldr	r2, [sp, #28]
 800f734:	4654      	mov	r4, sl
 800f736:	2000      	movs	r0, #0
 800f738:	f04f 0c0a 	mov.w	ip, #10
 800f73c:	4621      	mov	r1, r4
 800f73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f742:	3b30      	subs	r3, #48	; 0x30
 800f744:	2b09      	cmp	r3, #9
 800f746:	d94e      	bls.n	800f7e6 <_svfiprintf_r+0x17e>
 800f748:	b1b0      	cbz	r0, 800f778 <_svfiprintf_r+0x110>
 800f74a:	9207      	str	r2, [sp, #28]
 800f74c:	e014      	b.n	800f778 <_svfiprintf_r+0x110>
 800f74e:	eba0 0308 	sub.w	r3, r0, r8
 800f752:	fa09 f303 	lsl.w	r3, r9, r3
 800f756:	4313      	orrs	r3, r2
 800f758:	9304      	str	r3, [sp, #16]
 800f75a:	46a2      	mov	sl, r4
 800f75c:	e7d2      	b.n	800f704 <_svfiprintf_r+0x9c>
 800f75e:	9b03      	ldr	r3, [sp, #12]
 800f760:	1d19      	adds	r1, r3, #4
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	9103      	str	r1, [sp, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	bfbb      	ittet	lt
 800f76a:	425b      	neglt	r3, r3
 800f76c:	f042 0202 	orrlt.w	r2, r2, #2
 800f770:	9307      	strge	r3, [sp, #28]
 800f772:	9307      	strlt	r3, [sp, #28]
 800f774:	bfb8      	it	lt
 800f776:	9204      	strlt	r2, [sp, #16]
 800f778:	7823      	ldrb	r3, [r4, #0]
 800f77a:	2b2e      	cmp	r3, #46	; 0x2e
 800f77c:	d10c      	bne.n	800f798 <_svfiprintf_r+0x130>
 800f77e:	7863      	ldrb	r3, [r4, #1]
 800f780:	2b2a      	cmp	r3, #42	; 0x2a
 800f782:	d135      	bne.n	800f7f0 <_svfiprintf_r+0x188>
 800f784:	9b03      	ldr	r3, [sp, #12]
 800f786:	1d1a      	adds	r2, r3, #4
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	9203      	str	r2, [sp, #12]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	bfb8      	it	lt
 800f790:	f04f 33ff 	movlt.w	r3, #4294967295
 800f794:	3402      	adds	r4, #2
 800f796:	9305      	str	r3, [sp, #20]
 800f798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f864 <_svfiprintf_r+0x1fc>
 800f79c:	7821      	ldrb	r1, [r4, #0]
 800f79e:	2203      	movs	r2, #3
 800f7a0:	4650      	mov	r0, sl
 800f7a2:	f7f0 fd25 	bl	80001f0 <memchr>
 800f7a6:	b140      	cbz	r0, 800f7ba <_svfiprintf_r+0x152>
 800f7a8:	2340      	movs	r3, #64	; 0x40
 800f7aa:	eba0 000a 	sub.w	r0, r0, sl
 800f7ae:	fa03 f000 	lsl.w	r0, r3, r0
 800f7b2:	9b04      	ldr	r3, [sp, #16]
 800f7b4:	4303      	orrs	r3, r0
 800f7b6:	3401      	adds	r4, #1
 800f7b8:	9304      	str	r3, [sp, #16]
 800f7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7be:	4826      	ldr	r0, [pc, #152]	; (800f858 <_svfiprintf_r+0x1f0>)
 800f7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7c4:	2206      	movs	r2, #6
 800f7c6:	f7f0 fd13 	bl	80001f0 <memchr>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	d038      	beq.n	800f840 <_svfiprintf_r+0x1d8>
 800f7ce:	4b23      	ldr	r3, [pc, #140]	; (800f85c <_svfiprintf_r+0x1f4>)
 800f7d0:	bb1b      	cbnz	r3, 800f81a <_svfiprintf_r+0x1b2>
 800f7d2:	9b03      	ldr	r3, [sp, #12]
 800f7d4:	3307      	adds	r3, #7
 800f7d6:	f023 0307 	bic.w	r3, r3, #7
 800f7da:	3308      	adds	r3, #8
 800f7dc:	9303      	str	r3, [sp, #12]
 800f7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e0:	4433      	add	r3, r6
 800f7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f7e4:	e767      	b.n	800f6b6 <_svfiprintf_r+0x4e>
 800f7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	2001      	movs	r0, #1
 800f7ee:	e7a5      	b.n	800f73c <_svfiprintf_r+0xd4>
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	3401      	adds	r4, #1
 800f7f4:	9305      	str	r3, [sp, #20]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	f04f 0c0a 	mov.w	ip, #10
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f802:	3a30      	subs	r2, #48	; 0x30
 800f804:	2a09      	cmp	r2, #9
 800f806:	d903      	bls.n	800f810 <_svfiprintf_r+0x1a8>
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d0c5      	beq.n	800f798 <_svfiprintf_r+0x130>
 800f80c:	9105      	str	r1, [sp, #20]
 800f80e:	e7c3      	b.n	800f798 <_svfiprintf_r+0x130>
 800f810:	fb0c 2101 	mla	r1, ip, r1, r2
 800f814:	4604      	mov	r4, r0
 800f816:	2301      	movs	r3, #1
 800f818:	e7f0      	b.n	800f7fc <_svfiprintf_r+0x194>
 800f81a:	ab03      	add	r3, sp, #12
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	462a      	mov	r2, r5
 800f820:	4b0f      	ldr	r3, [pc, #60]	; (800f860 <_svfiprintf_r+0x1f8>)
 800f822:	a904      	add	r1, sp, #16
 800f824:	4638      	mov	r0, r7
 800f826:	f3af 8000 	nop.w
 800f82a:	1c42      	adds	r2, r0, #1
 800f82c:	4606      	mov	r6, r0
 800f82e:	d1d6      	bne.n	800f7de <_svfiprintf_r+0x176>
 800f830:	89ab      	ldrh	r3, [r5, #12]
 800f832:	065b      	lsls	r3, r3, #25
 800f834:	f53f af2c 	bmi.w	800f690 <_svfiprintf_r+0x28>
 800f838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f83a:	b01d      	add	sp, #116	; 0x74
 800f83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f840:	ab03      	add	r3, sp, #12
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	462a      	mov	r2, r5
 800f846:	4b06      	ldr	r3, [pc, #24]	; (800f860 <_svfiprintf_r+0x1f8>)
 800f848:	a904      	add	r1, sp, #16
 800f84a:	4638      	mov	r0, r7
 800f84c:	f000 f87a 	bl	800f944 <_printf_i>
 800f850:	e7eb      	b.n	800f82a <_svfiprintf_r+0x1c2>
 800f852:	bf00      	nop
 800f854:	080103c8 	.word	0x080103c8
 800f858:	080103d2 	.word	0x080103d2
 800f85c:	00000000 	.word	0x00000000
 800f860:	0800f5b1 	.word	0x0800f5b1
 800f864:	080103ce 	.word	0x080103ce

0800f868 <_printf_common>:
 800f868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f86c:	4616      	mov	r6, r2
 800f86e:	4699      	mov	r9, r3
 800f870:	688a      	ldr	r2, [r1, #8]
 800f872:	690b      	ldr	r3, [r1, #16]
 800f874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f878:	4293      	cmp	r3, r2
 800f87a:	bfb8      	it	lt
 800f87c:	4613      	movlt	r3, r2
 800f87e:	6033      	str	r3, [r6, #0]
 800f880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f884:	4607      	mov	r7, r0
 800f886:	460c      	mov	r4, r1
 800f888:	b10a      	cbz	r2, 800f88e <_printf_common+0x26>
 800f88a:	3301      	adds	r3, #1
 800f88c:	6033      	str	r3, [r6, #0]
 800f88e:	6823      	ldr	r3, [r4, #0]
 800f890:	0699      	lsls	r1, r3, #26
 800f892:	bf42      	ittt	mi
 800f894:	6833      	ldrmi	r3, [r6, #0]
 800f896:	3302      	addmi	r3, #2
 800f898:	6033      	strmi	r3, [r6, #0]
 800f89a:	6825      	ldr	r5, [r4, #0]
 800f89c:	f015 0506 	ands.w	r5, r5, #6
 800f8a0:	d106      	bne.n	800f8b0 <_printf_common+0x48>
 800f8a2:	f104 0a19 	add.w	sl, r4, #25
 800f8a6:	68e3      	ldr	r3, [r4, #12]
 800f8a8:	6832      	ldr	r2, [r6, #0]
 800f8aa:	1a9b      	subs	r3, r3, r2
 800f8ac:	42ab      	cmp	r3, r5
 800f8ae:	dc26      	bgt.n	800f8fe <_printf_common+0x96>
 800f8b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8b4:	1e13      	subs	r3, r2, #0
 800f8b6:	6822      	ldr	r2, [r4, #0]
 800f8b8:	bf18      	it	ne
 800f8ba:	2301      	movne	r3, #1
 800f8bc:	0692      	lsls	r2, r2, #26
 800f8be:	d42b      	bmi.n	800f918 <_printf_common+0xb0>
 800f8c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8c4:	4649      	mov	r1, r9
 800f8c6:	4638      	mov	r0, r7
 800f8c8:	47c0      	blx	r8
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	d01e      	beq.n	800f90c <_printf_common+0xa4>
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	68e5      	ldr	r5, [r4, #12]
 800f8d2:	6832      	ldr	r2, [r6, #0]
 800f8d4:	f003 0306 	and.w	r3, r3, #6
 800f8d8:	2b04      	cmp	r3, #4
 800f8da:	bf08      	it	eq
 800f8dc:	1aad      	subeq	r5, r5, r2
 800f8de:	68a3      	ldr	r3, [r4, #8]
 800f8e0:	6922      	ldr	r2, [r4, #16]
 800f8e2:	bf0c      	ite	eq
 800f8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8e8:	2500      	movne	r5, #0
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	bfc4      	itt	gt
 800f8ee:	1a9b      	subgt	r3, r3, r2
 800f8f0:	18ed      	addgt	r5, r5, r3
 800f8f2:	2600      	movs	r6, #0
 800f8f4:	341a      	adds	r4, #26
 800f8f6:	42b5      	cmp	r5, r6
 800f8f8:	d11a      	bne.n	800f930 <_printf_common+0xc8>
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	e008      	b.n	800f910 <_printf_common+0xa8>
 800f8fe:	2301      	movs	r3, #1
 800f900:	4652      	mov	r2, sl
 800f902:	4649      	mov	r1, r9
 800f904:	4638      	mov	r0, r7
 800f906:	47c0      	blx	r8
 800f908:	3001      	adds	r0, #1
 800f90a:	d103      	bne.n	800f914 <_printf_common+0xac>
 800f90c:	f04f 30ff 	mov.w	r0, #4294967295
 800f910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f914:	3501      	adds	r5, #1
 800f916:	e7c6      	b.n	800f8a6 <_printf_common+0x3e>
 800f918:	18e1      	adds	r1, r4, r3
 800f91a:	1c5a      	adds	r2, r3, #1
 800f91c:	2030      	movs	r0, #48	; 0x30
 800f91e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f922:	4422      	add	r2, r4
 800f924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f92c:	3302      	adds	r3, #2
 800f92e:	e7c7      	b.n	800f8c0 <_printf_common+0x58>
 800f930:	2301      	movs	r3, #1
 800f932:	4622      	mov	r2, r4
 800f934:	4649      	mov	r1, r9
 800f936:	4638      	mov	r0, r7
 800f938:	47c0      	blx	r8
 800f93a:	3001      	adds	r0, #1
 800f93c:	d0e6      	beq.n	800f90c <_printf_common+0xa4>
 800f93e:	3601      	adds	r6, #1
 800f940:	e7d9      	b.n	800f8f6 <_printf_common+0x8e>
	...

0800f944 <_printf_i>:
 800f944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f948:	7e0f      	ldrb	r7, [r1, #24]
 800f94a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f94c:	2f78      	cmp	r7, #120	; 0x78
 800f94e:	4691      	mov	r9, r2
 800f950:	4680      	mov	r8, r0
 800f952:	460c      	mov	r4, r1
 800f954:	469a      	mov	sl, r3
 800f956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f95a:	d807      	bhi.n	800f96c <_printf_i+0x28>
 800f95c:	2f62      	cmp	r7, #98	; 0x62
 800f95e:	d80a      	bhi.n	800f976 <_printf_i+0x32>
 800f960:	2f00      	cmp	r7, #0
 800f962:	f000 80d8 	beq.w	800fb16 <_printf_i+0x1d2>
 800f966:	2f58      	cmp	r7, #88	; 0x58
 800f968:	f000 80a3 	beq.w	800fab2 <_printf_i+0x16e>
 800f96c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f974:	e03a      	b.n	800f9ec <_printf_i+0xa8>
 800f976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f97a:	2b15      	cmp	r3, #21
 800f97c:	d8f6      	bhi.n	800f96c <_printf_i+0x28>
 800f97e:	a101      	add	r1, pc, #4	; (adr r1, 800f984 <_printf_i+0x40>)
 800f980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f984:	0800f9dd 	.word	0x0800f9dd
 800f988:	0800f9f1 	.word	0x0800f9f1
 800f98c:	0800f96d 	.word	0x0800f96d
 800f990:	0800f96d 	.word	0x0800f96d
 800f994:	0800f96d 	.word	0x0800f96d
 800f998:	0800f96d 	.word	0x0800f96d
 800f99c:	0800f9f1 	.word	0x0800f9f1
 800f9a0:	0800f96d 	.word	0x0800f96d
 800f9a4:	0800f96d 	.word	0x0800f96d
 800f9a8:	0800f96d 	.word	0x0800f96d
 800f9ac:	0800f96d 	.word	0x0800f96d
 800f9b0:	0800fafd 	.word	0x0800fafd
 800f9b4:	0800fa21 	.word	0x0800fa21
 800f9b8:	0800fadf 	.word	0x0800fadf
 800f9bc:	0800f96d 	.word	0x0800f96d
 800f9c0:	0800f96d 	.word	0x0800f96d
 800f9c4:	0800fb1f 	.word	0x0800fb1f
 800f9c8:	0800f96d 	.word	0x0800f96d
 800f9cc:	0800fa21 	.word	0x0800fa21
 800f9d0:	0800f96d 	.word	0x0800f96d
 800f9d4:	0800f96d 	.word	0x0800f96d
 800f9d8:	0800fae7 	.word	0x0800fae7
 800f9dc:	682b      	ldr	r3, [r5, #0]
 800f9de:	1d1a      	adds	r2, r3, #4
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	602a      	str	r2, [r5, #0]
 800f9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	e0a3      	b.n	800fb38 <_printf_i+0x1f4>
 800f9f0:	6820      	ldr	r0, [r4, #0]
 800f9f2:	6829      	ldr	r1, [r5, #0]
 800f9f4:	0606      	lsls	r6, r0, #24
 800f9f6:	f101 0304 	add.w	r3, r1, #4
 800f9fa:	d50a      	bpl.n	800fa12 <_printf_i+0xce>
 800f9fc:	680e      	ldr	r6, [r1, #0]
 800f9fe:	602b      	str	r3, [r5, #0]
 800fa00:	2e00      	cmp	r6, #0
 800fa02:	da03      	bge.n	800fa0c <_printf_i+0xc8>
 800fa04:	232d      	movs	r3, #45	; 0x2d
 800fa06:	4276      	negs	r6, r6
 800fa08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa0c:	485e      	ldr	r0, [pc, #376]	; (800fb88 <_printf_i+0x244>)
 800fa0e:	230a      	movs	r3, #10
 800fa10:	e019      	b.n	800fa46 <_printf_i+0x102>
 800fa12:	680e      	ldr	r6, [r1, #0]
 800fa14:	602b      	str	r3, [r5, #0]
 800fa16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa1a:	bf18      	it	ne
 800fa1c:	b236      	sxthne	r6, r6
 800fa1e:	e7ef      	b.n	800fa00 <_printf_i+0xbc>
 800fa20:	682b      	ldr	r3, [r5, #0]
 800fa22:	6820      	ldr	r0, [r4, #0]
 800fa24:	1d19      	adds	r1, r3, #4
 800fa26:	6029      	str	r1, [r5, #0]
 800fa28:	0601      	lsls	r1, r0, #24
 800fa2a:	d501      	bpl.n	800fa30 <_printf_i+0xec>
 800fa2c:	681e      	ldr	r6, [r3, #0]
 800fa2e:	e002      	b.n	800fa36 <_printf_i+0xf2>
 800fa30:	0646      	lsls	r6, r0, #25
 800fa32:	d5fb      	bpl.n	800fa2c <_printf_i+0xe8>
 800fa34:	881e      	ldrh	r6, [r3, #0]
 800fa36:	4854      	ldr	r0, [pc, #336]	; (800fb88 <_printf_i+0x244>)
 800fa38:	2f6f      	cmp	r7, #111	; 0x6f
 800fa3a:	bf0c      	ite	eq
 800fa3c:	2308      	moveq	r3, #8
 800fa3e:	230a      	movne	r3, #10
 800fa40:	2100      	movs	r1, #0
 800fa42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa46:	6865      	ldr	r5, [r4, #4]
 800fa48:	60a5      	str	r5, [r4, #8]
 800fa4a:	2d00      	cmp	r5, #0
 800fa4c:	bfa2      	ittt	ge
 800fa4e:	6821      	ldrge	r1, [r4, #0]
 800fa50:	f021 0104 	bicge.w	r1, r1, #4
 800fa54:	6021      	strge	r1, [r4, #0]
 800fa56:	b90e      	cbnz	r6, 800fa5c <_printf_i+0x118>
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	d04d      	beq.n	800faf8 <_printf_i+0x1b4>
 800fa5c:	4615      	mov	r5, r2
 800fa5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa62:	fb03 6711 	mls	r7, r3, r1, r6
 800fa66:	5dc7      	ldrb	r7, [r0, r7]
 800fa68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa6c:	4637      	mov	r7, r6
 800fa6e:	42bb      	cmp	r3, r7
 800fa70:	460e      	mov	r6, r1
 800fa72:	d9f4      	bls.n	800fa5e <_printf_i+0x11a>
 800fa74:	2b08      	cmp	r3, #8
 800fa76:	d10b      	bne.n	800fa90 <_printf_i+0x14c>
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	07de      	lsls	r6, r3, #31
 800fa7c:	d508      	bpl.n	800fa90 <_printf_i+0x14c>
 800fa7e:	6923      	ldr	r3, [r4, #16]
 800fa80:	6861      	ldr	r1, [r4, #4]
 800fa82:	4299      	cmp	r1, r3
 800fa84:	bfde      	ittt	le
 800fa86:	2330      	movle	r3, #48	; 0x30
 800fa88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa90:	1b52      	subs	r2, r2, r5
 800fa92:	6122      	str	r2, [r4, #16]
 800fa94:	f8cd a000 	str.w	sl, [sp]
 800fa98:	464b      	mov	r3, r9
 800fa9a:	aa03      	add	r2, sp, #12
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	4640      	mov	r0, r8
 800faa0:	f7ff fee2 	bl	800f868 <_printf_common>
 800faa4:	3001      	adds	r0, #1
 800faa6:	d14c      	bne.n	800fb42 <_printf_i+0x1fe>
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295
 800faac:	b004      	add	sp, #16
 800faae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab2:	4835      	ldr	r0, [pc, #212]	; (800fb88 <_printf_i+0x244>)
 800fab4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fab8:	6829      	ldr	r1, [r5, #0]
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	f851 6b04 	ldr.w	r6, [r1], #4
 800fac0:	6029      	str	r1, [r5, #0]
 800fac2:	061d      	lsls	r5, r3, #24
 800fac4:	d514      	bpl.n	800faf0 <_printf_i+0x1ac>
 800fac6:	07df      	lsls	r7, r3, #31
 800fac8:	bf44      	itt	mi
 800faca:	f043 0320 	orrmi.w	r3, r3, #32
 800face:	6023      	strmi	r3, [r4, #0]
 800fad0:	b91e      	cbnz	r6, 800fada <_printf_i+0x196>
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	f023 0320 	bic.w	r3, r3, #32
 800fad8:	6023      	str	r3, [r4, #0]
 800fada:	2310      	movs	r3, #16
 800fadc:	e7b0      	b.n	800fa40 <_printf_i+0xfc>
 800fade:	6823      	ldr	r3, [r4, #0]
 800fae0:	f043 0320 	orr.w	r3, r3, #32
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	2378      	movs	r3, #120	; 0x78
 800fae8:	4828      	ldr	r0, [pc, #160]	; (800fb8c <_printf_i+0x248>)
 800faea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800faee:	e7e3      	b.n	800fab8 <_printf_i+0x174>
 800faf0:	0659      	lsls	r1, r3, #25
 800faf2:	bf48      	it	mi
 800faf4:	b2b6      	uxthmi	r6, r6
 800faf6:	e7e6      	b.n	800fac6 <_printf_i+0x182>
 800faf8:	4615      	mov	r5, r2
 800fafa:	e7bb      	b.n	800fa74 <_printf_i+0x130>
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	6826      	ldr	r6, [r4, #0]
 800fb00:	6961      	ldr	r1, [r4, #20]
 800fb02:	1d18      	adds	r0, r3, #4
 800fb04:	6028      	str	r0, [r5, #0]
 800fb06:	0635      	lsls	r5, r6, #24
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	d501      	bpl.n	800fb10 <_printf_i+0x1cc>
 800fb0c:	6019      	str	r1, [r3, #0]
 800fb0e:	e002      	b.n	800fb16 <_printf_i+0x1d2>
 800fb10:	0670      	lsls	r0, r6, #25
 800fb12:	d5fb      	bpl.n	800fb0c <_printf_i+0x1c8>
 800fb14:	8019      	strh	r1, [r3, #0]
 800fb16:	2300      	movs	r3, #0
 800fb18:	6123      	str	r3, [r4, #16]
 800fb1a:	4615      	mov	r5, r2
 800fb1c:	e7ba      	b.n	800fa94 <_printf_i+0x150>
 800fb1e:	682b      	ldr	r3, [r5, #0]
 800fb20:	1d1a      	adds	r2, r3, #4
 800fb22:	602a      	str	r2, [r5, #0]
 800fb24:	681d      	ldr	r5, [r3, #0]
 800fb26:	6862      	ldr	r2, [r4, #4]
 800fb28:	2100      	movs	r1, #0
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f7f0 fb60 	bl	80001f0 <memchr>
 800fb30:	b108      	cbz	r0, 800fb36 <_printf_i+0x1f2>
 800fb32:	1b40      	subs	r0, r0, r5
 800fb34:	6060      	str	r0, [r4, #4]
 800fb36:	6863      	ldr	r3, [r4, #4]
 800fb38:	6123      	str	r3, [r4, #16]
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb40:	e7a8      	b.n	800fa94 <_printf_i+0x150>
 800fb42:	6923      	ldr	r3, [r4, #16]
 800fb44:	462a      	mov	r2, r5
 800fb46:	4649      	mov	r1, r9
 800fb48:	4640      	mov	r0, r8
 800fb4a:	47d0      	blx	sl
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	d0ab      	beq.n	800faa8 <_printf_i+0x164>
 800fb50:	6823      	ldr	r3, [r4, #0]
 800fb52:	079b      	lsls	r3, r3, #30
 800fb54:	d413      	bmi.n	800fb7e <_printf_i+0x23a>
 800fb56:	68e0      	ldr	r0, [r4, #12]
 800fb58:	9b03      	ldr	r3, [sp, #12]
 800fb5a:	4298      	cmp	r0, r3
 800fb5c:	bfb8      	it	lt
 800fb5e:	4618      	movlt	r0, r3
 800fb60:	e7a4      	b.n	800faac <_printf_i+0x168>
 800fb62:	2301      	movs	r3, #1
 800fb64:	4632      	mov	r2, r6
 800fb66:	4649      	mov	r1, r9
 800fb68:	4640      	mov	r0, r8
 800fb6a:	47d0      	blx	sl
 800fb6c:	3001      	adds	r0, #1
 800fb6e:	d09b      	beq.n	800faa8 <_printf_i+0x164>
 800fb70:	3501      	adds	r5, #1
 800fb72:	68e3      	ldr	r3, [r4, #12]
 800fb74:	9903      	ldr	r1, [sp, #12]
 800fb76:	1a5b      	subs	r3, r3, r1
 800fb78:	42ab      	cmp	r3, r5
 800fb7a:	dcf2      	bgt.n	800fb62 <_printf_i+0x21e>
 800fb7c:	e7eb      	b.n	800fb56 <_printf_i+0x212>
 800fb7e:	2500      	movs	r5, #0
 800fb80:	f104 0619 	add.w	r6, r4, #25
 800fb84:	e7f5      	b.n	800fb72 <_printf_i+0x22e>
 800fb86:	bf00      	nop
 800fb88:	080103d9 	.word	0x080103d9
 800fb8c:	080103ea 	.word	0x080103ea

0800fb90 <__retarget_lock_acquire_recursive>:
 800fb90:	4770      	bx	lr

0800fb92 <__retarget_lock_release_recursive>:
 800fb92:	4770      	bx	lr

0800fb94 <memmove>:
 800fb94:	4288      	cmp	r0, r1
 800fb96:	b510      	push	{r4, lr}
 800fb98:	eb01 0402 	add.w	r4, r1, r2
 800fb9c:	d902      	bls.n	800fba4 <memmove+0x10>
 800fb9e:	4284      	cmp	r4, r0
 800fba0:	4623      	mov	r3, r4
 800fba2:	d807      	bhi.n	800fbb4 <memmove+0x20>
 800fba4:	1e43      	subs	r3, r0, #1
 800fba6:	42a1      	cmp	r1, r4
 800fba8:	d008      	beq.n	800fbbc <memmove+0x28>
 800fbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbb2:	e7f8      	b.n	800fba6 <memmove+0x12>
 800fbb4:	4402      	add	r2, r0
 800fbb6:	4601      	mov	r1, r0
 800fbb8:	428a      	cmp	r2, r1
 800fbba:	d100      	bne.n	800fbbe <memmove+0x2a>
 800fbbc:	bd10      	pop	{r4, pc}
 800fbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbc6:	e7f7      	b.n	800fbb8 <memmove+0x24>

0800fbc8 <_realloc_r>:
 800fbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbcc:	4680      	mov	r8, r0
 800fbce:	4614      	mov	r4, r2
 800fbd0:	460e      	mov	r6, r1
 800fbd2:	b921      	cbnz	r1, 800fbde <_realloc_r+0x16>
 800fbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd8:	4611      	mov	r1, r2
 800fbda:	f7ff bc1d 	b.w	800f418 <_malloc_r>
 800fbde:	b92a      	cbnz	r2, 800fbec <_realloc_r+0x24>
 800fbe0:	f7ff fbae 	bl	800f340 <_free_r>
 800fbe4:	4625      	mov	r5, r4
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbec:	f000 f81b 	bl	800fc26 <_malloc_usable_size_r>
 800fbf0:	4284      	cmp	r4, r0
 800fbf2:	4607      	mov	r7, r0
 800fbf4:	d802      	bhi.n	800fbfc <_realloc_r+0x34>
 800fbf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fbfa:	d812      	bhi.n	800fc22 <_realloc_r+0x5a>
 800fbfc:	4621      	mov	r1, r4
 800fbfe:	4640      	mov	r0, r8
 800fc00:	f7ff fc0a 	bl	800f418 <_malloc_r>
 800fc04:	4605      	mov	r5, r0
 800fc06:	2800      	cmp	r0, #0
 800fc08:	d0ed      	beq.n	800fbe6 <_realloc_r+0x1e>
 800fc0a:	42bc      	cmp	r4, r7
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	4631      	mov	r1, r6
 800fc10:	bf28      	it	cs
 800fc12:	463a      	movcs	r2, r7
 800fc14:	f7ff fb7e 	bl	800f314 <memcpy>
 800fc18:	4631      	mov	r1, r6
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	f7ff fb90 	bl	800f340 <_free_r>
 800fc20:	e7e1      	b.n	800fbe6 <_realloc_r+0x1e>
 800fc22:	4635      	mov	r5, r6
 800fc24:	e7df      	b.n	800fbe6 <_realloc_r+0x1e>

0800fc26 <_malloc_usable_size_r>:
 800fc26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc2a:	1f18      	subs	r0, r3, #4
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	bfbc      	itt	lt
 800fc30:	580b      	ldrlt	r3, [r1, r0]
 800fc32:	18c0      	addlt	r0, r0, r3
 800fc34:	4770      	bx	lr
	...

0800fc38 <_init>:
 800fc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc3a:	bf00      	nop
 800fc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc3e:	bc08      	pop	{r3}
 800fc40:	469e      	mov	lr, r3
 800fc42:	4770      	bx	lr

0800fc44 <_fini>:
 800fc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc46:	bf00      	nop
 800fc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc4a:	bc08      	pop	{r3}
 800fc4c:	469e      	mov	lr, r3
 800fc4e:	4770      	bx	lr
