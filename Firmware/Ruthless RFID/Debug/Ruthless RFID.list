
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e384  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800e524  0800e524  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebcc  0800ebcc  00020580  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebcc  0800ebcc  0001ebcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebd4  0800ebd4  00020580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebd4  0800ebd4  0001ebd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebd8  0800ebd8  0001ebd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  0800ebdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065a8  20000580  0800f15c  00020580  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006b28  0800f15c  00026b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b63  00000000  00000000  000205b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000527c  00000000  00000000  00046113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f70  00000000  00000000  0004b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d78  00000000  00000000  0004d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3d4  00000000  00000000  0004f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ab4  00000000  00000000  0006b44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e56e  00000000  00000000  0008ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008938  00000000  00000000  0012e4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000580 	.word	0x20000580
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e50c 	.word	0x0800e50c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000584 	.word	0x20000584
 80001dc:	0800e50c 	.word	0x0800e50c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 f998 	bl	80028f4 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200005a0 	.word	0x200005a0

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 fa73 	bl	8002ae8 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200005a0 	.word	0x200005a0

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 f955 	bl	80028f4 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 fd4d 	bl	80020f4 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200005a0 	.word	0x200005a0

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 fa21 	bl	8002ae8 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fd1f 	bl	80020f4 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200005a0 	.word	0x200005a0

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f001 fcaf 	bl	80020f4 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR);
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH,&result[1]);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f001 ff29 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f001 ff24 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fc7f 	bl	80020f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f001 ff1c 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f001 fc77 	bl	80020f4 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	//SET_ANTGAIN();
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	//MFRC_REGW(TModeReg,0x80); //timer starts automatically after every transmission
	//MFRC_REGW(TPrescalerRegLO,0xA9); //Set prescaler to 169 => f_timer=40kHz, use this for timeouts
	//MFRC_REGW(TReloadHI,0x03); //Set reload counter to 4000 => 100ms timeout
	//MFRC_REGW(TReloadLO,0xE8);
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);


	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 fc21 	bl	80020f4 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d f90e 	bl	800dc10 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00d f8bb 	bl	800dc10 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 fafd 	bl	80020f4 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 faf2 	bl	80020f4 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 faeb 	bl	80020f4 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 fae2 	bl	80020f4 <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f00c fff2 	bl	800dc10 <memcpy>
	CDC_Transmit_FS(send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f00c fb5d 	bl	800d2f8 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fa58 	bl	80020f4 <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b090      	sub	sp, #64	; 0x40
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 fa3a 	bl	80020f4 <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0018 	add.w	r0, r7, #24
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f00d f898 	bl	800de1c <siprintf>
						Print(mess);
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8000d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 f9dc 	bl	80020f4 <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 f9d7 	bl	80020f4 <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[10];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f00d f835 	bl	800de1c <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3738      	adds	r7, #56	; 0x38
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	2000059c 	.word	0x2000059c
 8000dec:	0800e5f0 	.word	0x0800e5f0
 8000df0:	0800e608 	.word	0x0800e608
 8000df4:	0800e614 	.word	0x0800e614
 8000df8:	0800e620 	.word	0x0800e620
 8000dfc:	0800e62c 	.word	0x0800e62c

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00c ff0b 	bl	800dc2c <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f001 fbfc 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f001 fbf7 	bl	8002638 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f004 fb82 	bl	800555e <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f001 fbe7 	bl	8002638 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 f942 	bl	80020f4 <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f001 fbdd 	bl	8002638 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 f938 	bl	80020f4 <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200005f4 	.word	0x200005f4

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f001 fbc3 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f001 fbbe 	bl	8002638 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 fb49 	bl	800555e <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f001 fbae 	bl	8002638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f001 fba9 	bl	8002638 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f001 fba2 	bl	8002638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f001 fb9d 	bl	8002638 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200005f4 	.word	0x200005f4

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SCREEN_INIT>:
 * @param data: Array of strings that form the basis of the screen
 *
 * @param seldata: Array of data on where to place select arrow "->"
 * */

void SCREEN_INIT(Screen* screen,int datasize,int selsize,char** data,uint8_t (*dataloc)[2],uint8_t (*seldata)[2]){
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]

    screen->datsize=datasize;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	601a      	str	r2, [r3, #0]
    screen->selsize=selsize;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
    screen->data=(char**)malloc((screen->datsize)*sizeof(char*));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00c fe28 	bl	800dbf0 <malloc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	609a      	str	r2, [r3, #8]
    screen->dataloc=(uint8_t (*)[2])malloc(screen->datsize*sizeof(uint8_t*));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00c fe1e 	bl	800dbf0 <malloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	60da      	str	r2, [r3, #12]
    screen->seldata=(uint8_t (*)[2])malloc(screen->selsize*sizeof(uint8_t*));
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00c fe14 	bl	800dbf0 <malloc>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	611a      	str	r2, [r3, #16]

    for(int j=0;j<screen->datsize;j++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e024      	b.n	8001020 <SCREEN_INIT+0xa6>
        screen->data[j]=malloc((strlen(data[j])+1)*sizeof(char));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8fd 	bl	80001e0 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	1c59      	adds	r1, r3, #1
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	18d4      	adds	r4, r2, r3
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	f00c fdfb 	bl	800dbf0 <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6023      	str	r3, [r4, #0]
        strcpy(screen->data[j],data[j]);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f00c ff21 	bl	800de5c <strcpy>
    for(int j=0;j<screen->datsize;j++){
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbd5      	blt.n	8000fd6 <SCREEN_INIT+0x5c>
    }

    memcpy(screen->dataloc,dataloc,datasize*2);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68d8      	ldr	r0, [r3, #12]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	461a      	mov	r2, r3
 8001034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001036:	f00c fdeb 	bl	800dc10 <memcpy>
    memcpy(screen->seldata,seldata,selsize*2);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6918      	ldr	r0, [r3, #16]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	461a      	mov	r2, r3
 8001044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001046:	f00c fde3 	bl	800dc10 <memcpy>

}
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
	...

08001054 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <OLED_INIT+0xc8>)
 8001060:	f001 faea 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	2108      	movs	r1, #8
 8001068:	482c      	ldr	r0, [pc, #176]	; (800111c <OLED_INIT+0xc8>)
 800106a:	f001 fae5 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <OLED_INIT+0xcc>)
 8001074:	f001 fae0 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f001 f83b 	bl	80020f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	4826      	ldr	r0, [pc, #152]	; (800111c <OLED_INIT+0xc8>)
 8001084:	f001 fad8 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f001 f833 	bl	80020f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	2108      	movs	r1, #8
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <OLED_INIT+0xc8>)
 8001094:	f001 fad0 	bl	8002638 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001098:	2064      	movs	r0, #100	; 0x64
 800109a:	f001 f82b 	bl	80020f4 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <OLED_INIT+0xd0>)
 80010a0:	463c      	mov	r4, r7
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	c403      	stmia	r4!, {r0, r1}
 80010ae:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	e00c      	b.n	80010d0 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80010b6:	463a      	mov	r2, r7
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff feb2 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f001 f815 	bl	80020f4 <HAL_Delay>
	for(int i=0;i<25;i++){
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b18      	cmp	r3, #24
 80010d4:	ddef      	ble.n	80010b6 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80010d6:	20a7      	movs	r0, #167	; 0xa7
 80010d8:	f7ff fea6 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <OLED_INIT+0xd4>)
 80010de:	f7ff ff19 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80010e2:	20af      	movs	r0, #175	; 0xaf
 80010e4:	f7ff fea0 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 80010e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ec:	f001 f802 	bl	80020f4 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80010f0:	20ae      	movs	r0, #174	; 0xae
 80010f2:	f7ff fe99 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f000 fffc 	bl	80020f4 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80010fc:	20a6      	movs	r0, #166	; 0xa6
 80010fe:	f7ff fe93 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f000 fff6 	bl	80020f4 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001108:	20af      	movs	r0, #175	; 0xaf
 800110a:	f7ff fe8d 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 800110e:	f7ff fe77 	bl	8000e00 <OLED_Clear>


}
 8001112:	bf00      	nop
 8001114:	4618      	mov	r0, r3
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	0800e70c 	.word	0x0800e70c
 8001128:	20000000 	.word	0x20000000

0800112c <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001138:	2005      	movs	r0, #5
 800113a:	f00c fd59 	bl	800dbf0 <malloc>
 800113e:	4603      	mov	r3, r0
 8001140:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	e013      	b.n	8001170 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f1a3 0220 	sub.w	r2, r3, #32
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <OLED_InvChar+0x5c>)
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	18ca      	adds	r2, r1, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	440b      	add	r3, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b05      	cmp	r3, #5
 8001174:	dde8      	ble.n	8001148 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 8001176:	2205      	movs	r2, #5
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f00c fd48 	bl	800dc10 <memcpy>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800e8b8 	.word	0x0800e8b8

0800118c <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	4603      	mov	r3, r0
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	717b      	strb	r3, [r7, #5]
 80011a6:	4613      	mov	r3, r2
 80011a8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	3b50      	subs	r3, #80	; 0x50
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe39 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fe32 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe29 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 80011d6:	2006      	movs	r0, #6
 80011d8:	f00c fd0a 	bl	800dbf0 <malloc>
 80011dc:	4603      	mov	r3, r0
 80011de:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 80011e0:	793b      	ldrb	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	f1a3 0220 	sub.w	r2, r3, #32
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <OLED_drawChar+0x98>)
 80011f4:	4413      	add	r3, r2
 80011f6:	2205      	movs	r2, #5
 80011f8:	4619      	mov	r1, r3
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f00c fd08 	bl	800dc10 <memcpy>
 8001200:	e004      	b.n	800120c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff90 	bl	800112c <OLED_InvChar>
	}

	*(data+5)=0x00;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3305      	adds	r3, #5
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001214:	2106      	movs	r1, #6
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fe40 	bl	8000e9c <OLED_data>

	}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	0800e8b8 	.word	0x0800e8b8

08001228 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	603a      	str	r2, [r7, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	460b      	mov	r3, r1
 8001238:	71bb      	strb	r3, [r7, #6]
 800123a:	4613      	mov	r3, r2
 800123c:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e014      	b.n	800126e <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	0052      	lsls	r2, r2, #1
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	4413      	add	r3, r2
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4413      	add	r3, r2
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	797b      	ldrb	r3, [r7, #5]
 8001262:	79f8      	ldrb	r0, [r7, #7]
 8001264:	f7ff ff92 	bl	800118c <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3301      	adds	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f7fe ffb6 	bl	80001e0 <strlen>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8e3      	bhi.n	8001244 <OLED_Printlin+0x1c>


	}
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	4613      	mov	r3, r2
 8001294:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 8001296:	6838      	ldr	r0, [r7, #0]
 8001298:	f7fe ffa2 	bl	80001e0 <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	0fda      	lsrs	r2, r3, #31
 80012a4:	4413      	add	r3, r2
 80012a6:	105b      	asrs	r3, r3, #1
 80012a8:	425b      	negs	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	3340      	adds	r3, #64	; 0x40
 80012b6:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	b2d9      	uxtb	r1, r3
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	79f8      	ldrb	r0, [r7, #7]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	f7ff ffb1 	bl	8001228 <OLED_Printlin>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(Screen* screen,uint8_t invert){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 80012da:	f7ff fd91 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, screen->data[0], invert);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	78fa      	ldrb	r2, [r7, #3]
 80012e6:	4619      	mov	r1, r3
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ffcc 	bl	8001286 <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e01a      	b.n	800132a <OLED_SCREEN+0x5c>
		OLED_Printlin(screen->dataloc[i+1][0], screen->dataloc[i+1][1], screen->data[i+1], invert);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	7818      	ldrb	r0, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3301      	adds	r3, #1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	7859      	ldrb	r1, [r3, #1]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	f7ff ff82 	bl	8001228 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3b01      	subs	r3, #1
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbde      	blt.n	80012f4 <OLED_SCREEN+0x26>
	}
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <OLED_FREESCREEN>:

void OLED_FREESCREEN(Screen* screen){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	for(int i=0;i<screen->datsize;i++){
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e013      	b.n	8001376 <OLED_FREESCREEN+0x36>
		free(screen->data[i]);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f00c fc50 	bl	800dc00 <free>
		free(screen->dataloc[i]);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f00c fc48 	bl	800dc00 <free>
	for(int i=0;i<screen->datsize;i++){
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbe6      	blt.n	800134e <OLED_FREESCREEN+0xe>
	}
	for(int j=0;j<screen->selsize;j++){
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	e00a      	b.n	800139c <OLED_FREESCREEN+0x5c>
		free(screen->seldata[j]);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f00c fc35 	bl	800dc00 <free>
	for(int j=0;j<screen->selsize;j++){
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dbef      	blt.n	8001386 <OLED_FREESCREEN+0x46>
	}

}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013b4:	2108      	movs	r1, #8
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <BUZZ+0x20>)
 80013b8:	f004 fc66 	bl	8005c88 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80013bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c0:	f000 fe98 	bl	80020f4 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80013c4:	2108      	movs	r1, #8
 80013c6:	4802      	ldr	r0, [pc, #8]	; (80013d0 <BUZZ+0x20>)
 80013c8:	f004 fd0e 	bl	8005de8 <HAL_TIM_PWM_Stop>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200006a4 	.word	0x200006a4

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d8:	f000 fe4a 	bl	8002070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013dc:	f000 f864 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e0:	f000 fa2c 	bl	800183c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013e4:	f000 f8ca 	bl	800157c <MX_I2C1_Init>
  MX_SPI1_Init();
 80013e8:	f000 f8f6 	bl	80015d8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80013ec:	f000 f92c 	bl	8001648 <MX_SPI2_Init>
  MX_TIM2_Init();
 80013f0:	f000 f960 	bl	80016b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013f4:	f000 f9d4 	bl	80017a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013f8:	f008 ffbc 	bl	800a374 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of DisplayData */
  DisplayDataHandle = osMessageQueueNew (1, sizeof(Screen), &DisplayData_attributes);
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <main+0x90>)
 80013fe:	2114      	movs	r1, #20
 8001400:	2001      	movs	r0, #1
 8001402:	f009 f8af 	bl	800a564 <osMessageQueueNew>
 8001406:	4603      	mov	r3, r0
 8001408:	4a17      	ldr	r2, [pc, #92]	; (8001468 <main+0x94>)
 800140a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 800140c:	4a17      	ldr	r2, [pc, #92]	; (800146c <main+0x98>)
 800140e:	2100      	movs	r1, #0
 8001410:	4817      	ldr	r0, [pc, #92]	; (8001470 <main+0x9c>)
 8001412:	f008 fff9 	bl	800a408 <osThreadNew>
 8001416:	4603      	mov	r3, r0
 8001418:	4a16      	ldr	r2, [pc, #88]	; (8001474 <main+0xa0>)
 800141a:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <main+0xa4>)
 800141e:	2100      	movs	r1, #0
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <main+0xa8>)
 8001422:	f008 fff1 	bl	800a408 <osThreadNew>
 8001426:	4603      	mov	r3, r0
 8001428:	4a15      	ldr	r2, [pc, #84]	; (8001480 <main+0xac>)
 800142a:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 800142c:	4a15      	ldr	r2, [pc, #84]	; (8001484 <main+0xb0>)
 800142e:	2100      	movs	r1, #0
 8001430:	4815      	ldr	r0, [pc, #84]	; (8001488 <main+0xb4>)
 8001432:	f008 ffe9 	bl	800a408 <osThreadNew>
 8001436:	4603      	mov	r3, r0
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <main+0xb8>)
 800143a:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <main+0xbc>)
 800143e:	2100      	movs	r1, #0
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <main+0xc0>)
 8001442:	f008 ffe1 	bl	800a408 <osThreadNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <main+0xc4>)
 800144a:	6013      	str	r3, [r2, #0]

  /* creation of UpdateDisplay */
  UpdateDisplayHandle = osThreadNew(StartUpdateDisplay, NULL, &UpdateDisplay_attributes);
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <main+0xc8>)
 800144e:	2100      	movs	r1, #0
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <main+0xcc>)
 8001452:	f008 ffd9 	bl	800a408 <osThreadNew>
 8001456:	4603      	mov	r3, r0
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <main+0xd0>)
 800145a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800145c:	f008 ffae 	bl	800a3bc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001460:	e7fe      	b.n	8001460 <main+0x8c>
 8001462:	bf00      	nop
 8001464:	0800eb68 	.word	0x0800eb68
 8001468:	20000748 	.word	0x20000748
 800146c:	0800eab4 	.word	0x0800eab4
 8001470:	08001925 	.word	0x08001925
 8001474:	20000734 	.word	0x20000734
 8001478:	0800ead8 	.word	0x0800ead8
 800147c:	080019d5 	.word	0x080019d5
 8001480:	20000738 	.word	0x20000738
 8001484:	0800eafc 	.word	0x0800eafc
 8001488:	08001a95 	.word	0x08001a95
 800148c:	2000073c 	.word	0x2000073c
 8001490:	0800eb20 	.word	0x0800eb20
 8001494:	08001aa5 	.word	0x08001aa5
 8001498:	20000740 	.word	0x20000740
 800149c:	0800eb44 	.word	0x0800eb44
 80014a0:	08001b11 	.word	0x08001b11
 80014a4:	20000744 	.word	0x20000744

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00c fbb8 	bl	800dc2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <SystemClock_Config+0xcc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <SystemClock_Config+0xcc>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <SystemClock_Config+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <SystemClock_Config+0xd0>)
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <SystemClock_Config+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2301      	movs	r3, #1
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001520:	23a8      	movs	r3, #168	; 0xa8
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001524:	2304      	movs	r3, #4
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001528:	2307      	movs	r3, #7
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fad7 	bl	8004ae4 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800153c:	f000 fb1a 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fd39 	bl	8004fd4 <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001568:	f000 fb04 	bl	8001b74 <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	; 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C1_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_I2C1_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_I2C1_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_I2C1_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_I2C1_Init+0x50>)
 80015ba:	f001 f857 	bl	800266c <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 fad6 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200005a0 	.word	0x200005a0
 80015d0:	40005400 	.word	0x40005400
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_SPI1_Init+0x68>)
 80015de:	4a19      	ldr	r2, [pc, #100]	; (8001644 <MX_SPI1_Init+0x6c>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI1_Init+0x68>)
 80015e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_SPI1_Init+0x68>)
 80015ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SPI1_Init+0x68>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI1_Init+0x68>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_SPI1_Init+0x68>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI1_Init+0x68>)
 8001606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI1_Init+0x68>)
 800160e:	2218      	movs	r2, #24
 8001610:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_SPI1_Init+0x68>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI1_Init+0x68>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_SPI1_Init+0x68>)
 8001620:	2200      	movs	r2, #0
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI1_Init+0x68>)
 8001626:	220a      	movs	r2, #10
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_SPI1_Init+0x68>)
 800162c:	f003 ff0e 	bl	800544c <HAL_SPI_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001636:	f000 fa9d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200005f4 	.word	0x200005f4
 8001644:	40013000 	.word	0x40013000

08001648 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_SPI2_Init+0x64>)
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <MX_SPI2_Init+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_SPI2_Init+0x64>)
 8001654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001658:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_SPI2_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_SPI2_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_SPI2_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_SPI2_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_SPI2_Init+0x64>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_SPI2_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_SPI2_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_SPI2_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_SPI2_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_SPI2_Init+0x64>)
 8001694:	220a      	movs	r2, #10
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_SPI2_Init+0x64>)
 800169a:	f003 fed7 	bl	800544c <HAL_SPI_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016a4:	f000 fa66 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000064c 	.word	0x2000064c
 80016b0:	40003800 	.word	0x40003800

080016b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <MX_TIM2_Init+0xe8>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <MX_TIM2_Init+0xe8>)
 80016ee:	f240 12a3 	movw	r2, #419	; 0x1a3
 80016f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_TIM2_Init+0xe8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <MX_TIM2_Init+0xe8>)
 80016fc:	2231      	movs	r2, #49	; 0x31
 80016fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <MX_TIM2_Init+0xe8>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_TIM2_Init+0xe8>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170c:	4823      	ldr	r0, [pc, #140]	; (800179c <MX_TIM2_Init+0xe8>)
 800170e:	f004 f92d 	bl	800596c <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001718:	f000 fa2c 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001726:	4619      	mov	r1, r3
 8001728:	481c      	ldr	r0, [pc, #112]	; (800179c <MX_TIM2_Init+0xe8>)
 800172a:	f004 fd8b 	bl	8006244 <HAL_TIM_ConfigClockSource>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001734:	f000 fa1e 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001738:	4818      	ldr	r0, [pc, #96]	; (800179c <MX_TIM2_Init+0xe8>)
 800173a:	f004 fa4b 	bl	8005bd4 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001744:	f000 fa16 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	4811      	ldr	r0, [pc, #68]	; (800179c <MX_TIM2_Init+0xe8>)
 8001758:	f005 f930 	bl	80069bc <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001762:	f000 fa07 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	; 0x60
 8001768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 800176a:	2318      	movs	r3, #24
 800176c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2208      	movs	r2, #8
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_TIM2_Init+0xe8>)
 800177e:	f004 fc9f 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001788:	f000 f9f4 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <MX_TIM2_Init+0xe8>)
 800178e:	f000 fb1f 	bl	8001dd0 <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3738      	adds	r7, #56	; 0x38
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200006a4 	.word	0x200006a4

080017a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM3_Init+0x94>)
 80017be:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <MX_TIM3_Init+0x98>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_TIM3_Init+0x94>)
 80017c4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80017c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_TIM3_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM3_Init+0x94>)
 80017d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_TIM3_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_TIM3_Init+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_TIM3_Init+0x94>)
 80017e6:	f004 f8c1 	bl	800596c <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017f0:	f000 f9c0 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_TIM3_Init+0x94>)
 8001802:	f004 fd1f 	bl	8006244 <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 f9b2 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM3_Init+0x94>)
 800181e:	f005 f8cd 	bl	80069bc <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 f9a4 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200006ec 	.word	0x200006ec
 8001838:	40000400 	.word	0x40000400

0800183c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <MX_GPIO_Init+0xdc>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <MX_GPIO_Init+0xdc>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <MX_GPIO_Init+0xdc>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <MX_GPIO_Init+0xdc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a28      	ldr	r2, [pc, #160]	; (8001918 <MX_GPIO_Init+0xdc>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <MX_GPIO_Init+0xdc>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_GPIO_Init+0xdc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a21      	ldr	r2, [pc, #132]	; (8001918 <MX_GPIO_Init+0xdc>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_GPIO_Init+0xdc>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80018ac:	481b      	ldr	r0, [pc, #108]	; (800191c <MX_GPIO_Init+0xe0>)
 80018ae:	f000 fec3 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2122      	movs	r1, #34	; 0x22
 80018b6:	481a      	ldr	r0, [pc, #104]	; (8001920 <MX_GPIO_Init+0xe4>)
 80018b8:	f000 febe 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80018bc:	2302      	movs	r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_GPIO_Init+0xe0>)
 80018d0:	f000 fd16 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 80018d4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <MX_GPIO_Init+0xe0>)
 80018ee:	f000 fd07 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 80018f2:	2322      	movs	r3, #34	; 0x22
 80018f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_GPIO_Init+0xe4>)
 800190a:	f000 fcf9 	bl	8002300 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400

08001924 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800192c:	f00b fc26 	bl	800d17c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Screen HOME;
	SCREEN_INIT(&HOME,7,6,(char**)HOME_SCREEN,HOME_DATLOC,HOME_SEL);
 8001930:	f107 000c 	add.w	r0, r7, #12
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <Start_Init+0x90>)
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <Start_Init+0x94>)
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <Start_Init+0x98>)
 800193e:	2206      	movs	r2, #6
 8001940:	2107      	movs	r1, #7
 8001942:	f7ff fb1a 	bl	8000f7a <SCREEN_INIT>
	Screen* tosend = &HOME;
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	60bb      	str	r3, [r7, #8]
	vTaskSuspend(ReadCardHandle);
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <Start_Init+0x9c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f009 fe5f 	bl	800b614 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <Start_Init+0xa0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f009 fe5a 	bl	800b614 <vTaskSuspend>
    vTaskSuspend(UpdateDisplayHandle);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <Start_Init+0xa4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f009 fe55 	bl	800b614 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <Start_Init+0xa8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f009 fe50 	bl	800b614 <vTaskSuspend>
    MFRC_INIT();
 8001974:	f7fe ff30 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8001978:	f7fe fee6 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 800197c:	f7ff fb6a 	bl	8001054 <OLED_INIT>
    xQueueSend(DisplayDataHandle,&tosend,0);
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <Start_Init+0xac>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f107 0108 	add.w	r1, r7, #8
 8001988:	2300      	movs	r3, #0
 800198a:	2200      	movs	r2, #0
 800198c:	f009 f884 	bl	800aa98 <xQueueGenericSend>
    vTaskResume(UpdateDisplayHandle);
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <Start_Init+0xa4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f009 fee5 	bl	800b764 <vTaskResume>
    osDelay(1000);
 800199a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199e:	f008 fdc6 	bl	800a52e <osDelay>
    OLED_FREESCREEN(&HOME);
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fcca 	bl	8001340 <OLED_FREESCREEN>
    vTaskSuspend(NULL);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f009 fe31 	bl	800b614 <vTaskSuspend>
  {
 80019b2:	e7bd      	b.n	8001930 <Start_Init+0xc>
 80019b4:	0800eaa8 	.word	0x0800eaa8
 80019b8:	0800ea98 	.word	0x0800ea98
 80019bc:	20000400 	.word	0x20000400
 80019c0:	20000738 	.word	0x20000738
 80019c4:	2000073c 	.word	0x2000073c
 80019c8:	20000744 	.word	0x20000744
 80019cc:	20000740 	.word	0x20000740
 80019d0:	20000748 	.word	0x20000748

080019d4 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	b093      	sub	sp, #76	; 0x4c
 80019d8:	af06      	add	r7, sp, #24
 80019da:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	uint8_t cardinf[18];
	char uid[16];
	int count = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(DumpINFO(cardinf)==PCD_OK){
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f933 	bl	8000c50 <DumpINFO>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2bcc      	cmp	r3, #204	; 0xcc
 80019ee:	d1f5      	bne.n	80019dc <StartReadCard+0x8>
    	sprintf(uid,"%X%X%X%X%X%X%X",cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 80019f0:	7e3b      	ldrb	r3, [r7, #24]
 80019f2:	461e      	mov	r6, r3
 80019f4:	7e7b      	ldrb	r3, [r7, #25]
 80019f6:	469c      	mov	ip, r3
 80019f8:	7ebb      	ldrb	r3, [r7, #26]
 80019fa:	7efa      	ldrb	r2, [r7, #27]
 80019fc:	7f39      	ldrb	r1, [r7, #28]
 80019fe:	7f78      	ldrb	r0, [r7, #29]
 8001a00:	4604      	mov	r4, r0
 8001a02:	7fb8      	ldrb	r0, [r7, #30]
 8001a04:	4605      	mov	r5, r0
 8001a06:	f107 0008 	add.w	r0, r7, #8
 8001a0a:	9504      	str	r5, [sp, #16]
 8001a0c:	9403      	str	r4, [sp, #12]
 8001a0e:	9102      	str	r1, [sp, #8]
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	4663      	mov	r3, ip
 8001a16:	4632      	mov	r2, r6
 8001a18:	491a      	ldr	r1, [pc, #104]	; (8001a84 <StartReadCard+0xb0>)
 8001a1a:	f00c f9ff 	bl	800de1c <siprintf>
    	BUZZ();
 8001a1e:	f7ff fcc7 	bl	80013b0 <BUZZ>
    	MFRC_ANTOFF();
 8001a22:	f7fe fe91 	bl	8000748 <MFRC_ANTOFF>
    	while(1){
    		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a26:	2102      	movs	r1, #2
 8001a28:	4817      	ldr	r0, [pc, #92]	; (8001a88 <StartReadCard+0xb4>)
 8001a2a:	f000 fded 	bl	8002608 <HAL_GPIO_ReadPin>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f8      	bne.n	8001a26 <StartReadCard+0x52>
    			__HAL_TIM_SET_COUNTER(&htim3,0);
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <StartReadCard+0xb8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24
    			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a3c:	e017      	b.n	8001a6e <StartReadCard+0x9a>
    				HAL_TIM_Base_Start(&htim3);
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <StartReadCard+0xb8>)
 8001a40:	f003 ffe4 	bl	8005a0c <HAL_TIM_Base_Start>
    				if((__HAL_TIM_GET_COUNTER(&htim3)==999)&&(count==1)){
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <StartReadCard+0xb8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10d      	bne.n	8001a6e <StartReadCard+0x9a>
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10a      	bne.n	8001a6e <StartReadCard+0x9a>
    					HAL_TIM_Base_Stop(&htim3);
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <StartReadCard+0xb8>)
 8001a5a:	f004 f831 	bl	8005ac0 <HAL_TIM_Base_Stop>
    					vTaskResume(HomeHandle);
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <StartReadCard+0xbc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f009 fe7e 	bl	800b764 <vTaskResume>
    					vTaskSuspend(NULL);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f009 fdd3 	bl	800b614 <vTaskSuspend>
    			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <StartReadCard+0xb4>)
 8001a72:	f000 fdc9 	bl	8002608 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0e0      	beq.n	8001a3e <StartReadCard+0x6a>
    					}
    			}
    		HAL_TIM_Base_Stop(&htim3);
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <StartReadCard+0xb8>)
 8001a7e:	f004 f81f 	bl	8005ac0 <HAL_TIM_Base_Stop>
    		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001a82:	e7d0      	b.n	8001a26 <StartReadCard+0x52>
 8001a84:	0800e848 	.word	0x0800e848
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	200006ec 	.word	0x200006ec
 8001a90:	20000740 	.word	0x20000740

08001a94 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f008 fd46 	bl	800a52e <osDelay>
 8001aa2:	e7fb      	b.n	8001a9c <StartWriteCard+0x8>

08001aa4 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
  /* Infinite loop */
  for(;;)
  {

	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001aac:	2102      	movs	r1, #2
 8001aae:	4815      	ldr	r0, [pc, #84]	; (8001b04 <StartHome+0x60>)
 8001ab0:	f000 fdaa 	bl	8002608 <HAL_GPIO_ReadPin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f8      	bne.n	8001aac <StartHome+0x8>
		  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <StartHome+0x64>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001ac2:	e014      	b.n	8001aee <StartHome+0x4a>
			  HAL_TIM_Base_Start(&htim3);
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <StartHome+0x64>)
 8001ac6:	f003 ffa1 	bl	8005a0c <HAL_TIM_Base_Start>
			  if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <StartHome+0x64>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d10a      	bne.n	8001aee <StartHome+0x4a>
				  HAL_TIM_Base_Stop(&htim3);
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <StartHome+0x64>)
 8001ada:	f003 fff1 	bl	8005ac0 <HAL_TIM_Base_Stop>
				  vTaskResume(ReadCardHandle);
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <StartHome+0x68>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f009 fe3e 	bl	800b764 <vTaskResume>
				  vTaskSuspend(NULL);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f009 fd93 	bl	800b614 <vTaskSuspend>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001aee:	2102      	movs	r1, #2
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <StartHome+0x60>)
 8001af2:	f000 fd89 	bl	8002608 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0e3      	beq.n	8001ac4 <StartHome+0x20>
				  }
			  }
		  HAL_TIM_Base_Stop(&htim3);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <StartHome+0x64>)
 8001afe:	f003 ffdf 	bl	8005ac0 <HAL_TIM_Base_Stop>
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001b02:	e7d3      	b.n	8001aac <StartHome+0x8>
 8001b04:	40020000 	.word	0x40020000
 8001b08:	200006ec 	.word	0x200006ec
 8001b0c:	20000738 	.word	0x20000738

08001b10 <StartUpdateDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateDisplay */
void StartUpdateDisplay(void *argument)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
  for(;;)
  {
	Screen toDisplay;
	Screen* rec;
	xQueueReceive(DisplayDataHandle, &rec, 0);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <StartUpdateDisplay+0x3c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f107 0108 	add.w	r1, r7, #8
 8001b20:	2200      	movs	r2, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f009 f952 	bl	800adcc <xQueueReceive>
	memcpy(&toDisplay,rec,sizeof(*rec));
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	2214      	movs	r2, #20
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00c f86d 	bl	800dc10 <memcpy>
	OLED_SCREEN(&toDisplay, NORMAL);
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fbc6 	bl	80012ce <OLED_SCREEN>
	while(1){
	osDelay(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f008 fcf3 	bl	800a52e <osDelay>
 8001b48:	e7fb      	b.n	8001b42 <StartUpdateDisplay+0x32>
 8001b4a:	bf00      	nop
 8001b4c:	20000748 	.word	0x20000748

08001b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b62:	f000 faa7 	bl	80020b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000c00 	.word	0x40000c00

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_MspInit+0x54>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <HAL_MspInit+0x54>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_MspInit+0x54>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_MspInit+0x54>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_MspInit+0x54>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_MspInit+0x54>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	f06f 0001 	mvn.w	r0, #1
 8001bc6:	f000 fb71 	bl	80022ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_I2C_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12b      	bne.n	8001c52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c16:	23c0      	movs	r3, #192	; 0xc0
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1a:	2312      	movs	r3, #18
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c26:	2304      	movs	r3, #4
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <HAL_I2C_MspInit+0x8c>)
 8001c32:	f000 fb65 	bl	8002300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_I2C_MspInit+0x88>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020400 	.word	0x40020400

08001c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <HAL_SPI_MspInit+0xe8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d12c      	bne.n	8001ce4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cc2:	23a0      	movs	r3, #160	; 0xa0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481e      	ldr	r0, [pc, #120]	; (8001d58 <HAL_SPI_MspInit+0xf0>)
 8001cde:	f000 fb0f 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ce2:	e031      	b.n	8001d48 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_SPI_MspInit+0xf4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12c      	bne.n	8001d48 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_SPI_MspInit+0xec>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d38:	2305      	movs	r3, #5
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <HAL_SPI_MspInit+0xf8>)
 8001d44:	f000 fadc 	bl	8002300 <HAL_GPIO_Init>
}
 8001d48:	bf00      	nop
 8001d4a:	3730      	adds	r7, #48	; 0x30
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40013000 	.word	0x40013000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40003800 	.word	0x40003800
 8001d60:	40020400 	.word	0x40020400

08001d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_TIM_Base_MspInit+0x64>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_TIM_Base_MspInit+0x64>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_TIM_Base_MspInit+0x64>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d92:	e012      	b.n	8001dba <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_TIM_Base_MspInit+0x68>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10d      	bne.n	8001dba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_TIM_Base_MspInit+0x64>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_TIM_Base_MspInit+0x64>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_TIM_Base_MspInit+0x64>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d11d      	bne.n	8001e2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_TIM_MspPostInit+0x68>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_TIM_MspPostInit+0x68>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_TIM_MspPostInit+0x68>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4619      	mov	r1, r3
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <HAL_TIM_MspPostInit+0x6c>)
 8001e2a:	f000 fa69 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000

08001e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	; 0x38
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_InitTick+0xe4>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	4a32      	ldr	r2, [pc, #200]	; (8001f24 <HAL_InitTick+0xe4>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_InitTick+0xe4>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e6c:	f107 0210 	add.w	r2, r7, #16
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fab6 	bl	80053e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e86:	f003 fa9b 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8001e8a:	6378      	str	r0, [r7, #52]	; 0x34
 8001e8c:	e004      	b.n	8001e98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e8e:	f003 fa97 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8001e92:	4603      	mov	r3, r0
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_InitTick+0xe8>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_InitTick+0xec>)
 8001ea8:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <HAL_InitTick+0xf0>)
 8001eaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_InitTick+0xec>)
 8001eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_InitTick+0xec>)
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_InitTick+0xec>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_InitTick+0xec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_InitTick+0xec>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001ecc:	4817      	ldr	r0, [pc, #92]	; (8001f2c <HAL_InitTick+0xec>)
 8001ece:	f003 fd4d 	bl	800596c <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d11b      	bne.n	8001f18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001ee0:	4812      	ldr	r0, [pc, #72]	; (8001f2c <HAL_InitTick+0xec>)
 8001ee2:	f003 fe15 	bl	8005b10 <HAL_TIM_Base_Start_IT>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001eec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ef4:	2032      	movs	r0, #50	; 0x32
 8001ef6:	f000 f9f5 	bl	80022e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d808      	bhi.n	8001f12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	2032      	movs	r0, #50	; 0x32
 8001f06:	f000 f9d1 	bl	80022ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_InitTick+0xf4>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e002      	b.n	8001f18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3738      	adds	r7, #56	; 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	2000074c 	.word	0x2000074c
 8001f30:	40000c00 	.word	0x40000c00
 8001f34:	20000420 	.word	0x20000420

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <NMI_Handler+0x4>

08001f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM5_IRQHandler+0x10>)
 8001f6a:	f003 ffa1 	bl	8005eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000074c 	.word	0x2000074c

08001f78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <OTG_FS_IRQHandler+0x10>)
 8001f7e:	f001 fc84 	bl	800388a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200063ec 	.word	0x200063ec

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f00b fdee 	bl	800db9c <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20010000 	.word	0x20010000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	20000794 	.word	0x20000794
 8001ff4:	20006b28 	.word	0x20006b28

08001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <SystemInit+0x20>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <SystemInit+0x20>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002024:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002038:	4c0b      	ldr	r4, [pc, #44]	; (8002068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002046:	f7ff ffd7 	bl	8001ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f00b fdad 	bl	800dba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204e:	f7ff f9c1 	bl	80013d4 <main>
  bx  lr    
 8002052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002054:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 8002060:	0800ebdc 	.word	0x0800ebdc
  ldr r2, =_sbss
 8002064:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8002068:	20006b28 	.word	0x20006b28

0800206c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC_IRQHandler>
	...

08002070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_Init+0x40>)
 800207a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_Init+0x40>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_Init+0x40>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 f8fc 	bl	8002296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	200f      	movs	r0, #15
 80020a0:	f7ff fece 	bl	8001e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fd6c 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00

080020b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x20>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_IncTick+0x24>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_IncTick+0x24>)
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000424 	.word	0x20000424
 80020d8:	20000798 	.word	0x20000798

080020dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return uwTick;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_GetTick+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000798 	.word	0x20000798

080020f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff ffee 	bl	80020dc <HAL_GetTick>
 8002100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d005      	beq.n	800211a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_Delay+0x44>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800211a:	bf00      	nop
 800211c:	f7ff ffde 	bl	80020dc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f7      	bhi.n	800211c <HAL_Delay+0x28>
  {
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000424 	.word	0x20000424

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ff4c 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022be:	f7ff ff61 	bl	8002184 <__NVIC_GetPriorityGrouping>
 80022c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	6978      	ldr	r0, [r7, #20]
 80022ca:	f7ff ffb1 	bl	8002230 <NVIC_EncodePriority>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff80 	bl	80021dc <__NVIC_SetPriority>
}
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff54 	bl	80021a0 <__NVIC_EnableIRQ>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e159      	b.n	80025d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8148 	bne.w	80025ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	2b02      	cmp	r3, #2
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a2 	beq.w	80025ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a56      	ldr	r2, [pc, #344]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b54      	ldr	r3, [pc, #336]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a2:	4a52      	ldr	r2, [pc, #328]	; (80025ec <HAL_GPIO_Init+0x2ec>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a49      	ldr	r2, [pc, #292]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x202>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a48      	ldr	r2, [pc, #288]	; (80025f4 <HAL_GPIO_Init+0x2f4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x1fe>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a47      	ldr	r2, [pc, #284]	; (80025f8 <HAL_GPIO_Init+0x2f8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a46      	ldr	r2, [pc, #280]	; (80025fc <HAL_GPIO_Init+0x2fc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x1f6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a45      	ldr	r2, [pc, #276]	; (8002600 <HAL_GPIO_Init+0x300>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x1f2>
 80024ee:	2304      	movs	r3, #4
 80024f0:	e008      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e004      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_GPIO_Init+0x204>
 8002502:	2300      	movs	r3, #0
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	f002 0203 	and.w	r2, r2, #3
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	4093      	lsls	r3, r2
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002514:	4935      	ldr	r1, [pc, #212]	; (80025ec <HAL_GPIO_Init+0x2ec>)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002546:	4a2f      	ldr	r2, [pc, #188]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_GPIO_Init+0x304>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002570:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_GPIO_Init+0x304>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_GPIO_Init+0x304>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	f67f aea2 	bls.w	800231c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020c00 	.word	0x40020c00
 8002600:	40021000 	.word	0x40021000
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e001      	b.n	800262a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e12b      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff faa0 	bl	8001bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d0:	f002 fe76 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80026d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a81      	ldr	r2, [pc, #516]	; (80028e0 <HAL_I2C_Init+0x274>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d807      	bhi.n	80026f0 <HAL_I2C_Init+0x84>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4a80      	ldr	r2, [pc, #512]	; (80028e4 <HAL_I2C_Init+0x278>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	bf94      	ite	ls
 80026e8:	2301      	movls	r3, #1
 80026ea:	2300      	movhi	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e006      	b.n	80026fe <HAL_I2C_Init+0x92>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a7d      	ldr	r2, [pc, #500]	; (80028e8 <HAL_I2C_Init+0x27c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bf94      	ite	ls
 80026f8:	2301      	movls	r3, #1
 80026fa:	2300      	movhi	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0e7      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a78      	ldr	r2, [pc, #480]	; (80028ec <HAL_I2C_Init+0x280>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a6a      	ldr	r2, [pc, #424]	; (80028e0 <HAL_I2C_Init+0x274>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d802      	bhi.n	8002740 <HAL_I2C_Init+0xd4>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3301      	adds	r3, #1
 800273e:	e009      	b.n	8002754 <HAL_I2C_Init+0xe8>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	4a69      	ldr	r2, [pc, #420]	; (80028f0 <HAL_I2C_Init+0x284>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	3301      	adds	r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	495c      	ldr	r1, [pc, #368]	; (80028e0 <HAL_I2C_Init+0x274>)
 8002770:	428b      	cmp	r3, r1
 8002772:	d819      	bhi.n	80027a8 <HAL_I2C_Init+0x13c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e59      	subs	r1, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002788:	400b      	ands	r3, r1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_I2C_Init+0x138>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e59      	subs	r1, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fbb1 f3f3 	udiv	r3, r1, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	e051      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e04f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <HAL_I2C_Init+0x168>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e012      	b.n	80027fa <HAL_I2C_Init+0x18e>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	0099      	lsls	r1, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Init+0x196>
 80027fe:	2301      	movs	r3, #1
 8002800:	e022      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <HAL_I2C_Init+0x1bc>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1e58      	subs	r0, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	440b      	add	r3, r1
 8002818:	fbb0 f3f3 	udiv	r3, r0, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	e00f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	0099      	lsls	r1, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	fbb0 f3f3 	udiv	r3, r0, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	6809      	ldr	r1, [r1, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6911      	ldr	r1, [r2, #16]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68d2      	ldr	r2, [r2, #12]
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	000186a0 	.word	0x000186a0
 80028e4:	001e847f 	.word	0x001e847f
 80028e8:	003d08ff 	.word	0x003d08ff
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	10624dd3 	.word	0x10624dd3

080028f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	817b      	strh	r3, [r7, #10]
 8002906:	460b      	mov	r3, r1
 8002908:	813b      	strh	r3, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800290e:	f7ff fbe5 	bl	80020dc <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	f040 80d9 	bne.w	8002ad4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2319      	movs	r3, #25
 8002928:	2201      	movs	r2, #1
 800292a:	496d      	ldr	r1, [pc, #436]	; (8002ae0 <HAL_I2C_Mem_Write+0x1ec>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fc7f 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	e0cc      	b.n	8002ad6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_I2C_Mem_Write+0x56>
 8002946:	2302      	movs	r3, #2
 8002948:	e0c5      	b.n	8002ad6 <HAL_I2C_Mem_Write+0x1e2>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d007      	beq.n	8002970 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2221      	movs	r2, #33	; 0x21
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a4d      	ldr	r2, [pc, #308]	; (8002ae4 <HAL_I2C_Mem_Write+0x1f0>)
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029b2:	88f8      	ldrh	r0, [r7, #6]
 80029b4:	893a      	ldrh	r2, [r7, #8]
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4603      	mov	r3, r0
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fab6 	bl	8002f34 <I2C_RequestMemoryWrite>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d052      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e081      	b.n	8002ad6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fd00 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00d      	beq.n	80029fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d107      	bne.n	80029fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06b      	b.n	8002ad6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d11b      	bne.n	8002a74 <HAL_I2C_Mem_Write+0x180>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1aa      	bne.n	80029d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fcec 	bl	800345e <I2C_WaitOnBTFFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d107      	bne.n	8002aa4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e016      	b.n	8002ad6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	00100002 	.word	0x00100002
 8002ae4:	ffff0000 	.word	0xffff0000

08002ae8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08c      	sub	sp, #48	; 0x30
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
 8002afa:	460b      	mov	r3, r1
 8002afc:	813b      	strh	r3, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b02:	f7ff faeb 	bl	80020dc <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	f040 8208 	bne.w	8002f26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2319      	movs	r3, #25
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	497b      	ldr	r1, [pc, #492]	; (8002d0c <HAL_I2C_Mem_Read+0x224>)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fb85 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e1fb      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_I2C_Mem_Read+0x56>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e1f4      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d007      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2222      	movs	r2, #34	; 0x22
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a5b      	ldr	r2, [pc, #364]	; (8002d10 <HAL_I2C_Mem_Read+0x228>)
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ba6:	88f8      	ldrh	r0, [r7, #6]
 8002ba8:	893a      	ldrh	r2, [r7, #8]
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fa52 	bl	8003060 <I2C_RequestMemoryRead>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e1b0      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d113      	bne.n	8002bf6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e184      	b.n	8002f00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d11b      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e164      	b.n	8002f00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d11b      	bne.n	8002c76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	e144      	b.n	8002f00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c8c:	e138      	b.n	8002f00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	f200 80f1 	bhi.w	8002e7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d123      	bne.n	8002ce8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fc1b 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e139      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ce6:	e10b      	b.n	8002f00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d14e      	bne.n	8002d8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4906      	ldr	r1, [pc, #24]	; (8002d14 <HAL_I2C_Mem_Read+0x22c>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa98 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e10e      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
 8002d0a:	bf00      	nop
 8002d0c:	00100002 	.word	0x00100002
 8002d10:	ffff0000 	.word	0xffff0000
 8002d14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d8c:	e0b8      	b.n	8002f00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2200      	movs	r2, #0
 8002d96:	4966      	ldr	r1, [pc, #408]	; (8002f30 <HAL_I2C_Mem_Read+0x448>)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fa49 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0bf      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	2200      	movs	r2, #0
 8002df2:	494f      	ldr	r1, [pc, #316]	; (8002f30 <HAL_I2C_Mem_Read+0x448>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fa1b 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e091      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e78:	e042      	b.n	8002f00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fb2e 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e04c      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d118      	bne.n	8002f00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f47f aec2 	bne.w	8002c8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010004 	.word	0x00010004

08002f34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	817b      	strh	r3, [r7, #10]
 8002f46:	460b      	mov	r3, r1
 8002f48:	813b      	strh	r3, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f960 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f84:	d103      	bne.n	8002f8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e05f      	b.n	8003052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	492d      	ldr	r1, [pc, #180]	; (800305c <I2C_RequestMemoryWrite+0x128>)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f998 	bl	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e04c      	b.n	8003052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fa02 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d107      	bne.n	8002ff6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02b      	b.n	8003052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003000:	893b      	ldrh	r3, [r7, #8]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	611a      	str	r2, [r3, #16]
 800300a:	e021      	b.n	8003050 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f9dc 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d107      	bne.n	8003042 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e005      	b.n	8003052 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003046:	893b      	ldrh	r3, [r7, #8]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	00010002 	.word	0x00010002

08003060 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	817b      	strh	r3, [r7, #10]
 8003072:	460b      	mov	r3, r1
 8003074:	813b      	strh	r3, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003088:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003098:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f8c2 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c0:	d103      	bne.n	80030ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0aa      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	4952      	ldr	r1, [pc, #328]	; (800322c <I2C_RequestMemoryRead+0x1cc>)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f8fa 	bl	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e097      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f964 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b04      	cmp	r3, #4
 8003120:	d107      	bne.n	8003132 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003130:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e076      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	611a      	str	r2, [r3, #16]
 8003146:	e021      	b.n	800318c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b29b      	uxth	r3, r3
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f93e 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e050      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003182:	893b      	ldrh	r3, [r7, #8]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	6a39      	ldr	r1, [r7, #32]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f923 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d107      	bne.n	80031b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e035      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f82b 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ee:	d103      	bne.n	80031f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e013      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031fc:	897b      	ldrh	r3, [r7, #10]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	b2da      	uxtb	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	4906      	ldr	r1, [pc, #24]	; (800322c <I2C_RequestMemoryRead+0x1cc>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f863 	bl	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	00010002 	.word	0x00010002

08003230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003240:	e025      	b.n	800328e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d021      	beq.n	800328e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe ff47 	bl	80020dc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e023      	b.n	80032d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10d      	bne.n	80032b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	e00c      	b.n	80032ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d0b6      	beq.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ec:	e051      	b.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fc:	d123      	bne.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003316:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e046      	b.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d021      	beq.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fec5 	bl	80020dc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d116      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e020      	b.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10c      	bne.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e00b      	b.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d18d      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e8:	e02d      	b.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f8ce 	bl	800358c <I2C_IsAcknowledgeFailed>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e02d      	b.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d021      	beq.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7fe fe6b 	bl	80020dc <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d116      	bne.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0220 	orr.w	r2, r3, #32
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d1ca      	bne.n	80033ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800346a:	e02d      	b.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f88d 	bl	800358c <I2C_IsAcknowledgeFailed>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e02d      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d021      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003484:	f7fe fe2a 	bl	80020dc <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d1ca      	bne.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ec:	e042      	b.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d119      	bne.n	8003530 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0210 	mvn.w	r2, #16
 8003504:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e029      	b.n	8003584 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fe fdd4 	bl	80020dc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d1b5      	bne.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a2:	d11b      	bne.n	80035dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ec:	b08f      	sub	sp, #60	; 0x3c
 80035ee:	af0a      	add	r7, sp, #40	; 0x28
 80035f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e10f      	b.n	800381c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f009 ffb6 	bl	800d588 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2203      	movs	r2, #3
 8003620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fb55 	bl	8006cea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	687e      	ldr	r6, [r7, #4]
 8003648:	466d      	mov	r5, sp
 800364a:	f106 0410 	add.w	r4, r6, #16
 800364e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003656:	e894 0003 	ldmia.w	r4, {r0, r1}
 800365a:	e885 0003 	stmia.w	r5, {r0, r1}
 800365e:	1d33      	adds	r3, r6, #4
 8003660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003662:	6838      	ldr	r0, [r7, #0]
 8003664:	f003 fa2c 	bl	8006ac0 <USB_CoreInit>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0d0      	b.n	800381c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f003 fb43 	bl	8006d0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	e04a      	b.n	8003722 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	333d      	adds	r3, #61	; 0x3d
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	333c      	adds	r3, #60	; 0x3c
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	b298      	uxth	r0, r3
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3344      	adds	r3, #68	; 0x44
 80036c8:	4602      	mov	r2, r0
 80036ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3340      	adds	r3, #64	; 0x40
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036e0:	7bfa      	ldrb	r2, [r7, #15]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3348      	adds	r3, #72	; 0x48
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	334c      	adds	r3, #76	; 0x4c
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3354      	adds	r3, #84	; 0x54
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	3301      	adds	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	d3af      	bcc.n	800368c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e044      	b.n	80037bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	3301      	adds	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d3b5      	bcc.n	8003732 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	687e      	ldr	r6, [r7, #4]
 80037ce:	466d      	mov	r5, sp
 80037d0:	f106 0410 	add.w	r4, r6, #16
 80037d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80037e4:	1d33      	adds	r3, r6, #4
 80037e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e8:	6838      	ldr	r0, [r7, #0]
 80037ea:	f003 fadb 	bl	8006da4 <USB_DevInit>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00d      	b.n	800381c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f004 fc2a 	bl	800806e <USB_DevDisconnect>

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003824 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_PCD_Start+0x1c>
 800383c:	2302      	movs	r3, #2
 800383e:	e020      	b.n	8003882 <HAL_PCD_Start+0x5e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	2b01      	cmp	r3, #1
 800384e:	d109      	bne.n	8003864 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003854:	2b01      	cmp	r3, #1
 8003856:	d005      	beq.n	8003864 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f003 fa2d 	bl	8006cc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fbda 	bl	800802c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800388a:	b590      	push	{r4, r7, lr}
 800388c:	b08d      	sub	sp, #52	; 0x34
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 fc98 	bl	80081d6 <USB_GetMode>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 848a 	bne.w	80041c2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f004 fbfc 	bl	80080b0 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8480 	beq.w	80041c0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 fbe9 	bl	80080b0 <USB_ReadInterrupts>
 80038de:	4603      	mov	r3, r0
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d107      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f002 0202 	and.w	r2, r2, #2
 80038f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 fbd7 	bl	80080b0 <USB_ReadInterrupts>
 8003902:	4603      	mov	r3, r0
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d161      	bne.n	80039d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0210 	bic.w	r2, r2, #16
 800391a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	0c5b      	lsrs	r3, r3, #17
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	2b02      	cmp	r3, #2
 8003946:	d124      	bne.n	8003992 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d035      	beq.n	80039c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800395e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003962:	b29b      	uxth	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	6a38      	ldr	r0, [r7, #32]
 8003968:	f004 fa0e 	bl	8007d88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003978:	441a      	add	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398a:	441a      	add	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
 8003990:	e016      	b.n	80039c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	0c5b      	lsrs	r3, r3, #17
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	2b06      	cmp	r3, #6
 800399c:	d110      	bne.n	80039c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a4:	2208      	movs	r2, #8
 80039a6:	4619      	mov	r1, r3
 80039a8:	6a38      	ldr	r0, [r7, #32]
 80039aa:	f004 f9ed 	bl	8007d88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ba:	441a      	add	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0210 	orr.w	r2, r2, #16
 80039ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fb6b 	bl	80080b0 <USB_ReadInterrupts>
 80039da:	4603      	mov	r3, r0
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039e4:	f040 80a7 	bne.w	8003b36 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 fb70 	bl	80080d6 <USB_ReadDevAllOutEpInterrupt>
 80039f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039f8:	e099      	b.n	8003b2e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 808e 	beq.w	8003b22 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f004 fb94 	bl	800813e <USB_ReadDevOutEPInterrupt>
 8003a16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2301      	movs	r3, #1
 8003a32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fec2 	bl	80047c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	2308      	movs	r3, #8
 8003a56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 ff98 	bl	8004990 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a76:	461a      	mov	r2, r3
 8003a78:	2310      	movs	r3, #16
 8003a7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d030      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	2b80      	cmp	r3, #128	; 0x80
 8003a90:	d109      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3304      	adds	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d108      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f009 fe55 	bl	800d780 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	2320      	movs	r3, #32
 8003b02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	3301      	adds	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f47f af62 	bne.w	80039fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fab8 	bl	80080b0 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b4a:	f040 80db 	bne.w	8003d04 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 fad9 	bl	800810a <USB_ReadDevAllInEpInterrupt>
 8003b58:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b5e:	e0cd      	b.n	8003cfc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80c2 	beq.w	8003cf0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 faff 	bl	800817a <USB_ReadDevInEPInterrupt>
 8003b7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d057      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	2201      	movs	r2, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba8:	4013      	ands	r3, r2
 8003baa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2301      	movs	r3, #1
 8003bbc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d132      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	334c      	adds	r3, #76	; 0x4c
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4403      	add	r3, r0
 8003be6:	3348      	adds	r3, #72	; 0x48
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4419      	add	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4403      	add	r3, r0
 8003bfa:	334c      	adds	r3, #76	; 0x4c
 8003bfc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x3a2>
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3354      	adds	r3, #84	; 0x54
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c24:	461a      	mov	r2, r3
 8003c26:	2101      	movs	r1, #1
 8003c28:	f004 fb06 	bl	8008238 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f009 fd29 	bl	800d68a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2308      	movs	r3, #8
 8003c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	461a      	mov	r2, r3
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c98:	6a38      	ldr	r0, [r7, #32]
 8003c9a:	f003 f9e7 	bl	800706c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	3338      	adds	r3, #56	; 0x38
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f009 fd6c 	bl	800d7a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2302      	movs	r3, #2
 8003cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fcdb 	bl	80046a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f47f af2e 	bne.w	8003b60 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f004 f9d1 	bl	80080b0 <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d18:	d122      	bne.n	8003d60 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d108      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d40:	2100      	movs	r1, #0
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fec2 	bl	8004acc <HAL_PCDEx_LPM_Callback>
 8003d48:	e002      	b.n	8003d50 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f009 fd0a 	bl	800d764 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f004 f9a3 	bl	80080b0 <USB_ReadInterrupts>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d112      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f009 fcc6 	bl	800d718 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d9a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 f985 	bl	80080b0 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db0:	f040 80b7 	bne.w	8003f22 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2110      	movs	r1, #16
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 f94c 	bl	800706c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd8:	e046      	b.n	8003e68 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	461a      	mov	r2, r3
 8003de8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dfe:	0151      	lsls	r1, r2, #5
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	440a      	add	r2, r1
 8003e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	3301      	adds	r3, #1
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3b3      	bcc.n	8003dda <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9e:	f043 030b 	orr.w	r3, r3, #11
 8003ea2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb4:	f043 030b 	orr.w	r3, r3, #11
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	e015      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ece:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ed2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee2:	f043 030b 	orr.w	r3, r3, #11
 8003ee6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003efa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f004 f993 	bl	8008238 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 f8c2 	bl	80080b0 <USB_ReadInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f36:	d124      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f004 f958 	bl	80081f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 f90d 	bl	8007166 <USB_GetDevSpeed>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681c      	ldr	r4, [r3, #0]
 8003f58:	f001 fa26 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 8003f5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	4620      	mov	r0, r4
 8003f68:	f002 fe0c 	bl	8006b84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f009 fbb4 	bl	800d6da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f004 f892 	bl	80080b0 <USB_ReadInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d10a      	bne.n	8003fac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f009 fb91 	bl	800d6be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f002 0208 	and.w	r2, r2, #8
 8003faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f004 f87d 	bl	80080b0 <USB_ReadInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d122      	bne.n	8004006 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fcc:	2301      	movs	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	e014      	b.n	8003ffc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fb27 	bl	8004644 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	429a      	cmp	r2, r3
 8004004:	d3e5      	bcc.n	8003fd2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f004 f850 	bl	80080b0 <USB_ReadInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800401a:	d13b      	bne.n	8004094 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401c:	2301      	movs	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
 8004020:	e02b      	b.n	800407a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3340      	adds	r3, #64	; 0x40
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d115      	bne.n	8004074 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004048:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800404a:	2b00      	cmp	r3, #0
 800404c:	da12      	bge.n	8004074 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	333f      	adds	r3, #63	; 0x3f
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fae8 	bl	8004644 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	3301      	adds	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	429a      	cmp	r2, r3
 8004082:	d3ce      	bcc.n	8004022 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f004 f809 	bl	80080b0 <USB_ReadInterrupts>
 800409e:	4603      	mov	r3, r0
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d155      	bne.n	8004156 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040aa:	2301      	movs	r3, #1
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	e045      	b.n	800413c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d12e      	bne.n	8004136 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	da2b      	bge.n	8004136 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80040ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d121      	bne.n	8004136 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004132:	6053      	str	r3, [r2, #4]
            break;
 8004134:	e007      	b.n	8004146 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	3301      	adds	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	429a      	cmp	r2, r3
 8004144:	d3b4      	bcc.n	80040b0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f003 ffa8 	bl	80080b0 <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d10a      	bne.n	8004182 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f009 fb2b 	bl	800d7c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f003 ff92 	bl	80080b0 <USB_ReadInterrupts>
 800418c:	4603      	mov	r3, r0
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d115      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f009 fb1b 	bl	800d7e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e000      	b.n	80041c2 <HAL_PCD_IRQHandler+0x938>
      return;
 80041c0:	bf00      	nop
    }
  }
}
 80041c2:	3734      	adds	r7, #52	; 0x34
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd90      	pop	{r4, r7, pc}

080041c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_PCD_SetAddress+0x1a>
 80041de:	2302      	movs	r3, #2
 80041e0:	e013      	b.n	800420a <HAL_PCD_SetAddress+0x42>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fef0 	bl	8007fe0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	4608      	mov	r0, r1
 800421c:	4611      	mov	r1, r2
 800421e:	461a      	mov	r2, r3
 8004220:	4603      	mov	r3, r0
 8004222:	70fb      	strb	r3, [r7, #3]
 8004224:	460b      	mov	r3, r1
 8004226:	803b      	strh	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da0f      	bge.n	8004258 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	f003 020f 	and.w	r2, r3, #15
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	3338      	adds	r3, #56	; 0x38
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	705a      	strb	r2, [r3, #1]
 8004256:	e00f      	b.n	8004278 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 020f 	and.w	r2, r3, #15
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	3304      	adds	r3, #4
 8004270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004284:	883a      	ldrh	r2, [r7, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	78ba      	ldrb	r2, [r7, #2]
 800428e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042a2:	78bb      	ldrb	r3, [r7, #2]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d102      	bne.n	80042ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_PCD_EP_Open+0xaa>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e00e      	b.n	80042da <HAL_PCD_EP_Open+0xc8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 ff70 	bl	80071b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80042d8:	7afb      	ldrb	r3, [r7, #11]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da0f      	bge.n	8004316 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	3338      	adds	r3, #56	; 0x38
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	3304      	adds	r3, #4
 800430c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	705a      	strb	r2, [r3, #1]
 8004314:	e00f      	b.n	8004336 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_PCD_EP_Close+0x6e>
 800434c:	2302      	movs	r3, #2
 800434e:	e00e      	b.n	800436e <HAL_PCD_EP_Close+0x8c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68f9      	ldr	r1, [r7, #12]
 800435e:	4618      	mov	r0, r3
 8004360:	f002 ffae 	bl	80072c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	460b      	mov	r3, r1
 8004384:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	3304      	adds	r3, #4
 800439e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043b8:	7afb      	ldrb	r3, [r7, #11]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043d2:	7afb      	ldrb	r3, [r7, #11]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	f003 fa8d 	bl	8007908 <USB_EP0StartXfer>
 80043ee:	e008      	b.n	8004402 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	f003 f83b 	bl	8007478 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	460b      	mov	r3, r1
 800444a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444c:	7afb      	ldrb	r3, [r7, #11]
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	3338      	adds	r3, #56	; 0x38
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2200      	movs	r2, #0
 8004474:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2201      	movs	r2, #1
 800447a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800447c:	7afb      	ldrb	r3, [r7, #11]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	b2da      	uxtb	r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d102      	bne.n	8004496 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	6979      	ldr	r1, [r7, #20]
 80044ae:	f003 fa2b 	bl	8007908 <USB_EP0StartXfer>
 80044b2:	e008      	b.n	80044c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	6979      	ldr	r1, [r7, #20]
 80044c2:	f002 ffd9 	bl	8007478 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d901      	bls.n	80044ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e050      	b.n	8004590 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da0f      	bge.n	8004516 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 020f 	and.w	r2, r3, #15
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	3338      	adds	r3, #56	; 0x38
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	3304      	adds	r3, #4
 800450c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	705a      	strb	r2, [r3, #1]
 8004514:	e00d      	b.n	8004532 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_PCD_EP_SetStall+0x82>
 800454e:	2302      	movs	r3, #2
 8004550:	e01e      	b.n	8004590 <HAL_PCD_EP_SetStall+0xc0>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	4618      	mov	r0, r3
 8004562:	f003 fc69 	bl	8007e38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	b2d9      	uxtb	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004580:	461a      	mov	r2, r3
 8004582:	f003 fe59 	bl	8008238 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	f003 020f 	and.w	r2, r3, #15
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d901      	bls.n	80045b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e042      	b.n	800463c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da0f      	bge.n	80045de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	3338      	adds	r3, #56	; 0x38
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	3304      	adds	r3, #4
 80045d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	705a      	strb	r2, [r3, #1]
 80045dc:	e00f      	b.n	80045fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	3304      	adds	r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_PCD_EP_ClrStall+0x86>
 800461a:	2302      	movs	r3, #2
 800461c:	e00e      	b.n	800463c <HAL_PCD_EP_ClrStall+0xa4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	f003 fc71 	bl	8007f14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004654:	2b00      	cmp	r3, #0
 8004656:	da0c      	bge.n	8004672 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 020f 	and.w	r2, r3, #15
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	3338      	adds	r3, #56	; 0x38
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4413      	add	r3, r2
 800466c:	3304      	adds	r3, #4
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e00c      	b.n	800468c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	3304      	adds	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	4618      	mov	r0, r3
 8004694:	f003 fa90 	bl	8007bb8 <USB_EPStopXfer>
 8004698:	4603      	mov	r3, r0
 800469a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800469c:	7afb      	ldrb	r3, [r7, #11]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b08a      	sub	sp, #40	; 0x28
 80046aa:	af02      	add	r7, sp, #8
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	3338      	adds	r3, #56	; 0x38
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d901      	bls.n	80046de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06c      	b.n	80047b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d902      	bls.n	80046fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3303      	adds	r3, #3
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004702:	e02b      	b.n	800475c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	429a      	cmp	r2, r3
 8004718:	d902      	bls.n	8004720 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	3303      	adds	r3, #3
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6919      	ldr	r1, [r3, #16]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004738:	b2db      	uxtb	r3, r3
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4603      	mov	r3, r0
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f003 fae4 	bl	8007d0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	441a      	add	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	441a      	add	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	b29b      	uxth	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	429a      	cmp	r2, r3
 8004770:	d809      	bhi.n	8004786 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800477a:	429a      	cmp	r2, r3
 800477c:	d203      	bcs.n	8004786 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1be      	bne.n	8004704 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	429a      	cmp	r2, r3
 8004790:	d811      	bhi.n	80047b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	6939      	ldr	r1, [r7, #16]
 80047ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b2:	4013      	ands	r3, r2
 80047b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	333c      	adds	r3, #60	; 0x3c
 80047d8:	3304      	adds	r3, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d17b      	bne.n	80048ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4a61      	ldr	r2, [pc, #388]	; (8004988 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	f240 80b9 	bls.w	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80b3 	beq.w	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004828:	6093      	str	r3, [r2, #8]
 800482a:	e0a7      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	461a      	mov	r2, r3
 8004844:	2320      	movs	r3, #32
 8004846:	6093      	str	r3, [r2, #8]
 8004848:	e098      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 8093 	bne.w	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4a4b      	ldr	r2, [pc, #300]	; (8004988 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d90f      	bls.n	800487e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	461a      	mov	r2, r3
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	6093      	str	r3, [r2, #8]
 800487c:	e07e      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	0159      	lsls	r1, r3, #5
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	440b      	add	r3, r1
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d114      	bne.n	80048e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048c8:	461a      	mov	r2, r3
 80048ca:	2101      	movs	r1, #1
 80048cc:	f003 fcb4 	bl	8008238 <USB_EP0_OutStart>
 80048d0:	e006      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f008 feb4 	bl	800d654 <HAL_PCD_DataOutStageCallback>
 80048ec:	e046      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4a26      	ldr	r2, [pc, #152]	; (800498c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d124      	bne.n	8004940 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	461a      	mov	r2, r3
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	6093      	str	r3, [r2, #8]
 8004914:	e032      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	2320      	movs	r3, #32
 8004930:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f008 fe8b 	bl	800d654 <HAL_PCD_DataOutStageCallback>
 800493e:	e01d      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d114      	bne.n	8004970 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004968:	461a      	mov	r2, r3
 800496a:	2100      	movs	r1, #0
 800496c:	f003 fc64 	bl	8008238 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f008 fe6c 	bl	800d654 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	4f54300a 	.word	0x4f54300a
 800498c:	4f54310a 	.word	0x4f54310a

08004990 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	333c      	adds	r3, #60	; 0x3c
 80049a8:	3304      	adds	r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d90e      	bls.n	80049e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f008 fe23 	bl	800d630 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d90c      	bls.n	8004a0c <PCD_EP_OutSetupPacket_int+0x7c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d108      	bne.n	8004a0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a04:	461a      	mov	r2, r3
 8004a06:	2101      	movs	r1, #1
 8004a08:	f003 fc16 	bl	8008238 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	4f54300a 	.word	0x4f54300a

08004a1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a3a:	883b      	ldrh	r3, [r7, #0]
 8004a3c:	0419      	lsls	r1, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
 8004a48:	e028      	b.n	8004a9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	e00d      	b.n	8004a7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	3340      	adds	r3, #64	; 0x40
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4413      	add	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	3301      	adds	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d3ec      	bcc.n	8004a5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a84:	883b      	ldrh	r3, [r7, #0]
 8004a86:	0418      	lsls	r0, r3, #16
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4302      	orrs	r2, r0
 8004a94:	3340      	adds	r3, #64	; 0x40
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e267      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d075      	beq.n	8004bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b02:	4b88      	ldr	r3, [pc, #544]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d112      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05b      	beq.n	8004bec <HAL_RCC_OscConfig+0x108>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d157      	bne.n	8004bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e242      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x74>
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a75      	ldr	r2, [pc, #468]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e01d      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x98>
 8004b62:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6f      	ldr	r2, [pc, #444]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6c      	ldr	r2, [pc, #432]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b7c:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a68      	ldr	r2, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fa9e 	bl	80020dc <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd fa9a 	bl	80020dc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e207      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xc0>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd fa8a 	bl	80020dc <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd fa86 	bl	80020dc <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1f3      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0xe8>
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d063      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d11c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1e:	4b41      	ldr	r3, [pc, #260]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e1c7      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4937      	ldr	r1, [pc, #220]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	e03a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c54:	4b34      	ldr	r3, [pc, #208]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fa3f 	bl	80020dc <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c62:	f7fd fa3b 	bl	80020dc <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e1a8      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4925      	ldr	r1, [pc, #148]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fd fa1e 	bl	80020dc <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca4:	f7fd fa1a 	bl	80020dc <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e187      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d036      	beq.n	8004d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fd f9fe 	bl	80020dc <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fd f9fa 	bl	80020dc <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e167      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x200>
 8004d02:	e01b      	b.n	8004d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0a:	f7fd f9e7 	bl	80020dc <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	e00e      	b.n	8004d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fd f9e3 	bl	80020dc <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d907      	bls.n	8004d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e150      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	42470000 	.word	0x42470000
 8004d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ea      	bne.n	8004d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8097 	beq.w	8004e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b7d      	ldr	r3, [pc, #500]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a7c      	ldr	r2, [pc, #496]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b7a      	ldr	r3, [pc, #488]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b77      	ldr	r3, [pc, #476]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d118      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b74      	ldr	r3, [pc, #464]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fd f9a3 	bl	80020dc <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9a:	f7fd f99f 	bl	80020dc <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e10c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x2ea>
 8004dc0:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a63      	ldr	r2, [pc, #396]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x30c>
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a5e      	ldr	r2, [pc, #376]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70
 8004de2:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a5b      	ldr	r2, [pc, #364]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
 8004dee:	e00b      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a54      	ldr	r2, [pc, #336]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f023 0304 	bic.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fd f964 	bl	80020dc <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fd f960 	bl	80020dc <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0cb      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	4b49      	ldr	r3, [pc, #292]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ee      	beq.n	8004e18 <HAL_RCC_OscConfig+0x334>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3c:	f7fd f94e 	bl	80020dc <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fd f94a 	bl	80020dc <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0b5      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ee      	bne.n	8004e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	4a38      	ldr	r2, [pc, #224]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a1 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d05c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d141      	bne.n	8004f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd f91e 	bl	80020dc <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd f91a 	bl	80020dc <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e087      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	3b01      	subs	r3, #1
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	491b      	ldr	r1, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fd f8f3 	bl	80020dc <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fd f8ef 	bl	80020dc <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e05c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x416>
 8004f18:	e054      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fd f8dc 	bl	80020dc <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fd f8d8 	bl	80020dc <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e045      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x444>
 8004f46:	e03d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e038      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x4ec>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d121      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d11a      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0cc      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b68      	ldr	r3, [pc, #416]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d90c      	bls.n	8005010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b8      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a58      	ldr	r2, [pc, #352]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b53      	ldr	r3, [pc, #332]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800504a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494d      	ldr	r1, [pc, #308]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d044      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d003      	beq.n	8005092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e067      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b37      	ldr	r3, [pc, #220]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4934      	ldr	r1, [pc, #208]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c4:	f7fd f80a 	bl	80020dc <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fd f806 	bl	80020dc <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e04f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d20c      	bcs.n	800511c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4916      	ldr	r1, [pc, #88]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490e      	ldr	r1, [pc, #56]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f821 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490a      	ldr	r1, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fc fe60 	bl	8001e40 <HAL_InitTick>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023c00 	.word	0x40023c00
 8005190:	40023800 	.word	0x40023800
 8005194:	0800eb80 	.word	0x0800eb80
 8005198:	2000041c 	.word	0x2000041c
 800519c:	20000420 	.word	0x20000420

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b094      	sub	sp, #80	; 0x50
 80051a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
 80051ac:	2300      	movs	r3, #0
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b0:	2300      	movs	r3, #0
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b8:	4b79      	ldr	r3, [pc, #484]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x40>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	f200 80e1 	bhi.w	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d003      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x3a>
 80051d2:	e0db      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051d8:	e0db      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051da:	4b72      	ldr	r3, [pc, #456]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051de:	e0d8      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e0:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ea:	4b6d      	ldr	r3, [pc, #436]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f6:	4b6a      	ldr	r3, [pc, #424]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	2200      	movs	r2, #0
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	633b      	str	r3, [r7, #48]	; 0x30
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
 800520e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	f04f 0000 	mov.w	r0, #0
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	0159      	lsls	r1, r3, #5
 8005220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005224:	0150      	lsls	r0, r2, #5
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4621      	mov	r1, r4
 800522c:	1a51      	subs	r1, r2, r1
 800522e:	6139      	str	r1, [r7, #16]
 8005230:	4629      	mov	r1, r5
 8005232:	eb63 0301 	sbc.w	r3, r3, r1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005244:	4659      	mov	r1, fp
 8005246:	018b      	lsls	r3, r1, #6
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800524e:	4651      	mov	r1, sl
 8005250:	018a      	lsls	r2, r1, #6
 8005252:	4651      	mov	r1, sl
 8005254:	ebb2 0801 	subs.w	r8, r2, r1
 8005258:	4659      	mov	r1, fp
 800525a:	eb63 0901 	sbc.w	r9, r3, r1
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800526a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005272:	4690      	mov	r8, r2
 8005274:	4699      	mov	r9, r3
 8005276:	4623      	mov	r3, r4
 8005278:	eb18 0303 	adds.w	r3, r8, r3
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	462b      	mov	r3, r5
 8005280:	eb49 0303 	adc.w	r3, r9, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005292:	4629      	mov	r1, r5
 8005294:	028b      	lsls	r3, r1, #10
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800529c:	4621      	mov	r1, r4
 800529e:	028a      	lsls	r2, r1, #10
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052b0:	f7fa ffee 	bl	8000290 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	e058      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	4611      	mov	r1, r2
 80052ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	0159      	lsls	r1, r3, #5
 80052e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ea:	0150      	lsls	r0, r2, #5
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4641      	mov	r1, r8
 80052f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800530c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005310:	ebb2 040a 	subs.w	r4, r2, sl
 8005314:	eb63 050b 	sbc.w	r5, r3, fp
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	464b      	mov	r3, r9
 8005334:	eb45 0303 	adc.w	r3, r5, r3
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005346:	4629      	mov	r1, r5
 8005348:	028b      	lsls	r3, r1, #10
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005350:	4621      	mov	r1, r4
 8005352:	028a      	lsls	r2, r1, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535a:	2200      	movs	r2, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	f7fa ff94 	bl	8000290 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538a:	e002      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005394:	4618      	mov	r0, r3
 8005396:	3750      	adds	r7, #80	; 0x50
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400

080053a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000041c 	.word	0x2000041c

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053c4:	f7ff fff0 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0a9b      	lsrs	r3, r3, #10
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4903      	ldr	r1, [pc, #12]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40023800 	.word	0x40023800
 80053e4:	0800eb90 	.word	0x0800eb90

080053e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	220f      	movs	r2, #15
 80053f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053f8:	4b12      	ldr	r3, [pc, #72]	; (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0203 	and.w	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005404:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	08db      	lsrs	r3, r3, #3
 8005422:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <HAL_RCC_GetClockConfig+0x60>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0207 	and.w	r2, r3, #7
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800
 8005448:	40023c00 	.word	0x40023c00

0800544c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e07b      	b.n	8005556 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	d108      	bne.n	8005478 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546e:	d009      	beq.n	8005484 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	61da      	str	r2, [r3, #28]
 8005476:	e005      	b.n	8005484 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fc fbe2 	bl	8001c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	ea42 0103 	orr.w	r1, r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0104 	and.w	r1, r3, #4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	f003 0210 	and.w	r2, r3, #16
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005544:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b088      	sub	sp, #32
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_SPI_Transmit+0x22>
 800557c:	2302      	movs	r3, #2
 800557e:	e126      	b.n	80057ce <HAL_SPI_Transmit+0x270>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005588:	f7fc fda8 	bl	80020dc <HAL_GetTick>
 800558c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800559e:	2302      	movs	r3, #2
 80055a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055a2:	e10b      	b.n	80057bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_SPI_Transmit+0x52>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b4:	e102      	b.n	80057bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2203      	movs	r2, #3
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fc:	d10f      	bne.n	800561e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800560c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800561c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d007      	beq.n	800563c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800563a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005644:	d14b      	bne.n	80056de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_Transmit+0xf6>
 800564e:	8afb      	ldrh	r3, [r7, #22]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d13e      	bne.n	80056d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005678:	e02b      	b.n	80056d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d112      	bne.n	80056ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80056ac:	e011      	b.n	80056d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ae:	f7fc fd15 	bl	80020dc <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_Transmit+0x168>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x16e>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056d0:	e074      	b.n	80057bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1ce      	bne.n	800567a <HAL_SPI_Transmit+0x11c>
 80056dc:	e04c      	b.n	8005778 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_Transmit+0x18e>
 80056e6:	8afb      	ldrh	r3, [r7, #22]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d140      	bne.n	800576e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	7812      	ldrb	r2, [r2, #0]
 80056f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005712:	e02c      	b.n	800576e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d113      	bne.n	800574a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	7812      	ldrb	r2, [r2, #0]
 800572e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	86da      	strh	r2, [r3, #54]	; 0x36
 8005748:	e011      	b.n	800576e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800574a:	f7fc fcc7 	bl	80020dc <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d803      	bhi.n	8005762 <HAL_SPI_Transmit+0x204>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d102      	bne.n	8005768 <HAL_SPI_Transmit+0x20a>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800576c:	e026      	b.n	80057bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1cd      	bne.n	8005714 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f8b3 	bl	80058e8 <SPI_EndRxTxTransaction>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e000      	b.n	80057bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80057ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057e8:	f7fc fc78 	bl	80020dc <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	4413      	add	r3, r2
 80057f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057f8:	f7fc fc70 	bl	80020dc <HAL_GetTick>
 80057fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057fe:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	015b      	lsls	r3, r3, #5
 8005804:	0d1b      	lsrs	r3, r3, #20
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	fb02 f303 	mul.w	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800580e:	e054      	b.n	80058ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d050      	beq.n	80058ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005818:	f7fc fc60 	bl	80020dc <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	429a      	cmp	r2, r3
 8005826:	d902      	bls.n	800582e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d13d      	bne.n	80058aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800583c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005846:	d111      	bne.n	800586c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005850:	d004      	beq.n	800585c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585a:	d107      	bne.n	800586c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005874:	d10f      	bne.n	8005896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e017      	b.n	80058da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4013      	ands	r3, r2
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d19b      	bne.n	8005810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	2000041c 	.word	0x2000041c

080058e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <SPI_EndRxTxTransaction+0x7c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <SPI_EndRxTxTransaction+0x80>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	0d5b      	lsrs	r3, r3, #21
 8005900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005912:	d112      	bne.n	800593a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2200      	movs	r2, #0
 800591c:	2180      	movs	r1, #128	; 0x80
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7ff ff5a 	bl	80057d8 <SPI_WaitFlagStateUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e00f      	b.n	800595a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	3b01      	subs	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d0f2      	beq.n	800593a <SPI_EndRxTxTransaction+0x52>
 8005954:	e000      	b.n	8005958 <SPI_EndRxTxTransaction+0x70>
        break;
 8005956:	bf00      	nop
  }

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	2000041c 	.word	0x2000041c
 8005968:	165e9f81 	.word	0x165e9f81

0800596c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e041      	b.n	8005a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fc f9e6 	bl	8001d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 fd3a 	bl	8006424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d001      	beq.n	8005a24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e03c      	b.n	8005a9e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <HAL_TIM_Base_Start+0xa0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d018      	beq.n	8005a68 <HAL_TIM_Base_Start+0x5c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3e:	d013      	beq.n	8005a68 <HAL_TIM_Base_Start+0x5c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <HAL_TIM_Base_Start+0xa4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00e      	beq.n	8005a68 <HAL_TIM_Base_Start+0x5c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <HAL_TIM_Base_Start+0xa8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_TIM_Base_Start+0x5c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <HAL_TIM_Base_Start+0xac>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_TIM_Base_Start+0x5c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <HAL_TIM_Base_Start+0xb0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d111      	bne.n	8005a8c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d010      	beq.n	8005a9c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	e007      	b.n	8005a9c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40014000 	.word	0x40014000

08005ac0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6a1a      	ldr	r2, [r3, #32]
 8005ace:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10f      	bne.n	8005af8 <HAL_TIM_Base_Stop+0x38>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	f240 4344 	movw	r3, #1092	; 0x444
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_Base_Stop+0x38>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d001      	beq.n	8005b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e044      	b.n	8005bb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x6c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d013      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x6c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1a      	ldr	r2, [pc, #104]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x6c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x6c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <HAL_TIM_Base_Start_IT+0xbc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0x6c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d111      	bne.n	8005ba0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d010      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	e007      	b.n	8005bb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40014000 	.word	0x40014000

08005bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e041      	b.n	8005c6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f839 	bl	8005c72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f000 fc06 	bl	8006424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <HAL_TIM_PWM_Start+0x24>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e022      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d109      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0x3e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	bf14      	ite	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	e015      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d109      	bne.n	8005ce0 <HAL_TIM_PWM_Start+0x58>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e008      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e068      	b.n	8005dcc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x82>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d08:	e013      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Start+0x92>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d18:	e00b      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_PWM_Start+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d28:	e003      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fe18 	bl	8006970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <HAL_TIM_PWM_Start+0x14c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d107      	bne.n	8005d5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1d      	ldr	r2, [pc, #116]	; (8005dd4 <HAL_TIM_PWM_Start+0x14c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x10e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d013      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x10e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <HAL_TIM_PWM_Start+0x150>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x10e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <HAL_TIM_PWM_Start+0x154>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x10e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <HAL_TIM_PWM_Start+0x158>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x10e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <HAL_TIM_PWM_Start+0x15c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d111      	bne.n	8005dba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d010      	beq.n	8005dca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	e007      	b.n	8005dca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40014000 	.word	0x40014000

08005de8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fdb8 	bl	8006970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a29      	ldr	r2, [pc, #164]	; (8005eac <HAL_TIM_PWM_Stop+0xc4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d117      	bne.n	8005e3a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10f      	bne.n	8005e3a <HAL_TIM_PWM_Stop+0x52>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a1a      	ldr	r2, [r3, #32]
 8005e20:	f240 4344 	movw	r3, #1092	; 0x444
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d107      	bne.n	8005e3a <HAL_TIM_PWM_Stop+0x52>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10f      	bne.n	8005e6a <HAL_TIM_PWM_Stop+0x82>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	f240 4344 	movw	r3, #1092	; 0x444
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <HAL_TIM_PWM_Stop+0x82>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x92>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e78:	e013      	b.n	8005ea2 <HAL_TIM_PWM_Stop+0xba>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Stop+0xa2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e88:	e00b      	b.n	8005ea2 <HAL_TIM_PWM_Stop+0xba>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Stop+0xb2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e98:	e003      	b.n	8005ea2 <HAL_TIM_PWM_Stop+0xba>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40010000 	.word	0x40010000

08005eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d122      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d11b      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0202 	mvn.w	r2, #2
 8005edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa77 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa69 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa7a 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d122      	bne.n	8005f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d11b      	bne.n	8005f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0204 	mvn.w	r2, #4
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa4d 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa3f 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fa50 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0208 	mvn.w	r2, #8
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa23 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa15 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fa26 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0310 	and.w	r3, r3, #16
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0210 	mvn.w	r2, #16
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9f9 	bl	80063e6 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9eb 	bl	80063d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f9fc 	bl	80063fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d10e      	bne.n	8006034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d107      	bne.n	8006034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0201 	mvn.w	r2, #1
 800602c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fb fd8e 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d10e      	bne.n	8006060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d107      	bne.n	8006060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fd26 	bl	8006aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d10e      	bne.n	800608c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d107      	bne.n	800608c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f9c1 	bl	800640e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b20      	cmp	r3, #32
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0220 	mvn.w	r2, #32
 80060b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fcf0 	bl	8006a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060da:	2302      	movs	r3, #2
 80060dc:	e0ae      	b.n	800623c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	f200 809f 	bhi.w	800622c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006129 	.word	0x08006129
 80060f8:	0800622d 	.word	0x0800622d
 80060fc:	0800622d 	.word	0x0800622d
 8006100:	0800622d 	.word	0x0800622d
 8006104:	08006169 	.word	0x08006169
 8006108:	0800622d 	.word	0x0800622d
 800610c:	0800622d 	.word	0x0800622d
 8006110:	0800622d 	.word	0x0800622d
 8006114:	080061ab 	.word	0x080061ab
 8006118:	0800622d 	.word	0x0800622d
 800611c:	0800622d 	.word	0x0800622d
 8006120:	0800622d 	.word	0x0800622d
 8006124:	080061eb 	.word	0x080061eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f9f8 	bl	8006524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0208 	orr.w	r2, r2, #8
 8006142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0204 	bic.w	r2, r2, #4
 8006152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6999      	ldr	r1, [r3, #24]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	619a      	str	r2, [r3, #24]
      break;
 8006166:	e064      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fa3e 	bl	80065f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6999      	ldr	r1, [r3, #24]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	021a      	lsls	r2, r3, #8
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	619a      	str	r2, [r3, #24]
      break;
 80061a8:	e043      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fa89 	bl	80066c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0208 	orr.w	r2, r2, #8
 80061c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0204 	bic.w	r2, r2, #4
 80061d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69d9      	ldr	r1, [r3, #28]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	61da      	str	r2, [r3, #28]
      break;
 80061e8:	e023      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fad3 	bl	800679c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69d9      	ldr	r1, [r3, #28]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	021a      	lsls	r2, r3, #8
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	61da      	str	r2, [r3, #28]
      break;
 800622a:	e002      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	75fb      	strb	r3, [r7, #23]
      break;
 8006230:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIM_ConfigClockSource+0x1c>
 800625c:	2302      	movs	r3, #2
 800625e:	e0b4      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x186>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800627e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006298:	d03e      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0xd4>
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	f200 8087 	bhi.w	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	f000 8086 	beq.w	80063b6 <HAL_TIM_ConfigClockSource+0x172>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	d87f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b70      	cmp	r3, #112	; 0x70
 80062b2:	d01a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0xa6>
 80062b4:	2b70      	cmp	r3, #112	; 0x70
 80062b6:	d87b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b60      	cmp	r3, #96	; 0x60
 80062ba:	d050      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x11a>
 80062bc:	2b60      	cmp	r3, #96	; 0x60
 80062be:	d877      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b50      	cmp	r3, #80	; 0x50
 80062c2:	d03c      	beq.n	800633e <HAL_TIM_ConfigClockSource+0xfa>
 80062c4:	2b50      	cmp	r3, #80	; 0x50
 80062c6:	d873      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d058      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x13a>
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d86f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b30      	cmp	r3, #48	; 0x30
 80062d2:	d064      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062d4:	2b30      	cmp	r3, #48	; 0x30
 80062d6:	d86b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d060      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d867      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05c      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d05a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15a>
 80062e8:	e062      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6899      	ldr	r1, [r3, #8]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f000 fb19 	bl	8006930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800630c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	609a      	str	r2, [r3, #8]
      break;
 8006316:	e04f      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6899      	ldr	r1, [r3, #8]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f000 fb02 	bl	8006930 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800633a:	609a      	str	r2, [r3, #8]
      break;
 800633c:	e03c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fa76 	bl	800683c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2150      	movs	r1, #80	; 0x50
 8006356:	4618      	mov	r0, r3
 8006358:	f000 facf 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 800635c:	e02c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fa95 	bl	800689a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2160      	movs	r1, #96	; 0x60
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fabf 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 800637c:	e01c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fa56 	bl	800683c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2140      	movs	r1, #64	; 0x40
 8006396:	4618      	mov	r0, r3
 8006398:	f000 faaf 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 800639c:	e00c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4619      	mov	r1, r3
 80063a8:	4610      	mov	r0, r2
 80063aa:	f000 faa6 	bl	80068fa <TIM_ITRx_SetConfig>
      break;
 80063ae:	e003      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a34      	ldr	r2, [pc, #208]	; (8006508 <TIM_Base_SetConfig+0xe4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00f      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a31      	ldr	r2, [pc, #196]	; (800650c <TIM_Base_SetConfig+0xe8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a30      	ldr	r2, [pc, #192]	; (8006510 <TIM_Base_SetConfig+0xec>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x38>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a2f      	ldr	r2, [pc, #188]	; (8006514 <TIM_Base_SetConfig+0xf0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a25      	ldr	r2, [pc, #148]	; (8006508 <TIM_Base_SetConfig+0xe4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01b      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d017      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a22      	ldr	r2, [pc, #136]	; (800650c <TIM_Base_SetConfig+0xe8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a21      	ldr	r2, [pc, #132]	; (8006510 <TIM_Base_SetConfig+0xec>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00f      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a20      	ldr	r2, [pc, #128]	; (8006514 <TIM_Base_SetConfig+0xf0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00b      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1f      	ldr	r2, [pc, #124]	; (8006518 <TIM_Base_SetConfig+0xf4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1e      	ldr	r2, [pc, #120]	; (800651c <TIM_Base_SetConfig+0xf8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_Base_SetConfig+0x8a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <TIM_Base_SetConfig+0xfc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d108      	bne.n	80064c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a08      	ldr	r2, [pc, #32]	; (8006508 <TIM_Base_SetConfig+0xe4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d103      	bne.n	80064f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	615a      	str	r2, [r3, #20]
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f023 0201 	bic.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 0302 	bic.w	r3, r3, #2
 800656c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a1c      	ldr	r2, [pc, #112]	; (80065ec <TIM_OC1_SetConfig+0xc8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10c      	bne.n	800659a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 0308 	bic.w	r3, r3, #8
 8006586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 0304 	bic.w	r3, r3, #4
 8006598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a13      	ldr	r2, [pc, #76]	; (80065ec <TIM_OC1_SetConfig+0xc8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d111      	bne.n	80065c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40010000 	.word	0x40010000

080065f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f023 0210 	bic.w	r2, r3, #16
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0320 	bic.w	r3, r3, #32
 800663a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a1e      	ldr	r2, [pc, #120]	; (80066c4 <TIM_OC2_SetConfig+0xd4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10d      	bne.n	800666c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <TIM_OC2_SetConfig+0xd4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d113      	bne.n	800669c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800667a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40010000 	.word	0x40010000

080066c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a1d      	ldr	r2, [pc, #116]	; (8006798 <TIM_OC3_SetConfig+0xd0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10d      	bne.n	8006742 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a14      	ldr	r2, [pc, #80]	; (8006798 <TIM_OC3_SetConfig+0xd0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d113      	bne.n	8006772 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40010000 	.word	0x40010000

0800679c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	031b      	lsls	r3, r3, #12
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a10      	ldr	r2, [pc, #64]	; (8006838 <TIM_OC4_SetConfig+0x9c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d109      	bne.n	8006810 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	019b      	lsls	r3, r3, #6
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40010000 	.word	0x40010000

0800683c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0201 	bic.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f023 030a 	bic.w	r3, r3, #10
 8006878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0210 	bic.w	r2, r3, #16
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	031b      	lsls	r3, r3, #12
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	f043 0307 	orr.w	r3, r3, #7
 800691c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	609a      	str	r2, [r3, #8]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800694a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	021a      	lsls	r2, r3, #8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	431a      	orrs	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4313      	orrs	r3, r2
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	609a      	str	r2, [r3, #8]
}
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2201      	movs	r2, #1
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1a      	ldr	r2, [r3, #32]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	fa01 f303 	lsl.w	r3, r1, r3
 80069a8:	431a      	orrs	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e050      	b.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a20:	d013      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a18      	ldr	r2, [pc, #96]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d10c      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	40000800 	.word	0x40000800
 8006a90:	40000c00 	.word	0x40000c00
 8006a94:	40014000 	.word	0x40014000

08006a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	f107 001c 	add.w	r0, r7, #28
 8006ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d122      	bne.n	8006b1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fbee 	bl	80082f4 <USB_CoreReset>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
 8006b1c:	e01a      	b.n	8006b54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fbe2 	bl	80082f4 <USB_CoreReset>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
 8006b46:	e005      	b.n	8006b54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d10b      	bne.n	8006b72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f043 0206 	orr.w	r2, r3, #6
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f043 0220 	orr.w	r2, r3, #32
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b7e:	b004      	add	sp, #16
 8006b80:	4770      	bx	lr
	...

08006b84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d165      	bne.n	8006c64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4a41      	ldr	r2, [pc, #260]	; (8006ca0 <USB_SetTurnaroundTime+0x11c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d906      	bls.n	8006bae <USB_SetTurnaroundTime+0x2a>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a40      	ldr	r2, [pc, #256]	; (8006ca4 <USB_SetTurnaroundTime+0x120>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d202      	bcs.n	8006bae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ba8:	230f      	movs	r3, #15
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e062      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4a3c      	ldr	r2, [pc, #240]	; (8006ca4 <USB_SetTurnaroundTime+0x120>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d306      	bcc.n	8006bc4 <USB_SetTurnaroundTime+0x40>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4a3b      	ldr	r2, [pc, #236]	; (8006ca8 <USB_SetTurnaroundTime+0x124>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d202      	bcs.n	8006bc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006bbe:	230e      	movs	r3, #14
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	e057      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4a38      	ldr	r2, [pc, #224]	; (8006ca8 <USB_SetTurnaroundTime+0x124>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d306      	bcc.n	8006bda <USB_SetTurnaroundTime+0x56>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4a37      	ldr	r2, [pc, #220]	; (8006cac <USB_SetTurnaroundTime+0x128>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d202      	bcs.n	8006bda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006bd4:	230d      	movs	r3, #13
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e04c      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a33      	ldr	r2, [pc, #204]	; (8006cac <USB_SetTurnaroundTime+0x128>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d306      	bcc.n	8006bf0 <USB_SetTurnaroundTime+0x6c>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4a32      	ldr	r2, [pc, #200]	; (8006cb0 <USB_SetTurnaroundTime+0x12c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d802      	bhi.n	8006bf0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bea:	230c      	movs	r3, #12
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e041      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a2f      	ldr	r2, [pc, #188]	; (8006cb0 <USB_SetTurnaroundTime+0x12c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d906      	bls.n	8006c06 <USB_SetTurnaroundTime+0x82>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4a2e      	ldr	r2, [pc, #184]	; (8006cb4 <USB_SetTurnaroundTime+0x130>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d802      	bhi.n	8006c06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c00:	230b      	movs	r3, #11
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e036      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <USB_SetTurnaroundTime+0x130>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d906      	bls.n	8006c1c <USB_SetTurnaroundTime+0x98>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4a29      	ldr	r2, [pc, #164]	; (8006cb8 <USB_SetTurnaroundTime+0x134>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d802      	bhi.n	8006c1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c16:	230a      	movs	r3, #10
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e02b      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <USB_SetTurnaroundTime+0x134>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d906      	bls.n	8006c32 <USB_SetTurnaroundTime+0xae>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4a25      	ldr	r2, [pc, #148]	; (8006cbc <USB_SetTurnaroundTime+0x138>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d202      	bcs.n	8006c32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c2c:	2309      	movs	r3, #9
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e020      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <USB_SetTurnaroundTime+0x138>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d306      	bcc.n	8006c48 <USB_SetTurnaroundTime+0xc4>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <USB_SetTurnaroundTime+0x13c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d802      	bhi.n	8006c48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c42:	2308      	movs	r3, #8
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	e015      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <USB_SetTurnaroundTime+0x13c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d906      	bls.n	8006c5e <USB_SetTurnaroundTime+0xda>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <USB_SetTurnaroundTime+0x140>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d202      	bcs.n	8006c5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c58:	2307      	movs	r3, #7
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e00a      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c5e:	2306      	movs	r3, #6
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e007      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c6a:	2309      	movs	r3, #9
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	e001      	b.n	8006c74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c70:	2309      	movs	r3, #9
 8006c72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	029b      	lsls	r3, r3, #10
 8006c88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	00d8acbf 	.word	0x00d8acbf
 8006ca4:	00e4e1c0 	.word	0x00e4e1c0
 8006ca8:	00f42400 	.word	0x00f42400
 8006cac:	01067380 	.word	0x01067380
 8006cb0:	011a499f 	.word	0x011a499f
 8006cb4:	01312cff 	.word	0x01312cff
 8006cb8:	014ca43f 	.word	0x014ca43f
 8006cbc:	016e3600 	.word	0x016e3600
 8006cc0:	01a6ab1f 	.word	0x01a6ab1f
 8006cc4:	01e84800 	.word	0x01e84800

08006cc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f043 0201 	orr.w	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d115      	bne.n	8006d5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	f7fb f9da 	bl	80020f4 <HAL_Delay>
      ms++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fa45 	bl	80081d6 <USB_GetMode>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d01e      	beq.n	8006d90 <USB_SetCurrentMode+0x84>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b31      	cmp	r3, #49	; 0x31
 8006d56:	d9f0      	bls.n	8006d3a <USB_SetCurrentMode+0x2e>
 8006d58:	e01a      	b.n	8006d90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d115      	bne.n	8006d8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f7fb f9c1 	bl	80020f4 <HAL_Delay>
      ms++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fa2c 	bl	80081d6 <USB_GetMode>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <USB_SetCurrentMode+0x84>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b31      	cmp	r3, #49	; 0x31
 8006d88:	d9f0      	bls.n	8006d6c <USB_SetCurrentMode+0x60>
 8006d8a:	e001      	b.n	8006d90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e005      	b.n	8006d9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b32      	cmp	r3, #50	; 0x32
 8006d94:	d101      	bne.n	8006d9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006da4:	b084      	sub	sp, #16
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b086      	sub	sp, #24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	e009      	b.n	8006dd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	3340      	adds	r3, #64	; 0x40
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b0e      	cmp	r3, #14
 8006ddc:	d9f2      	bls.n	8006dc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11c      	bne.n	8006e1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df2:	f043 0302 	orr.w	r3, r3, #2
 8006df6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
 8006e1c:	e00b      	b.n	8006e36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e48:	4619      	mov	r1, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	461a      	mov	r2, r3
 8006e52:	680b      	ldr	r3, [r1, #0]
 8006e54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10c      	bne.n	8006e76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e62:	2100      	movs	r1, #0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f965 	bl	8007134 <USB_SetDevSpeed>
 8006e6a:	e008      	b.n	8006e7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f960 	bl	8007134 <USB_SetDevSpeed>
 8006e74:	e003      	b.n	8006e7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e76:	2103      	movs	r1, #3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f95b 	bl	8007134 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e7e:	2110      	movs	r1, #16
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f8f3 	bl	800706c <USB_FlushTxFifo>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f91f 	bl	80070d4 <USB_FlushRxFifo>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e043      	b.n	8006f52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee0:	d118      	bne.n	8006f14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	e013      	b.n	8006f26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e008      	b.n	8006f26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f20:	461a      	mov	r2, r3
 8006f22:	2300      	movs	r3, #0
 8006f24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	461a      	mov	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	461a      	mov	r2, r3
 8006f46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d3b7      	bcc.n	8006eca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	e043      	b.n	8006fe8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f76:	d118      	bne.n	8006faa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	e013      	b.n	8006fbc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	e008      	b.n	8006fbc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	461a      	mov	r2, r3
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fe0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d3b7      	bcc.n	8006f60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007002:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007010:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	2b00      	cmp	r3, #0
 8007016:	d105      	bne.n	8007024 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f043 0210 	orr.w	r2, r3, #16
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <USB_DevInit+0x2c4>)
 800702a:	4313      	orrs	r3, r2
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f043 0208 	orr.w	r2, r3, #8
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d107      	bne.n	8007058 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007050:	f043 0304 	orr.w	r3, r3, #4
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007058:	7dfb      	ldrb	r3, [r7, #23]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007064:	b004      	add	sp, #16
 8007066:	4770      	bx	lr
 8007068:	803c3800 	.word	0x803c3800

0800706c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a13      	ldr	r2, [pc, #76]	; (80070d0 <USB_FlushTxFifo+0x64>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d901      	bls.n	800708c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e01b      	b.n	80070c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	daf2      	bge.n	800707a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	019b      	lsls	r3, r3, #6
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4a08      	ldr	r2, [pc, #32]	; (80070d0 <USB_FlushTxFifo+0x64>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d901      	bls.n	80070b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e006      	b.n	80070c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d0f0      	beq.n	80070a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	00030d40 	.word	0x00030d40

080070d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4a11      	ldr	r2, [pc, #68]	; (8007130 <USB_FlushRxFifo+0x5c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e018      	b.n	8007124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	daf2      	bge.n	80070e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2210      	movs	r2, #16
 8007102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4a08      	ldr	r2, [pc, #32]	; (8007130 <USB_FlushRxFifo+0x5c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e006      	b.n	8007124 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b10      	cmp	r3, #16
 8007120:	d0f0      	beq.n	8007104 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	00030d40 	.word	0x00030d40

08007134 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b087      	sub	sp, #28
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0306 	and.w	r3, r3, #6
 800717e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007186:	2300      	movs	r3, #0
 8007188:	75fb      	strb	r3, [r7, #23]
 800718a:	e00a      	b.n	80071a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d002      	beq.n	8007198 <USB_GetDevSpeed+0x32>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d102      	bne.n	800719e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007198:	2302      	movs	r3, #2
 800719a:	75fb      	strb	r3, [r7, #23]
 800719c:	e001      	b.n	80071a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800719e:	230f      	movs	r3, #15
 80071a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d13a      	bne.n	8007242 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	2101      	movs	r1, #1
 80071de:	fa01 f303 	lsl.w	r3, r1, r3
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ea:	4313      	orrs	r3, r2
 80071ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d155      	bne.n	80072b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	791b      	ldrb	r3, [r3, #4]
 800721e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007220:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	059b      	lsls	r3, r3, #22
 8007226:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007228:	4313      	orrs	r3, r2
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	440a      	add	r2, r1
 8007232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	e036      	b.n	80072b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	2101      	movs	r1, #1
 8007254:	fa01 f303 	lsl.w	r3, r1, r3
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007260:	4313      	orrs	r3, r2
 8007262:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d11a      	bne.n	80072b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	791b      	ldrb	r3, [r3, #4]
 8007294:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007296:	430b      	orrs	r3, r1
 8007298:	4313      	orrs	r3, r2
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d161      	bne.n	80073a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f2:	d11f      	bne.n	8007334 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007312:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007332:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	2101      	movs	r1, #1
 8007346:	fa01 f303 	lsl.w	r3, r1, r3
 800734a:	b29b      	uxth	r3, r3
 800734c:	43db      	mvns	r3, r3
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007354:	4013      	ands	r3, r2
 8007356:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	69da      	ldr	r2, [r3, #28]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	2101      	movs	r1, #1
 800736a:	fa01 f303 	lsl.w	r3, r1, r3
 800736e:	b29b      	uxth	r3, r3
 8007370:	43db      	mvns	r3, r3
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007378:	4013      	ands	r3, r2
 800737a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	0159      	lsls	r1, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	440b      	add	r3, r1
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	4619      	mov	r1, r3
 8007398:	4b35      	ldr	r3, [pc, #212]	; (8007470 <USB_DeactivateEndpoint+0x1b0>)
 800739a:	4013      	ands	r3, r2
 800739c:	600b      	str	r3, [r1, #0]
 800739e:	e060      	b.n	8007462 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b6:	d11f      	bne.n	80073f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	2101      	movs	r1, #1
 800740a:	fa01 f303 	lsl.w	r3, r1, r3
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	43db      	mvns	r3, r3
 8007412:	68f9      	ldr	r1, [r7, #12]
 8007414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007418:	4013      	ands	r3, r2
 800741a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	2101      	movs	r1, #1
 800742e:	fa01 f303 	lsl.w	r3, r1, r3
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	43db      	mvns	r3, r3
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743c:	4013      	ands	r3, r2
 800743e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	0159      	lsls	r1, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	440b      	add	r3, r1
 8007456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745a:	4619      	mov	r1, r3
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <USB_DeactivateEndpoint+0x1b4>)
 800745e:	4013      	ands	r3, r2
 8007460:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	ec337800 	.word	0xec337800
 8007474:	eff37800 	.word	0xeff37800

08007478 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b01      	cmp	r3, #1
 8007496:	f040 815c 	bne.w	8007752 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d132      	bne.n	8007508 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007500:	0cdb      	lsrs	r3, r3, #19
 8007502:	04db      	lsls	r3, r3, #19
 8007504:	6113      	str	r3, [r2, #16]
 8007506:	e074      	b.n	80075f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007522:	0cdb      	lsrs	r3, r3, #19
 8007524:	04db      	lsls	r3, r3, #19
 8007526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800754a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007558:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6999      	ldr	r1, [r3, #24]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	440b      	add	r3, r1
 8007564:	1e59      	subs	r1, r3, #1
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	fbb1 f3f3 	udiv	r3, r1, r3
 800756e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007570:	4b9d      	ldr	r3, [pc, #628]	; (80077e8 <USB_EPStartXfer+0x370>)
 8007572:	400b      	ands	r3, r1
 8007574:	69b9      	ldr	r1, [r7, #24]
 8007576:	0148      	lsls	r0, r1, #5
 8007578:	69f9      	ldr	r1, [r7, #28]
 800757a:	4401      	add	r1, r0
 800757c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007580:	4313      	orrs	r3, r2
 8007582:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800759a:	69b9      	ldr	r1, [r7, #24]
 800759c:	0148      	lsls	r0, r1, #5
 800759e:	69f9      	ldr	r1, [r7, #28]
 80075a0:	4401      	add	r1, r0
 80075a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80075a6:	4313      	orrs	r3, r2
 80075a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	791b      	ldrb	r3, [r3, #4]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d11f      	bne.n	80075f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80075d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	0151      	lsls	r1, r2, #5
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	440a      	add	r2, r1
 80075e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d14b      	bne.n	8007690 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d009      	beq.n	8007614 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	791b      	ldrb	r3, [r3, #4]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d128      	bne.n	800766e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007628:	2b00      	cmp	r3, #0
 800762a:	d110      	bne.n	800764e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	440a      	add	r2, r1
 8007642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007646:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	e00f      	b.n	800766e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800766c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	e133      	b.n	80078f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	791b      	ldrb	r3, [r3, #4]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d015      	beq.n	80076e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 811b 	beq.w	80078f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	2101      	movs	r1, #1
 80076d4:	fa01 f303 	lsl.w	r3, r1, r3
 80076d8:	69f9      	ldr	r1, [r7, #28]
 80076da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076de:	4313      	orrs	r3, r2
 80076e0:	634b      	str	r3, [r1, #52]	; 0x34
 80076e2:	e109      	b.n	80078f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d110      	bne.n	8007716 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	e00f      	b.n	8007736 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	440a      	add	r2, r1
 800772c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007734:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6919      	ldr	r1, [r3, #16]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	b298      	uxth	r0, r3
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4603      	mov	r3, r0
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fade 	bl	8007d0c <USB_WritePacket>
 8007750:	e0d2      	b.n	80078f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776c:	0cdb      	lsrs	r3, r3, #19
 800776e:	04db      	lsls	r3, r3, #19
 8007770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007790:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007794:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d126      	bne.n	80077ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b4:	69b9      	ldr	r1, [r7, #24]
 80077b6:	0148      	lsls	r0, r1, #5
 80077b8:	69f9      	ldr	r1, [r7, #28]
 80077ba:	4401      	add	r1, r0
 80077bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077c0:	4313      	orrs	r3, r2
 80077c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077e2:	6113      	str	r3, [r2, #16]
 80077e4:	e03a      	b.n	800785c <USB_EPStartXfer+0x3e4>
 80077e6:	bf00      	nop
 80077e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	1e5a      	subs	r2, r3, #1
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007800:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	8afa      	ldrh	r2, [r7, #22]
 8007808:	fb03 f202 	mul.w	r2, r3, r2
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	8afb      	ldrh	r3, [r7, #22]
 8007820:	04d9      	lsls	r1, r3, #19
 8007822:	4b38      	ldr	r3, [pc, #224]	; (8007904 <USB_EPStartXfer+0x48c>)
 8007824:	400b      	ands	r3, r1
 8007826:	69b9      	ldr	r1, [r7, #24]
 8007828:	0148      	lsls	r0, r1, #5
 800782a:	69f9      	ldr	r1, [r7, #28]
 800782c:	4401      	add	r1, r0
 800782e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007832:	4313      	orrs	r3, r2
 8007834:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800784c:	69b9      	ldr	r1, [r7, #24]
 800784e:	0148      	lsls	r0, r1, #5
 8007850:	69f9      	ldr	r1, [r7, #28]
 8007852:	4401      	add	r1, r0
 8007854:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007858:	4313      	orrs	r3, r2
 800785a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d10d      	bne.n	800787e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6919      	ldr	r1, [r3, #16]
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787a:	460a      	mov	r2, r1
 800787c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	791b      	ldrb	r3, [r3, #4]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d128      	bne.n	80078d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007892:	2b00      	cmp	r3, #0
 8007894:	d110      	bne.n	80078b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e00f      	b.n	80078d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	1ff80000 	.word	0x1ff80000

08007908 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b01      	cmp	r3, #1
 8007926:	f040 80ce 	bne.w	8007ac6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d132      	bne.n	8007998 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800794c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	440a      	add	r2, r1
 800796c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007990:	0cdb      	lsrs	r3, r3, #19
 8007992:	04db      	lsls	r3, r3, #19
 8007994:	6113      	str	r3, [r2, #16]
 8007996:	e04e      	b.n	8007a36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b2:	0cdb      	lsrs	r3, r3, #19
 80079b4:	04db      	lsls	r3, r3, #19
 80079b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d903      	bls.n	80079f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a26:	6939      	ldr	r1, [r7, #16]
 8007a28:	0148      	lsls	r0, r1, #5
 8007a2a:	6979      	ldr	r1, [r7, #20]
 8007a2c:	4401      	add	r1, r0
 8007a2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a32:	4313      	orrs	r3, r2
 8007a34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d11e      	bne.n	8007a7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	461a      	mov	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e097      	b.n	8007baa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8083 	beq.w	8007baa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aba:	6979      	ldr	r1, [r7, #20]
 8007abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	634b      	str	r3, [r1, #52]	; 0x34
 8007ac4:	e071      	b.n	8007baa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae0:	0cdb      	lsrs	r3, r3, #19
 8007ae2:	04db      	lsls	r3, r3, #19
 8007ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b58:	6939      	ldr	r1, [r7, #16]
 8007b5a:	0148      	lsls	r0, r1, #5
 8007b5c:	6979      	ldr	r1, [r7, #20]
 8007b5e:	4401      	add	r1, r0
 8007b60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b64:	4313      	orrs	r3, r2
 8007b66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d10d      	bne.n	8007b8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6919      	ldr	r1, [r3, #16]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	460a      	mov	r2, r1
 8007b88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	0151      	lsls	r1, r2, #5
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	440a      	add	r2, r1
 8007ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d14a      	bne.n	8007c6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bee:	f040 8086 	bne.w	8007cfe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	7812      	ldrb	r2, [r2, #0]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	7812      	ldrb	r2, [r2, #0]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d902      	bls.n	8007c50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4e:	e056      	b.n	8007cfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c68:	d0e7      	beq.n	8007c3a <USB_EPStopXfer+0x82>
 8007c6a:	e048      	b.n	8007cfe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c84:	d13b      	bne.n	8007cfe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	7812      	ldrb	r2, [r2, #0]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ca8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	7812      	ldrb	r2, [r2, #0]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ccc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d902      	bls.n	8007ce4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ce2:	e00c      	b.n	8007cfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cfc:	d0e7      	beq.n	8007cce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b089      	sub	sp, #36	; 0x24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4611      	mov	r1, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	71fb      	strb	r3, [r7, #7]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d123      	bne.n	8007d7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d32:	88bb      	ldrh	r3, [r7, #4]
 8007d34:	3303      	adds	r3, #3
 8007d36:	089b      	lsrs	r3, r3, #2
 8007d38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e018      	b.n	8007d72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	031a      	lsls	r2, r3, #12
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	3301      	adds	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	3301      	adds	r3, #1
 8007d64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	61bb      	str	r3, [r7, #24]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d3e2      	bcc.n	8007d40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3724      	adds	r7, #36	; 0x24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b08b      	sub	sp, #44	; 0x2c
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	089b      	lsrs	r3, r3, #2
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	e014      	b.n	8007dde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	3301      	adds	r3, #1
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	3301      	adds	r3, #1
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	623b      	str	r3, [r7, #32]
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3e6      	bcc.n	8007db4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007de6:	8bfb      	ldrh	r3, [r7, #30]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01e      	beq.n	8007e2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df6:	461a      	mov	r2, r3
 8007df8:	f107 0310 	add.w	r3, r7, #16
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	701a      	strb	r2, [r3, #0]
      i++;
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	3301      	adds	r3, #1
 8007e16:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e1e:	8bfb      	ldrh	r3, [r7, #30]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e24:	8bfb      	ldrh	r3, [r7, #30]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1ea      	bne.n	8007e00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	372c      	adds	r7, #44	; 0x2c
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d12c      	bne.n	8007eae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	db12      	blt.n	8007e8c <USB_EPSetStall+0x54>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00f      	beq.n	8007e8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	e02b      	b.n	8007f06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	db12      	blt.n	8007ee6 <USB_EPSetStall+0xae>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00f      	beq.n	8007ee6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ee4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	0151      	lsls	r1, r2, #5
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	440a      	add	r2, r1
 8007efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d128      	bne.n	8007f82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	791b      	ldrb	r3, [r3, #4]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d003      	beq.n	8007f60 <USB_EPClearStall+0x4c>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	791b      	ldrb	r3, [r3, #4]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d138      	bne.n	8007fd2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	e027      	b.n	8007fd2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	0151      	lsls	r1, r2, #5
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	440a      	add	r2, r1
 8007f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fa0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	791b      	ldrb	r3, [r3, #4]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d003      	beq.n	8007fb2 <USB_EPClearStall+0x9e>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d10f      	bne.n	8007fd2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	0151      	lsls	r1, r2, #5
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	440a      	add	r2, r1
 8007fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fd0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ffe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008002:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008014:	68f9      	ldr	r1, [r7, #12]
 8008016:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800801a:	4313      	orrs	r3, r2
 800801c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008046:	f023 0303 	bic.w	r3, r3, #3
 800804a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800805a:	f023 0302 	bic.w	r3, r3, #2
 800805e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800809c:	f043 0302 	orr.w	r3, r3, #2
 80080a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4013      	ands	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080c8:	68fb      	ldr	r3, [r7, #12]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	4013      	ands	r3, r2
 80080f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	0c1b      	lsrs	r3, r3, #16
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800810a:	b480      	push	{r7}
 800810c:	b085      	sub	sp, #20
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	4013      	ands	r3, r2
 800812c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	b29b      	uxth	r3, r3
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	4013      	ands	r3, r2
 800816a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800816c:	68bb      	ldr	r3, [r7, #8]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800817a:	b480      	push	{r7}
 800817c:	b087      	sub	sp, #28
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	fa22 f303 	lsr.w	r3, r2, r3
 80081aa:	01db      	lsls	r3, r3, #7
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4013      	ands	r3, r2
 80081c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081c8:	68bb      	ldr	r3, [r7, #8]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0301 	and.w	r3, r3, #1
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800820c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008210:	f023 0307 	bic.w	r3, r3, #7
 8008214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	460b      	mov	r3, r1
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	333c      	adds	r3, #60	; 0x3c
 800824e:	3304      	adds	r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	4a26      	ldr	r2, [pc, #152]	; (80082f0 <USB_EP0_OutStart+0xb8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d90a      	bls.n	8008272 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800826c:	d101      	bne.n	8008272 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	e037      	b.n	80082e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	461a      	mov	r2, r3
 800827a:	2300      	movs	r3, #0
 800827c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800828c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a0:	f043 0318 	orr.w	r3, r3, #24
 80082a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80082b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d10f      	bne.n	80082e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80082de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	4f54300a 	.word	0x4f54300a

080082f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4a13      	ldr	r2, [pc, #76]	; (8008358 <USB_CoreReset+0x64>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d901      	bls.n	8008312 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e01b      	b.n	800834a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	daf2      	bge.n	8008300 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f043 0201 	orr.w	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4a09      	ldr	r2, [pc, #36]	; (8008358 <USB_CoreReset+0x64>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d901      	bls.n	800833c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e006      	b.n	800834a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b01      	cmp	r3, #1
 8008346:	d0f0      	beq.n	800832a <USB_CoreReset+0x36>

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	00030d40 	.word	0x00030d40

0800835c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008368:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800836c:	f005 fbd2 	bl	800db14 <USBD_static_malloc>
 8008370:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32b0      	adds	r2, #176	; 0xb0
 8008382:	2100      	movs	r1, #0
 8008384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008388:	2302      	movs	r3, #2
 800838a:	e0d4      	b.n	8008536 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800838c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008390:	2100      	movs	r1, #0
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f005 fc4a 	bl	800dc2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	32b0      	adds	r2, #176	; 0xb0
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	32b0      	adds	r2, #176	; 0xb0
 80083b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7c1b      	ldrb	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d138      	bne.n	8008436 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083c4:	4b5e      	ldr	r3, [pc, #376]	; (8008540 <USBD_CDC_Init+0x1e4>)
 80083c6:	7819      	ldrb	r1, [r3, #0]
 80083c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083cc:	2202      	movs	r2, #2
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f005 fa7d 	bl	800d8ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083d4:	4b5a      	ldr	r3, [pc, #360]	; (8008540 <USBD_CDC_Init+0x1e4>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	3324      	adds	r3, #36	; 0x24
 80083ea:	2201      	movs	r2, #1
 80083ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083ee:	4b55      	ldr	r3, [pc, #340]	; (8008544 <USBD_CDC_Init+0x1e8>)
 80083f0:	7819      	ldrb	r1, [r3, #0]
 80083f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f6:	2202      	movs	r2, #2
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f005 fa68 	bl	800d8ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083fe:	4b51      	ldr	r3, [pc, #324]	; (8008544 <USBD_CDC_Init+0x1e8>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f003 020f 	and.w	r2, r3, #15
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008416:	2201      	movs	r2, #1
 8008418:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800841a:	4b4b      	ldr	r3, [pc, #300]	; (8008548 <USBD_CDC_Init+0x1ec>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f003 020f 	and.w	r2, r3, #15
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	440b      	add	r3, r1
 800842e:	3326      	adds	r3, #38	; 0x26
 8008430:	2210      	movs	r2, #16
 8008432:	801a      	strh	r2, [r3, #0]
 8008434:	e035      	b.n	80084a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008436:	4b42      	ldr	r3, [pc, #264]	; (8008540 <USBD_CDC_Init+0x1e4>)
 8008438:	7819      	ldrb	r1, [r3, #0]
 800843a:	2340      	movs	r3, #64	; 0x40
 800843c:	2202      	movs	r2, #2
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f005 fa45 	bl	800d8ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008444:	4b3e      	ldr	r3, [pc, #248]	; (8008540 <USBD_CDC_Init+0x1e4>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 020f 	and.w	r2, r3, #15
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	3324      	adds	r3, #36	; 0x24
 800845a:	2201      	movs	r2, #1
 800845c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800845e:	4b39      	ldr	r3, [pc, #228]	; (8008544 <USBD_CDC_Init+0x1e8>)
 8008460:	7819      	ldrb	r1, [r3, #0]
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	2202      	movs	r2, #2
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f005 fa31 	bl	800d8ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800846c:	4b35      	ldr	r3, [pc, #212]	; (8008544 <USBD_CDC_Init+0x1e8>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 020f 	and.w	r2, r3, #15
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008484:	2201      	movs	r2, #1
 8008486:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008488:	4b2f      	ldr	r3, [pc, #188]	; (8008548 <USBD_CDC_Init+0x1ec>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	f003 020f 	and.w	r2, r3, #15
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	3326      	adds	r3, #38	; 0x26
 800849e:	2210      	movs	r2, #16
 80084a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80084a2:	4b29      	ldr	r3, [pc, #164]	; (8008548 <USBD_CDC_Init+0x1ec>)
 80084a4:	7819      	ldrb	r1, [r3, #0]
 80084a6:	2308      	movs	r3, #8
 80084a8:	2203      	movs	r2, #3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f005 fa0f 	bl	800d8ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80084b0:	4b25      	ldr	r3, [pc, #148]	; (8008548 <USBD_CDC_Init+0x1ec>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	f003 020f 	and.w	r2, r3, #15
 80084b8:	6879      	ldr	r1, [r7, #4]
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	440b      	add	r3, r1
 80084c4:	3324      	adds	r3, #36	; 0x24
 80084c6:	2201      	movs	r2, #1
 80084c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	33b0      	adds	r3, #176	; 0xb0
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008500:	2302      	movs	r3, #2
 8008502:	e018      	b.n	8008536 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	7c1b      	ldrb	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800850c:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <USBD_CDC_Init+0x1e8>)
 800850e:	7819      	ldrb	r1, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f005 fac6 	bl	800daac <USBD_LL_PrepareReceive>
 8008520:	e008      	b.n	8008534 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008522:	4b08      	ldr	r3, [pc, #32]	; (8008544 <USBD_CDC_Init+0x1e8>)
 8008524:	7819      	ldrb	r1, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800852c:	2340      	movs	r3, #64	; 0x40
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f005 fabc 	bl	800daac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200004af 	.word	0x200004af
 8008544:	200004b0 	.word	0x200004b0
 8008548:	200004b1 	.word	0x200004b1

0800854c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008558:	4b3a      	ldr	r3, [pc, #232]	; (8008644 <USBD_CDC_DeInit+0xf8>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f005 f9db 	bl	800d91a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008564:	4b37      	ldr	r3, [pc, #220]	; (8008644 <USBD_CDC_DeInit+0xf8>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	f003 020f 	and.w	r2, r3, #15
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	440b      	add	r3, r1
 8008578:	3324      	adds	r3, #36	; 0x24
 800857a:	2200      	movs	r2, #0
 800857c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800857e:	4b32      	ldr	r3, [pc, #200]	; (8008648 <USBD_CDC_DeInit+0xfc>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f005 f9c8 	bl	800d91a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800858a:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <USBD_CDC_DeInit+0xfc>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	f003 020f 	and.w	r2, r3, #15
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085a2:	2200      	movs	r2, #0
 80085a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80085a6:	4b29      	ldr	r3, [pc, #164]	; (800864c <USBD_CDC_DeInit+0x100>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f005 f9b4 	bl	800d91a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80085b2:	4b26      	ldr	r3, [pc, #152]	; (800864c <USBD_CDC_DeInit+0x100>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 020f 	and.w	r2, r3, #15
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3324      	adds	r3, #36	; 0x24
 80085c8:	2200      	movs	r2, #0
 80085ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80085cc:	4b1f      	ldr	r3, [pc, #124]	; (800864c <USBD_CDC_DeInit+0x100>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 020f 	and.w	r2, r3, #15
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	3326      	adds	r3, #38	; 0x26
 80085e2:	2200      	movs	r2, #0
 80085e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	32b0      	adds	r2, #176	; 0xb0
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01f      	beq.n	8008638 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	33b0      	adds	r3, #176	; 0xb0
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	32b0      	adds	r2, #176	; 0xb0
 8008616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861a:	4618      	mov	r0, r3
 800861c:	f005 fa88 	bl	800db30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	32b0      	adds	r2, #176	; 0xb0
 800862a:	2100      	movs	r1, #0
 800862c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200004af 	.word	0x200004af
 8008648:	200004b0 	.word	0x200004b0
 800864c:	200004b1 	.word	0x200004b1

08008650 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	32b0      	adds	r2, #176	; 0xb0
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800867c:	2303      	movs	r3, #3
 800867e:	e0bf      	b.n	8008800 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008688:	2b00      	cmp	r3, #0
 800868a:	d050      	beq.n	800872e <USBD_CDC_Setup+0xde>
 800868c:	2b20      	cmp	r3, #32
 800868e:	f040 80af 	bne.w	80087f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	88db      	ldrh	r3, [r3, #6]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d03a      	beq.n	8008710 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	b25b      	sxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	da1b      	bge.n	80086dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	33b0      	adds	r3, #176	; 0xb0
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80086ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	88d2      	ldrh	r2, [r2, #6]
 80086c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	88db      	ldrh	r3, [r3, #6]
 80086c6:	2b07      	cmp	r3, #7
 80086c8:	bf28      	it	cs
 80086ca:	2307      	movcs	r3, #7
 80086cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	89fa      	ldrh	r2, [r7, #14]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 fd89 	bl	800a1ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80086da:	e090      	b.n	80087fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	785a      	ldrb	r2, [r3, #1]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	88db      	ldrh	r3, [r3, #6]
 80086ea:	2b3f      	cmp	r3, #63	; 0x3f
 80086ec:	d803      	bhi.n	80086f6 <USBD_CDC_Setup+0xa6>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	88db      	ldrh	r3, [r3, #6]
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	e000      	b.n	80086f8 <USBD_CDC_Setup+0xa8>
 80086f6:	2240      	movs	r2, #64	; 0x40
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80086fe:	6939      	ldr	r1, [r7, #16]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008706:	461a      	mov	r2, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fd9b 	bl	800a244 <USBD_CtlPrepareRx>
      break;
 800870e:	e076      	b.n	80087fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	33b0      	adds	r3, #176	; 0xb0
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	7850      	ldrb	r0, [r2, #1]
 8008726:	2200      	movs	r2, #0
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	4798      	blx	r3
      break;
 800872c:	e067      	b.n	80087fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	2b0b      	cmp	r3, #11
 8008734:	d851      	bhi.n	80087da <USBD_CDC_Setup+0x18a>
 8008736:	a201      	add	r2, pc, #4	; (adr r2, 800873c <USBD_CDC_Setup+0xec>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	0800876d 	.word	0x0800876d
 8008740:	080087e9 	.word	0x080087e9
 8008744:	080087db 	.word	0x080087db
 8008748:	080087db 	.word	0x080087db
 800874c:	080087db 	.word	0x080087db
 8008750:	080087db 	.word	0x080087db
 8008754:	080087db 	.word	0x080087db
 8008758:	080087db 	.word	0x080087db
 800875c:	080087db 	.word	0x080087db
 8008760:	080087db 	.word	0x080087db
 8008764:	08008797 	.word	0x08008797
 8008768:	080087c1 	.word	0x080087c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b03      	cmp	r3, #3
 8008776:	d107      	bne.n	8008788 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008778:	f107 030a 	add.w	r3, r7, #10
 800877c:	2202      	movs	r2, #2
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 fd33 	bl	800a1ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008786:	e032      	b.n	80087ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fcbd 	bl	800a10a <USBD_CtlError>
            ret = USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	75fb      	strb	r3, [r7, #23]
          break;
 8008794:	e02b      	b.n	80087ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d107      	bne.n	80087b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80087a2:	f107 030d 	add.w	r3, r7, #13
 80087a6:	2201      	movs	r2, #1
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fd1e 	bl	800a1ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087b0:	e01d      	b.n	80087ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fca8 	bl	800a10a <USBD_CtlError>
            ret = USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	75fb      	strb	r3, [r7, #23]
          break;
 80087be:	e016      	b.n	80087ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d00f      	beq.n	80087ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fc9b 	bl	800a10a <USBD_CtlError>
            ret = USBD_FAIL;
 80087d4:	2303      	movs	r3, #3
 80087d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087d8:	e008      	b.n	80087ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 fc94 	bl	800a10a <USBD_CtlError>
          ret = USBD_FAIL;
 80087e2:	2303      	movs	r3, #3
 80087e4:	75fb      	strb	r3, [r7, #23]
          break;
 80087e6:	e002      	b.n	80087ee <USBD_CDC_Setup+0x19e>
          break;
 80087e8:	bf00      	nop
 80087ea:	e008      	b.n	80087fe <USBD_CDC_Setup+0x1ae>
          break;
 80087ec:	bf00      	nop
      }
      break;
 80087ee:	e006      	b.n	80087fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 fc89 	bl	800a10a <USBD_CtlError>
      ret = USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	75fb      	strb	r3, [r7, #23]
      break;
 80087fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800881a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	32b0      	adds	r2, #176	; 0xb0
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800882e:	2303      	movs	r3, #3
 8008830:	e065      	b.n	80088fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	32b0      	adds	r2, #176	; 0xb0
 800883c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008840:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	f003 020f 	and.w	r2, r3, #15
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	3318      	adds	r3, #24
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d02f      	beq.n	80088bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	f003 020f 	and.w	r2, r3, #15
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	3318      	adds	r3, #24
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	f003 010f 	and.w	r1, r3, #15
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	460b      	mov	r3, r1
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	440b      	add	r3, r1
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4403      	add	r3, r0
 8008884:	3348      	adds	r3, #72	; 0x48
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	fbb2 f1f3 	udiv	r1, r2, r3
 800888c:	fb01 f303 	mul.w	r3, r1, r3
 8008890:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008892:	2b00      	cmp	r3, #0
 8008894:	d112      	bne.n	80088bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	f003 020f 	and.w	r2, r3, #15
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	3318      	adds	r3, #24
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088ae:	78f9      	ldrb	r1, [r7, #3]
 80088b0:	2300      	movs	r3, #0
 80088b2:	2200      	movs	r2, #0
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f005 f8d8 	bl	800da6a <USBD_LL_Transmit>
 80088ba:	e01f      	b.n	80088fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	33b0      	adds	r3, #176	; 0xb0
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d010      	beq.n	80088fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	33b0      	adds	r3, #176	; 0xb0
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	32b0      	adds	r2, #176	; 0xb0
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	32b0      	adds	r2, #176	; 0xb0
 800892c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008934:	2303      	movs	r3, #3
 8008936:	e01a      	b.n	800896e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f005 f8d6 	bl	800daee <USBD_LL_GetRxDataSize>
 8008942:	4602      	mov	r2, r0
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	33b0      	adds	r3, #176	; 0xb0
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008968:	4611      	mov	r1, r2
 800896a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	32b0      	adds	r2, #176	; 0xb0
 8008988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008994:	2303      	movs	r3, #3
 8008996:	e025      	b.n	80089e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	33b0      	adds	r3, #176	; 0xb0
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01a      	beq.n	80089e2 <USBD_CDC_EP0_RxReady+0x6c>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089b2:	2bff      	cmp	r3, #255	; 0xff
 80089b4:	d015      	beq.n	80089e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	33b0      	adds	r3, #176	; 0xb0
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80089ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089d6:	b292      	uxth	r2, r2
 80089d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089f4:	2182      	movs	r1, #130	; 0x82
 80089f6:	4818      	ldr	r0, [pc, #96]	; (8008a58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089f8:	f000 fd4f 	bl	800949a <USBD_GetEpDesc>
 80089fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089fe:	2101      	movs	r1, #1
 8008a00:	4815      	ldr	r0, [pc, #84]	; (8008a58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a02:	f000 fd4a 	bl	800949a <USBD_GetEpDesc>
 8008a06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a08:	2181      	movs	r1, #129	; 0x81
 8008a0a:	4813      	ldr	r0, [pc, #76]	; (8008a58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008a0c:	f000 fd45 	bl	800949a <USBD_GetEpDesc>
 8008a10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a2c:	711a      	strb	r2, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d006      	beq.n	8008a46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a40:	711a      	strb	r2, [r3, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2243      	movs	r2, #67	; 0x43
 8008a4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	2000046c 	.word	0x2000046c

08008a5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a64:	2182      	movs	r1, #130	; 0x82
 8008a66:	4818      	ldr	r0, [pc, #96]	; (8008ac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a68:	f000 fd17 	bl	800949a <USBD_GetEpDesc>
 8008a6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a6e:	2101      	movs	r1, #1
 8008a70:	4815      	ldr	r0, [pc, #84]	; (8008ac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a72:	f000 fd12 	bl	800949a <USBD_GetEpDesc>
 8008a76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a78:	2181      	movs	r1, #129	; 0x81
 8008a7a:	4813      	ldr	r0, [pc, #76]	; (8008ac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a7c:	f000 fd0d 	bl	800949a <USBD_GetEpDesc>
 8008a80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2210      	movs	r2, #16
 8008a8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d006      	beq.n	8008aa2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2200      	movs	r2, #0
 8008a98:	711a      	strb	r2, [r3, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f042 0202 	orr.w	r2, r2, #2
 8008aa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d006      	beq.n	8008ab6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	711a      	strb	r2, [r3, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f042 0202 	orr.w	r2, r2, #2
 8008ab4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2243      	movs	r2, #67	; 0x43
 8008aba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000046c 	.word	0x2000046c

08008acc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ad4:	2182      	movs	r1, #130	; 0x82
 8008ad6:	4818      	ldr	r0, [pc, #96]	; (8008b38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ad8:	f000 fcdf 	bl	800949a <USBD_GetEpDesc>
 8008adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ade:	2101      	movs	r1, #1
 8008ae0:	4815      	ldr	r0, [pc, #84]	; (8008b38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ae2:	f000 fcda 	bl	800949a <USBD_GetEpDesc>
 8008ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ae8:	2181      	movs	r1, #129	; 0x81
 8008aea:	4813      	ldr	r0, [pc, #76]	; (8008b38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008aec:	f000 fcd5 	bl	800949a <USBD_GetEpDesc>
 8008af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2210      	movs	r2, #16
 8008afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b0c:	711a      	strb	r2, [r3, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d006      	beq.n	8008b26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b20:	711a      	strb	r2, [r3, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2243      	movs	r2, #67	; 0x43
 8008b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000046c 	.word	0x2000046c

08008b3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	220a      	movs	r2, #10
 8008b48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b4a:	4b03      	ldr	r3, [pc, #12]	; (8008b58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	20000428 	.word	0x20000428

08008b5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e009      	b.n	8008b84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	33b0      	adds	r3, #176	; 0xb0
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	32b0      	adds	r2, #176	; 0xb0
 8008ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008baa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e008      	b.n	8008bc8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	32b0      	adds	r2, #176	; 0xb0
 8008be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e004      	b.n	8008c02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	32b0      	adds	r2, #176	; 0xb0
 8008c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c26:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	32b0      	adds	r2, #176	; 0xb0
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e025      	b.n	8008c8e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d11f      	bne.n	8008c8c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <USBD_CDC_TransmitPacket+0x88>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	f003 020f 	and.w	r2, r3, #15
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4403      	add	r3, r0
 8008c6e:	3318      	adds	r3, #24
 8008c70:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008c72:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <USBD_CDC_TransmitPacket+0x88>)
 8008c74:	7819      	ldrb	r1, [r3, #0]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f004 fef1 	bl	800da6a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200004af 	.word	0x200004af

08008c9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	32b0      	adds	r2, #176	; 0xb0
 8008cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	32b0      	adds	r2, #176	; 0xb0
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e018      	b.n	8008cfc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7c1b      	ldrb	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10a      	bne.n	8008ce8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <USBD_CDC_ReceivePacket+0x68>)
 8008cd4:	7819      	ldrb	r1, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f004 fee3 	bl	800daac <USBD_LL_PrepareReceive>
 8008ce6:	e008      	b.n	8008cfa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <USBD_CDC_ReceivePacket+0x68>)
 8008cea:	7819      	ldrb	r1, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cf2:	2340      	movs	r3, #64	; 0x40
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f004 fed9 	bl	800daac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	200004b0 	.word	0x200004b0

08008d08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4613      	mov	r3, r2
 8008d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e01f      	b.n	8008d60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	79fa      	ldrb	r2, [r7, #7]
 8008d52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f004 fd53 	bl	800d800 <USBD_LL_Init>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e025      	b.n	8008dcc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	32ae      	adds	r2, #174	; 0xae
 8008d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00f      	beq.n	8008dbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	32ae      	adds	r2, #174	; 0xae
 8008da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	f107 020e 	add.w	r2, r7, #14
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
 8008db4:	4602      	mov	r2, r0
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f004 fd5b 	bl	800d898 <USBD_LL_Start>
 8008de2:	4603      	mov	r3, r0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008df4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	78fa      	ldrb	r2, [r7, #3]
 8008e26:	4611      	mov	r1, r2
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	4798      	blx	r3
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	4611      	mov	r1, r2
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008e60:	2303      	movs	r3, #3
 8008e62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f908 	bl	800a096 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008e94:	461a      	mov	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ea2:	f003 031f 	and.w	r3, r3, #31
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d01a      	beq.n	8008ee0 <USBD_LL_SetupStage+0x72>
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d822      	bhi.n	8008ef4 <USBD_LL_SetupStage+0x86>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <USBD_LL_SetupStage+0x4a>
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d00a      	beq.n	8008ecc <USBD_LL_SetupStage+0x5e>
 8008eb6:	e01d      	b.n	8008ef4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fb5f 	bl	8009584 <USBD_StdDevReq>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8008eca:	e020      	b.n	8008f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fbc7 	bl	8009668 <USBD_StdItfReq>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ede:	e016      	b.n	8008f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc29 	bl	8009740 <USBD_StdEPReq>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef2:	e00c      	b.n	8008f0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008efa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f004 fd28 	bl	800d958 <USBD_LL_StallEP>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f0c:	bf00      	nop
  }

  return ret;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	460b      	mov	r3, r1
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d16e      	bne.n	800900e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	f040 8098 	bne.w	8009074 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d913      	bls.n	8008f78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	1ad2      	subs	r2, r2, r3
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	4293      	cmp	r3, r2
 8008f68:	bf28      	it	cs
 8008f6a:	4613      	movcs	r3, r2
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f001 f984 	bl	800a27e <USBD_CtlContinueRx>
 8008f76:	e07d      	b.n	8009074 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d014      	beq.n	8008fb0 <USBD_LL_DataOutStage+0x98>
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d81d      	bhi.n	8008fc6 <USBD_LL_DataOutStage+0xae>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <USBD_LL_DataOutStage+0x7c>
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d003      	beq.n	8008f9a <USBD_LL_DataOutStage+0x82>
 8008f92:	e018      	b.n	8008fc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	75bb      	strb	r3, [r7, #22]
            break;
 8008f98:	e018      	b.n	8008fcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fa5e 	bl	8009466 <USBD_CoreFindIF>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75bb      	strb	r3, [r7, #22]
            break;
 8008fae:	e00d      	b.n	8008fcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	4619      	mov	r1, r3
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fa60 	bl	8009480 <USBD_CoreFindEP>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75bb      	strb	r3, [r7, #22]
            break;
 8008fc4:	e002      	b.n	8008fcc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75bb      	strb	r3, [r7, #22]
            break;
 8008fca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008fcc:	7dbb      	ldrb	r3, [r7, #22]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d119      	bne.n	8009006 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d113      	bne.n	8009006 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008fde:	7dba      	ldrb	r2, [r7, #22]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	32ae      	adds	r2, #174	; 0xae
 8008fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008fee:	7dba      	ldrb	r2, [r7, #22]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ff6:	7dba      	ldrb	r2, [r7, #22]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	32ae      	adds	r2, #174	; 0xae
 8008ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f001 f94a 	bl	800a2a0 <USBD_CtlSendStatus>
 800900c:	e032      	b.n	8009074 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800900e:	7afb      	ldrb	r3, [r7, #11]
 8009010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009014:	b2db      	uxtb	r3, r3
 8009016:	4619      	mov	r1, r3
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fa31 	bl	8009480 <USBD_CoreFindEP>
 800901e:	4603      	mov	r3, r0
 8009020:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009022:	7dbb      	ldrb	r3, [r7, #22]
 8009024:	2bff      	cmp	r3, #255	; 0xff
 8009026:	d025      	beq.n	8009074 <USBD_LL_DataOutStage+0x15c>
 8009028:	7dbb      	ldrb	r3, [r7, #22]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d122      	bne.n	8009074 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d117      	bne.n	800906a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800903a:	7dba      	ldrb	r2, [r7, #22]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	32ae      	adds	r2, #174	; 0xae
 8009040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00f      	beq.n	800906a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800904a:	7dba      	ldrb	r2, [r7, #22]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009052:	7dba      	ldrb	r2, [r7, #22]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	32ae      	adds	r2, #174	; 0xae
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	7afa      	ldrb	r2, [r7, #11]
 8009060:	4611      	mov	r1, r2
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	4798      	blx	r3
 8009066:	4603      	mov	r3, r0
 8009068:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	e000      	b.n	8009076 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b086      	sub	sp, #24
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	460b      	mov	r3, r1
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d16f      	bne.n	8009172 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3314      	adds	r3, #20
 8009096:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d15a      	bne.n	8009158 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d914      	bls.n	80090d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	1ad2      	subs	r2, r2, r3
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	461a      	mov	r2, r3
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f001 f8ac 	bl	800a222 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ca:	2300      	movs	r3, #0
 80090cc:	2200      	movs	r2, #0
 80090ce:	2100      	movs	r1, #0
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f004 fceb 	bl	800daac <USBD_LL_PrepareReceive>
 80090d6:	e03f      	b.n	8009158 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d11c      	bne.n	800911e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d316      	bcc.n	800911e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d20f      	bcs.n	800911e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090fe:	2200      	movs	r2, #0
 8009100:	2100      	movs	r1, #0
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f001 f88d 	bl	800a222 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009110:	2300      	movs	r3, #0
 8009112:	2200      	movs	r2, #0
 8009114:	2100      	movs	r1, #0
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f004 fcc8 	bl	800daac <USBD_LL_PrepareReceive>
 800911c:	e01c      	b.n	8009158 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b03      	cmp	r3, #3
 8009128:	d10f      	bne.n	800914a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800914a:	2180      	movs	r1, #128	; 0x80
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f004 fc03 	bl	800d958 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f001 f8b7 	bl	800a2c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d03a      	beq.n	80091d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff fe42 	bl	8008dec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009170:	e032      	b.n	80091d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009172:	7afb      	ldrb	r3, [r7, #11]
 8009174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009178:	b2db      	uxtb	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f97f 	bl	8009480 <USBD_CoreFindEP>
 8009182:	4603      	mov	r3, r0
 8009184:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	2bff      	cmp	r3, #255	; 0xff
 800918a:	d025      	beq.n	80091d8 <USBD_LL_DataInStage+0x15a>
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d122      	bne.n	80091d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b03      	cmp	r3, #3
 800919c:	d11c      	bne.n	80091d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800919e:	7dfa      	ldrb	r2, [r7, #23]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	32ae      	adds	r2, #174	; 0xae
 80091a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d014      	beq.n	80091d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80091ae:	7dfa      	ldrb	r2, [r7, #23]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80091b6:	7dfa      	ldrb	r2, [r7, #23]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	32ae      	adds	r2, #174	; 0xae
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	7afa      	ldrb	r2, [r7, #11]
 80091c4:	4611      	mov	r1, r2
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	4798      	blx	r3
 80091ca:	4603      	mov	r3, r0
 80091cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80091ce:	7dbb      	ldrb	r3, [r7, #22]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80091d4:	7dbb      	ldrb	r3, [r7, #22]
 80091d6:	e000      	b.n	80091da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d014      	beq.n	8009248 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00e      	beq.n	8009248 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6852      	ldr	r2, [r2, #4]
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	4611      	mov	r1, r2
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009244:	2303      	movs	r3, #3
 8009246:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009248:	2340      	movs	r3, #64	; 0x40
 800924a:	2200      	movs	r2, #0
 800924c:	2100      	movs	r1, #0
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f004 fb3d 	bl	800d8ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2240      	movs	r2, #64	; 0x40
 8009260:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009264:	2340      	movs	r3, #64	; 0x40
 8009266:	2200      	movs	r2, #0
 8009268:	2180      	movs	r1, #128	; 0x80
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f004 fb2f 	bl	800d8ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2240      	movs	r2, #64	; 0x40
 800927a:	621a      	str	r2, [r3, #32]

  return ret;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b083      	sub	sp, #12
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2204      	movs	r2, #4
 80092c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	d106      	bne.n	80092f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d110      	bne.n	8009338 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	32ae      	adds	r2, #174	; 0xae
 8009358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	e01c      	b.n	800939e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b03      	cmp	r3, #3
 800936e:	d115      	bne.n	800939c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	32ae      	adds	r2, #174	; 0xae
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	32ae      	adds	r2, #174	; 0xae
 800938e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	4611      	mov	r1, r2
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	32ae      	adds	r2, #174	; 0xae
 80093bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e01c      	b.n	8009402 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d115      	bne.n	8009400 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	32ae      	adds	r2, #174	; 0xae
 80093de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	32ae      	adds	r2, #174	; 0xae
 80093f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	4611      	mov	r1, r2
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00e      	beq.n	800945c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6852      	ldr	r2, [r2, #4]
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	4611      	mov	r1, r2
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	4798      	blx	r3
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009458:	2303      	movs	r3, #3
 800945a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009472:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800948c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800948e:	4618      	mov	r0, r3
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b086      	sub	sp, #24
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	885b      	ldrh	r3, [r3, #2]
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	429a      	cmp	r2, r3
 80094c0:	d920      	bls.n	8009504 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80094ca:	e013      	b.n	80094f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80094cc:	f107 030a 	add.w	r3, r7, #10
 80094d0:	4619      	mov	r1, r3
 80094d2:	6978      	ldr	r0, [r7, #20]
 80094d4:	f000 f81b 	bl	800950e <USBD_GetNextDesc>
 80094d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d108      	bne.n	80094f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	789b      	ldrb	r3, [r3, #2]
 80094ea:	78fa      	ldrb	r2, [r7, #3]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d008      	beq.n	8009502 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80094f0:	2300      	movs	r3, #0
 80094f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	885b      	ldrh	r3, [r3, #2]
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	897b      	ldrh	r3, [r7, #10]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d8e5      	bhi.n	80094cc <USBD_GetEpDesc+0x32>
 8009500:	e000      	b.n	8009504 <USBD_GetEpDesc+0x6a>
          break;
 8009502:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009504:	693b      	ldr	r3, [r7, #16]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	881a      	ldrh	r2, [r3, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	4413      	add	r3, r2
 8009528:	b29a      	uxth	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800953a:	68fb      	ldr	r3, [r7, #12]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	3301      	adds	r3, #1
 800955e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009566:	8a3b      	ldrh	r3, [r7, #16]
 8009568:	021b      	lsls	r3, r3, #8
 800956a:	b21a      	sxth	r2, r3
 800956c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009570:	4313      	orrs	r3, r2
 8009572:	b21b      	sxth	r3, r3
 8009574:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009576:	89fb      	ldrh	r3, [r7, #14]
}
 8009578:	4618      	mov	r0, r3
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d005      	beq.n	80095aa <USBD_StdDevReq+0x26>
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d857      	bhi.n	8009652 <USBD_StdDevReq+0xce>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00f      	beq.n	80095c6 <USBD_StdDevReq+0x42>
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d153      	bne.n	8009652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	32ae      	adds	r2, #174	; 0xae
 80095b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	4798      	blx	r3
 80095c0:	4603      	mov	r3, r0
 80095c2:	73fb      	strb	r3, [r7, #15]
      break;
 80095c4:	e04a      	b.n	800965c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	d83b      	bhi.n	8009646 <USBD_StdDevReq+0xc2>
 80095ce:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <USBD_StdDevReq+0x50>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	08009629 	.word	0x08009629
 80095d8:	0800963d 	.word	0x0800963d
 80095dc:	08009647 	.word	0x08009647
 80095e0:	08009633 	.word	0x08009633
 80095e4:	08009647 	.word	0x08009647
 80095e8:	08009607 	.word	0x08009607
 80095ec:	080095fd 	.word	0x080095fd
 80095f0:	08009647 	.word	0x08009647
 80095f4:	0800961f 	.word	0x0800961f
 80095f8:	08009611 	.word	0x08009611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa3c 	bl	8009a7c <USBD_GetDescriptor>
          break;
 8009604:	e024      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fba1 	bl	8009d50 <USBD_SetAddress>
          break;
 800960e:	e01f      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fbe0 	bl	8009dd8 <USBD_SetConfig>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]
          break;
 800961c:	e018      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fc83 	bl	8009f2c <USBD_GetConfig>
          break;
 8009626:	e013      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fcb4 	bl	8009f98 <USBD_GetStatus>
          break;
 8009630:	e00e      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fce3 	bl	800a000 <USBD_SetFeature>
          break;
 800963a:	e009      	b.n	8009650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fd07 	bl	800a052 <USBD_ClrFeature>
          break;
 8009644:	e004      	b.n	8009650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fd5e 	bl	800a10a <USBD_CtlError>
          break;
 800964e:	bf00      	nop
      }
      break;
 8009650:	e004      	b.n	800965c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fd58 	bl	800a10a <USBD_CtlError>
      break;
 800965a:	bf00      	nop
  }

  return ret;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop

08009668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800967e:	2b40      	cmp	r3, #64	; 0x40
 8009680:	d005      	beq.n	800968e <USBD_StdItfReq+0x26>
 8009682:	2b40      	cmp	r3, #64	; 0x40
 8009684:	d852      	bhi.n	800972c <USBD_StdItfReq+0xc4>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <USBD_StdItfReq+0x26>
 800968a:	2b20      	cmp	r3, #32
 800968c:	d14e      	bne.n	800972c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009694:	b2db      	uxtb	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	2b02      	cmp	r3, #2
 800969a:	d840      	bhi.n	800971e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	889b      	ldrh	r3, [r3, #4]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d836      	bhi.n	8009714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	889b      	ldrh	r3, [r3, #4]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff fed9 	bl	8009466 <USBD_CoreFindIF>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2bff      	cmp	r3, #255	; 0xff
 80096bc:	d01d      	beq.n	80096fa <USBD_StdItfReq+0x92>
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d11a      	bne.n	80096fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80096c4:	7bba      	ldrb	r2, [r7, #14]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	32ae      	adds	r2, #174	; 0xae
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00f      	beq.n	80096f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80096d4:	7bba      	ldrb	r2, [r7, #14]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096dc:	7bba      	ldrb	r2, [r7, #14]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	32ae      	adds	r2, #174	; 0xae
 80096e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80096f2:	e004      	b.n	80096fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80096f8:	e001      	b.n	80096fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80096fa:	2303      	movs	r3, #3
 80096fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	88db      	ldrh	r3, [r3, #6]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d110      	bne.n	8009728 <USBD_StdItfReq+0xc0>
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10d      	bne.n	8009728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fdc7 	bl	800a2a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009712:	e009      	b.n	8009728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fcf7 	bl	800a10a <USBD_CtlError>
          break;
 800971c:	e004      	b.n	8009728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fcf2 	bl	800a10a <USBD_CtlError>
          break;
 8009726:	e000      	b.n	800972a <USBD_StdItfReq+0xc2>
          break;
 8009728:	bf00      	nop
      }
      break;
 800972a:	e004      	b.n	8009736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fceb 	bl	800a10a <USBD_CtlError>
      break;
 8009734:	bf00      	nop
  }

  return ret;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	889b      	ldrh	r3, [r3, #4]
 8009752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800975c:	2b40      	cmp	r3, #64	; 0x40
 800975e:	d007      	beq.n	8009770 <USBD_StdEPReq+0x30>
 8009760:	2b40      	cmp	r3, #64	; 0x40
 8009762:	f200 817f 	bhi.w	8009a64 <USBD_StdEPReq+0x324>
 8009766:	2b00      	cmp	r3, #0
 8009768:	d02a      	beq.n	80097c0 <USBD_StdEPReq+0x80>
 800976a:	2b20      	cmp	r3, #32
 800976c:	f040 817a 	bne.w	8009a64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff fe83 	bl	8009480 <USBD_CoreFindEP>
 800977a:	4603      	mov	r3, r0
 800977c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800977e:	7b7b      	ldrb	r3, [r7, #13]
 8009780:	2bff      	cmp	r3, #255	; 0xff
 8009782:	f000 8174 	beq.w	8009a6e <USBD_StdEPReq+0x32e>
 8009786:	7b7b      	ldrb	r3, [r7, #13]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f040 8170 	bne.w	8009a6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800978e:	7b7a      	ldrb	r2, [r7, #13]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009796:	7b7a      	ldrb	r2, [r7, #13]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	32ae      	adds	r2, #174	; 0xae
 800979c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8163 	beq.w	8009a6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80097a8:	7b7a      	ldrb	r2, [r7, #13]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	32ae      	adds	r2, #174	; 0xae
 80097ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097be:	e156      	b.n	8009a6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	785b      	ldrb	r3, [r3, #1]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d008      	beq.n	80097da <USBD_StdEPReq+0x9a>
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	f300 8145 	bgt.w	8009a58 <USBD_StdEPReq+0x318>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 809b 	beq.w	800990a <USBD_StdEPReq+0x1ca>
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d03c      	beq.n	8009852 <USBD_StdEPReq+0x112>
 80097d8:	e13e      	b.n	8009a58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <USBD_StdEPReq+0xac>
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d016      	beq.n	8009818 <USBD_StdEPReq+0xd8>
 80097ea:	e02c      	b.n	8009846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_StdEPReq+0xce>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d00a      	beq.n	800980e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f004 f8ab 	bl	800d958 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f004 f8a7 	bl	800d958 <USBD_LL_StallEP>
 800980a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800980c:	e020      	b.n	8009850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fc7a 	bl	800a10a <USBD_CtlError>
              break;
 8009816:	e01b      	b.n	8009850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	885b      	ldrh	r3, [r3, #2]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10e      	bne.n	800983e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <USBD_StdEPReq+0xfe>
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b80      	cmp	r3, #128	; 0x80
 800982a:	d008      	beq.n	800983e <USBD_StdEPReq+0xfe>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	88db      	ldrh	r3, [r3, #6]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f004 f88d 	bl	800d958 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fd2e 	bl	800a2a0 <USBD_CtlSendStatus>

              break;
 8009844:	e004      	b.n	8009850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fc5e 	bl	800a10a <USBD_CtlError>
              break;
 800984e:	bf00      	nop
          }
          break;
 8009850:	e107      	b.n	8009a62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b02      	cmp	r3, #2
 800985c:	d002      	beq.n	8009864 <USBD_StdEPReq+0x124>
 800985e:	2b03      	cmp	r3, #3
 8009860:	d016      	beq.n	8009890 <USBD_StdEPReq+0x150>
 8009862:	e04b      	b.n	80098fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00d      	beq.n	8009886 <USBD_StdEPReq+0x146>
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	2b80      	cmp	r3, #128	; 0x80
 800986e:	d00a      	beq.n	8009886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f004 f86f 	bl	800d958 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800987a:	2180      	movs	r1, #128	; 0x80
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f004 f86b 	bl	800d958 <USBD_LL_StallEP>
 8009882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009884:	e040      	b.n	8009908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc3e 	bl	800a10a <USBD_CtlError>
              break;
 800988e:	e03b      	b.n	8009908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	885b      	ldrh	r3, [r3, #2]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d136      	bne.n	8009906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f004 f875 	bl	800d996 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fcf7 	bl	800a2a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fde2 	bl	8009480 <USBD_CoreFindEP>
 80098bc:	4603      	mov	r3, r0
 80098be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098c0:	7b7b      	ldrb	r3, [r7, #13]
 80098c2:	2bff      	cmp	r3, #255	; 0xff
 80098c4:	d01f      	beq.n	8009906 <USBD_StdEPReq+0x1c6>
 80098c6:	7b7b      	ldrb	r3, [r7, #13]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11c      	bne.n	8009906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80098cc:	7b7a      	ldrb	r2, [r7, #13]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80098d4:	7b7a      	ldrb	r2, [r7, #13]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	32ae      	adds	r2, #174	; 0xae
 80098da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d010      	beq.n	8009906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80098e4:	7b7a      	ldrb	r2, [r7, #13]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	32ae      	adds	r2, #174	; 0xae
 80098ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
 80098f6:	4603      	mov	r3, r0
 80098f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80098fa:	e004      	b.n	8009906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fc03 	bl	800a10a <USBD_CtlError>
              break;
 8009904:	e000      	b.n	8009908 <USBD_StdEPReq+0x1c8>
              break;
 8009906:	bf00      	nop
          }
          break;
 8009908:	e0ab      	b.n	8009a62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b02      	cmp	r3, #2
 8009914:	d002      	beq.n	800991c <USBD_StdEPReq+0x1dc>
 8009916:	2b03      	cmp	r3, #3
 8009918:	d032      	beq.n	8009980 <USBD_StdEPReq+0x240>
 800991a:	e097      	b.n	8009a4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d007      	beq.n	8009932 <USBD_StdEPReq+0x1f2>
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b80      	cmp	r3, #128	; 0x80
 8009926:	d004      	beq.n	8009932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fbed 	bl	800a10a <USBD_CtlError>
                break;
 8009930:	e091      	b.n	8009a56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	da0b      	bge.n	8009952 <USBD_StdEPReq+0x212>
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	3310      	adds	r3, #16
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	3304      	adds	r3, #4
 8009950:	e00b      	b.n	800996a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	3304      	adds	r3, #4
 800996a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2200      	movs	r2, #0
 8009970:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2202      	movs	r2, #2
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fc37 	bl	800a1ec <USBD_CtlSendData>
              break;
 800997e:	e06a      	b.n	8009a56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009984:	2b00      	cmp	r3, #0
 8009986:	da11      	bge.n	80099ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	f003 020f 	and.w	r2, r3, #15
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	3324      	adds	r3, #36	; 0x24
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d117      	bne.n	80099d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fbb0 	bl	800a10a <USBD_CtlError>
                  break;
 80099aa:	e054      	b.n	8009a56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	f003 020f 	and.w	r2, r3, #15
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	440b      	add	r3, r1
 80099be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d104      	bne.n	80099d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fb9d 	bl	800a10a <USBD_CtlError>
                  break;
 80099d0:	e041      	b.n	8009a56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	da0b      	bge.n	80099f2 <USBD_StdEPReq+0x2b2>
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	3310      	adds	r3, #16
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	4413      	add	r3, r2
 80099ee:	3304      	adds	r3, #4
 80099f0:	e00b      	b.n	8009a0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4413      	add	r3, r2
 8009a08:	3304      	adds	r3, #4
 8009a0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <USBD_StdEPReq+0x2d8>
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d103      	bne.n	8009a20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	e00e      	b.n	8009a3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f003 ffd5 	bl	800d9d4 <USBD_LL_IsStallEP>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2201      	movs	r2, #1
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	e002      	b.n	8009a3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2202      	movs	r2, #2
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fbd1 	bl	800a1ec <USBD_CtlSendData>
              break;
 8009a4a:	e004      	b.n	8009a56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fb5b 	bl	800a10a <USBD_CtlError>
              break;
 8009a54:	bf00      	nop
          }
          break;
 8009a56:	e004      	b.n	8009a62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fb55 	bl	800a10a <USBD_CtlError>
          break;
 8009a60:	bf00      	nop
      }
      break;
 8009a62:	e005      	b.n	8009a70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fb4f 	bl	800a10a <USBD_CtlError>
      break;
 8009a6c:	e000      	b.n	8009a70 <USBD_StdEPReq+0x330>
      break;
 8009a6e:	bf00      	nop
  }

  return ret;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	885b      	ldrh	r3, [r3, #2]
 8009a96:	0a1b      	lsrs	r3, r3, #8
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	2b06      	cmp	r3, #6
 8009a9e:	f200 8128 	bhi.w	8009cf2 <USBD_GetDescriptor+0x276>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <USBD_GetDescriptor+0x2c>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009ac5 	.word	0x08009ac5
 8009aac:	08009add 	.word	0x08009add
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009cf3 	.word	0x08009cf3
 8009ab8:	08009cf3 	.word	0x08009cf3
 8009abc:	08009c93 	.word	0x08009c93
 8009ac0:	08009cbf 	.word	0x08009cbf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	60f8      	str	r0, [r7, #12]
      break;
 8009ada:	e112      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7c1b      	ldrb	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10d      	bne.n	8009b00 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aec:	f107 0208 	add.w	r2, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	2202      	movs	r2, #2
 8009afc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009afe:	e100      	b.n	8009d02 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	f107 0208 	add.w	r2, r7, #8
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	4798      	blx	r3
 8009b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	2202      	movs	r2, #2
 8009b18:	701a      	strb	r2, [r3, #0]
      break;
 8009b1a:	e0f2      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	885b      	ldrh	r3, [r3, #2]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b05      	cmp	r3, #5
 8009b24:	f200 80ac 	bhi.w	8009c80 <USBD_GetDescriptor+0x204>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <USBD_GetDescriptor+0xb4>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b7d 	.word	0x08009b7d
 8009b38:	08009bb1 	.word	0x08009bb1
 8009b3c:	08009be5 	.word	0x08009be5
 8009b40:	08009c19 	.word	0x08009c19
 8009b44:	08009c4d 	.word	0x08009c4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	7c12      	ldrb	r2, [r2, #16]
 8009b60:	f107 0108 	add.w	r1, r7, #8
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
 8009b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b6a:	e091      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 facb 	bl	800a10a <USBD_CtlError>
            err++;
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	3301      	adds	r3, #1
 8009b78:	72fb      	strb	r3, [r7, #11]
          break;
 8009b7a:	e089      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	7c12      	ldrb	r2, [r2, #16]
 8009b94:	f107 0108 	add.w	r1, r7, #8
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4798      	blx	r3
 8009b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b9e:	e077      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fab1 	bl	800a10a <USBD_CtlError>
            err++;
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	3301      	adds	r3, #1
 8009bac:	72fb      	strb	r3, [r7, #11]
          break;
 8009bae:	e06f      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7c12      	ldrb	r2, [r2, #16]
 8009bc8:	f107 0108 	add.w	r1, r7, #8
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd2:	e05d      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa97 	bl	800a10a <USBD_CtlError>
            err++;
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	3301      	adds	r3, #1
 8009be0:	72fb      	strb	r3, [r7, #11]
          break;
 8009be2:	e055      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7c12      	ldrb	r2, [r2, #16]
 8009bfc:	f107 0108 	add.w	r1, r7, #8
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c06:	e043      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa7d 	bl	800a10a <USBD_CtlError>
            err++;
 8009c10:	7afb      	ldrb	r3, [r7, #11]
 8009c12:	3301      	adds	r3, #1
 8009c14:	72fb      	strb	r3, [r7, #11]
          break;
 8009c16:	e03b      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00b      	beq.n	8009c3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	7c12      	ldrb	r2, [r2, #16]
 8009c30:	f107 0108 	add.w	r1, r7, #8
 8009c34:	4610      	mov	r0, r2
 8009c36:	4798      	blx	r3
 8009c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3a:	e029      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa63 	bl	800a10a <USBD_CtlError>
            err++;
 8009c44:	7afb      	ldrb	r3, [r7, #11]
 8009c46:	3301      	adds	r3, #1
 8009c48:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4a:	e021      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00b      	beq.n	8009c70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	7c12      	ldrb	r2, [r2, #16]
 8009c64:	f107 0108 	add.w	r1, r7, #8
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4798      	blx	r3
 8009c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c6e:	e00f      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa49 	bl	800a10a <USBD_CtlError>
            err++;
 8009c78:	7afb      	ldrb	r3, [r7, #11]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c7e:	e007      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa41 	bl	800a10a <USBD_CtlError>
          err++;
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c8e:	bf00      	nop
      }
      break;
 8009c90:	e037      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	7c1b      	ldrb	r3, [r3, #16]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca2:	f107 0208 	add.w	r2, r7, #8
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4798      	blx	r3
 8009caa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cac:	e029      	b.n	8009d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fa2a 	bl	800a10a <USBD_CtlError>
        err++;
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	72fb      	strb	r3, [r7, #11]
      break;
 8009cbc:	e021      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7c1b      	ldrb	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10d      	bne.n	8009ce2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cce:	f107 0208 	add.w	r2, r7, #8
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4798      	blx	r3
 8009cd6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	2207      	movs	r2, #7
 8009cde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ce0:	e00f      	b.n	8009d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fa10 	bl	800a10a <USBD_CtlError>
        err++;
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	3301      	adds	r3, #1
 8009cee:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf0:	e007      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fa08 	bl	800a10a <USBD_CtlError>
      err++;
 8009cfa:	7afb      	ldrb	r3, [r7, #11]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009d00:	bf00      	nop
  }

  if (err != 0U)
 8009d02:	7afb      	ldrb	r3, [r7, #11]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11e      	bne.n	8009d46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	88db      	ldrh	r3, [r3, #6]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d016      	beq.n	8009d3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009d10:	893b      	ldrh	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00e      	beq.n	8009d34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	88da      	ldrh	r2, [r3, #6]
 8009d1a:	893b      	ldrh	r3, [r7, #8]
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	bf28      	it	cs
 8009d20:	4613      	movcs	r3, r2
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d26:	893b      	ldrh	r3, [r7, #8]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68f9      	ldr	r1, [r7, #12]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fa5d 	bl	800a1ec <USBD_CtlSendData>
 8009d32:	e009      	b.n	8009d48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f9e7 	bl	800a10a <USBD_CtlError>
 8009d3c:	e004      	b.n	8009d48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 faae 	bl	800a2a0 <USBD_CtlSendStatus>
 8009d44:	e000      	b.n	8009d48 <USBD_GetDescriptor+0x2cc>
    return;
 8009d46:	bf00      	nop
  }
}
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop

08009d50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	889b      	ldrh	r3, [r3, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d131      	bne.n	8009dc6 <USBD_SetAddress+0x76>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	88db      	ldrh	r3, [r3, #6]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d12d      	bne.n	8009dc6 <USBD_SetAddress+0x76>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	885b      	ldrh	r3, [r3, #2]
 8009d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8009d70:	d829      	bhi.n	8009dc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	885b      	ldrh	r3, [r3, #2]
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d104      	bne.n	8009d94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f9bc 	bl	800a10a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d92:	e01d      	b.n	8009dd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	7bfa      	ldrb	r2, [r7, #15]
 8009d98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f003 fe43 	bl	800da2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fa7a 	bl	800a2a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d004      	beq.n	8009dbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2202      	movs	r2, #2
 8009db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dba:	e009      	b.n	8009dd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc4:	e004      	b.n	8009dd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f99e 	bl	800a10a <USBD_CtlError>
  }
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	885b      	ldrh	r3, [r3, #2]
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	4b4e      	ldr	r3, [pc, #312]	; (8009f28 <USBD_SetConfig+0x150>)
 8009dee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009df0:	4b4d      	ldr	r3, [pc, #308]	; (8009f28 <USBD_SetConfig+0x150>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d905      	bls.n	8009e04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f985 	bl	800a10a <USBD_CtlError>
    return USBD_FAIL;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e08c      	b.n	8009f1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d002      	beq.n	8009e16 <USBD_SetConfig+0x3e>
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d029      	beq.n	8009e68 <USBD_SetConfig+0x90>
 8009e14:	e075      	b.n	8009f02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e16:	4b44      	ldr	r3, [pc, #272]	; (8009f28 <USBD_SetConfig+0x150>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d020      	beq.n	8009e60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009e1e:	4b42      	ldr	r3, [pc, #264]	; (8009f28 <USBD_SetConfig+0x150>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e28:	4b3f      	ldr	r3, [pc, #252]	; (8009f28 <USBD_SetConfig+0x150>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fe ffe7 	bl	8008e02 <USBD_SetClassConfig>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d008      	beq.n	8009e50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f962 	bl	800a10a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e4e:	e065      	b.n	8009f1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fa25 	bl	800a2a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2203      	movs	r2, #3
 8009e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e5e:	e05d      	b.n	8009f1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fa1d 	bl	800a2a0 <USBD_CtlSendStatus>
      break;
 8009e66:	e059      	b.n	8009f1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e68:	4b2f      	ldr	r3, [pc, #188]	; (8009f28 <USBD_SetConfig+0x150>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d112      	bne.n	8009e96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e78:	4b2b      	ldr	r3, [pc, #172]	; (8009f28 <USBD_SetConfig+0x150>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <USBD_SetConfig+0x150>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7fe ffd6 	bl	8008e3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa06 	bl	800a2a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e94:	e042      	b.n	8009f1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e96:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <USBD_SetConfig+0x150>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d02a      	beq.n	8009efa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7fe ffc4 	bl	8008e3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009eb2:	4b1d      	ldr	r3, [pc, #116]	; (8009f28 <USBD_SetConfig+0x150>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ebc:	4b1a      	ldr	r3, [pc, #104]	; (8009f28 <USBD_SetConfig+0x150>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7fe ff9d 	bl	8008e02 <USBD_SetClassConfig>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00f      	beq.n	8009ef2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f918 	bl	800a10a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe ffa9 	bl	8008e3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ef0:	e014      	b.n	8009f1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f9d4 	bl	800a2a0 <USBD_CtlSendStatus>
      break;
 8009ef8:	e010      	b.n	8009f1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f9d0 	bl	800a2a0 <USBD_CtlSendStatus>
      break;
 8009f00:	e00c      	b.n	8009f1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f900 	bl	800a10a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f0a:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <USBD_SetConfig+0x150>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7fe ff92 	bl	8008e3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1a:	bf00      	nop
  }

  return ret;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	2000079c 	.word	0x2000079c

08009f2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	88db      	ldrh	r3, [r3, #6]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d004      	beq.n	8009f48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f8e2 	bl	800a10a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f46:	e023      	b.n	8009f90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	dc02      	bgt.n	8009f5a <USBD_GetConfig+0x2e>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dc03      	bgt.n	8009f60 <USBD_GetConfig+0x34>
 8009f58:	e015      	b.n	8009f86 <USBD_GetConfig+0x5a>
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d00b      	beq.n	8009f76 <USBD_GetConfig+0x4a>
 8009f5e:	e012      	b.n	8009f86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3308      	adds	r3, #8
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f93c 	bl	800a1ec <USBD_CtlSendData>
        break;
 8009f74:	e00c      	b.n	8009f90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f934 	bl	800a1ec <USBD_CtlSendData>
        break;
 8009f84:	e004      	b.n	8009f90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f8be 	bl	800a10a <USBD_CtlError>
        break;
 8009f8e:	bf00      	nop
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	3b01      	subs	r3, #1
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d81e      	bhi.n	8009fee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	88db      	ldrh	r3, [r3, #6]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d004      	beq.n	8009fc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f8a5 	bl	800a10a <USBD_CtlError>
        break;
 8009fc0:	e01a      	b.n	8009ff8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f043 0202 	orr.w	r2, r3, #2
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	330c      	adds	r3, #12
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f900 	bl	800a1ec <USBD_CtlSendData>
      break;
 8009fec:	e004      	b.n	8009ff8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f88a 	bl	800a10a <USBD_CtlError>
      break;
 8009ff6:	bf00      	nop
  }
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	885b      	ldrh	r3, [r3, #2]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d107      	bne.n	800a022 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f940 	bl	800a2a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a020:	e013      	b.n	800a04a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	2b02      	cmp	r3, #2
 800a028:	d10b      	bne.n	800a042 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	889b      	ldrh	r3, [r3, #4]
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	b29b      	uxth	r3, r3
 800a032:	b2da      	uxtb	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f930 	bl	800a2a0 <USBD_CtlSendStatus>
}
 800a040:	e003      	b.n	800a04a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f860 	bl	800a10a <USBD_CtlError>
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b082      	sub	sp, #8
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a062:	b2db      	uxtb	r3, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	2b02      	cmp	r3, #2
 800a068:	d80b      	bhi.n	800a082 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	885b      	ldrh	r3, [r3, #2]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d10c      	bne.n	800a08c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f910 	bl	800a2a0 <USBD_CtlSendStatus>
      }
      break;
 800a080:	e004      	b.n	800a08c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f840 	bl	800a10a <USBD_CtlError>
      break;
 800a08a:	e000      	b.n	800a08e <USBD_ClrFeature+0x3c>
      break;
 800a08c:	bf00      	nop
  }
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7ff fa41 	bl	8009548 <SWAPBYTE>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff fa34 	bl	8009548 <SWAPBYTE>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff fa27 	bl	8009548 <SWAPBYTE>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	80da      	strh	r2, [r3, #6]
}
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a114:	2180      	movs	r1, #128	; 0x80
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f003 fc1e 	bl	800d958 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a11c:	2100      	movs	r1, #0
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f003 fc1a 	bl	800d958 <USBD_LL_StallEP>
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d036      	beq.n	800a1b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a146:	6938      	ldr	r0, [r7, #16]
 800a148:	f000 f836 	bl	800a1b8 <USBD_GetLen>
 800a14c:	4603      	mov	r3, r0
 800a14e:	3301      	adds	r3, #1
 800a150:	b29b      	uxth	r3, r3
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	b29a      	uxth	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	4413      	add	r3, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	7812      	ldrb	r2, [r2, #0]
 800a164:	701a      	strb	r2, [r3, #0]
  idx++;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	3301      	adds	r3, #1
 800a16a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	4413      	add	r3, r2
 800a172:	2203      	movs	r2, #3
 800a174:	701a      	strb	r2, [r3, #0]
  idx++;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	3301      	adds	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a17c:	e013      	b.n	800a1a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	4413      	add	r3, r2
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	7812      	ldrb	r2, [r2, #0]
 800a188:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	3301      	adds	r3, #1
 800a18e:	613b      	str	r3, [r7, #16]
    idx++;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	3301      	adds	r3, #1
 800a194:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a196:	7dfb      	ldrb	r3, [r7, #23]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	4413      	add	r3, r2
 800a19c:	2200      	movs	r2, #0
 800a19e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e7      	bne.n	800a17e <USBD_GetString+0x52>
 800a1ae:	e000      	b.n	800a1b2 <USBD_GetString+0x86>
    return;
 800a1b0:	bf00      	nop
  }
}
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1c8:	e005      	b.n	800a1d6 <USBD_GetLen+0x1e>
  {
    len++;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1f5      	bne.n	800a1ca <USBD_GetLen+0x12>
  }

  return len;
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	2100      	movs	r1, #0
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f003 fc29 	bl	800da6a <USBD_LL_Transmit>

  return USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	2100      	movs	r1, #0
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f003 fc18 	bl	800da6a <USBD_LL_Transmit>

  return USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2203      	movs	r2, #3
 800a254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	2100      	movs	r1, #0
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f003 fc1c 	bl	800daac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	60b9      	str	r1, [r7, #8]
 800a288:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	2100      	movs	r1, #0
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f003 fc0b 	bl	800daac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2204      	movs	r2, #4
 800a2ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f003 fbd7 	bl	800da6a <USBD_LL_Transmit>

  return USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2205      	movs	r2, #5
 800a2d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2100      	movs	r1, #0
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f003 fbe5 	bl	800daac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <__NVIC_SetPriority>:
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	db0a      	blt.n	800a316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	b2da      	uxtb	r2, r3
 800a304:	490c      	ldr	r1, [pc, #48]	; (800a338 <__NVIC_SetPriority+0x4c>)
 800a306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a30a:	0112      	lsls	r2, r2, #4
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	440b      	add	r3, r1
 800a310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a314:	e00a      	b.n	800a32c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	4908      	ldr	r1, [pc, #32]	; (800a33c <__NVIC_SetPriority+0x50>)
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	3b04      	subs	r3, #4
 800a324:	0112      	lsls	r2, r2, #4
 800a326:	b2d2      	uxtb	r2, r2
 800a328:	440b      	add	r3, r1
 800a32a:	761a      	strb	r2, [r3, #24]
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	e000e100 	.word	0xe000e100
 800a33c:	e000ed00 	.word	0xe000ed00

0800a340 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a344:	4b05      	ldr	r3, [pc, #20]	; (800a35c <SysTick_Handler+0x1c>)
 800a346:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a348:	f001 feb2 	bl	800c0b0 <xTaskGetSchedulerState>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d001      	beq.n	800a356 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a352:	f002 fc99 	bl	800cc88 <xPortSysTickHandler>
  }
}
 800a356:	bf00      	nop
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	e000e010 	.word	0xe000e010

0800a360 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a364:	2100      	movs	r1, #0
 800a366:	f06f 0004 	mvn.w	r0, #4
 800a36a:	f7ff ffbf 	bl	800a2ec <__NVIC_SetPriority>
#endif
}
 800a36e:	bf00      	nop
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a37a:	f3ef 8305 	mrs	r3, IPSR
 800a37e:	603b      	str	r3, [r7, #0]
  return(result);
 800a380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a386:	f06f 0305 	mvn.w	r3, #5
 800a38a:	607b      	str	r3, [r7, #4]
 800a38c:	e00c      	b.n	800a3a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a38e:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <osKernelInitialize+0x44>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d105      	bne.n	800a3a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a396:	4b08      	ldr	r3, [pc, #32]	; (800a3b8 <osKernelInitialize+0x44>)
 800a398:	2201      	movs	r2, #1
 800a39a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	607b      	str	r3, [r7, #4]
 800a3a0:	e002      	b.n	800a3a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3a8:	687b      	ldr	r3, [r7, #4]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	200007a0 	.word	0x200007a0

0800a3bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c2:	f3ef 8305 	mrs	r3, IPSR
 800a3c6:	603b      	str	r3, [r7, #0]
  return(result);
 800a3c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a3ce:	f06f 0305 	mvn.w	r3, #5
 800a3d2:	607b      	str	r3, [r7, #4]
 800a3d4:	e010      	b.n	800a3f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <osKernelStart+0x48>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d109      	bne.n	800a3f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3de:	f7ff ffbf 	bl	800a360 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3e2:	4b08      	ldr	r3, [pc, #32]	; (800a404 <osKernelStart+0x48>)
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3e8:	f001 fa1a 	bl	800b820 <vTaskStartScheduler>
      stat = osOK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	607b      	str	r3, [r7, #4]
 800a3f0:	e002      	b.n	800a3f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3f8:	687b      	ldr	r3, [r7, #4]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	200007a0 	.word	0x200007a0

0800a408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08e      	sub	sp, #56	; 0x38
 800a40c:	af04      	add	r7, sp, #16
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a418:	f3ef 8305 	mrs	r3, IPSR
 800a41c:	617b      	str	r3, [r7, #20]
  return(result);
 800a41e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a420:	2b00      	cmp	r3, #0
 800a422:	d17f      	bne.n	800a524 <osThreadNew+0x11c>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d07c      	beq.n	800a524 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a42a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a42e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a430:	2318      	movs	r3, #24
 800a432:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a434:	2300      	movs	r3, #0
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a438:	f04f 33ff 	mov.w	r3, #4294967295
 800a43c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d045      	beq.n	800a4d0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <osThreadNew+0x4a>
        name = attr->name;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d008      	beq.n	800a478 <osThreadNew+0x70>
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	2b38      	cmp	r3, #56	; 0x38
 800a46a:	d805      	bhi.n	800a478 <osThreadNew+0x70>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <osThreadNew+0x74>
        return (NULL);
 800a478:	2300      	movs	r3, #0
 800a47a:	e054      	b.n	800a526 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	089b      	lsrs	r3, r3, #2
 800a48a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00e      	beq.n	800a4b2 <osThreadNew+0xaa>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	2b6b      	cmp	r3, #107	; 0x6b
 800a49a:	d90a      	bls.n	800a4b2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d006      	beq.n	800a4b2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <osThreadNew+0xaa>
        mem = 1;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	e010      	b.n	800a4d4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10c      	bne.n	800a4d4 <osThreadNew+0xcc>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d108      	bne.n	800a4d4 <osThreadNew+0xcc>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d104      	bne.n	800a4d4 <osThreadNew+0xcc>
          mem = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	61bb      	str	r3, [r7, #24]
 800a4ce:	e001      	b.n	800a4d4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d110      	bne.n	800a4fc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4e2:	9202      	str	r2, [sp, #8]
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	6a3a      	ldr	r2, [r7, #32]
 800a4ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 feb9 	bl	800b268 <xTaskCreateStatic>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	613b      	str	r3, [r7, #16]
 800a4fa:	e013      	b.n	800a524 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d110      	bne.n	800a524 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	b29a      	uxth	r2, r3
 800a506:	f107 0310 	add.w	r3, r7, #16
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 ff04 	bl	800b322 <xTaskCreate>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d001      	beq.n	800a524 <osThreadNew+0x11c>
            hTask = NULL;
 800a520:	2300      	movs	r3, #0
 800a522:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a524:	693b      	ldr	r3, [r7, #16]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3728      	adds	r7, #40	; 0x28
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a536:	f3ef 8305 	mrs	r3, IPSR
 800a53a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a53c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <osDelay+0x1c>
    stat = osErrorISR;
 800a542:	f06f 0305 	mvn.w	r3, #5
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e007      	b.n	800a55a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <osDelay+0x2c>
      vTaskDelay(ticks);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f829 	bl	800b5ac <vTaskDelay>
    }
  }

  return (stat);
 800a55a:	68fb      	ldr	r3, [r7, #12]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a564:	b580      	push	{r7, lr}
 800a566:	b08a      	sub	sp, #40	; 0x28
 800a568:	af02      	add	r7, sp, #8
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a574:	f3ef 8305 	mrs	r3, IPSR
 800a578:	613b      	str	r3, [r7, #16]
  return(result);
 800a57a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d15f      	bne.n	800a640 <osMessageQueueNew+0xdc>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d05c      	beq.n	800a640 <osMessageQueueNew+0xdc>
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d059      	beq.n	800a640 <osMessageQueueNew+0xdc>
    mem = -1;
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d029      	beq.n	800a5ec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d012      	beq.n	800a5c6 <osMessageQueueNew+0x62>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	2b4f      	cmp	r3, #79	; 0x4f
 800a5a6:	d90e      	bls.n	800a5c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	695a      	ldr	r2, [r3, #20]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	fb01 f303 	mul.w	r3, r1, r3
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d302      	bcc.n	800a5c6 <osMessageQueueNew+0x62>
        mem = 1;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	61bb      	str	r3, [r7, #24]
 800a5c4:	e014      	b.n	800a5f0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d110      	bne.n	800a5f0 <osMessageQueueNew+0x8c>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10c      	bne.n	800a5f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d108      	bne.n	800a5f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d104      	bne.n	800a5f0 <osMessageQueueNew+0x8c>
          mem = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61bb      	str	r3, [r7, #24]
 800a5ea:	e001      	b.n	800a5f0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d10b      	bne.n	800a60e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	691a      	ldr	r2, [r3, #16]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2100      	movs	r1, #0
 800a600:	9100      	str	r1, [sp, #0]
 800a602:	68b9      	ldr	r1, [r7, #8]
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f971 	bl	800a8ec <xQueueGenericCreateStatic>
 800a60a:	61f8      	str	r0, [r7, #28]
 800a60c:	e008      	b.n	800a620 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d105      	bne.n	800a620 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a614:	2200      	movs	r2, #0
 800a616:	68b9      	ldr	r1, [r7, #8]
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 f9df 	bl	800a9dc <xQueueGenericCreate>
 800a61e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00c      	beq.n	800a640 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	e001      	b.n	800a638 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a638:	6979      	ldr	r1, [r7, #20]
 800a63a:	69f8      	ldr	r0, [r7, #28]
 800a63c:	f000 fdb6 	bl	800b1ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a640:	69fb      	ldr	r3, [r7, #28]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4a07      	ldr	r2, [pc, #28]	; (800a678 <vApplicationGetIdleTaskMemory+0x2c>)
 800a65c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	4a06      	ldr	r2, [pc, #24]	; (800a67c <vApplicationGetIdleTaskMemory+0x30>)
 800a662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a66a:	601a      	str	r2, [r3, #0]
}
 800a66c:	bf00      	nop
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	200007a4 	.word	0x200007a4
 800a67c:	20000810 	.word	0x20000810

0800a680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4a07      	ldr	r2, [pc, #28]	; (800a6ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	4a06      	ldr	r2, [pc, #24]	; (800a6b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a69e:	601a      	str	r2, [r3, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	20000c10 	.word	0x20000c10
 800a6b0:	20000c7c 	.word	0x20000c7c

0800a6b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f103 0208 	add.w	r2, r3, #8
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f103 0208 	add.w	r2, r3, #8
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f103 0208 	add.w	r2, r3, #8
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	601a      	str	r2, [r3, #0]
}
 800a74a:	bf00      	nop
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a756:	b480      	push	{r7}
 800a758:	b085      	sub	sp, #20
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d103      	bne.n	800a776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	e00c      	b.n	800a790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3308      	adds	r3, #8
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e002      	b.n	800a784 <vListInsert+0x2e>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d2f6      	bcs.n	800a77e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	601a      	str	r2, [r3, #0]
}
 800a7bc:	bf00      	nop
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	6892      	ldr	r2, [r2, #8]
 800a7de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6852      	ldr	r2, [r2, #4]
 800a7e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d103      	bne.n	800a7fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	1e5a      	subs	r2, r3, #1
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10a      	bne.n	800a846 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a846:	f002 f98d 	bl	800cb64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a852:	68f9      	ldr	r1, [r7, #12]
 800a854:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a856:	fb01 f303 	mul.w	r3, r1, r3
 800a85a:	441a      	add	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a876:	3b01      	subs	r3, #1
 800a878:	68f9      	ldr	r1, [r7, #12]
 800a87a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a87c:	fb01 f303 	mul.w	r3, r1, r3
 800a880:	441a      	add	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	22ff      	movs	r2, #255	; 0xff
 800a88a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	22ff      	movs	r2, #255	; 0xff
 800a892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d114      	bne.n	800a8c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d01a      	beq.n	800a8da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3310      	adds	r3, #16
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 fa43 	bl	800bd34 <xTaskRemoveFromEventList>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d012      	beq.n	800a8da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <xQueueGenericReset+0xcc>)
 800a8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	e009      	b.n	800a8da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7ff fef2 	bl	800a6b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3324      	adds	r3, #36	; 0x24
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff feed 	bl	800a6b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8da:	f002 f973 	bl	800cbc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8de:	2301      	movs	r3, #1
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	; 0x38
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <xQueueGenericCreateStatic+0x52>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <xQueueGenericCreateStatic+0x56>
 800a93e:	2301      	movs	r3, #1
 800a940:	e000      	b.n	800a944 <xQueueGenericCreateStatic+0x58>
 800a942:	2300      	movs	r3, #0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10a      	bne.n	800a95e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	623b      	str	r3, [r7, #32]
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <xQueueGenericCreateStatic+0x7e>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <xQueueGenericCreateStatic+0x82>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <xQueueGenericCreateStatic+0x84>
 800a96e:	2300      	movs	r3, #0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	61fb      	str	r3, [r7, #28]
}
 800a986:	bf00      	nop
 800a988:	e7fe      	b.n	800a988 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a98a:	2350      	movs	r3, #80	; 0x50
 800a98c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b50      	cmp	r3, #80	; 0x50
 800a992:	d00a      	beq.n	800a9aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	61bb      	str	r3, [r7, #24]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00d      	beq.n	800a9d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f83f 	bl	800aa50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3730      	adds	r7, #48	; 0x30
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	; 0x28
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	613b      	str	r3, [r7, #16]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	fb02 f303 	mul.w	r3, r2, r3
 800aa0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	3350      	adds	r3, #80	; 0x50
 800aa14:	4618      	mov	r0, r3
 800aa16:	f002 f9c7 	bl	800cda8 <pvPortMalloc>
 800aa1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d011      	beq.n	800aa46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	3350      	adds	r3, #80	; 0x50
 800aa2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa34:	79fa      	ldrb	r2, [r7, #7]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	68b9      	ldr	r1, [r7, #8]
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 f805 	bl	800aa50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa46:	69bb      	ldr	r3, [r7, #24]
	}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3720      	adds	r7, #32
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d103      	bne.n	800aa6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	69ba      	ldr	r2, [r7, #24]
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	e002      	b.n	800aa72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa7e:	2101      	movs	r1, #1
 800aa80:	69b8      	ldr	r0, [r7, #24]
 800aa82:	f7ff fecb 	bl	800a81c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	78fa      	ldrb	r2, [r7, #3]
 800aa8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08e      	sub	sp, #56	; 0x38
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xQueueGenericSend+0x32>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d103      	bne.n	800aad8 <xQueueGenericSend+0x40>
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <xQueueGenericSend+0x44>
 800aad8:	2301      	movs	r3, #1
 800aada:	e000      	b.n	800aade <xQueueGenericSend+0x46>
 800aadc:	2300      	movs	r3, #0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10a      	bne.n	800aaf8 <xQueueGenericSend+0x60>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaf4:	bf00      	nop
 800aaf6:	e7fe      	b.n	800aaf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d103      	bne.n	800ab06 <xQueueGenericSend+0x6e>
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d101      	bne.n	800ab0a <xQueueGenericSend+0x72>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <xQueueGenericSend+0x74>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10a      	bne.n	800ab26 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	623b      	str	r3, [r7, #32]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab26:	f001 fac3 	bl	800c0b0 <xTaskGetSchedulerState>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <xQueueGenericSend+0x9e>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <xQueueGenericSend+0xa2>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e000      	b.n	800ab3c <xQueueGenericSend+0xa4>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	61fb      	str	r3, [r7, #28]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab56:	f002 f805 	bl	800cb64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d302      	bcc.n	800ab6c <xQueueGenericSend+0xd4>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d129      	bne.n	800abc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab72:	f000 fa0b 	bl	800af8c <prvCopyDataToQueue>
 800ab76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d010      	beq.n	800aba2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	3324      	adds	r3, #36	; 0x24
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 f8d5 	bl	800bd34 <xTaskRemoveFromEventList>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d013      	beq.n	800abb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab90:	4b3f      	ldr	r3, [pc, #252]	; (800ac90 <xQueueGenericSend+0x1f8>)
 800ab92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	e00a      	b.n	800abb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d007      	beq.n	800abb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aba8:	4b39      	ldr	r3, [pc, #228]	; (800ac90 <xQueueGenericSend+0x1f8>)
 800abaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abb8:	f002 f804 	bl	800cbc4 <vPortExitCritical>
				return pdPASS;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e063      	b.n	800ac88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d103      	bne.n	800abce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abc6:	f001 fffd 	bl	800cbc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abca:	2300      	movs	r3, #0
 800abcc:	e05c      	b.n	800ac88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d106      	bne.n	800abe2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abd4:	f107 0314 	add.w	r3, r7, #20
 800abd8:	4618      	mov	r0, r3
 800abda:	f001 f90f 	bl	800bdfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abde:	2301      	movs	r3, #1
 800abe0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abe2:	f001 ffef 	bl	800cbc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abe6:	f000 fe81 	bl	800b8ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abea:	f001 ffbb 	bl	800cb64 <vPortEnterCritical>
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abf4:	b25b      	sxtb	r3, r3
 800abf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfa:	d103      	bne.n	800ac04 <xQueueGenericSend+0x16c>
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac0a:	b25b      	sxtb	r3, r3
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d103      	bne.n	800ac1a <xQueueGenericSend+0x182>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac1a:	f001 ffd3 	bl	800cbc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac1e:	1d3a      	adds	r2, r7, #4
 800ac20:	f107 0314 	add.w	r3, r7, #20
 800ac24:	4611      	mov	r1, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f001 f8fe 	bl	800be28 <xTaskCheckForTimeOut>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d124      	bne.n	800ac7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac34:	f000 faa2 	bl	800b17c <prvIsQueueFull>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d018      	beq.n	800ac70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	3310      	adds	r3, #16
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f001 f824 	bl	800bc94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac4e:	f000 fa2d 	bl	800b0ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac52:	f000 fe59 	bl	800b908 <xTaskResumeAll>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f47f af7c 	bne.w	800ab56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac5e:	4b0c      	ldr	r3, [pc, #48]	; (800ac90 <xQueueGenericSend+0x1f8>)
 800ac60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	e772      	b.n	800ab56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac72:	f000 fa1b 	bl	800b0ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac76:	f000 fe47 	bl	800b908 <xTaskResumeAll>
 800ac7a:	e76c      	b.n	800ab56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac7e:	f000 fa15 	bl	800b0ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac82:	f000 fe41 	bl	800b908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3738      	adds	r7, #56	; 0x38
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	e000ed04 	.word	0xe000ed04

0800ac94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b090      	sub	sp, #64	; 0x40
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
 800aca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d103      	bne.n	800acd0 <xQueueGenericSendFromISR+0x3c>
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <xQueueGenericSendFromISR+0x40>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e000      	b.n	800acd6 <xQueueGenericSendFromISR+0x42>
 800acd4:	2300      	movs	r3, #0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10a      	bne.n	800acf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d103      	bne.n	800acfe <xQueueGenericSendFromISR+0x6a>
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d101      	bne.n	800ad02 <xQueueGenericSendFromISR+0x6e>
 800acfe:	2301      	movs	r3, #1
 800ad00:	e000      	b.n	800ad04 <xQueueGenericSendFromISR+0x70>
 800ad02:	2300      	movs	r3, #0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	623b      	str	r3, [r7, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad1e:	f002 f803 	bl	800cd28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad22:	f3ef 8211 	mrs	r2, BASEPRI
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	61fa      	str	r2, [r7, #28]
 800ad38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d302      	bcc.n	800ad50 <xQueueGenericSendFromISR+0xbc>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d12f      	bne.n	800adb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	68b9      	ldr	r1, [r7, #8]
 800ad64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad66:	f000 f911 	bl	800af8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad72:	d112      	bne.n	800ad9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d016      	beq.n	800adaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7e:	3324      	adds	r3, #36	; 0x24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 ffd7 	bl	800bd34 <xTaskRemoveFromEventList>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00e      	beq.n	800adaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00b      	beq.n	800adaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e007      	b.n	800adaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad9e:	3301      	adds	r3, #1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	b25a      	sxtb	r2, r3
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adaa:	2301      	movs	r3, #1
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800adae:	e001      	b.n	800adb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3740      	adds	r7, #64	; 0x40
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08c      	sub	sp, #48	; 0x30
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800add8:	2300      	movs	r3, #0
 800adda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10a      	bne.n	800adfc <xQueueReceive+0x30>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	623b      	str	r3, [r7, #32]
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d103      	bne.n	800ae0a <xQueueReceive+0x3e>
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <xQueueReceive+0x42>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <xQueueReceive+0x44>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10a      	bne.n	800ae2a <xQueueReceive+0x5e>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	61fb      	str	r3, [r7, #28]
}
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae2a:	f001 f941 	bl	800c0b0 <xTaskGetSchedulerState>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d102      	bne.n	800ae3a <xQueueReceive+0x6e>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <xQueueReceive+0x72>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e000      	b.n	800ae40 <xQueueReceive+0x74>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <xQueueReceive+0x8e>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	61bb      	str	r3, [r7, #24]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae5a:	f001 fe83 	bl	800cb64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d01f      	beq.n	800aeaa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae6e:	f000 f8f7 	bl	800b060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	1e5a      	subs	r2, r3, #1
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00f      	beq.n	800aea2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	3310      	adds	r3, #16
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 ff54 	bl	800bd34 <xTaskRemoveFromEventList>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae92:	4b3d      	ldr	r3, [pc, #244]	; (800af88 <xQueueReceive+0x1bc>)
 800ae94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aea2:	f001 fe8f 	bl	800cbc4 <vPortExitCritical>
				return pdPASS;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e069      	b.n	800af7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d103      	bne.n	800aeb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aeb0:	f001 fe88 	bl	800cbc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e062      	b.n	800af7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aebe:	f107 0310 	add.w	r3, r7, #16
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 ff9a 	bl	800bdfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aec8:	2301      	movs	r3, #1
 800aeca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aecc:	f001 fe7a 	bl	800cbc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aed0:	f000 fd0c 	bl	800b8ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aed4:	f001 fe46 	bl	800cb64 <vPortEnterCritical>
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d103      	bne.n	800aeee <xQueueReceive+0x122>
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef4:	b25b      	sxtb	r3, r3
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	d103      	bne.n	800af04 <xQueueReceive+0x138>
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af04:	f001 fe5e 	bl	800cbc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af08:	1d3a      	adds	r2, r7, #4
 800af0a:	f107 0310 	add.w	r3, r7, #16
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f000 ff89 	bl	800be28 <xTaskCheckForTimeOut>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d123      	bne.n	800af64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af1e:	f000 f917 	bl	800b150 <prvIsQueueEmpty>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d017      	beq.n	800af58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	3324      	adds	r3, #36	; 0x24
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f000 feaf 	bl	800bc94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af38:	f000 f8b8 	bl	800b0ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af3c:	f000 fce4 	bl	800b908 <xTaskResumeAll>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d189      	bne.n	800ae5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af46:	4b10      	ldr	r3, [pc, #64]	; (800af88 <xQueueReceive+0x1bc>)
 800af48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	e780      	b.n	800ae5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af5a:	f000 f8a7 	bl	800b0ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af5e:	f000 fcd3 	bl	800b908 <xTaskResumeAll>
 800af62:	e77a      	b.n	800ae5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af66:	f000 f8a1 	bl	800b0ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af6a:	f000 fccd 	bl	800b908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af70:	f000 f8ee 	bl	800b150 <prvIsQueueEmpty>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	f43f af6f 	beq.w	800ae5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3730      	adds	r7, #48	; 0x30
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af98:	2300      	movs	r3, #0
 800af9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10d      	bne.n	800afc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d14d      	bne.n	800b04e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f001 f898 	bl	800c0ec <xTaskPriorityDisinherit>
 800afbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	609a      	str	r2, [r3, #8]
 800afc4:	e043      	b.n	800b04e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d119      	bne.n	800b000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6858      	ldr	r0, [r3, #4]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	461a      	mov	r2, r3
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	f002 fe1a 	bl	800dc10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	441a      	add	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d32b      	bcc.n	800b04e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	605a      	str	r2, [r3, #4]
 800affe:	e026      	b.n	800b04e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	68d8      	ldr	r0, [r3, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b008:	461a      	mov	r2, r3
 800b00a:	68b9      	ldr	r1, [r7, #8]
 800b00c:	f002 fe00 	bl	800dc10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	425b      	negs	r3, r3
 800b01a:	441a      	add	r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	68da      	ldr	r2, [r3, #12]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d207      	bcs.n	800b03c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	689a      	ldr	r2, [r3, #8]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b034:	425b      	negs	r3, r3
 800b036:	441a      	add	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d105      	bne.n	800b04e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b056:	697b      	ldr	r3, [r7, #20]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d018      	beq.n	800b0a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07a:	441a      	add	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d303      	bcc.n	800b094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68d9      	ldr	r1, [r3, #12]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09c:	461a      	mov	r2, r3
 800b09e:	6838      	ldr	r0, [r7, #0]
 800b0a0:	f002 fdb6 	bl	800dc10 <memcpy>
	}
}
 800b0a4:	bf00      	nop
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0b4:	f001 fd56 	bl	800cb64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0c0:	e011      	b.n	800b0e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d012      	beq.n	800b0f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3324      	adds	r3, #36	; 0x24
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fe30 	bl	800bd34 <xTaskRemoveFromEventList>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0da:	f000 ff07 	bl	800beec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	dce9      	bgt.n	800b0c2 <prvUnlockQueue+0x16>
 800b0ee:	e000      	b.n	800b0f2 <prvUnlockQueue+0x46>
					break;
 800b0f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	22ff      	movs	r2, #255	; 0xff
 800b0f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0fa:	f001 fd63 	bl	800cbc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0fe:	f001 fd31 	bl	800cb64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b10a:	e011      	b.n	800b130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d012      	beq.n	800b13a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3310      	adds	r3, #16
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fe0b 	bl	800bd34 <xTaskRemoveFromEventList>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b124:	f000 fee2 	bl	800beec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dce9      	bgt.n	800b10c <prvUnlockQueue+0x60>
 800b138:	e000      	b.n	800b13c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b13a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	22ff      	movs	r2, #255	; 0xff
 800b140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b144:	f001 fd3e 	bl	800cbc4 <vPortExitCritical>
}
 800b148:	bf00      	nop
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b158:	f001 fd04 	bl	800cb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	2b00      	cmp	r3, #0
 800b162:	d102      	bne.n	800b16a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b164:	2301      	movs	r3, #1
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	e001      	b.n	800b16e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b16e:	f001 fd29 	bl	800cbc4 <vPortExitCritical>

	return xReturn;
 800b172:	68fb      	ldr	r3, [r7, #12]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b184:	f001 fcee 	bl	800cb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b190:	429a      	cmp	r2, r3
 800b192:	d102      	bne.n	800b19a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b194:	2301      	movs	r3, #1
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	e001      	b.n	800b19e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b19e:	f001 fd11 	bl	800cbc4 <vPortExitCritical>

	return xReturn;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	e014      	b.n	800b1e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1bc:	4a0f      	ldr	r2, [pc, #60]	; (800b1fc <vQueueAddToRegistry+0x50>)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10b      	bne.n	800b1e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1c8:	490c      	ldr	r1, [pc, #48]	; (800b1fc <vQueueAddToRegistry+0x50>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1d2:	4a0a      	ldr	r2, [pc, #40]	; (800b1fc <vQueueAddToRegistry+0x50>)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	00db      	lsls	r3, r3, #3
 800b1d8:	4413      	add	r3, r2
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1de:	e006      	b.n	800b1ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2b07      	cmp	r3, #7
 800b1ea:	d9e7      	bls.n	800b1bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1ec:	bf00      	nop
 800b1ee:	bf00      	nop
 800b1f0:	3714      	adds	r7, #20
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	2000147c 	.word	0x2000147c

0800b200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b210:	f001 fca8 	bl	800cb64 <vPortEnterCritical>
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b21a:	b25b      	sxtb	r3, r3
 800b21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b220:	d103      	bne.n	800b22a <vQueueWaitForMessageRestricted+0x2a>
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b230:	b25b      	sxtb	r3, r3
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b236:	d103      	bne.n	800b240 <vQueueWaitForMessageRestricted+0x40>
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b240:	f001 fcc0 	bl	800cbc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d106      	bne.n	800b25a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	3324      	adds	r3, #36	; 0x24
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fd41 	bl	800bcdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b25a:	6978      	ldr	r0, [r7, #20]
 800b25c:	f7ff ff26 	bl	800b0ac <prvUnlockQueue>
	}
 800b260:	bf00      	nop
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08e      	sub	sp, #56	; 0x38
 800b26c:	af04      	add	r7, sp, #16
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	623b      	str	r3, [r7, #32]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10a      	bne.n	800b2ae <xTaskCreateStatic+0x46>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	61fb      	str	r3, [r7, #28]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2ae:	236c      	movs	r3, #108	; 0x6c
 800b2b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	2b6c      	cmp	r3, #108	; 0x6c
 800b2b6:	d00a      	beq.n	800b2ce <xTaskCreateStatic+0x66>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	61bb      	str	r3, [r7, #24]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d01e      	beq.n	800b314 <xTaskCreateStatic+0xac>
 800b2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01b      	beq.n	800b314 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	9302      	str	r3, [sp, #8]
 800b2f6:	f107 0314 	add.w	r3, r7, #20
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 f850 	bl	800b3ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b30c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b30e:	f000 f8dd 	bl	800b4cc <prvAddNewTaskToReadyList>
 800b312:	e001      	b.n	800b318 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3728      	adds	r7, #40	; 0x28
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b322:	b580      	push	{r7, lr}
 800b324:	b08c      	sub	sp, #48	; 0x30
 800b326:	af04      	add	r7, sp, #16
 800b328:	60f8      	str	r0, [r7, #12]
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	603b      	str	r3, [r7, #0]
 800b32e:	4613      	mov	r3, r2
 800b330:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4618      	mov	r0, r3
 800b338:	f001 fd36 	bl	800cda8 <pvPortMalloc>
 800b33c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00e      	beq.n	800b362 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b344:	206c      	movs	r0, #108	; 0x6c
 800b346:	f001 fd2f 	bl	800cda8 <pvPortMalloc>
 800b34a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	631a      	str	r2, [r3, #48]	; 0x30
 800b358:	e005      	b.n	800b366 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b35a:	6978      	ldr	r0, [r7, #20]
 800b35c:	f001 fdf0 	bl	800cf40 <vPortFree>
 800b360:	e001      	b.n	800b366 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b362:	2300      	movs	r3, #0
 800b364:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d017      	beq.n	800b39c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b374:	88fa      	ldrh	r2, [r7, #6]
 800b376:	2300      	movs	r3, #0
 800b378:	9303      	str	r3, [sp, #12]
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	9302      	str	r3, [sp, #8]
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 f80e 	bl	800b3ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b390:	69f8      	ldr	r0, [r7, #28]
 800b392:	f000 f89b 	bl	800b4cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b396:	2301      	movs	r3, #1
 800b398:	61bb      	str	r3, [r7, #24]
 800b39a:	e002      	b.n	800b3a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b39c:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
	}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3720      	adds	r7, #32
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	21a5      	movs	r1, #165	; 0xa5
 800b3c6:	f002 fc31 	bl	800dc2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	f023 0307 	bic.w	r3, r3, #7
 800b3e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	617b      	str	r3, [r7, #20]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d01f      	beq.n	800b44a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
 800b40e:	e012      	b.n	800b436 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	4413      	add	r3, r2
 800b416:	7819      	ldrb	r1, [r3, #0]
 800b418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	4413      	add	r3, r2
 800b41e:	3334      	adds	r3, #52	; 0x34
 800b420:	460a      	mov	r2, r1
 800b422:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d006      	beq.n	800b43e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	3301      	adds	r3, #1
 800b434:	61fb      	str	r3, [r7, #28]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	2b1d      	cmp	r3, #29
 800b43a:	d9e9      	bls.n	800b410 <prvInitialiseNewTask+0x64>
 800b43c:	e000      	b.n	800b440 <prvInitialiseNewTask+0x94>
			{
				break;
 800b43e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800b448:	e003      	b.n	800b452 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	2b37      	cmp	r3, #55	; 0x37
 800b456:	d901      	bls.n	800b45c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b458:	2337      	movs	r3, #55	; 0x37
 800b45a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b460:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b466:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	2200      	movs	r2, #0
 800b46c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	3304      	adds	r3, #4
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff f93e 	bl	800a6f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	3318      	adds	r3, #24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff f939 	bl	800a6f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b486:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b496:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	2200      	movs	r2, #0
 800b49c:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	68f9      	ldr	r1, [r7, #12]
 800b4aa:	69b8      	ldr	r0, [r7, #24]
 800b4ac:	f001 fa2e 	bl	800c90c <pxPortInitialiseStack>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4c2:	bf00      	nop
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
	...

0800b4cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4d4:	f001 fb46 	bl	800cb64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4d8:	4b2d      	ldr	r3, [pc, #180]	; (800b590 <prvAddNewTaskToReadyList+0xc4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	4a2c      	ldr	r2, [pc, #176]	; (800b590 <prvAddNewTaskToReadyList+0xc4>)
 800b4e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4e2:	4b2c      	ldr	r3, [pc, #176]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d109      	bne.n	800b4fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4ea:	4a2a      	ldr	r2, [pc, #168]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4f0:	4b27      	ldr	r3, [pc, #156]	; (800b590 <prvAddNewTaskToReadyList+0xc4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d110      	bne.n	800b51a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4f8:	f000 fd1c 	bl	800bf34 <prvInitialiseTaskLists>
 800b4fc:	e00d      	b.n	800b51a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4fe:	4b26      	ldr	r3, [pc, #152]	; (800b598 <prvAddNewTaskToReadyList+0xcc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b506:	4b23      	ldr	r3, [pc, #140]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b510:	429a      	cmp	r2, r3
 800b512:	d802      	bhi.n	800b51a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b514:	4a1f      	ldr	r2, [pc, #124]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b51a:	4b20      	ldr	r3, [pc, #128]	; (800b59c <prvAddNewTaskToReadyList+0xd0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3301      	adds	r3, #1
 800b520:	4a1e      	ldr	r2, [pc, #120]	; (800b59c <prvAddNewTaskToReadyList+0xd0>)
 800b522:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b524:	4b1d      	ldr	r3, [pc, #116]	; (800b59c <prvAddNewTaskToReadyList+0xd0>)
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b530:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <prvAddNewTaskToReadyList+0xd4>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d903      	bls.n	800b540 <prvAddNewTaskToReadyList+0x74>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	4a18      	ldr	r2, [pc, #96]	; (800b5a0 <prvAddNewTaskToReadyList+0xd4>)
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <prvAddNewTaskToReadyList+0xd8>)
 800b54e:	441a      	add	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f7ff f8d9 	bl	800a70e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b55c:	f001 fb32 	bl	800cbc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <prvAddNewTaskToReadyList+0xcc>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00e      	beq.n	800b586 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	429a      	cmp	r2, r3
 800b574:	d207      	bcs.n	800b586 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b576:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <prvAddNewTaskToReadyList+0xdc>)
 800b578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20001990 	.word	0x20001990
 800b594:	200014bc 	.word	0x200014bc
 800b598:	2000199c 	.word	0x2000199c
 800b59c:	200019ac 	.word	0x200019ac
 800b5a0:	20001998 	.word	0x20001998
 800b5a4:	200014c0 	.word	0x200014c0
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d017      	beq.n	800b5ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <vTaskDelay+0x60>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <vTaskDelay+0x30>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	60bb      	str	r3, [r7, #8]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5dc:	f000 f986 	bl	800b8ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fdf0 	bl	800c1c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5e8:	f000 f98e 	bl	800b908 <xTaskResumeAll>
 800b5ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d107      	bne.n	800b604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5f4:	4b06      	ldr	r3, [pc, #24]	; (800b610 <vTaskDelay+0x64>)
 800b5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b604:	bf00      	nop
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	200019b8 	.word	0x200019b8
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b61c:	f001 faa2 	bl	800cb64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d102      	bne.n	800b62c <vTaskSuspend+0x18>
 800b626:	4b30      	ldr	r3, [pc, #192]	; (800b6e8 <vTaskSuspend+0xd4>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	e000      	b.n	800b62e <vTaskSuspend+0x1a>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	3304      	adds	r3, #4
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff f8c7 	bl	800a7c8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d004      	beq.n	800b64c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3318      	adds	r3, #24
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff f8be 	bl	800a7c8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	3304      	adds	r3, #4
 800b650:	4619      	mov	r1, r3
 800b652:	4826      	ldr	r0, [pc, #152]	; (800b6ec <vTaskSuspend+0xd8>)
 800b654:	f7ff f85b 	bl	800a70e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b01      	cmp	r3, #1
 800b662:	d103      	bne.n	800b66c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b66c:	f001 faaa 	bl	800cbc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b670:	4b1f      	ldr	r3, [pc, #124]	; (800b6f0 <vTaskSuspend+0xdc>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b678:	f001 fa74 	bl	800cb64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b67c:	f000 fcf8 	bl	800c070 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b680:	f001 faa0 	bl	800cbc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b684:	4b18      	ldr	r3, [pc, #96]	; (800b6e8 <vTaskSuspend+0xd4>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d127      	bne.n	800b6de <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b68e:	4b18      	ldr	r3, [pc, #96]	; (800b6f0 <vTaskSuspend+0xdc>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d017      	beq.n	800b6c6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b696:	4b17      	ldr	r3, [pc, #92]	; (800b6f4 <vTaskSuspend+0xe0>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00a      	beq.n	800b6b4 <vTaskSuspend+0xa0>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	60bb      	str	r3, [r7, #8]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b6b4:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <vTaskSuspend+0xe4>)
 800b6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6c4:	e00b      	b.n	800b6de <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b6c6:	4b09      	ldr	r3, [pc, #36]	; (800b6ec <vTaskSuspend+0xd8>)
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	4b0c      	ldr	r3, [pc, #48]	; (800b6fc <vTaskSuspend+0xe8>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d103      	bne.n	800b6da <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b6d2:	4b05      	ldr	r3, [pc, #20]	; (800b6e8 <vTaskSuspend+0xd4>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	601a      	str	r2, [r3, #0]
	}
 800b6d8:	e001      	b.n	800b6de <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b6da:	f000 fa7d 	bl	800bbd8 <vTaskSwitchContext>
	}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	200014bc 	.word	0x200014bc
 800b6ec:	2000197c 	.word	0x2000197c
 800b6f0:	2000199c 	.word	0x2000199c
 800b6f4:	200019b8 	.word	0x200019b8
 800b6f8:	e000ed04 	.word	0xe000ed04
 800b6fc:	20001990 	.word	0x20001990

0800b700 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b700:	b480      	push	{r7}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b708:	2300      	movs	r3, #0
 800b70a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60fb      	str	r3, [r7, #12]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	4a0a      	ldr	r2, [pc, #40]	; (800b75c <prvTaskIsTaskSuspended+0x5c>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d10a      	bne.n	800b74c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73a:	4a09      	ldr	r2, [pc, #36]	; (800b760 <prvTaskIsTaskSuspended+0x60>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d005      	beq.n	800b74c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b74c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b74e:	4618      	mov	r0, r3
 800b750:	371c      	adds	r7, #28
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	2000197c 	.word	0x2000197c
 800b760:	20001950 	.word	0x20001950

0800b764 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <vTaskResume+0x28>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60bb      	str	r3, [r7, #8]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b78c:	4b20      	ldr	r3, [pc, #128]	; (800b810 <vTaskResume+0xac>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	429a      	cmp	r2, r3
 800b794:	d038      	beq.n	800b808 <vTaskResume+0xa4>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d035      	beq.n	800b808 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800b79c:	f001 f9e2 	bl	800cb64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f7ff ffad 	bl	800b700 <prvTaskIsTaskSuspended>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d02b      	beq.n	800b804 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff f809 	bl	800a7c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ba:	4b16      	ldr	r3, [pc, #88]	; (800b814 <vTaskResume+0xb0>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d903      	bls.n	800b7ca <vTaskResume+0x66>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	4a13      	ldr	r2, [pc, #76]	; (800b814 <vTaskResume+0xb0>)
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4a10      	ldr	r2, [pc, #64]	; (800b818 <vTaskResume+0xb4>)
 800b7d8:	441a      	add	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f7fe ff94 	bl	800a70e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ea:	4b09      	ldr	r3, [pc, #36]	; (800b810 <vTaskResume+0xac>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d307      	bcc.n	800b804 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b7f4:	4b09      	ldr	r3, [pc, #36]	; (800b81c <vTaskResume+0xb8>)
 800b7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b804:	f001 f9de 	bl	800cbc4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	200014bc 	.word	0x200014bc
 800b814:	20001998 	.word	0x20001998
 800b818:	200014c0 	.word	0x200014c0
 800b81c:	e000ed04 	.word	0xe000ed04

0800b820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08a      	sub	sp, #40	; 0x28
 800b824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b826:	2300      	movs	r3, #0
 800b828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b82e:	463a      	mov	r2, r7
 800b830:	1d39      	adds	r1, r7, #4
 800b832:	f107 0308 	add.w	r3, r7, #8
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe ff08 	bl	800a64c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	9202      	str	r2, [sp, #8]
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	2300      	movs	r3, #0
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	2300      	movs	r3, #0
 800b84c:	460a      	mov	r2, r1
 800b84e:	4921      	ldr	r1, [pc, #132]	; (800b8d4 <vTaskStartScheduler+0xb4>)
 800b850:	4821      	ldr	r0, [pc, #132]	; (800b8d8 <vTaskStartScheduler+0xb8>)
 800b852:	f7ff fd09 	bl	800b268 <xTaskCreateStatic>
 800b856:	4603      	mov	r3, r0
 800b858:	4a20      	ldr	r2, [pc, #128]	; (800b8dc <vTaskStartScheduler+0xbc>)
 800b85a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b85c:	4b1f      	ldr	r3, [pc, #124]	; (800b8dc <vTaskStartScheduler+0xbc>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b864:	2301      	movs	r3, #1
 800b866:	617b      	str	r3, [r7, #20]
 800b868:	e001      	b.n	800b86e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d102      	bne.n	800b87a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b874:	f000 fcfc 	bl	800c270 <xTimerCreateTimerTask>
 800b878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d116      	bne.n	800b8ae <vTaskStartScheduler+0x8e>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	613b      	str	r3, [r7, #16]
}
 800b892:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b894:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <vTaskStartScheduler+0xc0>)
 800b896:	f04f 32ff 	mov.w	r2, #4294967295
 800b89a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b89c:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <vTaskStartScheduler+0xc4>)
 800b89e:	2201      	movs	r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8a2:	4b11      	ldr	r3, [pc, #68]	; (800b8e8 <vTaskStartScheduler+0xc8>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8a8:	f001 f8ba 	bl	800ca20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8ac:	e00e      	b.n	800b8cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d10a      	bne.n	800b8cc <vTaskStartScheduler+0xac>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	60fb      	str	r3, [r7, #12]
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <vTaskStartScheduler+0xaa>
}
 800b8cc:	bf00      	nop
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	0800e858 	.word	0x0800e858
 800b8d8:	0800bf05 	.word	0x0800bf05
 800b8dc:	200019b4 	.word	0x200019b4
 800b8e0:	200019b0 	.word	0x200019b0
 800b8e4:	2000199c 	.word	0x2000199c
 800b8e8:	20001994 	.word	0x20001994

0800b8ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8f0:	4b04      	ldr	r3, [pc, #16]	; (800b904 <vTaskSuspendAll+0x18>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	4a03      	ldr	r2, [pc, #12]	; (800b904 <vTaskSuspendAll+0x18>)
 800b8f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8fa:	bf00      	nop
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	200019b8 	.word	0x200019b8

0800b908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b912:	2300      	movs	r3, #0
 800b914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b916:	4b42      	ldr	r3, [pc, #264]	; (800ba20 <xTaskResumeAll+0x118>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10a      	bne.n	800b934 <xTaskResumeAll+0x2c>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	603b      	str	r3, [r7, #0]
}
 800b930:	bf00      	nop
 800b932:	e7fe      	b.n	800b932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b934:	f001 f916 	bl	800cb64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b938:	4b39      	ldr	r3, [pc, #228]	; (800ba20 <xTaskResumeAll+0x118>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	4a38      	ldr	r2, [pc, #224]	; (800ba20 <xTaskResumeAll+0x118>)
 800b940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b942:	4b37      	ldr	r3, [pc, #220]	; (800ba20 <xTaskResumeAll+0x118>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d162      	bne.n	800ba10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b94a:	4b36      	ldr	r3, [pc, #216]	; (800ba24 <xTaskResumeAll+0x11c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d05e      	beq.n	800ba10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b952:	e02f      	b.n	800b9b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b954:	4b34      	ldr	r3, [pc, #208]	; (800ba28 <xTaskResumeAll+0x120>)
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3318      	adds	r3, #24
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe ff31 	bl	800a7c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3304      	adds	r3, #4
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe ff2c 	bl	800a7c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b974:	4b2d      	ldr	r3, [pc, #180]	; (800ba2c <xTaskResumeAll+0x124>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d903      	bls.n	800b984 <xTaskResumeAll+0x7c>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	4a2a      	ldr	r2, [pc, #168]	; (800ba2c <xTaskResumeAll+0x124>)
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b988:	4613      	mov	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4a27      	ldr	r2, [pc, #156]	; (800ba30 <xTaskResumeAll+0x128>)
 800b992:	441a      	add	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3304      	adds	r3, #4
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f7fe feb7 	bl	800a70e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a4:	4b23      	ldr	r3, [pc, #140]	; (800ba34 <xTaskResumeAll+0x12c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d302      	bcc.n	800b9b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b9ae:	4b22      	ldr	r3, [pc, #136]	; (800ba38 <xTaskResumeAll+0x130>)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9b4:	4b1c      	ldr	r3, [pc, #112]	; (800ba28 <xTaskResumeAll+0x120>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1cb      	bne.n	800b954 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9c2:	f000 fb55 	bl	800c070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9c6:	4b1d      	ldr	r3, [pc, #116]	; (800ba3c <xTaskResumeAll+0x134>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d010      	beq.n	800b9f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9d2:	f000 f847 	bl	800ba64 <xTaskIncrementTick>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b9dc:	4b16      	ldr	r3, [pc, #88]	; (800ba38 <xTaskResumeAll+0x130>)
 800b9de:	2201      	movs	r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1f1      	bne.n	800b9d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b9ee:	4b13      	ldr	r3, [pc, #76]	; (800ba3c <xTaskResumeAll+0x134>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9f4:	4b10      	ldr	r3, [pc, #64]	; (800ba38 <xTaskResumeAll+0x130>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d009      	beq.n	800ba10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba00:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <xTaskResumeAll+0x138>)
 800ba02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba10:	f001 f8d8 	bl	800cbc4 <vPortExitCritical>

	return xAlreadyYielded;
 800ba14:	68bb      	ldr	r3, [r7, #8]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	200019b8 	.word	0x200019b8
 800ba24:	20001990 	.word	0x20001990
 800ba28:	20001950 	.word	0x20001950
 800ba2c:	20001998 	.word	0x20001998
 800ba30:	200014c0 	.word	0x200014c0
 800ba34:	200014bc 	.word	0x200014bc
 800ba38:	200019a4 	.word	0x200019a4
 800ba3c:	200019a0 	.word	0x200019a0
 800ba40:	e000ed04 	.word	0xe000ed04

0800ba44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba4a:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <xTaskGetTickCount+0x1c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba50:	687b      	ldr	r3, [r7, #4]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20001994 	.word	0x20001994

0800ba64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba6e:	4b4f      	ldr	r3, [pc, #316]	; (800bbac <xTaskIncrementTick+0x148>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f040 808f 	bne.w	800bb96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba78:	4b4d      	ldr	r3, [pc, #308]	; (800bbb0 <xTaskIncrementTick+0x14c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba80:	4a4b      	ldr	r2, [pc, #300]	; (800bbb0 <xTaskIncrementTick+0x14c>)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d120      	bne.n	800bace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba8c:	4b49      	ldr	r3, [pc, #292]	; (800bbb4 <xTaskIncrementTick+0x150>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <xTaskIncrementTick+0x48>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	603b      	str	r3, [r7, #0]
}
 800baa8:	bf00      	nop
 800baaa:	e7fe      	b.n	800baaa <xTaskIncrementTick+0x46>
 800baac:	4b41      	ldr	r3, [pc, #260]	; (800bbb4 <xTaskIncrementTick+0x150>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	60fb      	str	r3, [r7, #12]
 800bab2:	4b41      	ldr	r3, [pc, #260]	; (800bbb8 <xTaskIncrementTick+0x154>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a3f      	ldr	r2, [pc, #252]	; (800bbb4 <xTaskIncrementTick+0x150>)
 800bab8:	6013      	str	r3, [r2, #0]
 800baba:	4a3f      	ldr	r2, [pc, #252]	; (800bbb8 <xTaskIncrementTick+0x154>)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	4b3e      	ldr	r3, [pc, #248]	; (800bbbc <xTaskIncrementTick+0x158>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3301      	adds	r3, #1
 800bac6:	4a3d      	ldr	r2, [pc, #244]	; (800bbbc <xTaskIncrementTick+0x158>)
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	f000 fad1 	bl	800c070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bace:	4b3c      	ldr	r3, [pc, #240]	; (800bbc0 <xTaskIncrementTick+0x15c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d349      	bcc.n	800bb6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bad8:	4b36      	ldr	r3, [pc, #216]	; (800bbb4 <xTaskIncrementTick+0x150>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d104      	bne.n	800baec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae2:	4b37      	ldr	r3, [pc, #220]	; (800bbc0 <xTaskIncrementTick+0x15c>)
 800bae4:	f04f 32ff 	mov.w	r2, #4294967295
 800bae8:	601a      	str	r2, [r3, #0]
					break;
 800baea:	e03f      	b.n	800bb6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baec:	4b31      	ldr	r3, [pc, #196]	; (800bbb4 <xTaskIncrementTick+0x150>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d203      	bcs.n	800bb0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb04:	4a2e      	ldr	r2, [pc, #184]	; (800bbc0 <xTaskIncrementTick+0x15c>)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb0a:	e02f      	b.n	800bb6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	3304      	adds	r3, #4
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fe fe59 	bl	800a7c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d004      	beq.n	800bb28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	3318      	adds	r3, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fe fe50 	bl	800a7c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2c:	4b25      	ldr	r3, [pc, #148]	; (800bbc4 <xTaskIncrementTick+0x160>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d903      	bls.n	800bb3c <xTaskIncrementTick+0xd8>
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	4a22      	ldr	r2, [pc, #136]	; (800bbc4 <xTaskIncrementTick+0x160>)
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4a1f      	ldr	r2, [pc, #124]	; (800bbc8 <xTaskIncrementTick+0x164>)
 800bb4a:	441a      	add	r2, r3
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4619      	mov	r1, r3
 800bb52:	4610      	mov	r0, r2
 800bb54:	f7fe fddb 	bl	800a70e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	; (800bbcc <xTaskIncrementTick+0x168>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d3b8      	bcc.n	800bad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb66:	2301      	movs	r3, #1
 800bb68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb6a:	e7b5      	b.n	800bad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb6c:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <xTaskIncrementTick+0x168>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb72:	4915      	ldr	r1, [pc, #84]	; (800bbc8 <xTaskIncrementTick+0x164>)
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	440b      	add	r3, r1
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d901      	bls.n	800bb88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb84:	2301      	movs	r3, #1
 800bb86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb88:	4b11      	ldr	r3, [pc, #68]	; (800bbd0 <xTaskIncrementTick+0x16c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d007      	beq.n	800bba0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb90:	2301      	movs	r3, #1
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	e004      	b.n	800bba0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb96:	4b0f      	ldr	r3, [pc, #60]	; (800bbd4 <xTaskIncrementTick+0x170>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	4a0d      	ldr	r2, [pc, #52]	; (800bbd4 <xTaskIncrementTick+0x170>)
 800bb9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bba0:	697b      	ldr	r3, [r7, #20]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	200019b8 	.word	0x200019b8
 800bbb0:	20001994 	.word	0x20001994
 800bbb4:	20001948 	.word	0x20001948
 800bbb8:	2000194c 	.word	0x2000194c
 800bbbc:	200019a8 	.word	0x200019a8
 800bbc0:	200019b0 	.word	0x200019b0
 800bbc4:	20001998 	.word	0x20001998
 800bbc8:	200014c0 	.word	0x200014c0
 800bbcc:	200014bc 	.word	0x200014bc
 800bbd0:	200019a4 	.word	0x200019a4
 800bbd4:	200019a0 	.word	0x200019a0

0800bbd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbde:	4b28      	ldr	r3, [pc, #160]	; (800bc80 <vTaskSwitchContext+0xa8>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbe6:	4b27      	ldr	r3, [pc, #156]	; (800bc84 <vTaskSwitchContext+0xac>)
 800bbe8:	2201      	movs	r2, #1
 800bbea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbec:	e041      	b.n	800bc72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bbee:	4b25      	ldr	r3, [pc, #148]	; (800bc84 <vTaskSwitchContext+0xac>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbf4:	4b24      	ldr	r3, [pc, #144]	; (800bc88 <vTaskSwitchContext+0xb0>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	60fb      	str	r3, [r7, #12]
 800bbfa:	e010      	b.n	800bc1e <vTaskSwitchContext+0x46>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10a      	bne.n	800bc18 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	607b      	str	r3, [r7, #4]
}
 800bc14:	bf00      	nop
 800bc16:	e7fe      	b.n	800bc16 <vTaskSwitchContext+0x3e>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	60fb      	str	r3, [r7, #12]
 800bc1e:	491b      	ldr	r1, [pc, #108]	; (800bc8c <vTaskSwitchContext+0xb4>)
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	440b      	add	r3, r1
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0e4      	beq.n	800bbfc <vTaskSwitchContext+0x24>
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	4613      	mov	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4a13      	ldr	r2, [pc, #76]	; (800bc8c <vTaskSwitchContext+0xb4>)
 800bc3e:	4413      	add	r3, r2
 800bc40:	60bb      	str	r3, [r7, #8]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	605a      	str	r2, [r3, #4]
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	3308      	adds	r3, #8
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d104      	bne.n	800bc62 <vTaskSwitchContext+0x8a>
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	605a      	str	r2, [r3, #4]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	4a09      	ldr	r2, [pc, #36]	; (800bc90 <vTaskSwitchContext+0xb8>)
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	4a06      	ldr	r2, [pc, #24]	; (800bc88 <vTaskSwitchContext+0xb0>)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6013      	str	r3, [r2, #0]
}
 800bc72:	bf00      	nop
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	200019b8 	.word	0x200019b8
 800bc84:	200019a4 	.word	0x200019a4
 800bc88:	20001998 	.word	0x20001998
 800bc8c:	200014c0 	.word	0x200014c0
 800bc90:	200014bc 	.word	0x200014bc

0800bc94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	60fb      	str	r3, [r7, #12]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcba:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <vTaskPlaceOnEventList+0x44>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3318      	adds	r3, #24
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7fe fd47 	bl	800a756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcc8:	2101      	movs	r1, #1
 800bcca:	6838      	ldr	r0, [r7, #0]
 800bccc:	f000 fa7c 	bl	800c1c8 <prvAddCurrentTaskToDelayedList>
}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	200014bc 	.word	0x200014bc

0800bcdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10a      	bne.n	800bd04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	617b      	str	r3, [r7, #20]
}
 800bd00:	bf00      	nop
 800bd02:	e7fe      	b.n	800bd02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3318      	adds	r3, #24
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f7fe fcfe 	bl	800a70e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	68b8      	ldr	r0, [r7, #8]
 800bd22:	f000 fa51 	bl	800c1c8 <prvAddCurrentTaskToDelayedList>
	}
 800bd26:	bf00      	nop
 800bd28:	3718      	adds	r7, #24
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	200014bc 	.word	0x200014bc

0800bd34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10a      	bne.n	800bd60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	60fb      	str	r3, [r7, #12]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	3318      	adds	r3, #24
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fe fd2f 	bl	800a7c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd6a:	4b1e      	ldr	r3, [pc, #120]	; (800bde4 <xTaskRemoveFromEventList+0xb0>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d11d      	bne.n	800bdae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	3304      	adds	r3, #4
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe fd26 	bl	800a7c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd80:	4b19      	ldr	r3, [pc, #100]	; (800bde8 <xTaskRemoveFromEventList+0xb4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d903      	bls.n	800bd90 <xTaskRemoveFromEventList+0x5c>
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	4a16      	ldr	r2, [pc, #88]	; (800bde8 <xTaskRemoveFromEventList+0xb4>)
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd94:	4613      	mov	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4a13      	ldr	r2, [pc, #76]	; (800bdec <xTaskRemoveFromEventList+0xb8>)
 800bd9e:	441a      	add	r2, r3
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	3304      	adds	r3, #4
 800bda4:	4619      	mov	r1, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	f7fe fcb1 	bl	800a70e <vListInsertEnd>
 800bdac:	e005      	b.n	800bdba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	3318      	adds	r3, #24
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	480e      	ldr	r0, [pc, #56]	; (800bdf0 <xTaskRemoveFromEventList+0xbc>)
 800bdb6:	f7fe fcaa 	bl	800a70e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbe:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <xTaskRemoveFromEventList+0xc0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d905      	bls.n	800bdd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdcc:	4b0a      	ldr	r3, [pc, #40]	; (800bdf8 <xTaskRemoveFromEventList+0xc4>)
 800bdce:	2201      	movs	r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	e001      	b.n	800bdd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bdd8:	697b      	ldr	r3, [r7, #20]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	200019b8 	.word	0x200019b8
 800bde8:	20001998 	.word	0x20001998
 800bdec:	200014c0 	.word	0x200014c0
 800bdf0:	20001950 	.word	0x20001950
 800bdf4:	200014bc 	.word	0x200014bc
 800bdf8:	200019a4 	.word	0x200019a4

0800bdfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be04:	4b06      	ldr	r3, [pc, #24]	; (800be20 <vTaskInternalSetTimeOutState+0x24>)
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <vTaskInternalSetTimeOutState+0x28>)
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	605a      	str	r2, [r3, #4]
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	200019a8 	.word	0x200019a8
 800be24:	20001994 	.word	0x20001994

0800be28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b088      	sub	sp, #32
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	613b      	str	r3, [r7, #16]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10a      	bne.n	800be6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	60fb      	str	r3, [r7, #12]
}
 800be66:	bf00      	nop
 800be68:	e7fe      	b.n	800be68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be6a:	f000 fe7b 	bl	800cb64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be6e:	4b1d      	ldr	r3, [pc, #116]	; (800bee4 <xTaskCheckForTimeOut+0xbc>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be86:	d102      	bne.n	800be8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be88:	2300      	movs	r3, #0
 800be8a:	61fb      	str	r3, [r7, #28]
 800be8c:	e023      	b.n	800bed6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	4b15      	ldr	r3, [pc, #84]	; (800bee8 <xTaskCheckForTimeOut+0xc0>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	429a      	cmp	r2, r3
 800be98:	d007      	beq.n	800beaa <xTaskCheckForTimeOut+0x82>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	69ba      	ldr	r2, [r7, #24]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d302      	bcc.n	800beaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bea4:	2301      	movs	r3, #1
 800bea6:	61fb      	str	r3, [r7, #28]
 800bea8:	e015      	b.n	800bed6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d20b      	bcs.n	800becc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	1ad2      	subs	r2, r2, r3
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ff9b 	bl	800bdfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bec6:	2300      	movs	r3, #0
 800bec8:	61fb      	str	r3, [r7, #28]
 800beca:	e004      	b.n	800bed6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2200      	movs	r2, #0
 800bed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bed2:	2301      	movs	r3, #1
 800bed4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bed6:	f000 fe75 	bl	800cbc4 <vPortExitCritical>

	return xReturn;
 800beda:	69fb      	ldr	r3, [r7, #28]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3720      	adds	r7, #32
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	20001994 	.word	0x20001994
 800bee8:	200019a8 	.word	0x200019a8

0800beec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800beec:	b480      	push	{r7}
 800beee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bef0:	4b03      	ldr	r3, [pc, #12]	; (800bf00 <vTaskMissedYield+0x14>)
 800bef2:	2201      	movs	r2, #1
 800bef4:	601a      	str	r2, [r3, #0]
}
 800bef6:	bf00      	nop
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	200019a4 	.word	0x200019a4

0800bf04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf0c:	f000 f852 	bl	800bfb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf10:	4b06      	ldr	r3, [pc, #24]	; (800bf2c <prvIdleTask+0x28>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d9f9      	bls.n	800bf0c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <prvIdleTask+0x2c>)
 800bf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf28:	e7f0      	b.n	800bf0c <prvIdleTask+0x8>
 800bf2a:	bf00      	nop
 800bf2c:	200014c0 	.word	0x200014c0
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	607b      	str	r3, [r7, #4]
 800bf3e:	e00c      	b.n	800bf5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	4613      	mov	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4a12      	ldr	r2, [pc, #72]	; (800bf94 <prvInitialiseTaskLists+0x60>)
 800bf4c:	4413      	add	r3, r2
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fbb0 	bl	800a6b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3301      	adds	r3, #1
 800bf58:	607b      	str	r3, [r7, #4]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b37      	cmp	r3, #55	; 0x37
 800bf5e:	d9ef      	bls.n	800bf40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf60:	480d      	ldr	r0, [pc, #52]	; (800bf98 <prvInitialiseTaskLists+0x64>)
 800bf62:	f7fe fba7 	bl	800a6b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf66:	480d      	ldr	r0, [pc, #52]	; (800bf9c <prvInitialiseTaskLists+0x68>)
 800bf68:	f7fe fba4 	bl	800a6b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf6c:	480c      	ldr	r0, [pc, #48]	; (800bfa0 <prvInitialiseTaskLists+0x6c>)
 800bf6e:	f7fe fba1 	bl	800a6b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf72:	480c      	ldr	r0, [pc, #48]	; (800bfa4 <prvInitialiseTaskLists+0x70>)
 800bf74:	f7fe fb9e 	bl	800a6b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf78:	480b      	ldr	r0, [pc, #44]	; (800bfa8 <prvInitialiseTaskLists+0x74>)
 800bf7a:	f7fe fb9b 	bl	800a6b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf7e:	4b0b      	ldr	r3, [pc, #44]	; (800bfac <prvInitialiseTaskLists+0x78>)
 800bf80:	4a05      	ldr	r2, [pc, #20]	; (800bf98 <prvInitialiseTaskLists+0x64>)
 800bf82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf84:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <prvInitialiseTaskLists+0x7c>)
 800bf86:	4a05      	ldr	r2, [pc, #20]	; (800bf9c <prvInitialiseTaskLists+0x68>)
 800bf88:	601a      	str	r2, [r3, #0]
}
 800bf8a:	bf00      	nop
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	200014c0 	.word	0x200014c0
 800bf98:	20001920 	.word	0x20001920
 800bf9c:	20001934 	.word	0x20001934
 800bfa0:	20001950 	.word	0x20001950
 800bfa4:	20001964 	.word	0x20001964
 800bfa8:	2000197c 	.word	0x2000197c
 800bfac:	20001948 	.word	0x20001948
 800bfb0:	2000194c 	.word	0x2000194c

0800bfb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfba:	e019      	b.n	800bff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfbc:	f000 fdd2 	bl	800cb64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc0:	4b10      	ldr	r3, [pc, #64]	; (800c004 <prvCheckTasksWaitingTermination+0x50>)
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7fe fbfb 	bl	800a7c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfd2:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <prvCheckTasksWaitingTermination+0x54>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	4a0b      	ldr	r2, [pc, #44]	; (800c008 <prvCheckTasksWaitingTermination+0x54>)
 800bfda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfdc:	4b0b      	ldr	r3, [pc, #44]	; (800c00c <prvCheckTasksWaitingTermination+0x58>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	4a0a      	ldr	r2, [pc, #40]	; (800c00c <prvCheckTasksWaitingTermination+0x58>)
 800bfe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfe6:	f000 fded 	bl	800cbc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f810 	bl	800c010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bff0:	4b06      	ldr	r3, [pc, #24]	; (800c00c <prvCheckTasksWaitingTermination+0x58>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e1      	bne.n	800bfbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bff8:	bf00      	nop
 800bffa:	bf00      	nop
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	20001964 	.word	0x20001964
 800c008:	20001990 	.word	0x20001990
 800c00c:	20001978 	.word	0x20001978

0800c010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d108      	bne.n	800c034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c026:	4618      	mov	r0, r3
 800c028:	f000 ff8a 	bl	800cf40 <vPortFree>
				vPortFree( pxTCB );
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 ff87 	bl	800cf40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c032:	e018      	b.n	800c066 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d103      	bne.n	800c046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 ff7e 	bl	800cf40 <vPortFree>
	}
 800c044:	e00f      	b.n	800c066 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d00a      	beq.n	800c066 <prvDeleteTCB+0x56>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	60fb      	str	r3, [r7, #12]
}
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <prvDeleteTCB+0x54>
	}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <prvResetNextTaskUnblockTime+0x38>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <prvResetNextTaskUnblockTime+0x3c>)
 800c082:	f04f 32ff 	mov.w	r2, #4294967295
 800c086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c088:	e008      	b.n	800c09c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c08a:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <prvResetNextTaskUnblockTime+0x38>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	4a04      	ldr	r2, [pc, #16]	; (800c0ac <prvResetNextTaskUnblockTime+0x3c>)
 800c09a:	6013      	str	r3, [r2, #0]
}
 800c09c:	bf00      	nop
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	20001948 	.word	0x20001948
 800c0ac:	200019b0 	.word	0x200019b0

0800c0b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <xTaskGetSchedulerState+0x34>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d102      	bne.n	800c0c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	607b      	str	r3, [r7, #4]
 800c0c2:	e008      	b.n	800c0d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0c4:	4b08      	ldr	r3, [pc, #32]	; (800c0e8 <xTaskGetSchedulerState+0x38>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d102      	bne.n	800c0d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e001      	b.n	800c0d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0d6:	687b      	ldr	r3, [r7, #4]
	}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	2000199c 	.word	0x2000199c
 800c0e8:	200019b8 	.word	0x200019b8

0800c0ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d056      	beq.n	800c1b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c102:	4b2e      	ldr	r3, [pc, #184]	; (800c1bc <xTaskPriorityDisinherit+0xd0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d00a      	beq.n	800c122 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	60fb      	str	r3, [r7, #12]
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10a      	bne.n	800c140 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	60bb      	str	r3, [r7, #8]
}
 800c13c:	bf00      	nop
 800c13e:	e7fe      	b.n	800c13e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c144:	1e5a      	subs	r2, r3, #1
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c152:	429a      	cmp	r2, r3
 800c154:	d02c      	beq.n	800c1b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d128      	bne.n	800c1b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	3304      	adds	r3, #4
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fb30 	bl	800a7c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <xTaskPriorityDisinherit+0xd4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	429a      	cmp	r2, r3
 800c186:	d903      	bls.n	800c190 <xTaskPriorityDisinherit+0xa4>
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18c:	4a0c      	ldr	r2, [pc, #48]	; (800c1c0 <xTaskPriorityDisinherit+0xd4>)
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4a09      	ldr	r2, [pc, #36]	; (800c1c4 <xTaskPriorityDisinherit+0xd8>)
 800c19e:	441a      	add	r2, r3
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	f7fe fab1 	bl	800a70e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1b0:	697b      	ldr	r3, [r7, #20]
	}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200014bc 	.word	0x200014bc
 800c1c0:	20001998 	.word	0x20001998
 800c1c4:	200014c0 	.word	0x200014c0

0800c1c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1d2:	4b21      	ldr	r3, [pc, #132]	; (800c258 <prvAddCurrentTaskToDelayedList+0x90>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1d8:	4b20      	ldr	r3, [pc, #128]	; (800c25c <prvAddCurrentTaskToDelayedList+0x94>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe faf2 	bl	800a7c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ea:	d10a      	bne.n	800c202 <prvAddCurrentTaskToDelayedList+0x3a>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d007      	beq.n	800c202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1f2:	4b1a      	ldr	r3, [pc, #104]	; (800c25c <prvAddCurrentTaskToDelayedList+0x94>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4819      	ldr	r0, [pc, #100]	; (800c260 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1fc:	f7fe fa87 	bl	800a70e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c200:	e026      	b.n	800c250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4413      	add	r3, r2
 800c208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c20a:	4b14      	ldr	r3, [pc, #80]	; (800c25c <prvAddCurrentTaskToDelayedList+0x94>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	429a      	cmp	r2, r3
 800c218:	d209      	bcs.n	800c22e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c21a:	4b12      	ldr	r3, [pc, #72]	; (800c264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <prvAddCurrentTaskToDelayedList+0x94>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7fe fa95 	bl	800a756 <vListInsert>
}
 800c22c:	e010      	b.n	800c250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c22e:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b0a      	ldr	r3, [pc, #40]	; (800c25c <prvAddCurrentTaskToDelayedList+0x94>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3304      	adds	r3, #4
 800c238:	4619      	mov	r1, r3
 800c23a:	4610      	mov	r0, r2
 800c23c:	f7fe fa8b 	bl	800a756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	429a      	cmp	r2, r3
 800c248:	d202      	bcs.n	800c250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c24a:	4a08      	ldr	r2, [pc, #32]	; (800c26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	6013      	str	r3, [r2, #0]
}
 800c250:	bf00      	nop
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	20001994 	.word	0x20001994
 800c25c:	200014bc 	.word	0x200014bc
 800c260:	2000197c 	.word	0x2000197c
 800c264:	2000194c 	.word	0x2000194c
 800c268:	20001948 	.word	0x20001948
 800c26c:	200019b0 	.word	0x200019b0

0800c270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b08a      	sub	sp, #40	; 0x28
 800c274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c27a:	f000 fb07 	bl	800c88c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c27e:	4b1c      	ldr	r3, [pc, #112]	; (800c2f0 <xTimerCreateTimerTask+0x80>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d021      	beq.n	800c2ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c28e:	1d3a      	adds	r2, r7, #4
 800c290:	f107 0108 	add.w	r1, r7, #8
 800c294:	f107 030c 	add.w	r3, r7, #12
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fe f9f1 	bl	800a680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	9202      	str	r2, [sp, #8]
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	460a      	mov	r2, r1
 800c2b0:	4910      	ldr	r1, [pc, #64]	; (800c2f4 <xTimerCreateTimerTask+0x84>)
 800c2b2:	4811      	ldr	r0, [pc, #68]	; (800c2f8 <xTimerCreateTimerTask+0x88>)
 800c2b4:	f7fe ffd8 	bl	800b268 <xTaskCreateStatic>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	4a10      	ldr	r2, [pc, #64]	; (800c2fc <xTimerCreateTimerTask+0x8c>)
 800c2bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2be:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <xTimerCreateTimerTask+0x8c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10a      	bne.n	800c2e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	613b      	str	r3, [r7, #16]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c2e6:	697b      	ldr	r3, [r7, #20]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3718      	adds	r7, #24
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	200019ec 	.word	0x200019ec
 800c2f4:	0800e860 	.word	0x0800e860
 800c2f8:	0800c435 	.word	0x0800c435
 800c2fc:	200019f0 	.word	0x200019f0

0800c300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08a      	sub	sp, #40	; 0x28
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
 800c30c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c30e:	2300      	movs	r3, #0
 800c310:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10a      	bne.n	800c32e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	623b      	str	r3, [r7, #32]
}
 800c32a:	bf00      	nop
 800c32c:	e7fe      	b.n	800c32c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c32e:	4b1a      	ldr	r3, [pc, #104]	; (800c398 <xTimerGenericCommand+0x98>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d02a      	beq.n	800c38c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2b05      	cmp	r3, #5
 800c346:	dc18      	bgt.n	800c37a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c348:	f7ff feb2 	bl	800c0b0 <xTaskGetSchedulerState>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d109      	bne.n	800c366 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c352:	4b11      	ldr	r3, [pc, #68]	; (800c398 <xTimerGenericCommand+0x98>)
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	f107 0110 	add.w	r1, r7, #16
 800c35a:	2300      	movs	r3, #0
 800c35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35e:	f7fe fb9b 	bl	800aa98 <xQueueGenericSend>
 800c362:	6278      	str	r0, [r7, #36]	; 0x24
 800c364:	e012      	b.n	800c38c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c366:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <xTimerGenericCommand+0x98>)
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	f107 0110 	add.w	r1, r7, #16
 800c36e:	2300      	movs	r3, #0
 800c370:	2200      	movs	r2, #0
 800c372:	f7fe fb91 	bl	800aa98 <xQueueGenericSend>
 800c376:	6278      	str	r0, [r7, #36]	; 0x24
 800c378:	e008      	b.n	800c38c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c37a:	4b07      	ldr	r3, [pc, #28]	; (800c398 <xTimerGenericCommand+0x98>)
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	f107 0110 	add.w	r1, r7, #16
 800c382:	2300      	movs	r3, #0
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	f7fe fc85 	bl	800ac94 <xQueueGenericSendFromISR>
 800c38a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3728      	adds	r7, #40	; 0x28
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	200019ec 	.word	0x200019ec

0800c39c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b088      	sub	sp, #32
 800c3a0:	af02      	add	r7, sp, #8
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a6:	4b22      	ldr	r3, [pc, #136]	; (800c430 <prvProcessExpiredTimer+0x94>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fa07 	bl	800a7c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d022      	beq.n	800c40e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	699a      	ldr	r2, [r3, #24]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	18d1      	adds	r1, r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	6978      	ldr	r0, [r7, #20]
 800c3d6:	f000 f8d1 	bl	800c57c <prvInsertTimerInActiveList>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d01f      	beq.n	800c420 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	6978      	ldr	r0, [r7, #20]
 800c3ec:	f7ff ff88 	bl	800c300 <xTimerGenericCommand>
 800c3f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d113      	bne.n	800c420 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fc:	f383 8811 	msr	BASEPRI, r3
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	60fb      	str	r3, [r7, #12]
}
 800c40a:	bf00      	nop
 800c40c:	e7fe      	b.n	800c40c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c414:	f023 0301 	bic.w	r3, r3, #1
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	6978      	ldr	r0, [r7, #20]
 800c426:	4798      	blx	r3
}
 800c428:	bf00      	nop
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	200019e4 	.word	0x200019e4

0800c434 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c43c:	f107 0308 	add.w	r3, r7, #8
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f857 	bl	800c4f4 <prvGetNextExpireTime>
 800c446:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	4619      	mov	r1, r3
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f000 f803 	bl	800c458 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c452:	f000 f8d5 	bl	800c600 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c456:	e7f1      	b.n	800c43c <prvTimerTask+0x8>

0800c458 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c462:	f7ff fa43 	bl	800b8ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c466:	f107 0308 	add.w	r3, r7, #8
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 f866 	bl	800c53c <prvSampleTimeNow>
 800c470:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d130      	bne.n	800c4da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10a      	bne.n	800c494 <prvProcessTimerOrBlockTask+0x3c>
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	429a      	cmp	r2, r3
 800c484:	d806      	bhi.n	800c494 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c486:	f7ff fa3f 	bl	800b908 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c48a:	68f9      	ldr	r1, [r7, #12]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff ff85 	bl	800c39c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c492:	e024      	b.n	800c4de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d008      	beq.n	800c4ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c49a:	4b13      	ldr	r3, [pc, #76]	; (800c4e8 <prvProcessTimerOrBlockTask+0x90>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d101      	bne.n	800c4a8 <prvProcessTimerOrBlockTask+0x50>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e000      	b.n	800c4aa <prvProcessTimerOrBlockTask+0x52>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <prvProcessTimerOrBlockTask+0x94>)
 800c4ae:	6818      	ldr	r0, [r3, #0]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	f7fe fea1 	bl	800b200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4be:	f7ff fa23 	bl	800b908 <xTaskResumeAll>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10a      	bne.n	800c4de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4c8:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <prvProcessTimerOrBlockTask+0x98>)
 800c4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	f3bf 8f6f 	isb	sy
}
 800c4d8:	e001      	b.n	800c4de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4da:	f7ff fa15 	bl	800b908 <xTaskResumeAll>
}
 800c4de:	bf00      	nop
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	200019e8 	.word	0x200019e8
 800c4ec:	200019ec 	.word	0x200019ec
 800c4f0:	e000ed04 	.word	0xe000ed04

0800c4f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4fc:	4b0e      	ldr	r3, [pc, #56]	; (800c538 <prvGetNextExpireTime+0x44>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d101      	bne.n	800c50a <prvGetNextExpireTime+0x16>
 800c506:	2201      	movs	r2, #1
 800c508:	e000      	b.n	800c50c <prvGetNextExpireTime+0x18>
 800c50a:	2200      	movs	r2, #0
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d105      	bne.n	800c524 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c518:	4b07      	ldr	r3, [pc, #28]	; (800c538 <prvGetNextExpireTime+0x44>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	60fb      	str	r3, [r7, #12]
 800c522:	e001      	b.n	800c528 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c528:	68fb      	ldr	r3, [r7, #12]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	200019e4 	.word	0x200019e4

0800c53c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c544:	f7ff fa7e 	bl	800ba44 <xTaskGetTickCount>
 800c548:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c54a:	4b0b      	ldr	r3, [pc, #44]	; (800c578 <prvSampleTimeNow+0x3c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	429a      	cmp	r2, r3
 800c552:	d205      	bcs.n	800c560 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c554:	f000 f936 	bl	800c7c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	e002      	b.n	800c566 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c566:	4a04      	ldr	r2, [pc, #16]	; (800c578 <prvSampleTimeNow+0x3c>)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c56c:	68fb      	ldr	r3, [r7, #12]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	200019f4 	.word	0x200019f4

0800c57c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d812      	bhi.n	800c5c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	1ad2      	subs	r2, r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d302      	bcc.n	800c5b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	617b      	str	r3, [r7, #20]
 800c5b4:	e01b      	b.n	800c5ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5b6:	4b10      	ldr	r3, [pc, #64]	; (800c5f8 <prvInsertTimerInActiveList+0x7c>)
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3304      	adds	r3, #4
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f7fe f8c8 	bl	800a756 <vListInsert>
 800c5c6:	e012      	b.n	800c5ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d206      	bcs.n	800c5de <prvInsertTimerInActiveList+0x62>
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d302      	bcc.n	800c5de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	617b      	str	r3, [r7, #20]
 800c5dc:	e007      	b.n	800c5ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5de:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <prvInsertTimerInActiveList+0x80>)
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	f7fe f8b4 	bl	800a756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5ee:	697b      	ldr	r3, [r7, #20]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	200019e8 	.word	0x200019e8
 800c5fc:	200019e4 	.word	0x200019e4

0800c600 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08e      	sub	sp, #56	; 0x38
 800c604:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c606:	e0ca      	b.n	800c79e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	da18      	bge.n	800c640 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c60e:	1d3b      	adds	r3, r7, #4
 800c610:	3304      	adds	r3, #4
 800c612:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10a      	bne.n	800c630 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	61fb      	str	r3, [r7, #28]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c636:	6850      	ldr	r0, [r2, #4]
 800c638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c63a:	6892      	ldr	r2, [r2, #8]
 800c63c:	4611      	mov	r1, r2
 800c63e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f2c0 80aa 	blt.w	800c79c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64e:	695b      	ldr	r3, [r3, #20]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	3304      	adds	r3, #4
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fe f8b5 	bl	800a7c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c65e:	463b      	mov	r3, r7
 800c660:	4618      	mov	r0, r3
 800c662:	f7ff ff6b 	bl	800c53c <prvSampleTimeNow>
 800c666:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b09      	cmp	r3, #9
 800c66c:	f200 8097 	bhi.w	800c79e <prvProcessReceivedCommands+0x19e>
 800c670:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <prvProcessReceivedCommands+0x78>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c6a1 	.word	0x0800c6a1
 800c67c:	0800c6a1 	.word	0x0800c6a1
 800c680:	0800c6a1 	.word	0x0800c6a1
 800c684:	0800c715 	.word	0x0800c715
 800c688:	0800c729 	.word	0x0800c729
 800c68c:	0800c773 	.word	0x0800c773
 800c690:	0800c6a1 	.word	0x0800c6a1
 800c694:	0800c6a1 	.word	0x0800c6a1
 800c698:	0800c715 	.word	0x0800c715
 800c69c:	0800c729 	.word	0x0800c729
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6a6:	f043 0301 	orr.w	r3, r3, #1
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	18d1      	adds	r1, r2, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c0:	f7ff ff5c 	bl	800c57c <prvInsertTimerInActiveList>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d069      	beq.n	800c79e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	6a1b      	ldr	r3, [r3, #32]
 800c6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6d8:	f003 0304 	and.w	r3, r3, #4
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d05e      	beq.n	800c79e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	441a      	add	r2, r3
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f2:	f7ff fe05 	bl	800c300 <xTimerGenericCommand>
 800c6f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d14f      	bne.n	800c79e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	61bb      	str	r3, [r7, #24]
}
 800c710:	bf00      	nop
 800c712:	e7fe      	b.n	800c712 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c71a:	f023 0301 	bic.w	r3, r3, #1
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c726:	e03a      	b.n	800c79e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c72e:	f043 0301 	orr.w	r3, r3, #1
 800c732:	b2da      	uxtb	r2, r3
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10a      	bne.n	800c75e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	617b      	str	r3, [r7, #20]
}
 800c75a:	bf00      	nop
 800c75c:	e7fe      	b.n	800c75c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	699a      	ldr	r2, [r3, #24]
 800c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c764:	18d1      	adds	r1, r2, r3
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c76c:	f7ff ff06 	bl	800c57c <prvInsertTimerInActiveList>
					break;
 800c770:	e015      	b.n	800c79e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c778:	f003 0302 	and.w	r3, r3, #2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d103      	bne.n	800c788 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c782:	f000 fbdd 	bl	800cf40 <vPortFree>
 800c786:	e00a      	b.n	800c79e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c78e:	f023 0301 	bic.w	r3, r3, #1
 800c792:	b2da      	uxtb	r2, r3
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c79a:	e000      	b.n	800c79e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c79c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c79e:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <prvProcessReceivedCommands+0x1c0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	1d39      	adds	r1, r7, #4
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fb10 	bl	800adcc <xQueueReceive>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f47f af2a 	bne.w	800c608 <prvProcessReceivedCommands+0x8>
	}
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	3730      	adds	r7, #48	; 0x30
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	200019ec 	.word	0x200019ec

0800c7c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7ca:	e048      	b.n	800c85e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7cc:	4b2d      	ldr	r3, [pc, #180]	; (800c884 <prvSwitchTimerLists+0xc0>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d6:	4b2b      	ldr	r3, [pc, #172]	; (800c884 <prvSwitchTimerLists+0xc0>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fd ffef 	bl	800a7c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d02e      	beq.n	800c85e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	4413      	add	r3, r2
 800c808:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d90e      	bls.n	800c830 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c81e:	4b19      	ldr	r3, [pc, #100]	; (800c884 <prvSwitchTimerLists+0xc0>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3304      	adds	r3, #4
 800c826:	4619      	mov	r1, r3
 800c828:	4610      	mov	r0, r2
 800c82a:	f7fd ff94 	bl	800a756 <vListInsert>
 800c82e:	e016      	b.n	800c85e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c830:	2300      	movs	r3, #0
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	2300      	movs	r3, #0
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	2100      	movs	r1, #0
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff fd60 	bl	800c300 <xTimerGenericCommand>
 800c840:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10a      	bne.n	800c85e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	603b      	str	r3, [r7, #0]
}
 800c85a:	bf00      	nop
 800c85c:	e7fe      	b.n	800c85c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <prvSwitchTimerLists+0xc0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1b1      	bne.n	800c7cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c868:	4b06      	ldr	r3, [pc, #24]	; (800c884 <prvSwitchTimerLists+0xc0>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c86e:	4b06      	ldr	r3, [pc, #24]	; (800c888 <prvSwitchTimerLists+0xc4>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a04      	ldr	r2, [pc, #16]	; (800c884 <prvSwitchTimerLists+0xc0>)
 800c874:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c876:	4a04      	ldr	r2, [pc, #16]	; (800c888 <prvSwitchTimerLists+0xc4>)
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	6013      	str	r3, [r2, #0]
}
 800c87c:	bf00      	nop
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	200019e4 	.word	0x200019e4
 800c888:	200019e8 	.word	0x200019e8

0800c88c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c892:	f000 f967 	bl	800cb64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c896:	4b15      	ldr	r3, [pc, #84]	; (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d120      	bne.n	800c8e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c89e:	4814      	ldr	r0, [pc, #80]	; (800c8f0 <prvCheckForValidListAndQueue+0x64>)
 800c8a0:	f7fd ff08 	bl	800a6b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8a4:	4813      	ldr	r0, [pc, #76]	; (800c8f4 <prvCheckForValidListAndQueue+0x68>)
 800c8a6:	f7fd ff05 	bl	800a6b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8aa:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <prvCheckForValidListAndQueue+0x6c>)
 800c8ac:	4a10      	ldr	r2, [pc, #64]	; (800c8f0 <prvCheckForValidListAndQueue+0x64>)
 800c8ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8b0:	4b12      	ldr	r3, [pc, #72]	; (800c8fc <prvCheckForValidListAndQueue+0x70>)
 800c8b2:	4a10      	ldr	r2, [pc, #64]	; (800c8f4 <prvCheckForValidListAndQueue+0x68>)
 800c8b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	4b11      	ldr	r3, [pc, #68]	; (800c900 <prvCheckForValidListAndQueue+0x74>)
 800c8bc:	4a11      	ldr	r2, [pc, #68]	; (800c904 <prvCheckForValidListAndQueue+0x78>)
 800c8be:	2110      	movs	r1, #16
 800c8c0:	200a      	movs	r0, #10
 800c8c2:	f7fe f813 	bl	800a8ec <xQueueGenericCreateStatic>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	4a08      	ldr	r2, [pc, #32]	; (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c8ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8cc:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d005      	beq.n	800c8e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8d4:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <prvCheckForValidListAndQueue+0x60>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	490b      	ldr	r1, [pc, #44]	; (800c908 <prvCheckForValidListAndQueue+0x7c>)
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe fc66 	bl	800b1ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8e0:	f000 f970 	bl	800cbc4 <vPortExitCritical>
}
 800c8e4:	bf00      	nop
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	200019ec 	.word	0x200019ec
 800c8f0:	200019bc 	.word	0x200019bc
 800c8f4:	200019d0 	.word	0x200019d0
 800c8f8:	200019e4 	.word	0x200019e4
 800c8fc:	200019e8 	.word	0x200019e8
 800c900:	20001a98 	.word	0x20001a98
 800c904:	200019f8 	.word	0x200019f8
 800c908:	0800e868 	.word	0x0800e868

0800c90c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3b04      	subs	r3, #4
 800c91c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3b04      	subs	r3, #4
 800c92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f023 0201 	bic.w	r2, r3, #1
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3b04      	subs	r3, #4
 800c93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c93c:	4a0c      	ldr	r2, [pc, #48]	; (800c970 <pxPortInitialiseStack+0x64>)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3b14      	subs	r3, #20
 800c946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3b04      	subs	r3, #4
 800c952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f06f 0202 	mvn.w	r2, #2
 800c95a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3b20      	subs	r3, #32
 800c960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c962:	68fb      	ldr	r3, [r7, #12]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	0800c975 	.word	0x0800c975

0800c974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c97e:	4b12      	ldr	r3, [pc, #72]	; (800c9c8 <prvTaskExitError+0x54>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c986:	d00a      	beq.n	800c99e <prvTaskExitError+0x2a>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	60fb      	str	r3, [r7, #12]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <prvTaskExitError+0x28>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	60bb      	str	r3, [r7, #8]
}
 800c9b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9b2:	bf00      	nop
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d0fc      	beq.n	800c9b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9ba:	bf00      	nop
 800c9bc:	bf00      	nop
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	200004b4 	.word	0x200004b4
 800c9cc:	00000000 	.word	0x00000000

0800c9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9d0:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <pxCurrentTCBConst2>)
 800c9d2:	6819      	ldr	r1, [r3, #0]
 800c9d4:	6808      	ldr	r0, [r1, #0]
 800c9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9da:	f380 8809 	msr	PSP, r0
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f04f 0000 	mov.w	r0, #0
 800c9e6:	f380 8811 	msr	BASEPRI, r0
 800c9ea:	4770      	bx	lr
 800c9ec:	f3af 8000 	nop.w

0800c9f0 <pxCurrentTCBConst2>:
 800c9f0:	200014bc 	.word	0x200014bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop

0800c9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c9f8:	4808      	ldr	r0, [pc, #32]	; (800ca1c <prvPortStartFirstTask+0x24>)
 800c9fa:	6800      	ldr	r0, [r0, #0]
 800c9fc:	6800      	ldr	r0, [r0, #0]
 800c9fe:	f380 8808 	msr	MSP, r0
 800ca02:	f04f 0000 	mov.w	r0, #0
 800ca06:	f380 8814 	msr	CONTROL, r0
 800ca0a:	b662      	cpsie	i
 800ca0c:	b661      	cpsie	f
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	df00      	svc	0
 800ca18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca1a:	bf00      	nop
 800ca1c:	e000ed08 	.word	0xe000ed08

0800ca20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca26:	4b46      	ldr	r3, [pc, #280]	; (800cb40 <xPortStartScheduler+0x120>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a46      	ldr	r2, [pc, #280]	; (800cb44 <xPortStartScheduler+0x124>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d10a      	bne.n	800ca46 <xPortStartScheduler+0x26>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	613b      	str	r3, [r7, #16]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca46:	4b3e      	ldr	r3, [pc, #248]	; (800cb40 <xPortStartScheduler+0x120>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a3f      	ldr	r2, [pc, #252]	; (800cb48 <xPortStartScheduler+0x128>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d10a      	bne.n	800ca66 <xPortStartScheduler+0x46>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	60fb      	str	r3, [r7, #12]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca66:	4b39      	ldr	r3, [pc, #228]	; (800cb4c <xPortStartScheduler+0x12c>)
 800ca68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	22ff      	movs	r2, #255	; 0xff
 800ca76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca80:	78fb      	ldrb	r3, [r7, #3]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	4b31      	ldr	r3, [pc, #196]	; (800cb50 <xPortStartScheduler+0x130>)
 800ca8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca8e:	4b31      	ldr	r3, [pc, #196]	; (800cb54 <xPortStartScheduler+0x134>)
 800ca90:	2207      	movs	r2, #7
 800ca92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca94:	e009      	b.n	800caaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ca96:	4b2f      	ldr	r3, [pc, #188]	; (800cb54 <xPortStartScheduler+0x134>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	4a2d      	ldr	r2, [pc, #180]	; (800cb54 <xPortStartScheduler+0x134>)
 800ca9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800caa0:	78fb      	ldrb	r3, [r7, #3]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caaa:	78fb      	ldrb	r3, [r7, #3]
 800caac:	b2db      	uxtb	r3, r3
 800caae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cab2:	2b80      	cmp	r3, #128	; 0x80
 800cab4:	d0ef      	beq.n	800ca96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cab6:	4b27      	ldr	r3, [pc, #156]	; (800cb54 <xPortStartScheduler+0x134>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f1c3 0307 	rsb	r3, r3, #7
 800cabe:	2b04      	cmp	r3, #4
 800cac0:	d00a      	beq.n	800cad8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	60bb      	str	r3, [r7, #8]
}
 800cad4:	bf00      	nop
 800cad6:	e7fe      	b.n	800cad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cad8:	4b1e      	ldr	r3, [pc, #120]	; (800cb54 <xPortStartScheduler+0x134>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	021b      	lsls	r3, r3, #8
 800cade:	4a1d      	ldr	r2, [pc, #116]	; (800cb54 <xPortStartScheduler+0x134>)
 800cae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cae2:	4b1c      	ldr	r3, [pc, #112]	; (800cb54 <xPortStartScheduler+0x134>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800caea:	4a1a      	ldr	r2, [pc, #104]	; (800cb54 <xPortStartScheduler+0x134>)
 800caec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800caf6:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <xPortStartScheduler+0x138>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a17      	ldr	r2, [pc, #92]	; (800cb58 <xPortStartScheduler+0x138>)
 800cafc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb02:	4b15      	ldr	r3, [pc, #84]	; (800cb58 <xPortStartScheduler+0x138>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a14      	ldr	r2, [pc, #80]	; (800cb58 <xPortStartScheduler+0x138>)
 800cb08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb0e:	f000 f8dd 	bl	800cccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb12:	4b12      	ldr	r3, [pc, #72]	; (800cb5c <xPortStartScheduler+0x13c>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb18:	f000 f8fc 	bl	800cd14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb1c:	4b10      	ldr	r3, [pc, #64]	; (800cb60 <xPortStartScheduler+0x140>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a0f      	ldr	r2, [pc, #60]	; (800cb60 <xPortStartScheduler+0x140>)
 800cb22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb28:	f7ff ff66 	bl	800c9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb2c:	f7ff f854 	bl	800bbd8 <vTaskSwitchContext>
	prvTaskExitError();
 800cb30:	f7ff ff20 	bl	800c974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3718      	adds	r7, #24
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	e000ed00 	.word	0xe000ed00
 800cb44:	410fc271 	.word	0x410fc271
 800cb48:	410fc270 	.word	0x410fc270
 800cb4c:	e000e400 	.word	0xe000e400
 800cb50:	20001ae8 	.word	0x20001ae8
 800cb54:	20001aec 	.word	0x20001aec
 800cb58:	e000ed20 	.word	0xe000ed20
 800cb5c:	200004b4 	.word	0x200004b4
 800cb60:	e000ef34 	.word	0xe000ef34

0800cb64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	607b      	str	r3, [r7, #4]
}
 800cb7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb7e:	4b0f      	ldr	r3, [pc, #60]	; (800cbbc <vPortEnterCritical+0x58>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	3301      	adds	r3, #1
 800cb84:	4a0d      	ldr	r2, [pc, #52]	; (800cbbc <vPortEnterCritical+0x58>)
 800cb86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb88:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <vPortEnterCritical+0x58>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d10f      	bne.n	800cbb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb90:	4b0b      	ldr	r3, [pc, #44]	; (800cbc0 <vPortEnterCritical+0x5c>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00a      	beq.n	800cbb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	603b      	str	r3, [r7, #0]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <vPortEnterCritical+0x4a>
	}
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	200004b4 	.word	0x200004b4
 800cbc0:	e000ed04 	.word	0xe000ed04

0800cbc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbca:	4b12      	ldr	r3, [pc, #72]	; (800cc14 <vPortExitCritical+0x50>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10a      	bne.n	800cbe8 <vPortExitCritical+0x24>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	607b      	str	r3, [r7, #4]
}
 800cbe4:	bf00      	nop
 800cbe6:	e7fe      	b.n	800cbe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	; (800cc14 <vPortExitCritical+0x50>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3b01      	subs	r3, #1
 800cbee:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <vPortExitCritical+0x50>)
 800cbf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbf2:	4b08      	ldr	r3, [pc, #32]	; (800cc14 <vPortExitCritical+0x50>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d105      	bne.n	800cc06 <vPortExitCritical+0x42>
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	f383 8811 	msr	BASEPRI, r3
}
 800cc04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc06:	bf00      	nop
 800cc08:	370c      	adds	r7, #12
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	200004b4 	.word	0x200004b4
	...

0800cc20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc20:	f3ef 8009 	mrs	r0, PSP
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <pxCurrentTCBConst>)
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	f01e 0f10 	tst.w	lr, #16
 800cc30:	bf08      	it	eq
 800cc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3a:	6010      	str	r0, [r2, #0]
 800cc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc44:	f380 8811 	msr	BASEPRI, r0
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f7fe ffc2 	bl	800bbd8 <vTaskSwitchContext>
 800cc54:	f04f 0000 	mov.w	r0, #0
 800cc58:	f380 8811 	msr	BASEPRI, r0
 800cc5c:	bc09      	pop	{r0, r3}
 800cc5e:	6819      	ldr	r1, [r3, #0]
 800cc60:	6808      	ldr	r0, [r1, #0]
 800cc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc66:	f01e 0f10 	tst.w	lr, #16
 800cc6a:	bf08      	it	eq
 800cc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc70:	f380 8809 	msr	PSP, r0
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	f3af 8000 	nop.w

0800cc80 <pxCurrentTCBConst>:
 800cc80:	200014bc 	.word	0x200014bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc84:	bf00      	nop
 800cc86:	bf00      	nop

0800cc88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	607b      	str	r3, [r7, #4]
}
 800cca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cca2:	f7fe fedf 	bl	800ba64 <xTaskIncrementTick>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccac:	4b06      	ldr	r3, [pc, #24]	; (800ccc8 <xPortSysTickHandler+0x40>)
 800ccae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccb2:	601a      	str	r2, [r3, #0]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	f383 8811 	msr	BASEPRI, r3
}
 800ccbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	e000ed04 	.word	0xe000ed04

0800cccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cccc:	b480      	push	{r7}
 800ccce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <vPortSetupTimerInterrupt+0x34>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ccd6:	4b0b      	ldr	r3, [pc, #44]	; (800cd04 <vPortSetupTimerInterrupt+0x38>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccdc:	4b0a      	ldr	r3, [pc, #40]	; (800cd08 <vPortSetupTimerInterrupt+0x3c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a0a      	ldr	r2, [pc, #40]	; (800cd0c <vPortSetupTimerInterrupt+0x40>)
 800cce2:	fba2 2303 	umull	r2, r3, r2, r3
 800cce6:	099b      	lsrs	r3, r3, #6
 800cce8:	4a09      	ldr	r2, [pc, #36]	; (800cd10 <vPortSetupTimerInterrupt+0x44>)
 800ccea:	3b01      	subs	r3, #1
 800ccec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccee:	4b04      	ldr	r3, [pc, #16]	; (800cd00 <vPortSetupTimerInterrupt+0x34>)
 800ccf0:	2207      	movs	r2, #7
 800ccf2:	601a      	str	r2, [r3, #0]
}
 800ccf4:	bf00      	nop
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	e000e010 	.word	0xe000e010
 800cd04:	e000e018 	.word	0xe000e018
 800cd08:	2000041c 	.word	0x2000041c
 800cd0c:	10624dd3 	.word	0x10624dd3
 800cd10:	e000e014 	.word	0xe000e014

0800cd14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd24 <vPortEnableVFP+0x10>
 800cd18:	6801      	ldr	r1, [r0, #0]
 800cd1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd1e:	6001      	str	r1, [r0, #0]
 800cd20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd22:	bf00      	nop
 800cd24:	e000ed88 	.word	0xe000ed88

0800cd28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd2e:	f3ef 8305 	mrs	r3, IPSR
 800cd32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b0f      	cmp	r3, #15
 800cd38:	d914      	bls.n	800cd64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd3a:	4a17      	ldr	r2, [pc, #92]	; (800cd98 <vPortValidateInterruptPriority+0x70>)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	4413      	add	r3, r2
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd44:	4b15      	ldr	r3, [pc, #84]	; (800cd9c <vPortValidateInterruptPriority+0x74>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	7afa      	ldrb	r2, [r7, #11]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d20a      	bcs.n	800cd64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	607b      	str	r3, [r7, #4]
}
 800cd60:	bf00      	nop
 800cd62:	e7fe      	b.n	800cd62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd64:	4b0e      	ldr	r3, [pc, #56]	; (800cda0 <vPortValidateInterruptPriority+0x78>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <vPortValidateInterruptPriority+0x7c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d90a      	bls.n	800cd8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	603b      	str	r3, [r7, #0]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <vPortValidateInterruptPriority+0x60>
	}
 800cd8a:	bf00      	nop
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	e000e3f0 	.word	0xe000e3f0
 800cd9c:	20001ae8 	.word	0x20001ae8
 800cda0:	e000ed0c 	.word	0xe000ed0c
 800cda4:	20001aec 	.word	0x20001aec

0800cda8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	; 0x28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdb4:	f7fe fd9a 	bl	800b8ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdb8:	4b5b      	ldr	r3, [pc, #364]	; (800cf28 <pvPortMalloc+0x180>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cdc0:	f000 f920 	bl	800d004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cdc4:	4b59      	ldr	r3, [pc, #356]	; (800cf2c <pvPortMalloc+0x184>)
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f040 8093 	bne.w	800cef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d01d      	beq.n	800ce14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cdd8:	2208      	movs	r2, #8
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4413      	add	r3, r2
 800cdde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d014      	beq.n	800ce14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f023 0307 	bic.w	r3, r3, #7
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00a      	beq.n	800ce14 <pvPortMalloc+0x6c>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	617b      	str	r3, [r7, #20]
}
 800ce10:	bf00      	nop
 800ce12:	e7fe      	b.n	800ce12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d06e      	beq.n	800cef8 <pvPortMalloc+0x150>
 800ce1a:	4b45      	ldr	r3, [pc, #276]	; (800cf30 <pvPortMalloc+0x188>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d869      	bhi.n	800cef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce24:	4b43      	ldr	r3, [pc, #268]	; (800cf34 <pvPortMalloc+0x18c>)
 800ce26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce28:	4b42      	ldr	r3, [pc, #264]	; (800cf34 <pvPortMalloc+0x18c>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce2e:	e004      	b.n	800ce3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d903      	bls.n	800ce4c <pvPortMalloc+0xa4>
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1f1      	bne.n	800ce30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce4c:	4b36      	ldr	r3, [pc, #216]	; (800cf28 <pvPortMalloc+0x180>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d050      	beq.n	800cef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2208      	movs	r2, #8
 800ce5c:	4413      	add	r3, r2
 800ce5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	685a      	ldr	r2, [r3, #4]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	1ad2      	subs	r2, r2, r3
 800ce70:	2308      	movs	r3, #8
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d91f      	bls.n	800ceb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00a      	beq.n	800cea0 <pvPortMalloc+0xf8>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	613b      	str	r3, [r7, #16]
}
 800ce9c:	bf00      	nop
 800ce9e:	e7fe      	b.n	800ce9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	1ad2      	subs	r2, r2, r3
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ceac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ceb2:	69b8      	ldr	r0, [r7, #24]
 800ceb4:	f000 f908 	bl	800d0c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ceb8:	4b1d      	ldr	r3, [pc, #116]	; (800cf30 <pvPortMalloc+0x188>)
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	4a1b      	ldr	r2, [pc, #108]	; (800cf30 <pvPortMalloc+0x188>)
 800cec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cec6:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <pvPortMalloc+0x188>)
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	4b1b      	ldr	r3, [pc, #108]	; (800cf38 <pvPortMalloc+0x190>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d203      	bcs.n	800ceda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ced2:	4b17      	ldr	r3, [pc, #92]	; (800cf30 <pvPortMalloc+0x188>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a18      	ldr	r2, [pc, #96]	; (800cf38 <pvPortMalloc+0x190>)
 800ced8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ceda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	4b13      	ldr	r3, [pc, #76]	; (800cf2c <pvPortMalloc+0x184>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	431a      	orrs	r2, r3
 800cee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	2200      	movs	r2, #0
 800ceec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ceee:	4b13      	ldr	r3, [pc, #76]	; (800cf3c <pvPortMalloc+0x194>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3301      	adds	r3, #1
 800cef4:	4a11      	ldr	r2, [pc, #68]	; (800cf3c <pvPortMalloc+0x194>)
 800cef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cef8:	f7fe fd06 	bl	800b908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	f003 0307 	and.w	r3, r3, #7
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <pvPortMalloc+0x174>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	60fb      	str	r3, [r7, #12]
}
 800cf18:	bf00      	nop
 800cf1a:	e7fe      	b.n	800cf1a <pvPortMalloc+0x172>
	return pvReturn;
 800cf1c:	69fb      	ldr	r3, [r7, #28]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3728      	adds	r7, #40	; 0x28
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	200056f8 	.word	0x200056f8
 800cf2c:	2000570c 	.word	0x2000570c
 800cf30:	200056fc 	.word	0x200056fc
 800cf34:	200056f0 	.word	0x200056f0
 800cf38:	20005700 	.word	0x20005700
 800cf3c:	20005704 	.word	0x20005704

0800cf40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d04d      	beq.n	800cfee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf52:	2308      	movs	r3, #8
 800cf54:	425b      	negs	r3, r3
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	4413      	add	r3, r2
 800cf5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	685a      	ldr	r2, [r3, #4]
 800cf64:	4b24      	ldr	r3, [pc, #144]	; (800cff8 <vPortFree+0xb8>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4013      	ands	r3, r2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10a      	bne.n	800cf84 <vPortFree+0x44>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	60fb      	str	r3, [r7, #12]
}
 800cf80:	bf00      	nop
 800cf82:	e7fe      	b.n	800cf82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <vPortFree+0x62>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	60bb      	str	r3, [r7, #8]
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <vPortFree+0xb8>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d01e      	beq.n	800cfee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d11a      	bne.n	800cfee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	685a      	ldr	r2, [r3, #4]
 800cfbc:	4b0e      	ldr	r3, [pc, #56]	; (800cff8 <vPortFree+0xb8>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	43db      	mvns	r3, r3
 800cfc2:	401a      	ands	r2, r3
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfc8:	f7fe fc90 	bl	800b8ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <vPortFree+0xbc>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	4a09      	ldr	r2, [pc, #36]	; (800cffc <vPortFree+0xbc>)
 800cfd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cfda:	6938      	ldr	r0, [r7, #16]
 800cfdc:	f000 f874 	bl	800d0c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cfe0:	4b07      	ldr	r3, [pc, #28]	; (800d000 <vPortFree+0xc0>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	4a06      	ldr	r2, [pc, #24]	; (800d000 <vPortFree+0xc0>)
 800cfe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cfea:	f7fe fc8d 	bl	800b908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cfee:	bf00      	nop
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	2000570c 	.word	0x2000570c
 800cffc:	200056fc 	.word	0x200056fc
 800d000:	20005708 	.word	0x20005708

0800d004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d00a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d00e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d010:	4b27      	ldr	r3, [pc, #156]	; (800d0b0 <prvHeapInit+0xac>)
 800d012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f003 0307 	and.w	r3, r3, #7
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00c      	beq.n	800d038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3307      	adds	r3, #7
 800d022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f023 0307 	bic.w	r3, r3, #7
 800d02a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	4a1f      	ldr	r2, [pc, #124]	; (800d0b0 <prvHeapInit+0xac>)
 800d034:	4413      	add	r3, r2
 800d036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d03c:	4a1d      	ldr	r2, [pc, #116]	; (800d0b4 <prvHeapInit+0xb0>)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d042:	4b1c      	ldr	r3, [pc, #112]	; (800d0b4 <prvHeapInit+0xb0>)
 800d044:	2200      	movs	r2, #0
 800d046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	4413      	add	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d050:	2208      	movs	r2, #8
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	1a9b      	subs	r3, r3, r2
 800d056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f023 0307 	bic.w	r3, r3, #7
 800d05e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	4a15      	ldr	r2, [pc, #84]	; (800d0b8 <prvHeapInit+0xb4>)
 800d064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d066:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <prvHeapInit+0xb4>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2200      	movs	r2, #0
 800d06c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d06e:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <prvHeapInit+0xb4>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2200      	movs	r2, #0
 800d074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	1ad2      	subs	r2, r2, r3
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d084:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <prvHeapInit+0xb4>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	4a0a      	ldr	r2, [pc, #40]	; (800d0bc <prvHeapInit+0xb8>)
 800d092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	4a09      	ldr	r2, [pc, #36]	; (800d0c0 <prvHeapInit+0xbc>)
 800d09a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d09c:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <prvHeapInit+0xc0>)
 800d09e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0a2:	601a      	str	r2, [r3, #0]
}
 800d0a4:	bf00      	nop
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	20001af0 	.word	0x20001af0
 800d0b4:	200056f0 	.word	0x200056f0
 800d0b8:	200056f8 	.word	0x200056f8
 800d0bc:	20005700 	.word	0x20005700
 800d0c0:	200056fc 	.word	0x200056fc
 800d0c4:	2000570c 	.word	0x2000570c

0800d0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0d0:	4b28      	ldr	r3, [pc, #160]	; (800d174 <prvInsertBlockIntoFreeList+0xac>)
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	e002      	b.n	800d0dc <prvInsertBlockIntoFreeList+0x14>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d8f7      	bhi.n	800d0d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d108      	bne.n	800d10a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	441a      	add	r2, r3
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	441a      	add	r2, r3
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d118      	bne.n	800d150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	4b15      	ldr	r3, [pc, #84]	; (800d178 <prvInsertBlockIntoFreeList+0xb0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	429a      	cmp	r2, r3
 800d128:	d00d      	beq.n	800d146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	441a      	add	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	e008      	b.n	800d158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d146:	4b0c      	ldr	r3, [pc, #48]	; (800d178 <prvInsertBlockIntoFreeList+0xb0>)
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	e003      	b.n	800d158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d002      	beq.n	800d166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d166:	bf00      	nop
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	200056f0 	.word	0x200056f0
 800d178:	200056f8 	.word	0x200056f8

0800d17c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d180:	2200      	movs	r2, #0
 800d182:	4912      	ldr	r1, [pc, #72]	; (800d1cc <MX_USB_DEVICE_Init+0x50>)
 800d184:	4812      	ldr	r0, [pc, #72]	; (800d1d0 <MX_USB_DEVICE_Init+0x54>)
 800d186:	f7fb fdbf 	bl	8008d08 <USBD_Init>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d190:	f7f4 fcf0 	bl	8001b74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d194:	490f      	ldr	r1, [pc, #60]	; (800d1d4 <MX_USB_DEVICE_Init+0x58>)
 800d196:	480e      	ldr	r0, [pc, #56]	; (800d1d0 <MX_USB_DEVICE_Init+0x54>)
 800d198:	f7fb fde6 	bl	8008d68 <USBD_RegisterClass>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d1a2:	f7f4 fce7 	bl	8001b74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d1a6:	490c      	ldr	r1, [pc, #48]	; (800d1d8 <MX_USB_DEVICE_Init+0x5c>)
 800d1a8:	4809      	ldr	r0, [pc, #36]	; (800d1d0 <MX_USB_DEVICE_Init+0x54>)
 800d1aa:	f7fb fcd7 	bl	8008b5c <USBD_CDC_RegisterInterface>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d1b4:	f7f4 fcde 	bl	8001b74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1b8:	4805      	ldr	r0, [pc, #20]	; (800d1d0 <MX_USB_DEVICE_Init+0x54>)
 800d1ba:	f7fb fe0b 	bl	8008dd4 <USBD_Start>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d1c4:	f7f4 fcd6 	bl	8001b74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1c8:	bf00      	nop
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	200004cc 	.word	0x200004cc
 800d1d0:	20005710 	.word	0x20005710
 800d1d4:	20000434 	.word	0x20000434
 800d1d8:	200004b8 	.word	0x200004b8

0800d1dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	4905      	ldr	r1, [pc, #20]	; (800d1f8 <CDC_Init_FS+0x1c>)
 800d1e4:	4805      	ldr	r0, [pc, #20]	; (800d1fc <CDC_Init_FS+0x20>)
 800d1e6:	f7fb fcd3 	bl	8008b90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d1ea:	4905      	ldr	r1, [pc, #20]	; (800d200 <CDC_Init_FS+0x24>)
 800d1ec:	4803      	ldr	r0, [pc, #12]	; (800d1fc <CDC_Init_FS+0x20>)
 800d1ee:	f7fb fcf1 	bl	8008bd4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d1f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	20005dec 	.word	0x20005dec
 800d1fc:	20005710 	.word	0x20005710
 800d200:	200059ec 	.word	0x200059ec

0800d204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d204:	b480      	push	{r7}
 800d206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	6039      	str	r1, [r7, #0]
 800d21e:	71fb      	strb	r3, [r7, #7]
 800d220:	4613      	mov	r3, r2
 800d222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d224:	79fb      	ldrb	r3, [r7, #7]
 800d226:	2b23      	cmp	r3, #35	; 0x23
 800d228:	d84a      	bhi.n	800d2c0 <CDC_Control_FS+0xac>
 800d22a:	a201      	add	r2, pc, #4	; (adr r2, 800d230 <CDC_Control_FS+0x1c>)
 800d22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d230:	0800d2c1 	.word	0x0800d2c1
 800d234:	0800d2c1 	.word	0x0800d2c1
 800d238:	0800d2c1 	.word	0x0800d2c1
 800d23c:	0800d2c1 	.word	0x0800d2c1
 800d240:	0800d2c1 	.word	0x0800d2c1
 800d244:	0800d2c1 	.word	0x0800d2c1
 800d248:	0800d2c1 	.word	0x0800d2c1
 800d24c:	0800d2c1 	.word	0x0800d2c1
 800d250:	0800d2c1 	.word	0x0800d2c1
 800d254:	0800d2c1 	.word	0x0800d2c1
 800d258:	0800d2c1 	.word	0x0800d2c1
 800d25c:	0800d2c1 	.word	0x0800d2c1
 800d260:	0800d2c1 	.word	0x0800d2c1
 800d264:	0800d2c1 	.word	0x0800d2c1
 800d268:	0800d2c1 	.word	0x0800d2c1
 800d26c:	0800d2c1 	.word	0x0800d2c1
 800d270:	0800d2c1 	.word	0x0800d2c1
 800d274:	0800d2c1 	.word	0x0800d2c1
 800d278:	0800d2c1 	.word	0x0800d2c1
 800d27c:	0800d2c1 	.word	0x0800d2c1
 800d280:	0800d2c1 	.word	0x0800d2c1
 800d284:	0800d2c1 	.word	0x0800d2c1
 800d288:	0800d2c1 	.word	0x0800d2c1
 800d28c:	0800d2c1 	.word	0x0800d2c1
 800d290:	0800d2c1 	.word	0x0800d2c1
 800d294:	0800d2c1 	.word	0x0800d2c1
 800d298:	0800d2c1 	.word	0x0800d2c1
 800d29c:	0800d2c1 	.word	0x0800d2c1
 800d2a0:	0800d2c1 	.word	0x0800d2c1
 800d2a4:	0800d2c1 	.word	0x0800d2c1
 800d2a8:	0800d2c1 	.word	0x0800d2c1
 800d2ac:	0800d2c1 	.word	0x0800d2c1
 800d2b0:	0800d2c1 	.word	0x0800d2c1
 800d2b4:	0800d2c1 	.word	0x0800d2c1
 800d2b8:	0800d2c1 	.word	0x0800d2c1
 800d2bc:	0800d2c1 	.word	0x0800d2c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2c0:	bf00      	nop
  }

  return (USBD_OK);
 800d2c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	4805      	ldr	r0, [pc, #20]	; (800d2f4 <CDC_Receive_FS+0x24>)
 800d2de:	f7fb fc79 	bl	8008bd4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d2e2:	4804      	ldr	r0, [pc, #16]	; (800d2f4 <CDC_Receive_FS+0x24>)
 800d2e4:	f7fb fcda 	bl	8008c9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d2e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20005710 	.word	0x20005710

0800d2f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	460b      	mov	r3, r1
 800d302:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d308:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <CDC_Transmit_FS+0x48>)
 800d30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d30e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e00b      	b.n	800d336 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d31e:	887b      	ldrh	r3, [r7, #2]
 800d320:	461a      	mov	r2, r3
 800d322:	6879      	ldr	r1, [r7, #4]
 800d324:	4806      	ldr	r0, [pc, #24]	; (800d340 <CDC_Transmit_FS+0x48>)
 800d326:	f7fb fc33 	bl	8008b90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d32a:	4805      	ldr	r0, [pc, #20]	; (800d340 <CDC_Transmit_FS+0x48>)
 800d32c:	f7fb fc70 	bl	8008c10 <USBD_CDC_TransmitPacket>
 800d330:	4603      	mov	r3, r0
 800d332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d334:	7bfb      	ldrb	r3, [r7, #15]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20005710 	.word	0x20005710

0800d344 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	4613      	mov	r3, r2
 800d350:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d356:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	371c      	adds	r7, #28
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
	...

0800d368 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	4603      	mov	r3, r0
 800d370:	6039      	str	r1, [r7, #0]
 800d372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	2212      	movs	r2, #18
 800d378:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d37a:	4b03      	ldr	r3, [pc, #12]	; (800d388 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr
 800d388:	200004e8 	.word	0x200004e8

0800d38c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	4603      	mov	r3, r0
 800d394:	6039      	str	r1, [r7, #0]
 800d396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	2204      	movs	r2, #4
 800d39c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d39e:	4b03      	ldr	r3, [pc, #12]	; (800d3ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	200004fc 	.word	0x200004fc

0800d3b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	6039      	str	r1, [r7, #0]
 800d3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3bc:	79fb      	ldrb	r3, [r7, #7]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d105      	bne.n	800d3ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	4907      	ldr	r1, [pc, #28]	; (800d3e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3c6:	4808      	ldr	r0, [pc, #32]	; (800d3e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d3c8:	f7fc feb0 	bl	800a12c <USBD_GetString>
 800d3cc:	e004      	b.n	800d3d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	4904      	ldr	r1, [pc, #16]	; (800d3e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3d2:	4805      	ldr	r0, [pc, #20]	; (800d3e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d3d4:	f7fc feaa 	bl	800a12c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3d8:	4b02      	ldr	r3, [pc, #8]	; (800d3e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	200061ec 	.word	0x200061ec
 800d3e8:	0800e870 	.word	0x0800e870

0800d3ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	6039      	str	r1, [r7, #0]
 800d3f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d3f8:	683a      	ldr	r2, [r7, #0]
 800d3fa:	4904      	ldr	r1, [pc, #16]	; (800d40c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d3fc:	4804      	ldr	r0, [pc, #16]	; (800d410 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d3fe:	f7fc fe95 	bl	800a12c <USBD_GetString>
  return USBD_StrDesc;
 800d402:	4b02      	ldr	r3, [pc, #8]	; (800d40c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	200061ec 	.word	0x200061ec
 800d410:	0800e888 	.word	0x0800e888

0800d414 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	4603      	mov	r3, r0
 800d41c:	6039      	str	r1, [r7, #0]
 800d41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	221a      	movs	r2, #26
 800d424:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d426:	f000 f843 	bl	800d4b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d42a:	4b02      	ldr	r3, [pc, #8]	; (800d434 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	20000500 	.word	0x20000500

0800d438 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	4603      	mov	r3, r0
 800d440:	6039      	str	r1, [r7, #0]
 800d442:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d444:	79fb      	ldrb	r3, [r7, #7]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d105      	bne.n	800d456 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	4907      	ldr	r1, [pc, #28]	; (800d46c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d44e:	4808      	ldr	r0, [pc, #32]	; (800d470 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d450:	f7fc fe6c 	bl	800a12c <USBD_GetString>
 800d454:	e004      	b.n	800d460 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	4904      	ldr	r1, [pc, #16]	; (800d46c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d45a:	4805      	ldr	r0, [pc, #20]	; (800d470 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d45c:	f7fc fe66 	bl	800a12c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d460:	4b02      	ldr	r3, [pc, #8]	; (800d46c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d462:	4618      	mov	r0, r3
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	200061ec 	.word	0x200061ec
 800d470:	0800e89c 	.word	0x0800e89c

0800d474 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	6039      	str	r1, [r7, #0]
 800d47e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d480:	79fb      	ldrb	r3, [r7, #7]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	4907      	ldr	r1, [pc, #28]	; (800d4a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d48a:	4808      	ldr	r0, [pc, #32]	; (800d4ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d48c:	f7fc fe4e 	bl	800a12c <USBD_GetString>
 800d490:	e004      	b.n	800d49c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	4904      	ldr	r1, [pc, #16]	; (800d4a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d496:	4805      	ldr	r0, [pc, #20]	; (800d4ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d498:	f7fc fe48 	bl	800a12c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d49c:	4b02      	ldr	r3, [pc, #8]	; (800d4a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	200061ec 	.word	0x200061ec
 800d4ac:	0800e8a8 	.word	0x0800e8a8

0800d4b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d4b6:	4b0f      	ldr	r3, [pc, #60]	; (800d4f4 <Get_SerialNum+0x44>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d4bc:	4b0e      	ldr	r3, [pc, #56]	; (800d4f8 <Get_SerialNum+0x48>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d4c2:	4b0e      	ldr	r3, [pc, #56]	; (800d4fc <Get_SerialNum+0x4c>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d009      	beq.n	800d4ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d4d6:	2208      	movs	r2, #8
 800d4d8:	4909      	ldr	r1, [pc, #36]	; (800d500 <Get_SerialNum+0x50>)
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f000 f814 	bl	800d508 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d4e0:	2204      	movs	r2, #4
 800d4e2:	4908      	ldr	r1, [pc, #32]	; (800d504 <Get_SerialNum+0x54>)
 800d4e4:	68b8      	ldr	r0, [r7, #8]
 800d4e6:	f000 f80f 	bl	800d508 <IntToUnicode>
  }
}
 800d4ea:	bf00      	nop
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	1fff7a10 	.word	0x1fff7a10
 800d4f8:	1fff7a14 	.word	0x1fff7a14
 800d4fc:	1fff7a18 	.word	0x1fff7a18
 800d500:	20000502 	.word	0x20000502
 800d504:	20000512 	.word	0x20000512

0800d508 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	4613      	mov	r3, r2
 800d514:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d51a:	2300      	movs	r3, #0
 800d51c:	75fb      	strb	r3, [r7, #23]
 800d51e:	e027      	b.n	800d570 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	0f1b      	lsrs	r3, r3, #28
 800d524:	2b09      	cmp	r3, #9
 800d526:	d80b      	bhi.n	800d540 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	0f1b      	lsrs	r3, r3, #28
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	4619      	mov	r1, r3
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	440b      	add	r3, r1
 800d538:	3230      	adds	r2, #48	; 0x30
 800d53a:	b2d2      	uxtb	r2, r2
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	e00a      	b.n	800d556 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	0f1b      	lsrs	r3, r3, #28
 800d544:	b2da      	uxtb	r2, r3
 800d546:	7dfb      	ldrb	r3, [r7, #23]
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	4619      	mov	r1, r3
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	440b      	add	r3, r1
 800d550:	3237      	adds	r2, #55	; 0x37
 800d552:	b2d2      	uxtb	r2, r2
 800d554:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	011b      	lsls	r3, r3, #4
 800d55a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	3301      	adds	r3, #1
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	4413      	add	r3, r2
 800d566:	2200      	movs	r2, #0
 800d568:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
 800d56c:	3301      	adds	r3, #1
 800d56e:	75fb      	strb	r3, [r7, #23]
 800d570:	7dfa      	ldrb	r2, [r7, #23]
 800d572:	79fb      	ldrb	r3, [r7, #7]
 800d574:	429a      	cmp	r2, r3
 800d576:	d3d3      	bcc.n	800d520 <IntToUnicode+0x18>
  }
}
 800d578:	bf00      	nop
 800d57a:	bf00      	nop
 800d57c:	371c      	adds	r7, #28
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
	...

0800d588 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08a      	sub	sp, #40	; 0x28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d590:	f107 0314 	add.w	r3, r7, #20
 800d594:	2200      	movs	r2, #0
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	605a      	str	r2, [r3, #4]
 800d59a:	609a      	str	r2, [r3, #8]
 800d59c:	60da      	str	r2, [r3, #12]
 800d59e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d5a8:	d13a      	bne.n	800d620 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	613b      	str	r3, [r7, #16]
 800d5ae:	4b1e      	ldr	r3, [pc, #120]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b2:	4a1d      	ldr	r2, [pc, #116]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d5b4:	f043 0301 	orr.w	r3, r3, #1
 800d5b8:	6313      	str	r3, [r2, #48]	; 0x30
 800d5ba:	4b1b      	ldr	r3, [pc, #108]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	613b      	str	r3, [r7, #16]
 800d5c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d5c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d5ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d5d8:	230a      	movs	r3, #10
 800d5da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5dc:	f107 0314 	add.w	r3, r7, #20
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4812      	ldr	r0, [pc, #72]	; (800d62c <HAL_PCD_MspInit+0xa4>)
 800d5e4:	f7f4 fe8c 	bl	8002300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d5e8:	4b0f      	ldr	r3, [pc, #60]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ec:	4a0e      	ldr	r2, [pc, #56]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5f2:	6353      	str	r3, [r2, #52]	; 0x34
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	4b0b      	ldr	r3, [pc, #44]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5fc:	4a0a      	ldr	r2, [pc, #40]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d5fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d602:	6453      	str	r3, [r2, #68]	; 0x44
 800d604:	4b08      	ldr	r3, [pc, #32]	; (800d628 <HAL_PCD_MspInit+0xa0>)
 800d606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d610:	2200      	movs	r2, #0
 800d612:	2105      	movs	r1, #5
 800d614:	2043      	movs	r0, #67	; 0x43
 800d616:	f7f4 fe49 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d61a:	2043      	movs	r0, #67	; 0x43
 800d61c:	f7f4 fe62 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d620:	bf00      	nop
 800d622:	3728      	adds	r7, #40	; 0x28
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	40023800 	.word	0x40023800
 800d62c:	40020000 	.word	0x40020000

0800d630 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d644:	4619      	mov	r1, r3
 800d646:	4610      	mov	r0, r2
 800d648:	f7fb fc11 	bl	8008e6e <USBD_LL_SetupStage>
}
 800d64c:	bf00      	nop
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	460b      	mov	r3, r1
 800d65e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d666:	78fa      	ldrb	r2, [r7, #3]
 800d668:	6879      	ldr	r1, [r7, #4]
 800d66a:	4613      	mov	r3, r2
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	4413      	add	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	440b      	add	r3, r1
 800d674:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	78fb      	ldrb	r3, [r7, #3]
 800d67c:	4619      	mov	r1, r3
 800d67e:	f7fb fc4b 	bl	8008f18 <USBD_LL_DataOutStage>
}
 800d682:	bf00      	nop
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	460b      	mov	r3, r1
 800d694:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d69c:	78fa      	ldrb	r2, [r7, #3]
 800d69e:	6879      	ldr	r1, [r7, #4]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	4413      	add	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	440b      	add	r3, r1
 800d6aa:	334c      	adds	r3, #76	; 0x4c
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	78fb      	ldrb	r3, [r7, #3]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	f7fb fce4 	bl	800907e <USBD_LL_DataInStage>
}
 800d6b6:	bf00      	nop
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b082      	sub	sp, #8
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fb fe18 	bl	8009302 <USBD_LL_SOF>
}
 800d6d2:	bf00      	nop
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b084      	sub	sp, #16
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d001      	beq.n	800d6f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d6ee:	f7f4 fa41 	bl	8001b74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d6f8:	7bfa      	ldrb	r2, [r7, #15]
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fb fdc2 	bl	8009286 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fb fd6a 	bl	80091e2 <USBD_LL_Reset>
}
 800d70e:	bf00      	nop
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
	...

0800d718 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d726:	4618      	mov	r0, r3
 800d728:	f7fb fdbd 	bl	80092a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	6812      	ldr	r2, [r2, #0]
 800d73a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d73e:	f043 0301 	orr.w	r3, r3, #1
 800d742:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6a1b      	ldr	r3, [r3, #32]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d005      	beq.n	800d758 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d74c:	4b04      	ldr	r3, [pc, #16]	; (800d760 <HAL_PCD_SuspendCallback+0x48>)
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	4a03      	ldr	r2, [pc, #12]	; (800d760 <HAL_PCD_SuspendCallback+0x48>)
 800d752:	f043 0306 	orr.w	r3, r3, #6
 800d756:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d758:	bf00      	nop
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	e000ed00 	.word	0xe000ed00

0800d764 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d772:	4618      	mov	r0, r3
 800d774:	f7fb fdad 	bl	80092d2 <USBD_LL_Resume>
}
 800d778:	bf00      	nop
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d792:	78fa      	ldrb	r2, [r7, #3]
 800d794:	4611      	mov	r1, r2
 800d796:	4618      	mov	r0, r3
 800d798:	f7fb fe05 	bl	80093a6 <USBD_LL_IsoOUTIncomplete>
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7b6:	78fa      	ldrb	r2, [r7, #3]
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fb fdc1 	bl	8009342 <USBD_LL_IsoINIncomplete>
}
 800d7c0:	bf00      	nop
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fb fe17 	bl	800940a <USBD_LL_DevConnected>
}
 800d7dc:	bf00      	nop
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fb fe14 	bl	8009420 <USBD_LL_DevDisconnected>
}
 800d7f8:	bf00      	nop
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d13c      	bne.n	800d88a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d810:	4a20      	ldr	r2, [pc, #128]	; (800d894 <USBD_LL_Init+0x94>)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a1e      	ldr	r2, [pc, #120]	; (800d894 <USBD_LL_Init+0x94>)
 800d81c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d820:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <USBD_LL_Init+0x94>)
 800d822:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d826:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d828:	4b1a      	ldr	r3, [pc, #104]	; (800d894 <USBD_LL_Init+0x94>)
 800d82a:	2204      	movs	r2, #4
 800d82c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d82e:	4b19      	ldr	r3, [pc, #100]	; (800d894 <USBD_LL_Init+0x94>)
 800d830:	2202      	movs	r2, #2
 800d832:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d834:	4b17      	ldr	r3, [pc, #92]	; (800d894 <USBD_LL_Init+0x94>)
 800d836:	2200      	movs	r2, #0
 800d838:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d83a:	4b16      	ldr	r3, [pc, #88]	; (800d894 <USBD_LL_Init+0x94>)
 800d83c:	2202      	movs	r2, #2
 800d83e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d840:	4b14      	ldr	r3, [pc, #80]	; (800d894 <USBD_LL_Init+0x94>)
 800d842:	2200      	movs	r2, #0
 800d844:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d846:	4b13      	ldr	r3, [pc, #76]	; (800d894 <USBD_LL_Init+0x94>)
 800d848:	2200      	movs	r2, #0
 800d84a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d84c:	4b11      	ldr	r3, [pc, #68]	; (800d894 <USBD_LL_Init+0x94>)
 800d84e:	2200      	movs	r2, #0
 800d850:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d852:	4b10      	ldr	r3, [pc, #64]	; (800d894 <USBD_LL_Init+0x94>)
 800d854:	2200      	movs	r2, #0
 800d856:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d858:	4b0e      	ldr	r3, [pc, #56]	; (800d894 <USBD_LL_Init+0x94>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d85e:	480d      	ldr	r0, [pc, #52]	; (800d894 <USBD_LL_Init+0x94>)
 800d860:	f7f5 fec3 	bl	80035ea <HAL_PCD_Init>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d86a:	f7f4 f983 	bl	8001b74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d86e:	2180      	movs	r1, #128	; 0x80
 800d870:	4808      	ldr	r0, [pc, #32]	; (800d894 <USBD_LL_Init+0x94>)
 800d872:	f7f7 f91a 	bl	8004aaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d876:	2240      	movs	r2, #64	; 0x40
 800d878:	2100      	movs	r1, #0
 800d87a:	4806      	ldr	r0, [pc, #24]	; (800d894 <USBD_LL_Init+0x94>)
 800d87c:	f7f7 f8ce 	bl	8004a1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d880:	2280      	movs	r2, #128	; 0x80
 800d882:	2101      	movs	r1, #1
 800d884:	4803      	ldr	r0, [pc, #12]	; (800d894 <USBD_LL_Init+0x94>)
 800d886:	f7f7 f8c9 	bl	8004a1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	200063ec 	.word	0x200063ec

0800d898 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7f5 ffb8 	bl	8003824 <HAL_PCD_Start>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f942 	bl	800db44 <USBD_Get_USB_Status>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b084      	sub	sp, #16
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	4608      	mov	r0, r1
 800d8d8:	4611      	mov	r1, r2
 800d8da:	461a      	mov	r2, r3
 800d8dc:	4603      	mov	r3, r0
 800d8de:	70fb      	strb	r3, [r7, #3]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	70bb      	strb	r3, [r7, #2]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d8f6:	78bb      	ldrb	r3, [r7, #2]
 800d8f8:	883a      	ldrh	r2, [r7, #0]
 800d8fa:	78f9      	ldrb	r1, [r7, #3]
 800d8fc:	f7f6 fc89 	bl	8004212 <HAL_PCD_EP_Open>
 800d900:	4603      	mov	r3, r0
 800d902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d904:	7bfb      	ldrb	r3, [r7, #15]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 f91c 	bl	800db44 <USBD_Get_USB_Status>
 800d90c:	4603      	mov	r3, r0
 800d90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d910:	7bbb      	ldrb	r3, [r7, #14]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b084      	sub	sp, #16
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
 800d922:	460b      	mov	r3, r1
 800d924:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d934:	78fa      	ldrb	r2, [r7, #3]
 800d936:	4611      	mov	r1, r2
 800d938:	4618      	mov	r0, r3
 800d93a:	f7f6 fcd2 	bl	80042e2 <HAL_PCD_EP_Close>
 800d93e:	4603      	mov	r3, r0
 800d940:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d942:	7bfb      	ldrb	r3, [r7, #15]
 800d944:	4618      	mov	r0, r3
 800d946:	f000 f8fd 	bl	800db44 <USBD_Get_USB_Status>
 800d94a:	4603      	mov	r3, r0
 800d94c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d94e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d972:	78fa      	ldrb	r2, [r7, #3]
 800d974:	4611      	mov	r1, r2
 800d976:	4618      	mov	r0, r3
 800d978:	f7f6 fdaa 	bl	80044d0 <HAL_PCD_EP_SetStall>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	4618      	mov	r0, r3
 800d984:	f000 f8de 	bl	800db44 <USBD_Get_USB_Status>
 800d988:	4603      	mov	r3, r0
 800d98a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b084      	sub	sp, #16
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9b0:	78fa      	ldrb	r2, [r7, #3]
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7f6 fdef 	bl	8004598 <HAL_PCD_EP_ClrStall>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 f8bf 	bl	800db44 <USBD_Get_USB_Status>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da0b      	bge.n	800da08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9f0:	78fb      	ldrb	r3, [r7, #3]
 800d9f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9f6:	68f9      	ldr	r1, [r7, #12]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	440b      	add	r3, r1
 800da02:	333e      	adds	r3, #62	; 0x3e
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	e00b      	b.n	800da20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da08:	78fb      	ldrb	r3, [r7, #3]
 800da0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da0e:	68f9      	ldr	r1, [r7, #12]
 800da10:	4613      	mov	r3, r2
 800da12:	00db      	lsls	r3, r3, #3
 800da14:	4413      	add	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	440b      	add	r3, r1
 800da1a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800da1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da20:	4618      	mov	r0, r3
 800da22:	3714      	adds	r7, #20
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da38:	2300      	movs	r3, #0
 800da3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da46:	78fa      	ldrb	r2, [r7, #3]
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7f6 fbbc 	bl	80041c8 <HAL_PCD_SetAddress>
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	4618      	mov	r0, r3
 800da58:	f000 f874 	bl	800db44 <USBD_Get_USB_Status>
 800da5c:	4603      	mov	r3, r0
 800da5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da60:	7bbb      	ldrb	r3, [r7, #14]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b086      	sub	sp, #24
 800da6e:	af00      	add	r7, sp, #0
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	607a      	str	r2, [r7, #4]
 800da74:	603b      	str	r3, [r7, #0]
 800da76:	460b      	mov	r3, r1
 800da78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7a:	2300      	movs	r3, #0
 800da7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da88:	7af9      	ldrb	r1, [r7, #11]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	f7f6 fcd5 	bl	800443c <HAL_PCD_EP_Transmit>
 800da92:	4603      	mov	r3, r0
 800da94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	4618      	mov	r0, r3
 800da9a:	f000 f853 	bl	800db44 <USBD_Get_USB_Status>
 800da9e:	4603      	mov	r3, r0
 800daa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daa2:	7dbb      	ldrb	r3, [r7, #22]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3718      	adds	r7, #24
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	607a      	str	r2, [r7, #4]
 800dab6:	603b      	str	r3, [r7, #0]
 800dab8:	460b      	mov	r3, r1
 800daba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800daca:	7af9      	ldrb	r1, [r7, #11]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	f7f6 fc51 	bl	8004376 <HAL_PCD_EP_Receive>
 800dad4:	4603      	mov	r3, r0
 800dad6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad8:	7dfb      	ldrb	r3, [r7, #23]
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 f832 	bl	800db44 <USBD_Get_USB_Status>
 800dae0:	4603      	mov	r3, r0
 800dae2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dae4:	7dbb      	ldrb	r3, [r7, #22]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3718      	adds	r7, #24
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b082      	sub	sp, #8
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	460b      	mov	r3, r1
 800daf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db00:	78fa      	ldrb	r2, [r7, #3]
 800db02:	4611      	mov	r1, r2
 800db04:	4618      	mov	r0, r3
 800db06:	f7f6 fc81 	bl	800440c <HAL_PCD_EP_GetRxCount>
 800db0a:	4603      	mov	r3, r0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800db1c:	4b03      	ldr	r3, [pc, #12]	; (800db2c <USBD_static_malloc+0x18>)
}
 800db1e:	4618      	mov	r0, r3
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	200068f8 	.word	0x200068f8

0800db30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]

}
 800db38:	bf00      	nop
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	2b03      	cmp	r3, #3
 800db56:	d817      	bhi.n	800db88 <USBD_Get_USB_Status+0x44>
 800db58:	a201      	add	r2, pc, #4	; (adr r2, 800db60 <USBD_Get_USB_Status+0x1c>)
 800db5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5e:	bf00      	nop
 800db60:	0800db71 	.word	0x0800db71
 800db64:	0800db77 	.word	0x0800db77
 800db68:	0800db7d 	.word	0x0800db7d
 800db6c:	0800db83 	.word	0x0800db83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	73fb      	strb	r3, [r7, #15]
    break;
 800db74:	e00b      	b.n	800db8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db76:	2303      	movs	r3, #3
 800db78:	73fb      	strb	r3, [r7, #15]
    break;
 800db7a:	e008      	b.n	800db8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db7c:	2301      	movs	r3, #1
 800db7e:	73fb      	strb	r3, [r7, #15]
    break;
 800db80:	e005      	b.n	800db8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db82:	2303      	movs	r3, #3
 800db84:	73fb      	strb	r3, [r7, #15]
    break;
 800db86:	e002      	b.n	800db8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db88:	2303      	movs	r3, #3
 800db8a:	73fb      	strb	r3, [r7, #15]
    break;
 800db8c:	bf00      	nop
  }
  return usb_status;
 800db8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <__errno>:
 800db9c:	4b01      	ldr	r3, [pc, #4]	; (800dba4 <__errno+0x8>)
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	2000051c 	.word	0x2000051c

0800dba8 <__libc_init_array>:
 800dba8:	b570      	push	{r4, r5, r6, lr}
 800dbaa:	4d0d      	ldr	r5, [pc, #52]	; (800dbe0 <__libc_init_array+0x38>)
 800dbac:	4c0d      	ldr	r4, [pc, #52]	; (800dbe4 <__libc_init_array+0x3c>)
 800dbae:	1b64      	subs	r4, r4, r5
 800dbb0:	10a4      	asrs	r4, r4, #2
 800dbb2:	2600      	movs	r6, #0
 800dbb4:	42a6      	cmp	r6, r4
 800dbb6:	d109      	bne.n	800dbcc <__libc_init_array+0x24>
 800dbb8:	4d0b      	ldr	r5, [pc, #44]	; (800dbe8 <__libc_init_array+0x40>)
 800dbba:	4c0c      	ldr	r4, [pc, #48]	; (800dbec <__libc_init_array+0x44>)
 800dbbc:	f000 fca6 	bl	800e50c <_init>
 800dbc0:	1b64      	subs	r4, r4, r5
 800dbc2:	10a4      	asrs	r4, r4, #2
 800dbc4:	2600      	movs	r6, #0
 800dbc6:	42a6      	cmp	r6, r4
 800dbc8:	d105      	bne.n	800dbd6 <__libc_init_array+0x2e>
 800dbca:	bd70      	pop	{r4, r5, r6, pc}
 800dbcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbd0:	4798      	blx	r3
 800dbd2:	3601      	adds	r6, #1
 800dbd4:	e7ee      	b.n	800dbb4 <__libc_init_array+0xc>
 800dbd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbda:	4798      	blx	r3
 800dbdc:	3601      	adds	r6, #1
 800dbde:	e7f2      	b.n	800dbc6 <__libc_init_array+0x1e>
 800dbe0:	0800ebd4 	.word	0x0800ebd4
 800dbe4:	0800ebd4 	.word	0x0800ebd4
 800dbe8:	0800ebd4 	.word	0x0800ebd4
 800dbec:	0800ebd8 	.word	0x0800ebd8

0800dbf0 <malloc>:
 800dbf0:	4b02      	ldr	r3, [pc, #8]	; (800dbfc <malloc+0xc>)
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	f000 b88d 	b.w	800dd14 <_malloc_r>
 800dbfa:	bf00      	nop
 800dbfc:	2000051c 	.word	0x2000051c

0800dc00 <free>:
 800dc00:	4b02      	ldr	r3, [pc, #8]	; (800dc0c <free+0xc>)
 800dc02:	4601      	mov	r1, r0
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	f000 b819 	b.w	800dc3c <_free_r>
 800dc0a:	bf00      	nop
 800dc0c:	2000051c 	.word	0x2000051c

0800dc10 <memcpy>:
 800dc10:	440a      	add	r2, r1
 800dc12:	4291      	cmp	r1, r2
 800dc14:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc18:	d100      	bne.n	800dc1c <memcpy+0xc>
 800dc1a:	4770      	bx	lr
 800dc1c:	b510      	push	{r4, lr}
 800dc1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc26:	4291      	cmp	r1, r2
 800dc28:	d1f9      	bne.n	800dc1e <memcpy+0xe>
 800dc2a:	bd10      	pop	{r4, pc}

0800dc2c <memset>:
 800dc2c:	4402      	add	r2, r0
 800dc2e:	4603      	mov	r3, r0
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d100      	bne.n	800dc36 <memset+0xa>
 800dc34:	4770      	bx	lr
 800dc36:	f803 1b01 	strb.w	r1, [r3], #1
 800dc3a:	e7f9      	b.n	800dc30 <memset+0x4>

0800dc3c <_free_r>:
 800dc3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc3e:	2900      	cmp	r1, #0
 800dc40:	d044      	beq.n	800dccc <_free_r+0x90>
 800dc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc46:	9001      	str	r0, [sp, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f1a1 0404 	sub.w	r4, r1, #4
 800dc4e:	bfb8      	it	lt
 800dc50:	18e4      	addlt	r4, r4, r3
 800dc52:	f000 f90b 	bl	800de6c <__malloc_lock>
 800dc56:	4a1e      	ldr	r2, [pc, #120]	; (800dcd0 <_free_r+0x94>)
 800dc58:	9801      	ldr	r0, [sp, #4]
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	b933      	cbnz	r3, 800dc6c <_free_r+0x30>
 800dc5e:	6063      	str	r3, [r4, #4]
 800dc60:	6014      	str	r4, [r2, #0]
 800dc62:	b003      	add	sp, #12
 800dc64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc68:	f000 b906 	b.w	800de78 <__malloc_unlock>
 800dc6c:	42a3      	cmp	r3, r4
 800dc6e:	d908      	bls.n	800dc82 <_free_r+0x46>
 800dc70:	6825      	ldr	r5, [r4, #0]
 800dc72:	1961      	adds	r1, r4, r5
 800dc74:	428b      	cmp	r3, r1
 800dc76:	bf01      	itttt	eq
 800dc78:	6819      	ldreq	r1, [r3, #0]
 800dc7a:	685b      	ldreq	r3, [r3, #4]
 800dc7c:	1949      	addeq	r1, r1, r5
 800dc7e:	6021      	streq	r1, [r4, #0]
 800dc80:	e7ed      	b.n	800dc5e <_free_r+0x22>
 800dc82:	461a      	mov	r2, r3
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	b10b      	cbz	r3, 800dc8c <_free_r+0x50>
 800dc88:	42a3      	cmp	r3, r4
 800dc8a:	d9fa      	bls.n	800dc82 <_free_r+0x46>
 800dc8c:	6811      	ldr	r1, [r2, #0]
 800dc8e:	1855      	adds	r5, r2, r1
 800dc90:	42a5      	cmp	r5, r4
 800dc92:	d10b      	bne.n	800dcac <_free_r+0x70>
 800dc94:	6824      	ldr	r4, [r4, #0]
 800dc96:	4421      	add	r1, r4
 800dc98:	1854      	adds	r4, r2, r1
 800dc9a:	42a3      	cmp	r3, r4
 800dc9c:	6011      	str	r1, [r2, #0]
 800dc9e:	d1e0      	bne.n	800dc62 <_free_r+0x26>
 800dca0:	681c      	ldr	r4, [r3, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	6053      	str	r3, [r2, #4]
 800dca6:	4421      	add	r1, r4
 800dca8:	6011      	str	r1, [r2, #0]
 800dcaa:	e7da      	b.n	800dc62 <_free_r+0x26>
 800dcac:	d902      	bls.n	800dcb4 <_free_r+0x78>
 800dcae:	230c      	movs	r3, #12
 800dcb0:	6003      	str	r3, [r0, #0]
 800dcb2:	e7d6      	b.n	800dc62 <_free_r+0x26>
 800dcb4:	6825      	ldr	r5, [r4, #0]
 800dcb6:	1961      	adds	r1, r4, r5
 800dcb8:	428b      	cmp	r3, r1
 800dcba:	bf04      	itt	eq
 800dcbc:	6819      	ldreq	r1, [r3, #0]
 800dcbe:	685b      	ldreq	r3, [r3, #4]
 800dcc0:	6063      	str	r3, [r4, #4]
 800dcc2:	bf04      	itt	eq
 800dcc4:	1949      	addeq	r1, r1, r5
 800dcc6:	6021      	streq	r1, [r4, #0]
 800dcc8:	6054      	str	r4, [r2, #4]
 800dcca:	e7ca      	b.n	800dc62 <_free_r+0x26>
 800dccc:	b003      	add	sp, #12
 800dcce:	bd30      	pop	{r4, r5, pc}
 800dcd0:	20006b18 	.word	0x20006b18

0800dcd4 <sbrk_aligned>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	4e0e      	ldr	r6, [pc, #56]	; (800dd10 <sbrk_aligned+0x3c>)
 800dcd8:	460c      	mov	r4, r1
 800dcda:	6831      	ldr	r1, [r6, #0]
 800dcdc:	4605      	mov	r5, r0
 800dcde:	b911      	cbnz	r1, 800dce6 <sbrk_aligned+0x12>
 800dce0:	f000 f88c 	bl	800ddfc <_sbrk_r>
 800dce4:	6030      	str	r0, [r6, #0]
 800dce6:	4621      	mov	r1, r4
 800dce8:	4628      	mov	r0, r5
 800dcea:	f000 f887 	bl	800ddfc <_sbrk_r>
 800dcee:	1c43      	adds	r3, r0, #1
 800dcf0:	d00a      	beq.n	800dd08 <sbrk_aligned+0x34>
 800dcf2:	1cc4      	adds	r4, r0, #3
 800dcf4:	f024 0403 	bic.w	r4, r4, #3
 800dcf8:	42a0      	cmp	r0, r4
 800dcfa:	d007      	beq.n	800dd0c <sbrk_aligned+0x38>
 800dcfc:	1a21      	subs	r1, r4, r0
 800dcfe:	4628      	mov	r0, r5
 800dd00:	f000 f87c 	bl	800ddfc <_sbrk_r>
 800dd04:	3001      	adds	r0, #1
 800dd06:	d101      	bne.n	800dd0c <sbrk_aligned+0x38>
 800dd08:	f04f 34ff 	mov.w	r4, #4294967295
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	20006b1c 	.word	0x20006b1c

0800dd14 <_malloc_r>:
 800dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd18:	1ccd      	adds	r5, r1, #3
 800dd1a:	f025 0503 	bic.w	r5, r5, #3
 800dd1e:	3508      	adds	r5, #8
 800dd20:	2d0c      	cmp	r5, #12
 800dd22:	bf38      	it	cc
 800dd24:	250c      	movcc	r5, #12
 800dd26:	2d00      	cmp	r5, #0
 800dd28:	4607      	mov	r7, r0
 800dd2a:	db01      	blt.n	800dd30 <_malloc_r+0x1c>
 800dd2c:	42a9      	cmp	r1, r5
 800dd2e:	d905      	bls.n	800dd3c <_malloc_r+0x28>
 800dd30:	230c      	movs	r3, #12
 800dd32:	603b      	str	r3, [r7, #0]
 800dd34:	2600      	movs	r6, #0
 800dd36:	4630      	mov	r0, r6
 800dd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd3c:	4e2e      	ldr	r6, [pc, #184]	; (800ddf8 <_malloc_r+0xe4>)
 800dd3e:	f000 f895 	bl	800de6c <__malloc_lock>
 800dd42:	6833      	ldr	r3, [r6, #0]
 800dd44:	461c      	mov	r4, r3
 800dd46:	bb34      	cbnz	r4, 800dd96 <_malloc_r+0x82>
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	f7ff ffc2 	bl	800dcd4 <sbrk_aligned>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	4604      	mov	r4, r0
 800dd54:	d14d      	bne.n	800ddf2 <_malloc_r+0xde>
 800dd56:	6834      	ldr	r4, [r6, #0]
 800dd58:	4626      	mov	r6, r4
 800dd5a:	2e00      	cmp	r6, #0
 800dd5c:	d140      	bne.n	800dde0 <_malloc_r+0xcc>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	4631      	mov	r1, r6
 800dd62:	4638      	mov	r0, r7
 800dd64:	eb04 0803 	add.w	r8, r4, r3
 800dd68:	f000 f848 	bl	800ddfc <_sbrk_r>
 800dd6c:	4580      	cmp	r8, r0
 800dd6e:	d13a      	bne.n	800dde6 <_malloc_r+0xd2>
 800dd70:	6821      	ldr	r1, [r4, #0]
 800dd72:	3503      	adds	r5, #3
 800dd74:	1a6d      	subs	r5, r5, r1
 800dd76:	f025 0503 	bic.w	r5, r5, #3
 800dd7a:	3508      	adds	r5, #8
 800dd7c:	2d0c      	cmp	r5, #12
 800dd7e:	bf38      	it	cc
 800dd80:	250c      	movcc	r5, #12
 800dd82:	4629      	mov	r1, r5
 800dd84:	4638      	mov	r0, r7
 800dd86:	f7ff ffa5 	bl	800dcd4 <sbrk_aligned>
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	d02b      	beq.n	800dde6 <_malloc_r+0xd2>
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	442b      	add	r3, r5
 800dd92:	6023      	str	r3, [r4, #0]
 800dd94:	e00e      	b.n	800ddb4 <_malloc_r+0xa0>
 800dd96:	6822      	ldr	r2, [r4, #0]
 800dd98:	1b52      	subs	r2, r2, r5
 800dd9a:	d41e      	bmi.n	800ddda <_malloc_r+0xc6>
 800dd9c:	2a0b      	cmp	r2, #11
 800dd9e:	d916      	bls.n	800ddce <_malloc_r+0xba>
 800dda0:	1961      	adds	r1, r4, r5
 800dda2:	42a3      	cmp	r3, r4
 800dda4:	6025      	str	r5, [r4, #0]
 800dda6:	bf18      	it	ne
 800dda8:	6059      	strne	r1, [r3, #4]
 800ddaa:	6863      	ldr	r3, [r4, #4]
 800ddac:	bf08      	it	eq
 800ddae:	6031      	streq	r1, [r6, #0]
 800ddb0:	5162      	str	r2, [r4, r5]
 800ddb2:	604b      	str	r3, [r1, #4]
 800ddb4:	4638      	mov	r0, r7
 800ddb6:	f104 060b 	add.w	r6, r4, #11
 800ddba:	f000 f85d 	bl	800de78 <__malloc_unlock>
 800ddbe:	f026 0607 	bic.w	r6, r6, #7
 800ddc2:	1d23      	adds	r3, r4, #4
 800ddc4:	1af2      	subs	r2, r6, r3
 800ddc6:	d0b6      	beq.n	800dd36 <_malloc_r+0x22>
 800ddc8:	1b9b      	subs	r3, r3, r6
 800ddca:	50a3      	str	r3, [r4, r2]
 800ddcc:	e7b3      	b.n	800dd36 <_malloc_r+0x22>
 800ddce:	6862      	ldr	r2, [r4, #4]
 800ddd0:	42a3      	cmp	r3, r4
 800ddd2:	bf0c      	ite	eq
 800ddd4:	6032      	streq	r2, [r6, #0]
 800ddd6:	605a      	strne	r2, [r3, #4]
 800ddd8:	e7ec      	b.n	800ddb4 <_malloc_r+0xa0>
 800ddda:	4623      	mov	r3, r4
 800dddc:	6864      	ldr	r4, [r4, #4]
 800ddde:	e7b2      	b.n	800dd46 <_malloc_r+0x32>
 800dde0:	4634      	mov	r4, r6
 800dde2:	6876      	ldr	r6, [r6, #4]
 800dde4:	e7b9      	b.n	800dd5a <_malloc_r+0x46>
 800dde6:	230c      	movs	r3, #12
 800dde8:	603b      	str	r3, [r7, #0]
 800ddea:	4638      	mov	r0, r7
 800ddec:	f000 f844 	bl	800de78 <__malloc_unlock>
 800ddf0:	e7a1      	b.n	800dd36 <_malloc_r+0x22>
 800ddf2:	6025      	str	r5, [r4, #0]
 800ddf4:	e7de      	b.n	800ddb4 <_malloc_r+0xa0>
 800ddf6:	bf00      	nop
 800ddf8:	20006b18 	.word	0x20006b18

0800ddfc <_sbrk_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	4d06      	ldr	r5, [pc, #24]	; (800de18 <_sbrk_r+0x1c>)
 800de00:	2300      	movs	r3, #0
 800de02:	4604      	mov	r4, r0
 800de04:	4608      	mov	r0, r1
 800de06:	602b      	str	r3, [r5, #0]
 800de08:	f7f4 f8c0 	bl	8001f8c <_sbrk>
 800de0c:	1c43      	adds	r3, r0, #1
 800de0e:	d102      	bne.n	800de16 <_sbrk_r+0x1a>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	b103      	cbz	r3, 800de16 <_sbrk_r+0x1a>
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	20006b20 	.word	0x20006b20

0800de1c <siprintf>:
 800de1c:	b40e      	push	{r1, r2, r3}
 800de1e:	b500      	push	{lr}
 800de20:	b09c      	sub	sp, #112	; 0x70
 800de22:	ab1d      	add	r3, sp, #116	; 0x74
 800de24:	9002      	str	r0, [sp, #8]
 800de26:	9006      	str	r0, [sp, #24]
 800de28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de2c:	4809      	ldr	r0, [pc, #36]	; (800de54 <siprintf+0x38>)
 800de2e:	9107      	str	r1, [sp, #28]
 800de30:	9104      	str	r1, [sp, #16]
 800de32:	4909      	ldr	r1, [pc, #36]	; (800de58 <siprintf+0x3c>)
 800de34:	f853 2b04 	ldr.w	r2, [r3], #4
 800de38:	9105      	str	r1, [sp, #20]
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	a902      	add	r1, sp, #8
 800de40:	f000 f87c 	bl	800df3c <_svfiprintf_r>
 800de44:	9b02      	ldr	r3, [sp, #8]
 800de46:	2200      	movs	r2, #0
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	b01c      	add	sp, #112	; 0x70
 800de4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de50:	b003      	add	sp, #12
 800de52:	4770      	bx	lr
 800de54:	2000051c 	.word	0x2000051c
 800de58:	ffff0208 	.word	0xffff0208

0800de5c <strcpy>:
 800de5c:	4603      	mov	r3, r0
 800de5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de62:	f803 2b01 	strb.w	r2, [r3], #1
 800de66:	2a00      	cmp	r2, #0
 800de68:	d1f9      	bne.n	800de5e <strcpy+0x2>
 800de6a:	4770      	bx	lr

0800de6c <__malloc_lock>:
 800de6c:	4801      	ldr	r0, [pc, #4]	; (800de74 <__malloc_lock+0x8>)
 800de6e:	f000 baf9 	b.w	800e464 <__retarget_lock_acquire_recursive>
 800de72:	bf00      	nop
 800de74:	20006b24 	.word	0x20006b24

0800de78 <__malloc_unlock>:
 800de78:	4801      	ldr	r0, [pc, #4]	; (800de80 <__malloc_unlock+0x8>)
 800de7a:	f000 baf4 	b.w	800e466 <__retarget_lock_release_recursive>
 800de7e:	bf00      	nop
 800de80:	20006b24 	.word	0x20006b24

0800de84 <__ssputs_r>:
 800de84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de88:	688e      	ldr	r6, [r1, #8]
 800de8a:	429e      	cmp	r6, r3
 800de8c:	4682      	mov	sl, r0
 800de8e:	460c      	mov	r4, r1
 800de90:	4690      	mov	r8, r2
 800de92:	461f      	mov	r7, r3
 800de94:	d838      	bhi.n	800df08 <__ssputs_r+0x84>
 800de96:	898a      	ldrh	r2, [r1, #12]
 800de98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de9c:	d032      	beq.n	800df04 <__ssputs_r+0x80>
 800de9e:	6825      	ldr	r5, [r4, #0]
 800dea0:	6909      	ldr	r1, [r1, #16]
 800dea2:	eba5 0901 	sub.w	r9, r5, r1
 800dea6:	6965      	ldr	r5, [r4, #20]
 800dea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800deac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800deb0:	3301      	adds	r3, #1
 800deb2:	444b      	add	r3, r9
 800deb4:	106d      	asrs	r5, r5, #1
 800deb6:	429d      	cmp	r5, r3
 800deb8:	bf38      	it	cc
 800deba:	461d      	movcc	r5, r3
 800debc:	0553      	lsls	r3, r2, #21
 800debe:	d531      	bpl.n	800df24 <__ssputs_r+0xa0>
 800dec0:	4629      	mov	r1, r5
 800dec2:	f7ff ff27 	bl	800dd14 <_malloc_r>
 800dec6:	4606      	mov	r6, r0
 800dec8:	b950      	cbnz	r0, 800dee0 <__ssputs_r+0x5c>
 800deca:	230c      	movs	r3, #12
 800decc:	f8ca 3000 	str.w	r3, [sl]
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee0:	6921      	ldr	r1, [r4, #16]
 800dee2:	464a      	mov	r2, r9
 800dee4:	f7ff fe94 	bl	800dc10 <memcpy>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800deee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800def2:	81a3      	strh	r3, [r4, #12]
 800def4:	6126      	str	r6, [r4, #16]
 800def6:	6165      	str	r5, [r4, #20]
 800def8:	444e      	add	r6, r9
 800defa:	eba5 0509 	sub.w	r5, r5, r9
 800defe:	6026      	str	r6, [r4, #0]
 800df00:	60a5      	str	r5, [r4, #8]
 800df02:	463e      	mov	r6, r7
 800df04:	42be      	cmp	r6, r7
 800df06:	d900      	bls.n	800df0a <__ssputs_r+0x86>
 800df08:	463e      	mov	r6, r7
 800df0a:	6820      	ldr	r0, [r4, #0]
 800df0c:	4632      	mov	r2, r6
 800df0e:	4641      	mov	r1, r8
 800df10:	f000 faaa 	bl	800e468 <memmove>
 800df14:	68a3      	ldr	r3, [r4, #8]
 800df16:	1b9b      	subs	r3, r3, r6
 800df18:	60a3      	str	r3, [r4, #8]
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	4433      	add	r3, r6
 800df1e:	6023      	str	r3, [r4, #0]
 800df20:	2000      	movs	r0, #0
 800df22:	e7db      	b.n	800dedc <__ssputs_r+0x58>
 800df24:	462a      	mov	r2, r5
 800df26:	f000 fab9 	bl	800e49c <_realloc_r>
 800df2a:	4606      	mov	r6, r0
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d1e1      	bne.n	800def4 <__ssputs_r+0x70>
 800df30:	6921      	ldr	r1, [r4, #16]
 800df32:	4650      	mov	r0, sl
 800df34:	f7ff fe82 	bl	800dc3c <_free_r>
 800df38:	e7c7      	b.n	800deca <__ssputs_r+0x46>
	...

0800df3c <_svfiprintf_r>:
 800df3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df40:	4698      	mov	r8, r3
 800df42:	898b      	ldrh	r3, [r1, #12]
 800df44:	061b      	lsls	r3, r3, #24
 800df46:	b09d      	sub	sp, #116	; 0x74
 800df48:	4607      	mov	r7, r0
 800df4a:	460d      	mov	r5, r1
 800df4c:	4614      	mov	r4, r2
 800df4e:	d50e      	bpl.n	800df6e <_svfiprintf_r+0x32>
 800df50:	690b      	ldr	r3, [r1, #16]
 800df52:	b963      	cbnz	r3, 800df6e <_svfiprintf_r+0x32>
 800df54:	2140      	movs	r1, #64	; 0x40
 800df56:	f7ff fedd 	bl	800dd14 <_malloc_r>
 800df5a:	6028      	str	r0, [r5, #0]
 800df5c:	6128      	str	r0, [r5, #16]
 800df5e:	b920      	cbnz	r0, 800df6a <_svfiprintf_r+0x2e>
 800df60:	230c      	movs	r3, #12
 800df62:	603b      	str	r3, [r7, #0]
 800df64:	f04f 30ff 	mov.w	r0, #4294967295
 800df68:	e0d1      	b.n	800e10e <_svfiprintf_r+0x1d2>
 800df6a:	2340      	movs	r3, #64	; 0x40
 800df6c:	616b      	str	r3, [r5, #20]
 800df6e:	2300      	movs	r3, #0
 800df70:	9309      	str	r3, [sp, #36]	; 0x24
 800df72:	2320      	movs	r3, #32
 800df74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df78:	f8cd 800c 	str.w	r8, [sp, #12]
 800df7c:	2330      	movs	r3, #48	; 0x30
 800df7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e128 <_svfiprintf_r+0x1ec>
 800df82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df86:	f04f 0901 	mov.w	r9, #1
 800df8a:	4623      	mov	r3, r4
 800df8c:	469a      	mov	sl, r3
 800df8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df92:	b10a      	cbz	r2, 800df98 <_svfiprintf_r+0x5c>
 800df94:	2a25      	cmp	r2, #37	; 0x25
 800df96:	d1f9      	bne.n	800df8c <_svfiprintf_r+0x50>
 800df98:	ebba 0b04 	subs.w	fp, sl, r4
 800df9c:	d00b      	beq.n	800dfb6 <_svfiprintf_r+0x7a>
 800df9e:	465b      	mov	r3, fp
 800dfa0:	4622      	mov	r2, r4
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	4638      	mov	r0, r7
 800dfa6:	f7ff ff6d 	bl	800de84 <__ssputs_r>
 800dfaa:	3001      	adds	r0, #1
 800dfac:	f000 80aa 	beq.w	800e104 <_svfiprintf_r+0x1c8>
 800dfb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfb2:	445a      	add	r2, fp
 800dfb4:	9209      	str	r2, [sp, #36]	; 0x24
 800dfb6:	f89a 3000 	ldrb.w	r3, [sl]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f000 80a2 	beq.w	800e104 <_svfiprintf_r+0x1c8>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfca:	f10a 0a01 	add.w	sl, sl, #1
 800dfce:	9304      	str	r3, [sp, #16]
 800dfd0:	9307      	str	r3, [sp, #28]
 800dfd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfd6:	931a      	str	r3, [sp, #104]	; 0x68
 800dfd8:	4654      	mov	r4, sl
 800dfda:	2205      	movs	r2, #5
 800dfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfe0:	4851      	ldr	r0, [pc, #324]	; (800e128 <_svfiprintf_r+0x1ec>)
 800dfe2:	f7f2 f905 	bl	80001f0 <memchr>
 800dfe6:	9a04      	ldr	r2, [sp, #16]
 800dfe8:	b9d8      	cbnz	r0, 800e022 <_svfiprintf_r+0xe6>
 800dfea:	06d0      	lsls	r0, r2, #27
 800dfec:	bf44      	itt	mi
 800dfee:	2320      	movmi	r3, #32
 800dff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dff4:	0711      	lsls	r1, r2, #28
 800dff6:	bf44      	itt	mi
 800dff8:	232b      	movmi	r3, #43	; 0x2b
 800dffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dffe:	f89a 3000 	ldrb.w	r3, [sl]
 800e002:	2b2a      	cmp	r3, #42	; 0x2a
 800e004:	d015      	beq.n	800e032 <_svfiprintf_r+0xf6>
 800e006:	9a07      	ldr	r2, [sp, #28]
 800e008:	4654      	mov	r4, sl
 800e00a:	2000      	movs	r0, #0
 800e00c:	f04f 0c0a 	mov.w	ip, #10
 800e010:	4621      	mov	r1, r4
 800e012:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e016:	3b30      	subs	r3, #48	; 0x30
 800e018:	2b09      	cmp	r3, #9
 800e01a:	d94e      	bls.n	800e0ba <_svfiprintf_r+0x17e>
 800e01c:	b1b0      	cbz	r0, 800e04c <_svfiprintf_r+0x110>
 800e01e:	9207      	str	r2, [sp, #28]
 800e020:	e014      	b.n	800e04c <_svfiprintf_r+0x110>
 800e022:	eba0 0308 	sub.w	r3, r0, r8
 800e026:	fa09 f303 	lsl.w	r3, r9, r3
 800e02a:	4313      	orrs	r3, r2
 800e02c:	9304      	str	r3, [sp, #16]
 800e02e:	46a2      	mov	sl, r4
 800e030:	e7d2      	b.n	800dfd8 <_svfiprintf_r+0x9c>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	1d19      	adds	r1, r3, #4
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	9103      	str	r1, [sp, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	bfbb      	ittet	lt
 800e03e:	425b      	neglt	r3, r3
 800e040:	f042 0202 	orrlt.w	r2, r2, #2
 800e044:	9307      	strge	r3, [sp, #28]
 800e046:	9307      	strlt	r3, [sp, #28]
 800e048:	bfb8      	it	lt
 800e04a:	9204      	strlt	r2, [sp, #16]
 800e04c:	7823      	ldrb	r3, [r4, #0]
 800e04e:	2b2e      	cmp	r3, #46	; 0x2e
 800e050:	d10c      	bne.n	800e06c <_svfiprintf_r+0x130>
 800e052:	7863      	ldrb	r3, [r4, #1]
 800e054:	2b2a      	cmp	r3, #42	; 0x2a
 800e056:	d135      	bne.n	800e0c4 <_svfiprintf_r+0x188>
 800e058:	9b03      	ldr	r3, [sp, #12]
 800e05a:	1d1a      	adds	r2, r3, #4
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	9203      	str	r2, [sp, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	bfb8      	it	lt
 800e064:	f04f 33ff 	movlt.w	r3, #4294967295
 800e068:	3402      	adds	r4, #2
 800e06a:	9305      	str	r3, [sp, #20]
 800e06c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e138 <_svfiprintf_r+0x1fc>
 800e070:	7821      	ldrb	r1, [r4, #0]
 800e072:	2203      	movs	r2, #3
 800e074:	4650      	mov	r0, sl
 800e076:	f7f2 f8bb 	bl	80001f0 <memchr>
 800e07a:	b140      	cbz	r0, 800e08e <_svfiprintf_r+0x152>
 800e07c:	2340      	movs	r3, #64	; 0x40
 800e07e:	eba0 000a 	sub.w	r0, r0, sl
 800e082:	fa03 f000 	lsl.w	r0, r3, r0
 800e086:	9b04      	ldr	r3, [sp, #16]
 800e088:	4303      	orrs	r3, r0
 800e08a:	3401      	adds	r4, #1
 800e08c:	9304      	str	r3, [sp, #16]
 800e08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e092:	4826      	ldr	r0, [pc, #152]	; (800e12c <_svfiprintf_r+0x1f0>)
 800e094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e098:	2206      	movs	r2, #6
 800e09a:	f7f2 f8a9 	bl	80001f0 <memchr>
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d038      	beq.n	800e114 <_svfiprintf_r+0x1d8>
 800e0a2:	4b23      	ldr	r3, [pc, #140]	; (800e130 <_svfiprintf_r+0x1f4>)
 800e0a4:	bb1b      	cbnz	r3, 800e0ee <_svfiprintf_r+0x1b2>
 800e0a6:	9b03      	ldr	r3, [sp, #12]
 800e0a8:	3307      	adds	r3, #7
 800e0aa:	f023 0307 	bic.w	r3, r3, #7
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	9303      	str	r3, [sp, #12]
 800e0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b4:	4433      	add	r3, r6
 800e0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b8:	e767      	b.n	800df8a <_svfiprintf_r+0x4e>
 800e0ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0be:	460c      	mov	r4, r1
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	e7a5      	b.n	800e010 <_svfiprintf_r+0xd4>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	3401      	adds	r4, #1
 800e0c8:	9305      	str	r3, [sp, #20]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	f04f 0c0a 	mov.w	ip, #10
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0d6:	3a30      	subs	r2, #48	; 0x30
 800e0d8:	2a09      	cmp	r2, #9
 800e0da:	d903      	bls.n	800e0e4 <_svfiprintf_r+0x1a8>
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d0c5      	beq.n	800e06c <_svfiprintf_r+0x130>
 800e0e0:	9105      	str	r1, [sp, #20]
 800e0e2:	e7c3      	b.n	800e06c <_svfiprintf_r+0x130>
 800e0e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e7f0      	b.n	800e0d0 <_svfiprintf_r+0x194>
 800e0ee:	ab03      	add	r3, sp, #12
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	462a      	mov	r2, r5
 800e0f4:	4b0f      	ldr	r3, [pc, #60]	; (800e134 <_svfiprintf_r+0x1f8>)
 800e0f6:	a904      	add	r1, sp, #16
 800e0f8:	4638      	mov	r0, r7
 800e0fa:	f3af 8000 	nop.w
 800e0fe:	1c42      	adds	r2, r0, #1
 800e100:	4606      	mov	r6, r0
 800e102:	d1d6      	bne.n	800e0b2 <_svfiprintf_r+0x176>
 800e104:	89ab      	ldrh	r3, [r5, #12]
 800e106:	065b      	lsls	r3, r3, #25
 800e108:	f53f af2c 	bmi.w	800df64 <_svfiprintf_r+0x28>
 800e10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e10e:	b01d      	add	sp, #116	; 0x74
 800e110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e114:	ab03      	add	r3, sp, #12
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	462a      	mov	r2, r5
 800e11a:	4b06      	ldr	r3, [pc, #24]	; (800e134 <_svfiprintf_r+0x1f8>)
 800e11c:	a904      	add	r1, sp, #16
 800e11e:	4638      	mov	r0, r7
 800e120:	f000 f87a 	bl	800e218 <_printf_i>
 800e124:	e7eb      	b.n	800e0fe <_svfiprintf_r+0x1c2>
 800e126:	bf00      	nop
 800e128:	0800eb98 	.word	0x0800eb98
 800e12c:	0800eba2 	.word	0x0800eba2
 800e130:	00000000 	.word	0x00000000
 800e134:	0800de85 	.word	0x0800de85
 800e138:	0800eb9e 	.word	0x0800eb9e

0800e13c <_printf_common>:
 800e13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e140:	4616      	mov	r6, r2
 800e142:	4699      	mov	r9, r3
 800e144:	688a      	ldr	r2, [r1, #8]
 800e146:	690b      	ldr	r3, [r1, #16]
 800e148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e14c:	4293      	cmp	r3, r2
 800e14e:	bfb8      	it	lt
 800e150:	4613      	movlt	r3, r2
 800e152:	6033      	str	r3, [r6, #0]
 800e154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e158:	4607      	mov	r7, r0
 800e15a:	460c      	mov	r4, r1
 800e15c:	b10a      	cbz	r2, 800e162 <_printf_common+0x26>
 800e15e:	3301      	adds	r3, #1
 800e160:	6033      	str	r3, [r6, #0]
 800e162:	6823      	ldr	r3, [r4, #0]
 800e164:	0699      	lsls	r1, r3, #26
 800e166:	bf42      	ittt	mi
 800e168:	6833      	ldrmi	r3, [r6, #0]
 800e16a:	3302      	addmi	r3, #2
 800e16c:	6033      	strmi	r3, [r6, #0]
 800e16e:	6825      	ldr	r5, [r4, #0]
 800e170:	f015 0506 	ands.w	r5, r5, #6
 800e174:	d106      	bne.n	800e184 <_printf_common+0x48>
 800e176:	f104 0a19 	add.w	sl, r4, #25
 800e17a:	68e3      	ldr	r3, [r4, #12]
 800e17c:	6832      	ldr	r2, [r6, #0]
 800e17e:	1a9b      	subs	r3, r3, r2
 800e180:	42ab      	cmp	r3, r5
 800e182:	dc26      	bgt.n	800e1d2 <_printf_common+0x96>
 800e184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e188:	1e13      	subs	r3, r2, #0
 800e18a:	6822      	ldr	r2, [r4, #0]
 800e18c:	bf18      	it	ne
 800e18e:	2301      	movne	r3, #1
 800e190:	0692      	lsls	r2, r2, #26
 800e192:	d42b      	bmi.n	800e1ec <_printf_common+0xb0>
 800e194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e198:	4649      	mov	r1, r9
 800e19a:	4638      	mov	r0, r7
 800e19c:	47c0      	blx	r8
 800e19e:	3001      	adds	r0, #1
 800e1a0:	d01e      	beq.n	800e1e0 <_printf_common+0xa4>
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	68e5      	ldr	r5, [r4, #12]
 800e1a6:	6832      	ldr	r2, [r6, #0]
 800e1a8:	f003 0306 	and.w	r3, r3, #6
 800e1ac:	2b04      	cmp	r3, #4
 800e1ae:	bf08      	it	eq
 800e1b0:	1aad      	subeq	r5, r5, r2
 800e1b2:	68a3      	ldr	r3, [r4, #8]
 800e1b4:	6922      	ldr	r2, [r4, #16]
 800e1b6:	bf0c      	ite	eq
 800e1b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1bc:	2500      	movne	r5, #0
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	bfc4      	itt	gt
 800e1c2:	1a9b      	subgt	r3, r3, r2
 800e1c4:	18ed      	addgt	r5, r5, r3
 800e1c6:	2600      	movs	r6, #0
 800e1c8:	341a      	adds	r4, #26
 800e1ca:	42b5      	cmp	r5, r6
 800e1cc:	d11a      	bne.n	800e204 <_printf_common+0xc8>
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	e008      	b.n	800e1e4 <_printf_common+0xa8>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	4652      	mov	r2, sl
 800e1d6:	4649      	mov	r1, r9
 800e1d8:	4638      	mov	r0, r7
 800e1da:	47c0      	blx	r8
 800e1dc:	3001      	adds	r0, #1
 800e1de:	d103      	bne.n	800e1e8 <_printf_common+0xac>
 800e1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e8:	3501      	adds	r5, #1
 800e1ea:	e7c6      	b.n	800e17a <_printf_common+0x3e>
 800e1ec:	18e1      	adds	r1, r4, r3
 800e1ee:	1c5a      	adds	r2, r3, #1
 800e1f0:	2030      	movs	r0, #48	; 0x30
 800e1f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1f6:	4422      	add	r2, r4
 800e1f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e200:	3302      	adds	r3, #2
 800e202:	e7c7      	b.n	800e194 <_printf_common+0x58>
 800e204:	2301      	movs	r3, #1
 800e206:	4622      	mov	r2, r4
 800e208:	4649      	mov	r1, r9
 800e20a:	4638      	mov	r0, r7
 800e20c:	47c0      	blx	r8
 800e20e:	3001      	adds	r0, #1
 800e210:	d0e6      	beq.n	800e1e0 <_printf_common+0xa4>
 800e212:	3601      	adds	r6, #1
 800e214:	e7d9      	b.n	800e1ca <_printf_common+0x8e>
	...

0800e218 <_printf_i>:
 800e218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e21c:	7e0f      	ldrb	r7, [r1, #24]
 800e21e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e220:	2f78      	cmp	r7, #120	; 0x78
 800e222:	4691      	mov	r9, r2
 800e224:	4680      	mov	r8, r0
 800e226:	460c      	mov	r4, r1
 800e228:	469a      	mov	sl, r3
 800e22a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e22e:	d807      	bhi.n	800e240 <_printf_i+0x28>
 800e230:	2f62      	cmp	r7, #98	; 0x62
 800e232:	d80a      	bhi.n	800e24a <_printf_i+0x32>
 800e234:	2f00      	cmp	r7, #0
 800e236:	f000 80d8 	beq.w	800e3ea <_printf_i+0x1d2>
 800e23a:	2f58      	cmp	r7, #88	; 0x58
 800e23c:	f000 80a3 	beq.w	800e386 <_printf_i+0x16e>
 800e240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e248:	e03a      	b.n	800e2c0 <_printf_i+0xa8>
 800e24a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e24e:	2b15      	cmp	r3, #21
 800e250:	d8f6      	bhi.n	800e240 <_printf_i+0x28>
 800e252:	a101      	add	r1, pc, #4	; (adr r1, 800e258 <_printf_i+0x40>)
 800e254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e258:	0800e2b1 	.word	0x0800e2b1
 800e25c:	0800e2c5 	.word	0x0800e2c5
 800e260:	0800e241 	.word	0x0800e241
 800e264:	0800e241 	.word	0x0800e241
 800e268:	0800e241 	.word	0x0800e241
 800e26c:	0800e241 	.word	0x0800e241
 800e270:	0800e2c5 	.word	0x0800e2c5
 800e274:	0800e241 	.word	0x0800e241
 800e278:	0800e241 	.word	0x0800e241
 800e27c:	0800e241 	.word	0x0800e241
 800e280:	0800e241 	.word	0x0800e241
 800e284:	0800e3d1 	.word	0x0800e3d1
 800e288:	0800e2f5 	.word	0x0800e2f5
 800e28c:	0800e3b3 	.word	0x0800e3b3
 800e290:	0800e241 	.word	0x0800e241
 800e294:	0800e241 	.word	0x0800e241
 800e298:	0800e3f3 	.word	0x0800e3f3
 800e29c:	0800e241 	.word	0x0800e241
 800e2a0:	0800e2f5 	.word	0x0800e2f5
 800e2a4:	0800e241 	.word	0x0800e241
 800e2a8:	0800e241 	.word	0x0800e241
 800e2ac:	0800e3bb 	.word	0x0800e3bb
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	1d1a      	adds	r2, r3, #4
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	602a      	str	r2, [r5, #0]
 800e2b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e0a3      	b.n	800e40c <_printf_i+0x1f4>
 800e2c4:	6820      	ldr	r0, [r4, #0]
 800e2c6:	6829      	ldr	r1, [r5, #0]
 800e2c8:	0606      	lsls	r6, r0, #24
 800e2ca:	f101 0304 	add.w	r3, r1, #4
 800e2ce:	d50a      	bpl.n	800e2e6 <_printf_i+0xce>
 800e2d0:	680e      	ldr	r6, [r1, #0]
 800e2d2:	602b      	str	r3, [r5, #0]
 800e2d4:	2e00      	cmp	r6, #0
 800e2d6:	da03      	bge.n	800e2e0 <_printf_i+0xc8>
 800e2d8:	232d      	movs	r3, #45	; 0x2d
 800e2da:	4276      	negs	r6, r6
 800e2dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e0:	485e      	ldr	r0, [pc, #376]	; (800e45c <_printf_i+0x244>)
 800e2e2:	230a      	movs	r3, #10
 800e2e4:	e019      	b.n	800e31a <_printf_i+0x102>
 800e2e6:	680e      	ldr	r6, [r1, #0]
 800e2e8:	602b      	str	r3, [r5, #0]
 800e2ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e2ee:	bf18      	it	ne
 800e2f0:	b236      	sxthne	r6, r6
 800e2f2:	e7ef      	b.n	800e2d4 <_printf_i+0xbc>
 800e2f4:	682b      	ldr	r3, [r5, #0]
 800e2f6:	6820      	ldr	r0, [r4, #0]
 800e2f8:	1d19      	adds	r1, r3, #4
 800e2fa:	6029      	str	r1, [r5, #0]
 800e2fc:	0601      	lsls	r1, r0, #24
 800e2fe:	d501      	bpl.n	800e304 <_printf_i+0xec>
 800e300:	681e      	ldr	r6, [r3, #0]
 800e302:	e002      	b.n	800e30a <_printf_i+0xf2>
 800e304:	0646      	lsls	r6, r0, #25
 800e306:	d5fb      	bpl.n	800e300 <_printf_i+0xe8>
 800e308:	881e      	ldrh	r6, [r3, #0]
 800e30a:	4854      	ldr	r0, [pc, #336]	; (800e45c <_printf_i+0x244>)
 800e30c:	2f6f      	cmp	r7, #111	; 0x6f
 800e30e:	bf0c      	ite	eq
 800e310:	2308      	moveq	r3, #8
 800e312:	230a      	movne	r3, #10
 800e314:	2100      	movs	r1, #0
 800e316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e31a:	6865      	ldr	r5, [r4, #4]
 800e31c:	60a5      	str	r5, [r4, #8]
 800e31e:	2d00      	cmp	r5, #0
 800e320:	bfa2      	ittt	ge
 800e322:	6821      	ldrge	r1, [r4, #0]
 800e324:	f021 0104 	bicge.w	r1, r1, #4
 800e328:	6021      	strge	r1, [r4, #0]
 800e32a:	b90e      	cbnz	r6, 800e330 <_printf_i+0x118>
 800e32c:	2d00      	cmp	r5, #0
 800e32e:	d04d      	beq.n	800e3cc <_printf_i+0x1b4>
 800e330:	4615      	mov	r5, r2
 800e332:	fbb6 f1f3 	udiv	r1, r6, r3
 800e336:	fb03 6711 	mls	r7, r3, r1, r6
 800e33a:	5dc7      	ldrb	r7, [r0, r7]
 800e33c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e340:	4637      	mov	r7, r6
 800e342:	42bb      	cmp	r3, r7
 800e344:	460e      	mov	r6, r1
 800e346:	d9f4      	bls.n	800e332 <_printf_i+0x11a>
 800e348:	2b08      	cmp	r3, #8
 800e34a:	d10b      	bne.n	800e364 <_printf_i+0x14c>
 800e34c:	6823      	ldr	r3, [r4, #0]
 800e34e:	07de      	lsls	r6, r3, #31
 800e350:	d508      	bpl.n	800e364 <_printf_i+0x14c>
 800e352:	6923      	ldr	r3, [r4, #16]
 800e354:	6861      	ldr	r1, [r4, #4]
 800e356:	4299      	cmp	r1, r3
 800e358:	bfde      	ittt	le
 800e35a:	2330      	movle	r3, #48	; 0x30
 800e35c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e360:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e364:	1b52      	subs	r2, r2, r5
 800e366:	6122      	str	r2, [r4, #16]
 800e368:	f8cd a000 	str.w	sl, [sp]
 800e36c:	464b      	mov	r3, r9
 800e36e:	aa03      	add	r2, sp, #12
 800e370:	4621      	mov	r1, r4
 800e372:	4640      	mov	r0, r8
 800e374:	f7ff fee2 	bl	800e13c <_printf_common>
 800e378:	3001      	adds	r0, #1
 800e37a:	d14c      	bne.n	800e416 <_printf_i+0x1fe>
 800e37c:	f04f 30ff 	mov.w	r0, #4294967295
 800e380:	b004      	add	sp, #16
 800e382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e386:	4835      	ldr	r0, [pc, #212]	; (800e45c <_printf_i+0x244>)
 800e388:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e38c:	6829      	ldr	r1, [r5, #0]
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	f851 6b04 	ldr.w	r6, [r1], #4
 800e394:	6029      	str	r1, [r5, #0]
 800e396:	061d      	lsls	r5, r3, #24
 800e398:	d514      	bpl.n	800e3c4 <_printf_i+0x1ac>
 800e39a:	07df      	lsls	r7, r3, #31
 800e39c:	bf44      	itt	mi
 800e39e:	f043 0320 	orrmi.w	r3, r3, #32
 800e3a2:	6023      	strmi	r3, [r4, #0]
 800e3a4:	b91e      	cbnz	r6, 800e3ae <_printf_i+0x196>
 800e3a6:	6823      	ldr	r3, [r4, #0]
 800e3a8:	f023 0320 	bic.w	r3, r3, #32
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	2310      	movs	r3, #16
 800e3b0:	e7b0      	b.n	800e314 <_printf_i+0xfc>
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	f043 0320 	orr.w	r3, r3, #32
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	2378      	movs	r3, #120	; 0x78
 800e3bc:	4828      	ldr	r0, [pc, #160]	; (800e460 <_printf_i+0x248>)
 800e3be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3c2:	e7e3      	b.n	800e38c <_printf_i+0x174>
 800e3c4:	0659      	lsls	r1, r3, #25
 800e3c6:	bf48      	it	mi
 800e3c8:	b2b6      	uxthmi	r6, r6
 800e3ca:	e7e6      	b.n	800e39a <_printf_i+0x182>
 800e3cc:	4615      	mov	r5, r2
 800e3ce:	e7bb      	b.n	800e348 <_printf_i+0x130>
 800e3d0:	682b      	ldr	r3, [r5, #0]
 800e3d2:	6826      	ldr	r6, [r4, #0]
 800e3d4:	6961      	ldr	r1, [r4, #20]
 800e3d6:	1d18      	adds	r0, r3, #4
 800e3d8:	6028      	str	r0, [r5, #0]
 800e3da:	0635      	lsls	r5, r6, #24
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	d501      	bpl.n	800e3e4 <_printf_i+0x1cc>
 800e3e0:	6019      	str	r1, [r3, #0]
 800e3e2:	e002      	b.n	800e3ea <_printf_i+0x1d2>
 800e3e4:	0670      	lsls	r0, r6, #25
 800e3e6:	d5fb      	bpl.n	800e3e0 <_printf_i+0x1c8>
 800e3e8:	8019      	strh	r1, [r3, #0]
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	6123      	str	r3, [r4, #16]
 800e3ee:	4615      	mov	r5, r2
 800e3f0:	e7ba      	b.n	800e368 <_printf_i+0x150>
 800e3f2:	682b      	ldr	r3, [r5, #0]
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	602a      	str	r2, [r5, #0]
 800e3f8:	681d      	ldr	r5, [r3, #0]
 800e3fa:	6862      	ldr	r2, [r4, #4]
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7f1 fef6 	bl	80001f0 <memchr>
 800e404:	b108      	cbz	r0, 800e40a <_printf_i+0x1f2>
 800e406:	1b40      	subs	r0, r0, r5
 800e408:	6060      	str	r0, [r4, #4]
 800e40a:	6863      	ldr	r3, [r4, #4]
 800e40c:	6123      	str	r3, [r4, #16]
 800e40e:	2300      	movs	r3, #0
 800e410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e414:	e7a8      	b.n	800e368 <_printf_i+0x150>
 800e416:	6923      	ldr	r3, [r4, #16]
 800e418:	462a      	mov	r2, r5
 800e41a:	4649      	mov	r1, r9
 800e41c:	4640      	mov	r0, r8
 800e41e:	47d0      	blx	sl
 800e420:	3001      	adds	r0, #1
 800e422:	d0ab      	beq.n	800e37c <_printf_i+0x164>
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	079b      	lsls	r3, r3, #30
 800e428:	d413      	bmi.n	800e452 <_printf_i+0x23a>
 800e42a:	68e0      	ldr	r0, [r4, #12]
 800e42c:	9b03      	ldr	r3, [sp, #12]
 800e42e:	4298      	cmp	r0, r3
 800e430:	bfb8      	it	lt
 800e432:	4618      	movlt	r0, r3
 800e434:	e7a4      	b.n	800e380 <_printf_i+0x168>
 800e436:	2301      	movs	r3, #1
 800e438:	4632      	mov	r2, r6
 800e43a:	4649      	mov	r1, r9
 800e43c:	4640      	mov	r0, r8
 800e43e:	47d0      	blx	sl
 800e440:	3001      	adds	r0, #1
 800e442:	d09b      	beq.n	800e37c <_printf_i+0x164>
 800e444:	3501      	adds	r5, #1
 800e446:	68e3      	ldr	r3, [r4, #12]
 800e448:	9903      	ldr	r1, [sp, #12]
 800e44a:	1a5b      	subs	r3, r3, r1
 800e44c:	42ab      	cmp	r3, r5
 800e44e:	dcf2      	bgt.n	800e436 <_printf_i+0x21e>
 800e450:	e7eb      	b.n	800e42a <_printf_i+0x212>
 800e452:	2500      	movs	r5, #0
 800e454:	f104 0619 	add.w	r6, r4, #25
 800e458:	e7f5      	b.n	800e446 <_printf_i+0x22e>
 800e45a:	bf00      	nop
 800e45c:	0800eba9 	.word	0x0800eba9
 800e460:	0800ebba 	.word	0x0800ebba

0800e464 <__retarget_lock_acquire_recursive>:
 800e464:	4770      	bx	lr

0800e466 <__retarget_lock_release_recursive>:
 800e466:	4770      	bx	lr

0800e468 <memmove>:
 800e468:	4288      	cmp	r0, r1
 800e46a:	b510      	push	{r4, lr}
 800e46c:	eb01 0402 	add.w	r4, r1, r2
 800e470:	d902      	bls.n	800e478 <memmove+0x10>
 800e472:	4284      	cmp	r4, r0
 800e474:	4623      	mov	r3, r4
 800e476:	d807      	bhi.n	800e488 <memmove+0x20>
 800e478:	1e43      	subs	r3, r0, #1
 800e47a:	42a1      	cmp	r1, r4
 800e47c:	d008      	beq.n	800e490 <memmove+0x28>
 800e47e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e482:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e486:	e7f8      	b.n	800e47a <memmove+0x12>
 800e488:	4402      	add	r2, r0
 800e48a:	4601      	mov	r1, r0
 800e48c:	428a      	cmp	r2, r1
 800e48e:	d100      	bne.n	800e492 <memmove+0x2a>
 800e490:	bd10      	pop	{r4, pc}
 800e492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e49a:	e7f7      	b.n	800e48c <memmove+0x24>

0800e49c <_realloc_r>:
 800e49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a0:	4680      	mov	r8, r0
 800e4a2:	4614      	mov	r4, r2
 800e4a4:	460e      	mov	r6, r1
 800e4a6:	b921      	cbnz	r1, 800e4b2 <_realloc_r+0x16>
 800e4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ac:	4611      	mov	r1, r2
 800e4ae:	f7ff bc31 	b.w	800dd14 <_malloc_r>
 800e4b2:	b92a      	cbnz	r2, 800e4c0 <_realloc_r+0x24>
 800e4b4:	f7ff fbc2 	bl	800dc3c <_free_r>
 800e4b8:	4625      	mov	r5, r4
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c0:	f000 f81b 	bl	800e4fa <_malloc_usable_size_r>
 800e4c4:	4284      	cmp	r4, r0
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	d802      	bhi.n	800e4d0 <_realloc_r+0x34>
 800e4ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4ce:	d812      	bhi.n	800e4f6 <_realloc_r+0x5a>
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	4640      	mov	r0, r8
 800e4d4:	f7ff fc1e 	bl	800dd14 <_malloc_r>
 800e4d8:	4605      	mov	r5, r0
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d0ed      	beq.n	800e4ba <_realloc_r+0x1e>
 800e4de:	42bc      	cmp	r4, r7
 800e4e0:	4622      	mov	r2, r4
 800e4e2:	4631      	mov	r1, r6
 800e4e4:	bf28      	it	cs
 800e4e6:	463a      	movcs	r2, r7
 800e4e8:	f7ff fb92 	bl	800dc10 <memcpy>
 800e4ec:	4631      	mov	r1, r6
 800e4ee:	4640      	mov	r0, r8
 800e4f0:	f7ff fba4 	bl	800dc3c <_free_r>
 800e4f4:	e7e1      	b.n	800e4ba <_realloc_r+0x1e>
 800e4f6:	4635      	mov	r5, r6
 800e4f8:	e7df      	b.n	800e4ba <_realloc_r+0x1e>

0800e4fa <_malloc_usable_size_r>:
 800e4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4fe:	1f18      	subs	r0, r3, #4
 800e500:	2b00      	cmp	r3, #0
 800e502:	bfbc      	itt	lt
 800e504:	580b      	ldrlt	r3, [r1, r0]
 800e506:	18c0      	addlt	r0, r0, r3
 800e508:	4770      	bx	lr
	...

0800e50c <_init>:
 800e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50e:	bf00      	nop
 800e510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e512:	bc08      	pop	{r3}
 800e514:	469e      	mov	lr, r3
 800e516:	4770      	bx	lr

0800e518 <_fini>:
 800e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51a:	bf00      	nop
 800e51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e51e:	bc08      	pop	{r3}
 800e520:	469e      	mov	lr, r3
 800e522:	4770      	bx	lr
